import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { LightsailServiceException as __BaseException } from "../models/LightsailServiceException";
import { AccessDeniedException, AccountSetupInProgressException, InvalidInputException, NotFoundException, OperationFailureException, ServiceException, UnauthenticatedException, } from "../models/models_0";
export const se_AllocateStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("AllocateStaticIp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachCertificateToDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("AttachCertificateToDistribution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachDiskCommand = async (input, context) => {
    const headers = sharedHeaders("AttachDisk");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachInstancesToLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("AttachInstancesToLoadBalancer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachLoadBalancerTlsCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("AttachLoadBalancerTlsCertificate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AttachStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("AttachStaticIp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CloseInstancePublicPortsCommand = async (input, context) => {
    const headers = sharedHeaders("CloseInstancePublicPorts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CopySnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CopySnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateBucketCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBucket");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateBucketAccessKeyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBucketAccessKey");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCertificate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCloudFormationStackCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCloudFormationStack");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateContactMethodCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContactMethod");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateContainerServiceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContainerService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateContainerServiceDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContainerServiceDeployment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateContainerServiceRegistryLoginCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContainerServiceRegistryLogin");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDiskCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDisk");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDiskFromSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDiskFromSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDiskSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDiskSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDistribution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDomainEntryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDomainEntry");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateGUISessionAccessDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGUISessionAccessDetails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInstances");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInstancesFromSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInstancesFromSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInstanceSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInstanceSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("CreateKeyPair");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLoadBalancer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLoadBalancerTlsCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLoadBalancerTlsCertificate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRelationalDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRelationalDatabaseFromSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRelationalDatabaseFromSnapshot");
    let body;
    body = JSON.stringify(se_CreateRelationalDatabaseFromSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRelationalDatabaseSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRelationalDatabaseSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAlarmCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAlarm");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAutoSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAutoSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteBucketCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBucket");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteBucketAccessKeyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBucketAccessKey");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCertificate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteContactMethodCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContactMethod");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteContainerImageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContainerImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteContainerServiceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContainerService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDiskCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDisk");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDiskSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDiskSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDistribution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDomainEntryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDomainEntry");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteInstanceSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInstanceSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteKeyPair");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteKnownHostKeysCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteKnownHostKeys");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLoadBalancer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLoadBalancerTlsCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLoadBalancerTlsCertificate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRelationalDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRelationalDatabaseSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRelationalDatabaseSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachCertificateFromDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("DetachCertificateFromDistribution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachDiskCommand = async (input, context) => {
    const headers = sharedHeaders("DetachDisk");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachInstancesFromLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("DetachInstancesFromLoadBalancer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetachStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("DetachStaticIp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableAddOnCommand = async (input, context) => {
    const headers = sharedHeaders("DisableAddOn");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DownloadDefaultKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("DownloadDefaultKeyPair");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableAddOnCommand = async (input, context) => {
    const headers = sharedHeaders("EnableAddOn");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ExportSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("ExportSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetActiveNamesCommand = async (input, context) => {
    const headers = sharedHeaders("GetActiveNames");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAlarmsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAlarms");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAutoSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAutoSnapshots");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBlueprintsCommand = async (input, context) => {
    const headers = sharedHeaders("GetBlueprints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBucketAccessKeysCommand = async (input, context) => {
    const headers = sharedHeaders("GetBucketAccessKeys");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBucketBundlesCommand = async (input, context) => {
    const headers = sharedHeaders("GetBucketBundles");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBucketMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetBucketMetricData");
    let body;
    body = JSON.stringify(se_GetBucketMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBucketsCommand = async (input, context) => {
    const headers = sharedHeaders("GetBuckets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBundlesCommand = async (input, context) => {
    const headers = sharedHeaders("GetBundles");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCertificatesCommand = async (input, context) => {
    const headers = sharedHeaders("GetCertificates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCloudFormationStackRecordsCommand = async (input, context) => {
    const headers = sharedHeaders("GetCloudFormationStackRecords");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContactMethodsCommand = async (input, context) => {
    const headers = sharedHeaders("GetContactMethods");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContainerAPIMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerAPIMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContainerImagesCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerImages");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContainerLogCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerLog");
    let body;
    body = JSON.stringify(se_GetContainerLogRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContainerServiceDeploymentsCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerServiceDeployments");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContainerServiceMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerServiceMetricData");
    let body;
    body = JSON.stringify(se_GetContainerServiceMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContainerServicePowersCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerServicePowers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContainerServicesCommand = async (input, context) => {
    const headers = sharedHeaders("GetContainerServices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCostEstimateCommand = async (input, context) => {
    const headers = sharedHeaders("GetCostEstimate");
    let body;
    body = JSON.stringify(se_GetCostEstimateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDiskCommand = async (input, context) => {
    const headers = sharedHeaders("GetDisk");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDisksCommand = async (input, context) => {
    const headers = sharedHeaders("GetDisks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDiskSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("GetDiskSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDiskSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDiskSnapshots");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDistributionBundlesCommand = async (input, context) => {
    const headers = sharedHeaders("GetDistributionBundles");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDistributionLatestCacheResetCommand = async (input, context) => {
    const headers = sharedHeaders("GetDistributionLatestCacheReset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDistributionMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetDistributionMetricData");
    let body;
    body = JSON.stringify(se_GetDistributionMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDistributionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDistributions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDomainCommand = async (input, context) => {
    const headers = sharedHeaders("GetDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDomainsCommand = async (input, context) => {
    const headers = sharedHeaders("GetDomains");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetExportSnapshotRecordsCommand = async (input, context) => {
    const headers = sharedHeaders("GetExportSnapshotRecords");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceAccessDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceAccessDetails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceMetricData");
    let body;
    body = JSON.stringify(se_GetInstanceMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstancePortStatesCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstancePortStates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstances");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceSnapshots");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstanceStateCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstanceState");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("GetKeyPair");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetKeyPairsCommand = async (input, context) => {
    const headers = sharedHeaders("GetKeyPairs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLoadBalancerCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancer");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLoadBalancerMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancerMetricData");
    let body;
    body = JSON.stringify(se_GetLoadBalancerMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLoadBalancersCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLoadBalancerTlsCertificatesCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancerTlsCertificates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLoadBalancerTlsPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoadBalancerTlsPolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetOperationCommand = async (input, context) => {
    const headers = sharedHeaders("GetOperation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetOperationsCommand = async (input, context) => {
    const headers = sharedHeaders("GetOperations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetOperationsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("GetOperationsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRegionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRegions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseBlueprintsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseBlueprints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseBundlesCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseBundles");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseEventsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseEvents");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseLogEventsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseLogEvents");
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseLogEventsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseLogStreamsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseLogStreams");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseMasterUserPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseMasterUserPassword");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseMetricDataCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseMetricData");
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseParametersCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseParameters");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabasesCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseSnapshotCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseSnapshot");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRelationalDatabaseSnapshotsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRelationalDatabaseSnapshots");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSetupHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetSetupHistory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("GetStaticIp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetStaticIpsCommand = async (input, context) => {
    const headers = sharedHeaders("GetStaticIps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportKeyPairCommand = async (input, context) => {
    const headers = sharedHeaders("ImportKeyPair");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_IsVpcPeeredCommand = async (input, context) => {
    const headers = sharedHeaders("IsVpcPeered");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_OpenInstancePublicPortsCommand = async (input, context) => {
    const headers = sharedHeaders("OpenInstancePublicPorts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PeerVpcCommand = async (input, context) => {
    const headers = sharedHeaders("PeerVpc");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutAlarmCommand = async (input, context) => {
    const headers = sharedHeaders("PutAlarm");
    let body;
    body = JSON.stringify(se_PutAlarmRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutInstancePublicPortsCommand = async (input, context) => {
    const headers = sharedHeaders("PutInstancePublicPorts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RebootInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("RebootInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RebootRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("RebootRelationalDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterContainerImageCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterContainerImage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReleaseStaticIpCommand = async (input, context) => {
    const headers = sharedHeaders("ReleaseStaticIp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetDistributionCacheCommand = async (input, context) => {
    const headers = sharedHeaders("ResetDistributionCache");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendContactMethodVerificationCommand = async (input, context) => {
    const headers = sharedHeaders("SendContactMethodVerification");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetIpAddressTypeCommand = async (input, context) => {
    const headers = sharedHeaders("SetIpAddressType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetResourceAccessForBucketCommand = async (input, context) => {
    const headers = sharedHeaders("SetResourceAccessForBucket");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetupInstanceHttpsCommand = async (input, context) => {
    const headers = sharedHeaders("SetupInstanceHttps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartGUISessionCommand = async (input, context) => {
    const headers = sharedHeaders("StartGUISession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("StartInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("StartRelationalDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopGUISessionCommand = async (input, context) => {
    const headers = sharedHeaders("StopGUISession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("StopInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("StopRelationalDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TestAlarmCommand = async (input, context) => {
    const headers = sharedHeaders("TestAlarm");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UnpeerVpcCommand = async (input, context) => {
    const headers = sharedHeaders("UnpeerVpc");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateBucketCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBucket");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateBucketBundleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBucketBundle");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateContainerServiceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContainerService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDistributionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDistribution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDistributionBundleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDistributionBundle");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDomainEntryCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDomainEntry");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateInstanceMetadataOptionsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateInstanceMetadataOptions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateLoadBalancerAttributeCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateLoadBalancerAttribute");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRelationalDatabaseCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRelationalDatabase");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRelationalDatabaseParametersCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRelationalDatabaseParameters");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AllocateStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AllocateStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AttachCertificateToDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachCertificateToDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AttachDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AttachInstancesToLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachInstancesToLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AttachLoadBalancerTlsCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachLoadBalancerTlsCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AttachStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CloseInstancePublicPortsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CloseInstancePublicPortsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CopySnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopySnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateBucketAccessKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateBucketAccessKeyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCloudFormationStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCloudFormationStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateContactMethodCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContactMethodResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateContainerServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerServiceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateContainerServiceDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerServiceDeploymentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateContainerServiceRegistryLoginCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerServiceRegistryLoginResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDiskFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDiskFromSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDiskSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDiskSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDomainEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDomainEntryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateGUISessionAccessDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateInstancesFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstancesFromSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateInstanceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstanceSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateLoadBalancerTlsCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLoadBalancerTlsCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRelationalDatabaseFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRelationalDatabaseFromSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRelationalDatabaseSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRelationalDatabaseSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAlarmResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAutoSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAutoSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteBucketAccessKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteBucketAccessKeyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteContactMethodCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteContactMethodResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteContainerImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteContainerServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDiskSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDiskSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDomainEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDomainEntryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteInstanceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteInstanceSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteKnownHostKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteKnownHostKeysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteLoadBalancerTlsCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLoadBalancerTlsCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRelationalDatabaseSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRelationalDatabaseSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetachCertificateFromDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachCertificateFromDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetachDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetachInstancesFromLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachInstancesFromLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetachStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisableAddOnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableAddOnResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DownloadDefaultKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DownloadDefaultKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_EnableAddOnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableAddOnResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ExportSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetActiveNamesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAlarmsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAlarmsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAutoSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAutoSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBucketAccessKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketAccessKeysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBucketBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBucketMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBucketsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCertificatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCloudFormationStackRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCloudFormationStackRecordsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContactMethodsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContactMethodsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContainerAPIMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContainerImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContainerLogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerLogResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContainerServiceDeploymentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerServiceDeploymentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContainerServiceMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerServiceMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContainerServicePowersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerServicePowersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContainerServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ContainerServicesListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCostEstimateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCostEstimateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDisksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDisksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDiskSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiskSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDiskSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiskSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDistributionBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDistributionLatestCacheResetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionLatestCacheResetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDistributionMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDistributionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDomainsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetExportSnapshotRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetExportSnapshotRecordsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstanceAccessDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceAccessDetailsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstanceMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstancePortStatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstanceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstanceSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstanceStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetKeyPairsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetKeyPairsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetLoadBalancerMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetLoadBalancersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetLoadBalancerTlsCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerTlsCertificatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetLoadBalancerTlsPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetOperationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetOperationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetOperationsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationsForResourceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRegionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseEventsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseLogEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseLogEventsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseLogStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseMasterUserPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseMasterUserPasswordResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabasesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRelationalDatabaseSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSetupHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSetupHistoryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetStaticIpsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStaticIpsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_IsVpcPeeredCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_OpenInstancePublicPortsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_OpenInstancePublicPortsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PeerVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PeerVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAlarmResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutInstancePublicPortsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutInstancePublicPortsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RebootInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RebootInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RebootRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RebootRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterContainerImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterContainerImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ReleaseStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReleaseStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResetDistributionCacheCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResetDistributionCacheResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SendContactMethodVerificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SendContactMethodVerificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetIpAddressTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SetIpAddressTypeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetResourceAccessForBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SetResourceAccessForBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetupInstanceHttpsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SetupInstanceHttpsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartGUISessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartGUISessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopGUISessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopGUISessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TagResourceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TestAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TestAlarmResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UnpeerVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UnpeerVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UntagResourceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateBucketBundleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateBucketBundleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateContainerServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateContainerServiceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDistributionBundleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDistributionBundleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDomainEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDomainEntryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateInstanceMetadataOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateInstanceMetadataOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateLoadBalancerAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateLoadBalancerAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRelationalDatabaseParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateRelationalDatabaseParametersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AccountSetupInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccountSetupInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperationFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnauthenticatedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnauthenticatedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateRelationalDatabaseFromSnapshotRequest = (input, context) => {
    return take(input, {
        availabilityZone: [],
        publiclyAccessible: [],
        relationalDatabaseBundleId: [],
        relationalDatabaseName: [],
        relationalDatabaseSnapshotName: [],
        restoreTime: (_) => Math.round(_.getTime() / 1000),
        sourceRelationalDatabaseName: [],
        tags: _json,
        useLatestRestorableTime: [],
    });
};
const se_GetBucketMetricDataRequest = (input, context) => {
    return take(input, {
        bucketName: [],
        endTime: (_) => Math.round(_.getTime() / 1000),
        metricName: [],
        period: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: _json,
        unit: [],
    });
};
const se_GetContainerLogRequest = (input, context) => {
    return take(input, {
        containerName: [],
        endTime: (_) => Math.round(_.getTime() / 1000),
        filterPattern: [],
        pageToken: [],
        serviceName: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_GetContainerServiceMetricDataRequest = (input, context) => {
    return take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        metricName: [],
        period: [],
        serviceName: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: _json,
    });
};
const se_GetCostEstimateRequest = (input, context) => {
    return take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        resourceName: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_GetDistributionMetricDataRequest = (input, context) => {
    return take(input, {
        distributionName: [],
        endTime: (_) => Math.round(_.getTime() / 1000),
        metricName: [],
        period: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: _json,
        unit: [],
    });
};
const se_GetInstanceMetricDataRequest = (input, context) => {
    return take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        instanceName: [],
        metricName: [],
        period: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: _json,
        unit: [],
    });
};
const se_GetLoadBalancerMetricDataRequest = (input, context) => {
    return take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        loadBalancerName: [],
        metricName: [],
        period: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: _json,
        unit: [],
    });
};
const se_GetRelationalDatabaseLogEventsRequest = (input, context) => {
    return take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        logStreamName: [],
        pageToken: [],
        relationalDatabaseName: [],
        startFromHead: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_GetRelationalDatabaseMetricDataRequest = (input, context) => {
    return take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        metricName: [],
        period: [],
        relationalDatabaseName: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statistics: _json,
        unit: [],
    });
};
const se_PutAlarmRequest = (input, context) => {
    return take(input, {
        alarmName: [],
        comparisonOperator: [],
        contactProtocols: _json,
        datapointsToAlarm: [],
        evaluationPeriods: [],
        metricName: [],
        monitoredResourceName: [],
        notificationEnabled: [],
        notificationTriggers: _json,
        threshold: __serializeFloat,
        treatMissingData: [],
    });
};
const de_AccessKey = (output, context) => {
    return take(output, {
        accessKeyId: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUsed: (_) => de_AccessKeyLastUsed(_, context),
        secretAccessKey: __expectString,
        status: __expectString,
    });
};
const de_AccessKeyLastUsed = (output, context) => {
    return take(output, {
        lastUsedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        region: __expectString,
        serviceName: __expectString,
    });
};
const de_AccessKeyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessKey(entry, context);
    });
    return retVal;
};
const de_AccountLevelBpaSync = (output, context) => {
    return take(output, {
        bpaImpactsLightsail: __expectBoolean,
        lastSyncedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        message: __expectString,
        status: __expectString,
    });
};
const de_Alarm = (output, context) => {
    return take(output, {
        arn: __expectString,
        comparisonOperator: __expectString,
        contactProtocols: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        datapointsToAlarm: __expectInt32,
        evaluationPeriods: __expectInt32,
        location: _json,
        metricName: __expectString,
        monitoredResourceInfo: _json,
        name: __expectString,
        notificationEnabled: __expectBoolean,
        notificationTriggers: _json,
        period: __expectInt32,
        resourceType: __expectString,
        state: __expectString,
        statistic: __expectString,
        supportCode: __expectString,
        threshold: __limitedParseDouble,
        treatMissingData: __expectString,
        unit: __expectString,
    });
};
const de_AlarmsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Alarm(entry, context);
    });
    return retVal;
};
const de_AllocateStaticIpResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AttachCertificateToDistributionResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_AttachDiskResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AttachInstancesToLoadBalancerResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AttachLoadBalancerTlsCertificateResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AttachStaticIpResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_AutoSnapshotDetails = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        date: __expectString,
        fromAttachedDisks: _json,
        status: __expectString,
    });
};
const de_AutoSnapshotDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoSnapshotDetails(entry, context);
    });
    return retVal;
};
const de_Bucket = (output, context) => {
    return take(output, {
        ableToUpdateBundle: __expectBoolean,
        accessLogConfig: _json,
        accessRules: _json,
        arn: __expectString,
        bundleId: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        location: _json,
        name: __expectString,
        objectVersioning: __expectString,
        readonlyAccessAccounts: _json,
        resourceType: __expectString,
        resourcesReceivingAccess: _json,
        state: _json,
        supportCode: __expectString,
        tags: _json,
        url: __expectString,
    });
};
const de_BucketBundle = (output, context) => {
    return take(output, {
        bundleId: __expectString,
        isActive: __expectBoolean,
        name: __expectString,
        price: __limitedParseFloat32,
        storagePerMonthInGb: __expectInt32,
        transferPerMonthInGb: __expectInt32,
    });
};
const de_BucketBundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BucketBundle(entry, context);
    });
    return retVal;
};
const de_BucketList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Bucket(entry, context);
    });
    return retVal;
};
const de_Bundle = (output, context) => {
    return take(output, {
        bundleId: __expectString,
        cpuCount: __expectInt32,
        diskSizeInGb: __expectInt32,
        instanceType: __expectString,
        isActive: __expectBoolean,
        name: __expectString,
        power: __expectInt32,
        price: __limitedParseFloat32,
        publicIpv4AddressCount: __expectInt32,
        ramSizeInGb: __limitedParseFloat32,
        supportedAppCategories: _json,
        supportedPlatforms: _json,
        transferPerMonthInGb: __expectInt32,
    });
};
const de_BundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Bundle(entry, context);
    });
    return retVal;
};
const de_Certificate = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        domainName: __expectString,
        domainValidationRecords: _json,
        eligibleToRenew: __expectString,
        inUseResourceCount: __expectInt32,
        issuedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        issuerCA: __expectString,
        keyAlgorithm: __expectString,
        name: __expectString,
        notAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        notBefore: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        renewalSummary: (_) => de_RenewalSummary(_, context),
        requestFailureReason: __expectString,
        revocationReason: __expectString,
        revokedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        serialNumber: __expectString,
        status: __expectString,
        subjectAlternativeNames: _json,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_CertificateSummary = (output, context) => {
    return take(output, {
        certificateArn: __expectString,
        certificateDetail: (_) => de_Certificate(_, context),
        certificateName: __expectString,
        domainName: __expectString,
        tags: _json,
    });
};
const de_CertificateSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CertificateSummary(entry, context);
    });
    return retVal;
};
const de_CloseInstancePublicPortsResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_CloudFormationStackRecord = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        destinationInfo: _json,
        location: _json,
        name: __expectString,
        resourceType: __expectString,
        sourceInfo: _json,
        state: __expectString,
    });
};
const de_CloudFormationStackRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CloudFormationStackRecord(entry, context);
    });
    return retVal;
};
const de_ContactMethod = (output, context) => {
    return take(output, {
        arn: __expectString,
        contactEndpoint: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        location: _json,
        name: __expectString,
        protocol: __expectString,
        resourceType: __expectString,
        status: __expectString,
        supportCode: __expectString,
    });
};
const de_ContactMethodsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContactMethod(entry, context);
    });
    return retVal;
};
const de_ContainerImage = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        digest: __expectString,
        image: __expectString,
    });
};
const de_ContainerImageList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerImage(entry, context);
    });
    return retVal;
};
const de_ContainerService = (output, context) => {
    return take(output, {
        arn: __expectString,
        containerServiceName: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        currentDeployment: (_) => de_ContainerServiceDeployment(_, context),
        isDisabled: __expectBoolean,
        location: _json,
        nextDeployment: (_) => de_ContainerServiceDeployment(_, context),
        power: __expectString,
        powerId: __expectString,
        principalArn: __expectString,
        privateDomainName: __expectString,
        privateRegistryAccess: _json,
        publicDomainNames: _json,
        resourceType: __expectString,
        scale: __expectInt32,
        state: __expectString,
        stateDetail: _json,
        tags: _json,
        url: __expectString,
    });
};
const de_ContainerServiceDeployment = (output, context) => {
    return take(output, {
        containers: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        publicEndpoint: _json,
        state: __expectString,
        version: __expectInt32,
    });
};
const de_ContainerServiceDeploymentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerServiceDeployment(entry, context);
    });
    return retVal;
};
const de_ContainerServiceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerService(entry, context);
    });
    return retVal;
};
const de_ContainerServiceLogEvent = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        message: __expectString,
    });
};
const de_ContainerServiceLogEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerServiceLogEvent(entry, context);
    });
    return retVal;
};
const de_ContainerServicePower = (output, context) => {
    return take(output, {
        cpuCount: __limitedParseFloat32,
        isActive: __expectBoolean,
        name: __expectString,
        powerId: __expectString,
        price: __limitedParseFloat32,
        ramSizeInGb: __limitedParseFloat32,
    });
};
const de_ContainerServicePowerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerServicePower(entry, context);
    });
    return retVal;
};
const de_ContainerServiceRegistryLogin = (output, context) => {
    return take(output, {
        expiresAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        password: __expectString,
        registry: __expectString,
        username: __expectString,
    });
};
const de_ContainerServicesListResult = (output, context) => {
    return take(output, {
        containerServices: (_) => de_ContainerServiceList(_, context),
    });
};
const de_CopySnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CostEstimate = (output, context) => {
    return take(output, {
        resultsByTime: (_) => de_EstimatesByTime(_, context),
        usageType: __expectString,
    });
};
const de_CostEstimates = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CostEstimate(entry, context);
    });
    return retVal;
};
const de_CreateBucketAccessKeyResult = (output, context) => {
    return take(output, {
        accessKey: (_) => de_AccessKey(_, context),
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateBucketResult = (output, context) => {
    return take(output, {
        bucket: (_) => de_Bucket(_, context),
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateCertificateResult = (output, context) => {
    return take(output, {
        certificate: (_) => de_CertificateSummary(_, context),
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateCloudFormationStackResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateContactMethodResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateContainerServiceDeploymentResult = (output, context) => {
    return take(output, {
        containerService: (_) => de_ContainerService(_, context),
    });
};
const de_CreateContainerServiceRegistryLoginResult = (output, context) => {
    return take(output, {
        registryLogin: (_) => de_ContainerServiceRegistryLogin(_, context),
    });
};
const de_CreateContainerServiceResult = (output, context) => {
    return take(output, {
        containerService: (_) => de_ContainerService(_, context),
    });
};
const de_CreateDiskFromSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateDiskResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateDiskSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateDistributionResult = (output, context) => {
    return take(output, {
        distribution: (_) => de_LightsailDistribution(_, context),
        operation: (_) => de_Operation(_, context),
    });
};
const de_CreateDomainEntryResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_CreateDomainResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_CreateInstancesFromSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateInstanceSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateInstancesResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateKeyPairResult = (output, context) => {
    return take(output, {
        keyPair: (_) => de_KeyPair(_, context),
        operation: (_) => de_Operation(_, context),
        privateKeyBase64: __expectString,
        publicKeyBase64: __expectString,
    });
};
const de_CreateLoadBalancerResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateLoadBalancerTlsCertificateResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateRelationalDatabaseFromSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateRelationalDatabaseResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_CreateRelationalDatabaseSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteAlarmResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteAutoSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteBucketAccessKeyResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteBucketResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteCertificateResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteContactMethodResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteDiskResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteDiskSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteDistributionResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DeleteDomainEntryResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DeleteDomainResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DeleteInstanceResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteInstanceSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteKeyPairResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DeleteKnownHostKeysResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteLoadBalancerResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteLoadBalancerTlsCertificateResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteRelationalDatabaseResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DeleteRelationalDatabaseSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DetachCertificateFromDistributionResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_DetachDiskResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DetachInstancesFromLoadBalancerResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DetachStaticIpResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_DisableAddOnResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_Disk = (output, context) => {
    return take(output, {
        addOns: _json,
        arn: __expectString,
        attachedTo: __expectString,
        attachmentState: __expectString,
        autoMountStatus: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        gbInUse: __expectInt32,
        iops: __expectInt32,
        isAttached: __expectBoolean,
        isSystemDisk: __expectBoolean,
        location: _json,
        name: __expectString,
        path: __expectString,
        resourceType: __expectString,
        sizeInGb: __expectInt32,
        state: __expectString,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_DiskList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Disk(entry, context);
    });
    return retVal;
};
const de_DiskSnapshot = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        fromDiskArn: __expectString,
        fromDiskName: __expectString,
        fromInstanceArn: __expectString,
        fromInstanceName: __expectString,
        isFromAutoSnapshot: __expectBoolean,
        location: _json,
        name: __expectString,
        progress: __expectString,
        resourceType: __expectString,
        sizeInGb: __expectInt32,
        state: __expectString,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_DiskSnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DiskSnapshot(entry, context);
    });
    return retVal;
};
const de_DistributionBundle = (output, context) => {
    return take(output, {
        bundleId: __expectString,
        isActive: __expectBoolean,
        name: __expectString,
        price: __limitedParseFloat32,
        transferPerMonthInGb: __expectInt32,
    });
};
const de_DistributionBundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DistributionBundle(entry, context);
    });
    return retVal;
};
const de_DistributionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LightsailDistribution(entry, context);
    });
    return retVal;
};
const de_Domain = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        domainEntries: _json,
        location: _json,
        name: __expectString,
        registeredDomainDelegationInfo: _json,
        resourceType: __expectString,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_DomainList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Domain(entry, context);
    });
    return retVal;
};
const de_DownloadDefaultKeyPairResult = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        privateKeyBase64: __expectString,
        publicKeyBase64: __expectString,
    });
};
const de_EnableAddOnResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_EstimateByTime = (output, context) => {
    return take(output, {
        currency: __expectString,
        pricingUnit: __expectString,
        timePeriod: (_) => de_TimePeriod(_, context),
        unit: __limitedParseDouble,
        usageCost: __limitedParseDouble,
    });
};
const de_EstimatesByTime = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EstimateByTime(entry, context);
    });
    return retVal;
};
const de_ExportSnapshotRecord = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        destinationInfo: _json,
        location: _json,
        name: __expectString,
        resourceType: __expectString,
        sourceInfo: (_) => de_ExportSnapshotRecordSourceInfo(_, context),
        state: __expectString,
    });
};
const de_ExportSnapshotRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExportSnapshotRecord(entry, context);
    });
    return retVal;
};
const de_ExportSnapshotRecordSourceInfo = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        diskSnapshotInfo: _json,
        fromResourceArn: __expectString,
        fromResourceName: __expectString,
        instanceSnapshotInfo: _json,
        name: __expectString,
        resourceType: __expectString,
    });
};
const de_ExportSnapshotResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_GetAlarmsResult = (output, context) => {
    return take(output, {
        alarms: (_) => de_AlarmsList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetAutoSnapshotsResult = (output, context) => {
    return take(output, {
        autoSnapshots: (_) => de_AutoSnapshotDetailsList(_, context),
        resourceName: __expectString,
        resourceType: __expectString,
    });
};
const de_GetBucketAccessKeysResult = (output, context) => {
    return take(output, {
        accessKeys: (_) => de_AccessKeyList(_, context),
    });
};
const de_GetBucketBundlesResult = (output, context) => {
    return take(output, {
        bundles: (_) => de_BucketBundleList(_, context),
    });
};
const de_GetBucketMetricDataResult = (output, context) => {
    return take(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: __expectString,
    });
};
const de_GetBucketsResult = (output, context) => {
    return take(output, {
        accountLevelBpaSync: (_) => de_AccountLevelBpaSync(_, context),
        buckets: (_) => de_BucketList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetBundlesResult = (output, context) => {
    return take(output, {
        bundles: (_) => de_BundleList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetCertificatesResult = (output, context) => {
    return take(output, {
        certificates: (_) => de_CertificateSummaryList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetCloudFormationStackRecordsResult = (output, context) => {
    return take(output, {
        cloudFormationStackRecords: (_) => de_CloudFormationStackRecordList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetContactMethodsResult = (output, context) => {
    return take(output, {
        contactMethods: (_) => de_ContactMethodsList(_, context),
    });
};
const de_GetContainerImagesResult = (output, context) => {
    return take(output, {
        containerImages: (_) => de_ContainerImageList(_, context),
    });
};
const de_GetContainerLogResult = (output, context) => {
    return take(output, {
        logEvents: (_) => de_ContainerServiceLogEventList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetContainerServiceDeploymentsResult = (output, context) => {
    return take(output, {
        deployments: (_) => de_ContainerServiceDeploymentList(_, context),
    });
};
const de_GetContainerServiceMetricDataResult = (output, context) => {
    return take(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: __expectString,
    });
};
const de_GetContainerServicePowersResult = (output, context) => {
    return take(output, {
        powers: (_) => de_ContainerServicePowerList(_, context),
    });
};
const de_GetCostEstimateResult = (output, context) => {
    return take(output, {
        resourcesBudgetEstimate: (_) => de_ResourcesBudgetEstimate(_, context),
    });
};
const de_GetDiskResult = (output, context) => {
    return take(output, {
        disk: (_) => de_Disk(_, context),
    });
};
const de_GetDiskSnapshotResult = (output, context) => {
    return take(output, {
        diskSnapshot: (_) => de_DiskSnapshot(_, context),
    });
};
const de_GetDiskSnapshotsResult = (output, context) => {
    return take(output, {
        diskSnapshots: (_) => de_DiskSnapshotList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetDisksResult = (output, context) => {
    return take(output, {
        disks: (_) => de_DiskList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetDistributionBundlesResult = (output, context) => {
    return take(output, {
        bundles: (_) => de_DistributionBundleList(_, context),
    });
};
const de_GetDistributionLatestCacheResetResult = (output, context) => {
    return take(output, {
        createTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_GetDistributionMetricDataResult = (output, context) => {
    return take(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: __expectString,
    });
};
const de_GetDistributionsResult = (output, context) => {
    return take(output, {
        distributions: (_) => de_DistributionList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetDomainResult = (output, context) => {
    return take(output, {
        domain: (_) => de_Domain(_, context),
    });
};
const de_GetDomainsResult = (output, context) => {
    return take(output, {
        domains: (_) => de_DomainList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetExportSnapshotRecordsResult = (output, context) => {
    return take(output, {
        exportSnapshotRecords: (_) => de_ExportSnapshotRecordList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetInstanceAccessDetailsResult = (output, context) => {
    return take(output, {
        accessDetails: (_) => de_InstanceAccessDetails(_, context),
    });
};
const de_GetInstanceMetricDataResult = (output, context) => {
    return take(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: __expectString,
    });
};
const de_GetInstanceResult = (output, context) => {
    return take(output, {
        instance: (_) => de_Instance(_, context),
    });
};
const de_GetInstanceSnapshotResult = (output, context) => {
    return take(output, {
        instanceSnapshot: (_) => de_InstanceSnapshot(_, context),
    });
};
const de_GetInstanceSnapshotsResult = (output, context) => {
    return take(output, {
        instanceSnapshots: (_) => de_InstanceSnapshotList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetInstancesResult = (output, context) => {
    return take(output, {
        instances: (_) => de_InstanceList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetKeyPairResult = (output, context) => {
    return take(output, {
        keyPair: (_) => de_KeyPair(_, context),
    });
};
const de_GetKeyPairsResult = (output, context) => {
    return take(output, {
        keyPairs: (_) => de_KeyPairList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetLoadBalancerMetricDataResult = (output, context) => {
    return take(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: __expectString,
    });
};
const de_GetLoadBalancerResult = (output, context) => {
    return take(output, {
        loadBalancer: (_) => de_LoadBalancer(_, context),
    });
};
const de_GetLoadBalancersResult = (output, context) => {
    return take(output, {
        loadBalancers: (_) => de_LoadBalancerList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetLoadBalancerTlsCertificatesResult = (output, context) => {
    return take(output, {
        tlsCertificates: (_) => de_LoadBalancerTlsCertificateList(_, context),
    });
};
const de_GetOperationResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_GetOperationsForResourceResult = (output, context) => {
    return take(output, {
        nextPageCount: __expectString,
        nextPageToken: __expectString,
        operations: (_) => de_OperationList(_, context),
    });
};
const de_GetOperationsResult = (output, context) => {
    return take(output, {
        nextPageToken: __expectString,
        operations: (_) => de_OperationList(_, context),
    });
};
const de_GetRelationalDatabaseBundlesResult = (output, context) => {
    return take(output, {
        bundles: (_) => de_RelationalDatabaseBundleList(_, context),
        nextPageToken: __expectString,
    });
};
const de_GetRelationalDatabaseEventsResult = (output, context) => {
    return take(output, {
        nextPageToken: __expectString,
        relationalDatabaseEvents: (_) => de_RelationalDatabaseEventList(_, context),
    });
};
const de_GetRelationalDatabaseLogEventsResult = (output, context) => {
    return take(output, {
        nextBackwardToken: __expectString,
        nextForwardToken: __expectString,
        resourceLogEvents: (_) => de_LogEventList(_, context),
    });
};
const de_GetRelationalDatabaseMasterUserPasswordResult = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        masterUserPassword: __expectString,
    });
};
const de_GetRelationalDatabaseMetricDataResult = (output, context) => {
    return take(output, {
        metricData: (_) => de_MetricDatapointList(_, context),
        metricName: __expectString,
    });
};
const de_GetRelationalDatabaseResult = (output, context) => {
    return take(output, {
        relationalDatabase: (_) => de_RelationalDatabase(_, context),
    });
};
const de_GetRelationalDatabaseSnapshotResult = (output, context) => {
    return take(output, {
        relationalDatabaseSnapshot: (_) => de_RelationalDatabaseSnapshot(_, context),
    });
};
const de_GetRelationalDatabaseSnapshotsResult = (output, context) => {
    return take(output, {
        nextPageToken: __expectString,
        relationalDatabaseSnapshots: (_) => de_RelationalDatabaseSnapshotList(_, context),
    });
};
const de_GetRelationalDatabasesResult = (output, context) => {
    return take(output, {
        nextPageToken: __expectString,
        relationalDatabases: (_) => de_RelationalDatabaseList(_, context),
    });
};
const de_GetSetupHistoryResult = (output, context) => {
    return take(output, {
        nextPageToken: __expectString,
        setupHistory: (_) => de_setupHistoryList(_, context),
    });
};
const de_GetStaticIpResult = (output, context) => {
    return take(output, {
        staticIp: (_) => de_StaticIp(_, context),
    });
};
const de_GetStaticIpsResult = (output, context) => {
    return take(output, {
        nextPageToken: __expectString,
        staticIps: (_) => de_StaticIpList(_, context),
    });
};
const de_HostKeyAttributes = (output, context) => {
    return take(output, {
        algorithm: __expectString,
        fingerprintSHA1: __expectString,
        fingerprintSHA256: __expectString,
        notValidAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        notValidBefore: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        publicKey: __expectString,
        witnessedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_HostKeysList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostKeyAttributes(entry, context);
    });
    return retVal;
};
const de_ImportKeyPairResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_Instance = (output, context) => {
    return take(output, {
        addOns: _json,
        arn: __expectString,
        blueprintId: __expectString,
        blueprintName: __expectString,
        bundleId: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        hardware: (_) => de_InstanceHardware(_, context),
        ipAddressType: __expectString,
        ipv6Addresses: _json,
        isStaticIp: __expectBoolean,
        location: _json,
        metadataOptions: _json,
        name: __expectString,
        networking: _json,
        privateIpAddress: __expectString,
        publicIpAddress: __expectString,
        resourceType: __expectString,
        sshKeyName: __expectString,
        state: _json,
        supportCode: __expectString,
        tags: _json,
        username: __expectString,
    });
};
const de_InstanceAccessDetails = (output, context) => {
    return take(output, {
        certKey: __expectString,
        expiresAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        hostKeys: (_) => de_HostKeysList(_, context),
        instanceName: __expectString,
        ipAddress: __expectString,
        ipv6Addresses: _json,
        password: __expectString,
        passwordData: _json,
        privateKey: __expectString,
        protocol: __expectString,
        username: __expectString,
    });
};
const de_InstanceHardware = (output, context) => {
    return take(output, {
        cpuCount: __expectInt32,
        disks: (_) => de_DiskList(_, context),
        ramSizeInGb: __limitedParseFloat32,
    });
};
const de_InstanceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry, context);
    });
    return retVal;
};
const de_InstanceSnapshot = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        fromAttachedDisks: (_) => de_DiskList(_, context),
        fromBlueprintId: __expectString,
        fromBundleId: __expectString,
        fromInstanceArn: __expectString,
        fromInstanceName: __expectString,
        isFromAutoSnapshot: __expectBoolean,
        location: _json,
        name: __expectString,
        progress: __expectString,
        resourceType: __expectString,
        sizeInGb: __expectInt32,
        state: __expectString,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_InstanceSnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceSnapshot(entry, context);
    });
    return retVal;
};
const de_KeyPair = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        fingerprint: __expectString,
        location: _json,
        name: __expectString,
        resourceType: __expectString,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_KeyPairList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeyPair(entry, context);
    });
    return retVal;
};
const de_LightsailDistribution = (output, context) => {
    return take(output, {
        ableToUpdateBundle: __expectBoolean,
        alternativeDomainNames: _json,
        arn: __expectString,
        bundleId: __expectString,
        cacheBehaviorSettings: _json,
        cacheBehaviors: _json,
        certificateName: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        defaultCacheBehavior: _json,
        domainName: __expectString,
        ipAddressType: __expectString,
        isEnabled: __expectBoolean,
        location: _json,
        name: __expectString,
        origin: _json,
        originPublicDNS: __expectString,
        resourceType: __expectString,
        status: __expectString,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_LoadBalancer = (output, context) => {
    return take(output, {
        arn: __expectString,
        configurationOptions: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dnsName: __expectString,
        healthCheckPath: __expectString,
        httpsRedirectionEnabled: __expectBoolean,
        instanceHealthSummary: _json,
        instancePort: __expectInt32,
        ipAddressType: __expectString,
        location: _json,
        name: __expectString,
        protocol: __expectString,
        publicPorts: _json,
        resourceType: __expectString,
        state: __expectString,
        supportCode: __expectString,
        tags: _json,
        tlsCertificateSummaries: _json,
        tlsPolicyName: __expectString,
    });
};
const de_LoadBalancerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoadBalancer(entry, context);
    });
    return retVal;
};
const de_LoadBalancerTlsCertificate = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        domainName: __expectString,
        domainValidationRecords: _json,
        failureReason: __expectString,
        isAttached: __expectBoolean,
        issuedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        issuer: __expectString,
        keyAlgorithm: __expectString,
        loadBalancerName: __expectString,
        location: _json,
        name: __expectString,
        notAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        notBefore: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        renewalSummary: _json,
        resourceType: __expectString,
        revocationReason: __expectString,
        revokedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        serial: __expectString,
        signatureAlgorithm: __expectString,
        status: __expectString,
        subject: __expectString,
        subjectAlternativeNames: _json,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_LoadBalancerTlsCertificateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoadBalancerTlsCertificate(entry, context);
    });
    return retVal;
};
const de_LogEvent = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        message: __expectString,
    });
};
const de_LogEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LogEvent(entry, context);
    });
    return retVal;
};
const de_MetricDatapoint = (output, context) => {
    return take(output, {
        average: __limitedParseDouble,
        maximum: __limitedParseDouble,
        minimum: __limitedParseDouble,
        sampleCount: __limitedParseDouble,
        sum: __limitedParseDouble,
        timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        unit: __expectString,
    });
};
const de_MetricDatapointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricDatapoint(entry, context);
    });
    return retVal;
};
const de_OpenInstancePublicPortsResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_Operation = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        errorCode: __expectString,
        errorDetails: __expectString,
        id: __expectString,
        isTerminal: __expectBoolean,
        location: _json,
        operationDetails: __expectString,
        operationType: __expectString,
        resourceName: __expectString,
        resourceType: __expectString,
        status: __expectString,
        statusChangedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_OperationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Operation(entry, context);
    });
    return retVal;
};
const de_PeerVpcResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_PendingMaintenanceAction = (output, context) => {
    return take(output, {
        action: __expectString,
        currentApplyDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
    });
};
const de_PendingMaintenanceActionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PendingMaintenanceAction(entry, context);
    });
    return retVal;
};
const de_PutAlarmResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_PutInstancePublicPortsResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_RebootInstanceResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_RebootRelationalDatabaseResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_RegisterContainerImageResult = (output, context) => {
    return take(output, {
        containerImage: (_) => de_ContainerImage(_, context),
    });
};
const de_RelationalDatabase = (output, context) => {
    return take(output, {
        arn: __expectString,
        backupRetentionEnabled: __expectBoolean,
        caCertificateIdentifier: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        engine: __expectString,
        engineVersion: __expectString,
        hardware: (_) => de_RelationalDatabaseHardware(_, context),
        latestRestorableTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        location: _json,
        masterDatabaseName: __expectString,
        masterEndpoint: _json,
        masterUsername: __expectString,
        name: __expectString,
        parameterApplyStatus: __expectString,
        pendingMaintenanceActions: (_) => de_PendingMaintenanceActionList(_, context),
        pendingModifiedValues: _json,
        preferredBackupWindow: __expectString,
        preferredMaintenanceWindow: __expectString,
        publiclyAccessible: __expectBoolean,
        relationalDatabaseBlueprintId: __expectString,
        relationalDatabaseBundleId: __expectString,
        resourceType: __expectString,
        secondaryAvailabilityZone: __expectString,
        state: __expectString,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_RelationalDatabaseBundle = (output, context) => {
    return take(output, {
        bundleId: __expectString,
        cpuCount: __expectInt32,
        diskSizeInGb: __expectInt32,
        isActive: __expectBoolean,
        isEncrypted: __expectBoolean,
        name: __expectString,
        price: __limitedParseFloat32,
        ramSizeInGb: __limitedParseFloat32,
        transferPerMonthInGb: __expectInt32,
    });
};
const de_RelationalDatabaseBundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelationalDatabaseBundle(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseEvent = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        eventCategories: _json,
        message: __expectString,
        resource: __expectString,
    });
};
const de_RelationalDatabaseEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelationalDatabaseEvent(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseHardware = (output, context) => {
    return take(output, {
        cpuCount: __expectInt32,
        diskSizeInGb: __expectInt32,
        ramSizeInGb: __limitedParseFloat32,
    });
};
const de_RelationalDatabaseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelationalDatabase(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseSnapshot = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        engine: __expectString,
        engineVersion: __expectString,
        fromRelationalDatabaseArn: __expectString,
        fromRelationalDatabaseBlueprintId: __expectString,
        fromRelationalDatabaseBundleId: __expectString,
        fromRelationalDatabaseName: __expectString,
        location: _json,
        name: __expectString,
        resourceType: __expectString,
        sizeInGb: __expectInt32,
        state: __expectString,
        supportCode: __expectString,
        tags: _json,
    });
};
const de_RelationalDatabaseSnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RelationalDatabaseSnapshot(entry, context);
    });
    return retVal;
};
const de_ReleaseStaticIpResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_RenewalSummary = (output, context) => {
    return take(output, {
        domainValidationRecords: _json,
        renewalStatus: __expectString,
        renewalStatusReason: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ResetDistributionCacheResult = (output, context) => {
    return take(output, {
        createTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        operation: (_) => de_Operation(_, context),
        status: __expectString,
    });
};
const de_ResourceBudgetEstimate = (output, context) => {
    return take(output, {
        costEstimates: (_) => de_CostEstimates(_, context),
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        resourceName: __expectString,
        resourceType: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ResourcesBudgetEstimate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceBudgetEstimate(entry, context);
    });
    return retVal;
};
const de_SendContactMethodVerificationResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_SetIpAddressTypeResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_SetResourceAccessForBucketResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_SetupExecutionDetails = (output, context) => {
    return take(output, {
        command: __expectString,
        dateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        standardError: __expectString,
        standardOutput: __expectString,
        status: __expectString,
        version: __expectString,
    });
};
const de_SetupExecutionDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SetupExecutionDetails(entry, context);
    });
    return retVal;
};
const de_SetupHistory = (output, context) => {
    return take(output, {
        executionDetails: (_) => de_SetupExecutionDetailsList(_, context),
        operationId: __expectString,
        request: _json,
        resource: (_) => de_SetupHistoryResource(_, context),
        status: __expectString,
    });
};
const de_setupHistoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SetupHistory(entry, context);
    });
    return retVal;
};
const de_SetupHistoryResource = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        location: _json,
        name: __expectString,
        resourceType: __expectString,
    });
};
const de_SetupInstanceHttpsResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StartGUISessionResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StartInstanceResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StartRelationalDatabaseResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StaticIp = (output, context) => {
    return take(output, {
        arn: __expectString,
        attachedTo: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ipAddress: __expectString,
        isAttached: __expectBoolean,
        location: _json,
        name: __expectString,
        resourceType: __expectString,
        supportCode: __expectString,
    });
};
const de_StaticIpList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StaticIp(entry, context);
    });
    return retVal;
};
const de_StopGUISessionResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StopInstanceResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_StopRelationalDatabaseResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_TagResourceResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_TestAlarmResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_TimePeriod = (output, context) => {
    return take(output, {
        end: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        start: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_UnpeerVpcResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_UntagResourceResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateBucketBundleResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateBucketResult = (output, context) => {
    return take(output, {
        bucket: (_) => de_Bucket(_, context),
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateContainerServiceResult = (output, context) => {
    return take(output, {
        containerService: (_) => de_ContainerService(_, context),
    });
};
const de_UpdateDistributionBundleResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_UpdateDistributionResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_UpdateDomainEntryResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateInstanceMetadataOptionsResult = (output, context) => {
    return take(output, {
        operation: (_) => de_Operation(_, context),
    });
};
const de_UpdateLoadBalancerAttributeResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateRelationalDatabaseParametersResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const de_UpdateRelationalDatabaseResult = (output, context) => {
    return take(output, {
        operations: (_) => de_OperationList(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `Lightsail_20161128.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
