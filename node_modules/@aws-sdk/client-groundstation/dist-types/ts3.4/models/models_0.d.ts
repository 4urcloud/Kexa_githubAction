import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { GroundStationServiceException as __BaseException } from "./GroundStationServiceException";
export declare class DependencyException extends __BaseException {
  readonly name: "DependencyException";
  readonly $fault: "server";
  parameterName?: string;
  constructor(
    opts: __ExceptionOptionType<DependencyException, __BaseException>
  );
}
export interface GetAgentConfigurationRequest {
  agentId: string | undefined;
}
export interface GetAgentConfigurationResponse {
  agentId?: string;
  taskingDocument?: string;
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  parameterName?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface ComponentVersion {
  componentType: string | undefined;
  versions: string[] | undefined;
}
export interface AgentDetails {
  agentVersion: string | undefined;
  instanceId: string | undefined;
  instanceType: string | undefined;
  reservedCpuCores?: number[];
  agentCpuCores?: number[];
  componentVersions: ComponentVersion[] | undefined;
}
export interface DiscoveryData {
  publicIpAddresses: string[] | undefined;
  privateIpAddresses: string[] | undefined;
  capabilityArns: string[] | undefined;
}
export interface RegisterAgentRequest {
  discoveryData: DiscoveryData | undefined;
  agentDetails: AgentDetails | undefined;
}
export interface RegisterAgentResponse {
  agentId?: string;
}
export declare const AgentStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly FAILED: "FAILED";
  readonly INACTIVE: "INACTIVE";
  readonly SUCCESS: "SUCCESS";
};
export type AgentStatus = (typeof AgentStatus)[keyof typeof AgentStatus];
export interface AggregateStatus {
  status: AgentStatus | undefined;
  signatureMap?: Record<string, boolean>;
}
export interface ComponentStatusData {
  componentType: string | undefined;
  capabilityArn: string | undefined;
  status: AgentStatus | undefined;
  bytesSent?: number;
  bytesReceived?: number;
  packetsDropped?: number;
  dataflowId: string | undefined;
}
export interface UpdateAgentStatusRequest {
  agentId: string | undefined;
  taskId: string | undefined;
  aggregateStatus: AggregateStatus | undefined;
  componentStatuses: ComponentStatusData[] | undefined;
}
export interface UpdateAgentStatusResponse {
  agentId: string | undefined;
}
export declare const AngleUnits: {
  readonly DEGREE_ANGLE: "DEGREE_ANGLE";
  readonly RADIAN: "RADIAN";
};
export type AngleUnits = (typeof AngleUnits)[keyof typeof AngleUnits];
export interface AntennaDemodDecodeDetails {
  outputNode?: string;
}
export declare const BandwidthUnits: {
  readonly GHZ: "GHz";
  readonly KHZ: "kHz";
  readonly MHZ: "MHz";
};
export type BandwidthUnits =
  (typeof BandwidthUnits)[keyof typeof BandwidthUnits];
export interface FrequencyBandwidth {
  value: number | undefined;
  units: BandwidthUnits | undefined;
}
export declare const FrequencyUnits: {
  readonly GHZ: "GHz";
  readonly KHZ: "kHz";
  readonly MHZ: "MHz";
};
export type FrequencyUnits =
  (typeof FrequencyUnits)[keyof typeof FrequencyUnits];
export interface Frequency {
  value: number | undefined;
  units: FrequencyUnits | undefined;
}
export declare const Polarization: {
  readonly LEFT_HAND: "LEFT_HAND";
  readonly NONE: "NONE";
  readonly RIGHT_HAND: "RIGHT_HAND";
};
export type Polarization = (typeof Polarization)[keyof typeof Polarization];
export interface SpectrumConfig {
  centerFrequency: Frequency | undefined;
  bandwidth: FrequencyBandwidth | undefined;
  polarization?: Polarization;
}
export interface AntennaDownlinkConfig {
  spectrumConfig: SpectrumConfig | undefined;
}
export interface DecodeConfig {
  unvalidatedJSON: string | undefined;
}
export interface DemodulationConfig {
  unvalidatedJSON: string | undefined;
}
export interface AntennaDownlinkDemodDecodeConfig {
  spectrumConfig: SpectrumConfig | undefined;
  demodulationConfig: DemodulationConfig | undefined;
  decodeConfig: DecodeConfig | undefined;
}
export interface UplinkSpectrumConfig {
  centerFrequency: Frequency | undefined;
  polarization?: Polarization;
}
export declare const EirpUnits: {
  readonly DBW: "dBW";
};
export type EirpUnits = (typeof EirpUnits)[keyof typeof EirpUnits];
export interface Eirp {
  value: number | undefined;
  units: EirpUnits | undefined;
}
export interface AntennaUplinkConfig {
  transmitDisabled?: boolean;
  spectrumConfig: UplinkSpectrumConfig | undefined;
  targetEirp: Eirp | undefined;
}
export declare const AuditResults: {
  readonly HEALTHY: "HEALTHY";
  readonly UNHEALTHY: "UNHEALTHY";
};
export type AuditResults = (typeof AuditResults)[keyof typeof AuditResults];
export interface SocketAddress {
  name: string | undefined;
  port: number | undefined;
}
export interface ConnectionDetails {
  socketAddress: SocketAddress | undefined;
  mtu?: number;
}
export interface IntegerRange {
  minimum: number | undefined;
  maximum: number | undefined;
}
export interface RangedSocketAddress {
  name: string | undefined;
  portRange: IntegerRange | undefined;
}
export interface RangedConnectionDetails {
  socketAddress: RangedSocketAddress | undefined;
  mtu?: number;
}
export interface AwsGroundStationAgentEndpoint {
  name: string | undefined;
  egressAddress: ConnectionDetails | undefined;
  ingressAddress: RangedConnectionDetails | undefined;
  agentStatus?: AgentStatus;
  auditResults?: AuditResults;
}
export interface CancelContactRequest {
  contactId: string | undefined;
}
export interface ContactIdResponse {
  contactId?: string;
}
export declare const CapabilityHealth: {
  readonly HEALTHY: "HEALTHY";
  readonly UNHEALTHY: "UNHEALTHY";
};
export type CapabilityHealth =
  (typeof CapabilityHealth)[keyof typeof CapabilityHealth];
export declare const CapabilityHealthReason: {
  readonly DATAPLANE_FAILURE: "DATAPLANE_FAILURE";
  readonly HEALTHY: "HEALTHY";
  readonly INITIALIZING_DATAPLANE: "INITIALIZING_DATAPLANE";
  readonly INVALID_IP_OWNERSHIP: "INVALID_IP_OWNERSHIP";
  readonly NOT_AUTHORIZED_TO_CREATE_SLR: "NOT_AUTHORIZED_TO_CREATE_SLR";
  readonly NO_REGISTERED_AGENT: "NO_REGISTERED_AGENT";
  readonly UNVERIFIED_IP_OWNERSHIP: "UNVERIFIED_IP_OWNERSHIP";
};
export type CapabilityHealthReason =
  (typeof CapabilityHealthReason)[keyof typeof CapabilityHealthReason];
export declare const ConfigCapabilityType: {
  readonly ANTENNA_DOWNLINK: "antenna-downlink";
  readonly ANTENNA_DOWNLINK_DEMOD_DECODE: "antenna-downlink-demod-decode";
  readonly ANTENNA_UPLINK: "antenna-uplink";
  readonly DATAFLOW_ENDPOINT: "dataflow-endpoint";
  readonly S3_RECORDING: "s3-recording";
  readonly TRACKING: "tracking";
  readonly UPLINK_ECHO: "uplink-echo";
};
export type ConfigCapabilityType =
  (typeof ConfigCapabilityType)[keyof typeof ConfigCapabilityType];
export interface ConfigIdResponse {
  configId?: string;
  configType?: ConfigCapabilityType;
  configArn?: string;
}
export interface DataflowEndpointConfig {
  dataflowEndpointName: string | undefined;
  dataflowEndpointRegion?: string;
}
export interface S3RecordingConfig {
  bucketArn: string | undefined;
  roleArn: string | undefined;
  prefix?: string;
}
export declare const Criticality: {
  readonly PREFERRED: "PREFERRED";
  readonly REMOVED: "REMOVED";
  readonly REQUIRED: "REQUIRED";
};
export type Criticality = (typeof Criticality)[keyof typeof Criticality];
export interface TrackingConfig {
  autotrack: Criticality | undefined;
}
export interface UplinkEchoConfig {
  enabled: boolean | undefined;
  antennaUplinkConfigArn: string | undefined;
}
export type ConfigTypeData =
  | ConfigTypeData.AntennaDownlinkConfigMember
  | ConfigTypeData.AntennaDownlinkDemodDecodeConfigMember
  | ConfigTypeData.AntennaUplinkConfigMember
  | ConfigTypeData.DataflowEndpointConfigMember
  | ConfigTypeData.S3RecordingConfigMember
  | ConfigTypeData.TrackingConfigMember
  | ConfigTypeData.UplinkEchoConfigMember
  | ConfigTypeData.$UnknownMember;
export declare namespace ConfigTypeData {
  interface AntennaDownlinkConfigMember {
    antennaDownlinkConfig: AntennaDownlinkConfig;
    trackingConfig?: never;
    dataflowEndpointConfig?: never;
    antennaDownlinkDemodDecodeConfig?: never;
    antennaUplinkConfig?: never;
    uplinkEchoConfig?: never;
    s3RecordingConfig?: never;
    $unknown?: never;
  }
  interface TrackingConfigMember {
    antennaDownlinkConfig?: never;
    trackingConfig: TrackingConfig;
    dataflowEndpointConfig?: never;
    antennaDownlinkDemodDecodeConfig?: never;
    antennaUplinkConfig?: never;
    uplinkEchoConfig?: never;
    s3RecordingConfig?: never;
    $unknown?: never;
  }
  interface DataflowEndpointConfigMember {
    antennaDownlinkConfig?: never;
    trackingConfig?: never;
    dataflowEndpointConfig: DataflowEndpointConfig;
    antennaDownlinkDemodDecodeConfig?: never;
    antennaUplinkConfig?: never;
    uplinkEchoConfig?: never;
    s3RecordingConfig?: never;
    $unknown?: never;
  }
  interface AntennaDownlinkDemodDecodeConfigMember {
    antennaDownlinkConfig?: never;
    trackingConfig?: never;
    dataflowEndpointConfig?: never;
    antennaDownlinkDemodDecodeConfig: AntennaDownlinkDemodDecodeConfig;
    antennaUplinkConfig?: never;
    uplinkEchoConfig?: never;
    s3RecordingConfig?: never;
    $unknown?: never;
  }
  interface AntennaUplinkConfigMember {
    antennaDownlinkConfig?: never;
    trackingConfig?: never;
    dataflowEndpointConfig?: never;
    antennaDownlinkDemodDecodeConfig?: never;
    antennaUplinkConfig: AntennaUplinkConfig;
    uplinkEchoConfig?: never;
    s3RecordingConfig?: never;
    $unknown?: never;
  }
  interface UplinkEchoConfigMember {
    antennaDownlinkConfig?: never;
    trackingConfig?: never;
    dataflowEndpointConfig?: never;
    antennaDownlinkDemodDecodeConfig?: never;
    antennaUplinkConfig?: never;
    uplinkEchoConfig: UplinkEchoConfig;
    s3RecordingConfig?: never;
    $unknown?: never;
  }
  interface S3RecordingConfigMember {
    antennaDownlinkConfig?: never;
    trackingConfig?: never;
    dataflowEndpointConfig?: never;
    antennaDownlinkDemodDecodeConfig?: never;
    antennaUplinkConfig?: never;
    uplinkEchoConfig?: never;
    s3RecordingConfig: S3RecordingConfig;
    $unknown?: never;
  }
  interface $UnknownMember {
    antennaDownlinkConfig?: never;
    trackingConfig?: never;
    dataflowEndpointConfig?: never;
    antennaDownlinkDemodDecodeConfig?: never;
    antennaUplinkConfig?: never;
    uplinkEchoConfig?: never;
    s3RecordingConfig?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    antennaDownlinkConfig: (value: AntennaDownlinkConfig) => T;
    trackingConfig: (value: TrackingConfig) => T;
    dataflowEndpointConfig: (value: DataflowEndpointConfig) => T;
    antennaDownlinkDemodDecodeConfig: (
      value: AntennaDownlinkDemodDecodeConfig
    ) => T;
    antennaUplinkConfig: (value: AntennaUplinkConfig) => T;
    uplinkEchoConfig: (value: UplinkEchoConfig) => T;
    s3RecordingConfig: (value: S3RecordingConfig) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ConfigTypeData, visitor: Visitor<T>) => T;
}
export interface CreateConfigRequest {
  name: string | undefined;
  configData: ConfigTypeData | undefined;
  tags?: Record<string, string>;
}
export declare class ResourceLimitExceededException extends __BaseException {
  readonly name: "ResourceLimitExceededException";
  readonly $fault: "client";
  parameterName?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceLimitExceededException, __BaseException>
  );
}
export interface DeleteConfigRequest {
  configId: string | undefined;
  configType: ConfigCapabilityType | undefined;
}
export interface GetConfigRequest {
  configId: string | undefined;
  configType: ConfigCapabilityType | undefined;
}
export interface GetConfigResponse {
  configId: string | undefined;
  configArn: string | undefined;
  name: string | undefined;
  configType?: ConfigCapabilityType;
  configData: ConfigTypeData | undefined;
  tags?: Record<string, string>;
}
export interface ListConfigsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ConfigListItem {
  configId?: string;
  configType?: ConfigCapabilityType;
  configArn?: string;
  name?: string;
}
export interface ListConfigsResponse {
  nextToken?: string;
  configList?: ConfigListItem[];
}
export interface UpdateConfigRequest {
  configId: string | undefined;
  name: string | undefined;
  configType: ConfigCapabilityType | undefined;
  configData: ConfigTypeData | undefined;
}
export declare const EndpointStatus: {
  readonly created: "created";
  readonly creating: "creating";
  readonly deleted: "deleted";
  readonly deleting: "deleting";
  readonly failed: "failed";
};
export type EndpointStatus =
  (typeof EndpointStatus)[keyof typeof EndpointStatus];
export interface DataflowEndpoint {
  name?: string;
  address?: SocketAddress;
  status?: EndpointStatus;
  mtu?: number;
}
export interface SecurityDetails {
  subnetIds: string[] | undefined;
  securityGroupIds: string[] | undefined;
  roleArn: string | undefined;
}
export interface EndpointDetails {
  securityDetails?: SecurityDetails;
  endpoint?: DataflowEndpoint;
  awsGroundStationAgentEndpoint?: AwsGroundStationAgentEndpoint;
  healthStatus?: CapabilityHealth;
  healthReasons?: CapabilityHealthReason[];
}
export interface S3RecordingDetails {
  bucketArn?: string;
  keyTemplate?: string;
}
export type ConfigDetails =
  | ConfigDetails.AntennaDemodDecodeDetailsMember
  | ConfigDetails.EndpointDetailsMember
  | ConfigDetails.S3RecordingDetailsMember
  | ConfigDetails.$UnknownMember;
export declare namespace ConfigDetails {
  interface EndpointDetailsMember {
    endpointDetails: EndpointDetails;
    antennaDemodDecodeDetails?: never;
    s3RecordingDetails?: never;
    $unknown?: never;
  }
  interface AntennaDemodDecodeDetailsMember {
    endpointDetails?: never;
    antennaDemodDecodeDetails: AntennaDemodDecodeDetails;
    s3RecordingDetails?: never;
    $unknown?: never;
  }
  interface S3RecordingDetailsMember {
    endpointDetails?: never;
    antennaDemodDecodeDetails?: never;
    s3RecordingDetails: S3RecordingDetails;
    $unknown?: never;
  }
  interface $UnknownMember {
    endpointDetails?: never;
    antennaDemodDecodeDetails?: never;
    s3RecordingDetails?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    endpointDetails: (value: EndpointDetails) => T;
    antennaDemodDecodeDetails: (value: AntennaDemodDecodeDetails) => T;
    s3RecordingDetails: (value: S3RecordingDetails) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ConfigDetails, visitor: Visitor<T>) => T;
}
export interface DescribeContactRequest {
  contactId: string | undefined;
}
export declare const ContactStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly AWS_CANCELLED: "AWS_CANCELLED";
  readonly AWS_FAILED: "AWS_FAILED";
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly FAILED_TO_SCHEDULE: "FAILED_TO_SCHEDULE";
  readonly PASS: "PASS";
  readonly POSTPASS: "POSTPASS";
  readonly PREPASS: "PREPASS";
  readonly SCHEDULED: "SCHEDULED";
  readonly SCHEDULING: "SCHEDULING";
};
export type ContactStatus = (typeof ContactStatus)[keyof typeof ContactStatus];
export interface Destination {
  configType?: ConfigCapabilityType;
  configId?: string;
  configDetails?: ConfigDetails;
  dataflowDestinationRegion?: string;
}
export interface Source {
  configType?: ConfigCapabilityType;
  configId?: string;
  configDetails?: ConfigDetails;
  dataflowSourceRegion?: string;
}
export interface DataflowDetail {
  source?: Source;
  destination?: Destination;
  errorMessage?: string;
}
export interface Elevation {
  value: number | undefined;
  unit: AngleUnits | undefined;
}
export interface DescribeContactResponse {
  contactId?: string;
  missionProfileArn?: string;
  satelliteArn?: string;
  startTime?: Date;
  endTime?: Date;
  prePassStartTime?: Date;
  postPassEndTime?: Date;
  groundStation?: string;
  contactStatus?: ContactStatus;
  errorMessage?: string;
  maximumElevation?: Elevation;
  tags?: Record<string, string>;
  region?: string;
  dataflowList?: DataflowDetail[];
  visibilityStartTime?: Date;
  visibilityEndTime?: Date;
}
export interface ListContactsRequest {
  maxResults?: number;
  nextToken?: string;
  statusList: ContactStatus[] | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
  groundStation?: string;
  satelliteArn?: string;
  missionProfileArn?: string;
}
export interface ContactData {
  contactId?: string;
  missionProfileArn?: string;
  satelliteArn?: string;
  startTime?: Date;
  endTime?: Date;
  prePassStartTime?: Date;
  postPassEndTime?: Date;
  groundStation?: string;
  contactStatus?: ContactStatus;
  errorMessage?: string;
  maximumElevation?: Elevation;
  region?: string;
  tags?: Record<string, string>;
  visibilityStartTime?: Date;
  visibilityEndTime?: Date;
}
export interface ListContactsResponse {
  nextToken?: string;
  contactList?: ContactData[];
}
export interface ReserveContactRequest {
  missionProfileArn: string | undefined;
  satelliteArn: string | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
  groundStation: string | undefined;
  tags?: Record<string, string>;
}
export interface CreateDataflowEndpointGroupRequest {
  endpointDetails: EndpointDetails[] | undefined;
  tags?: Record<string, string>;
  contactPrePassDurationSeconds?: number;
  contactPostPassDurationSeconds?: number;
}
export interface DataflowEndpointGroupIdResponse {
  dataflowEndpointGroupId?: string;
}
export interface S3Object {
  bucket?: string;
  key?: string;
  version?: string;
}
export interface OEMEphemeris {
  s3Object?: S3Object;
  oemData?: string;
}
export interface TimeRange {
  startTime: Date | undefined;
  endTime: Date | undefined;
}
export interface TLEData {
  tleLine1: string | undefined;
  tleLine2: string | undefined;
  validTimeRange: TimeRange | undefined;
}
export interface TLEEphemeris {
  s3Object?: S3Object;
  tleData?: TLEData[];
}
export type EphemerisData =
  | EphemerisData.OemMember
  | EphemerisData.TleMember
  | EphemerisData.$UnknownMember;
export declare namespace EphemerisData {
  interface TleMember {
    tle: TLEEphemeris;
    oem?: never;
    $unknown?: never;
  }
  interface OemMember {
    tle?: never;
    oem: OEMEphemeris;
    $unknown?: never;
  }
  interface $UnknownMember {
    tle?: never;
    oem?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    tle: (value: TLEEphemeris) => T;
    oem: (value: OEMEphemeris) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: EphemerisData, visitor: Visitor<T>) => T;
}
export interface CreateEphemerisRequest {
  satelliteId: string | undefined;
  enabled?: boolean;
  priority?: number;
  expirationTime?: Date;
  name: string | undefined;
  kmsKeyArn?: string;
  ephemeris?: EphemerisData;
  tags?: Record<string, string>;
}
export interface EphemerisIdResponse {
  ephemerisId?: string;
}
export type KmsKey =
  | KmsKey.KmsAliasArnMember
  | KmsKey.KmsAliasNameMember
  | KmsKey.KmsKeyArnMember
  | KmsKey.$UnknownMember;
export declare namespace KmsKey {
  interface KmsKeyArnMember {
    kmsKeyArn: string;
    kmsAliasArn?: never;
    kmsAliasName?: never;
    $unknown?: never;
  }
  interface KmsAliasArnMember {
    kmsKeyArn?: never;
    kmsAliasArn: string;
    kmsAliasName?: never;
    $unknown?: never;
  }
  interface KmsAliasNameMember {
    kmsKeyArn?: never;
    kmsAliasArn?: never;
    kmsAliasName: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    kmsKeyArn?: never;
    kmsAliasArn?: never;
    kmsAliasName?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    kmsKeyArn: (value: string) => T;
    kmsAliasArn: (value: string) => T;
    kmsAliasName: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: KmsKey, visitor: Visitor<T>) => T;
}
export interface CreateMissionProfileRequest {
  name: string | undefined;
  contactPrePassDurationSeconds?: number;
  contactPostPassDurationSeconds?: number;
  minimumViableContactDurationSeconds: number | undefined;
  dataflowEdges: string[][] | undefined;
  trackingConfigArn: string | undefined;
  tags?: Record<string, string>;
  streamsKmsKey?: KmsKey;
  streamsKmsRole?: string;
}
export interface MissionProfileIdResponse {
  missionProfileId?: string;
}
export interface DeleteDataflowEndpointGroupRequest {
  dataflowEndpointGroupId: string | undefined;
}
export interface GetDataflowEndpointGroupRequest {
  dataflowEndpointGroupId: string | undefined;
}
export interface GetDataflowEndpointGroupResponse {
  dataflowEndpointGroupId?: string;
  dataflowEndpointGroupArn?: string;
  endpointsDetails?: EndpointDetails[];
  tags?: Record<string, string>;
  contactPrePassDurationSeconds?: number;
  contactPostPassDurationSeconds?: number;
}
export interface ListDataflowEndpointGroupsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface DataflowEndpointListItem {
  dataflowEndpointGroupId?: string;
  dataflowEndpointGroupArn?: string;
}
export interface ListDataflowEndpointGroupsResponse {
  nextToken?: string;
  dataflowEndpointGroupList?: DataflowEndpointListItem[];
}
export interface DeleteEphemerisRequest {
  ephemerisId: string | undefined;
}
export interface DeleteMissionProfileRequest {
  missionProfileId: string | undefined;
}
export interface DescribeEphemerisRequest {
  ephemerisId: string | undefined;
}
export declare const EphemerisInvalidReason: {
  readonly KMS_KEY_INVALID: "KMS_KEY_INVALID";
  readonly METADATA_INVALID: "METADATA_INVALID";
  readonly TIME_RANGE_INVALID: "TIME_RANGE_INVALID";
  readonly TRAJECTORY_INVALID: "TRAJECTORY_INVALID";
  readonly VALIDATION_ERROR: "VALIDATION_ERROR";
};
export type EphemerisInvalidReason =
  (typeof EphemerisInvalidReason)[keyof typeof EphemerisInvalidReason];
export declare const EphemerisStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly ERROR: "ERROR";
  readonly EXPIRED: "EXPIRED";
  readonly INVALID: "INVALID";
  readonly VALIDATING: "VALIDATING";
};
export type EphemerisStatus =
  (typeof EphemerisStatus)[keyof typeof EphemerisStatus];
export interface EphemerisDescription {
  sourceS3Object?: S3Object;
  ephemerisData?: string;
}
export type EphemerisTypeDescription =
  | EphemerisTypeDescription.OemMember
  | EphemerisTypeDescription.TleMember
  | EphemerisTypeDescription.$UnknownMember;
export declare namespace EphemerisTypeDescription {
  interface TleMember {
    tle: EphemerisDescription;
    oem?: never;
    $unknown?: never;
  }
  interface OemMember {
    tle?: never;
    oem: EphemerisDescription;
    $unknown?: never;
  }
  interface $UnknownMember {
    tle?: never;
    oem?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    tle: (value: EphemerisDescription) => T;
    oem: (value: EphemerisDescription) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: EphemerisTypeDescription, visitor: Visitor<T>) => T;
}
export interface DescribeEphemerisResponse {
  ephemerisId?: string;
  satelliteId?: string;
  status?: EphemerisStatus;
  priority?: number;
  creationTime?: Date;
  enabled?: boolean;
  name?: string;
  tags?: Record<string, string>;
  suppliedData?: EphemerisTypeDescription;
  invalidReason?: EphemerisInvalidReason;
}
export interface EphemerisItem {
  ephemerisId?: string;
  status?: EphemerisStatus;
  priority?: number;
  enabled?: boolean;
  creationTime?: Date;
  name?: string;
  sourceS3Object?: S3Object;
}
export interface ListEphemeridesRequest {
  satelliteId: string | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
  statusList?: EphemerisStatus[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListEphemeridesResponse {
  nextToken?: string;
  ephemerides?: EphemerisItem[];
}
export interface UpdateEphemerisRequest {
  ephemerisId: string | undefined;
  enabled: boolean | undefined;
  name?: string;
  priority?: number;
}
export declare const EphemerisSource: {
  readonly CUSTOMER_PROVIDED: "CUSTOMER_PROVIDED";
  readonly SPACE_TRACK: "SPACE_TRACK";
};
export type EphemerisSource =
  (typeof EphemerisSource)[keyof typeof EphemerisSource];
export interface EphemerisMetaData {
  source: EphemerisSource | undefined;
  ephemerisId?: string;
  epoch?: Date;
  name?: string;
}
export interface GetMinuteUsageRequest {
  month: number | undefined;
  year: number | undefined;
}
export interface GetMinuteUsageResponse {
  isReservedMinutesCustomer?: boolean;
  totalReservedMinuteAllocation?: number;
  upcomingMinutesScheduled?: number;
  totalScheduledMinutes?: number;
  estimatedMinutesRemaining?: number;
}
export interface GetMissionProfileRequest {
  missionProfileId: string | undefined;
}
export interface GetMissionProfileResponse {
  missionProfileId?: string;
  missionProfileArn?: string;
  name?: string;
  region?: string;
  contactPrePassDurationSeconds?: number;
  contactPostPassDurationSeconds?: number;
  minimumViableContactDurationSeconds?: number;
  dataflowEdges?: string[][];
  trackingConfigArn?: string;
  tags?: Record<string, string>;
  streamsKmsKey?: KmsKey;
  streamsKmsRole?: string;
}
export interface GetSatelliteRequest {
  satelliteId: string | undefined;
}
export interface GetSatelliteResponse {
  satelliteId?: string;
  satelliteArn?: string;
  noradSatelliteID?: number;
  groundStations?: string[];
  currentEphemeris?: EphemerisMetaData;
}
export interface ListGroundStationsRequest {
  satelliteId?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface GroundStationData {
  groundStationId?: string;
  groundStationName?: string;
  region?: string;
}
export interface ListGroundStationsResponse {
  nextToken?: string;
  groundStationList?: GroundStationData[];
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface ListMissionProfilesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface MissionProfileListItem {
  missionProfileId?: string;
  missionProfileArn?: string;
  region?: string;
  name?: string;
}
export interface ListMissionProfilesResponse {
  nextToken?: string;
  missionProfileList?: MissionProfileListItem[];
}
export interface UpdateMissionProfileRequest {
  missionProfileId: string | undefined;
  name?: string;
  contactPrePassDurationSeconds?: number;
  contactPostPassDurationSeconds?: number;
  minimumViableContactDurationSeconds?: number;
  dataflowEdges?: string[][];
  trackingConfigArn?: string;
  streamsKmsKey?: KmsKey;
  streamsKmsRole?: string;
}
export interface ListSatellitesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface SatelliteListItem {
  satelliteId?: string;
  satelliteArn?: string;
  noradSatelliteID?: number;
  groundStations?: string[];
  currentEphemeris?: EphemerisMetaData;
}
export interface ListSatellitesResponse {
  nextToken?: string;
  satellites?: SatelliteListItem[];
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
