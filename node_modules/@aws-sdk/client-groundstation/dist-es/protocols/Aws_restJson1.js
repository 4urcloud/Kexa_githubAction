import { awsExpectUnion as __expectUnion } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { GroundStationServiceException as __BaseException } from "../models/GroundStationServiceException";
import { ConfigTypeData, DependencyException, EphemerisData, InvalidParameterException, ResourceLimitExceededException, ResourceNotFoundException, } from "../models/models_0";
export const se_CancelContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact/{contactId}");
    b.p("contactId", () => input.contactId, "{contactId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_CreateConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/config");
    let body;
    body = JSON.stringify(take(input, {
        configData: (_) => se_ConfigTypeData(_, context),
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDataflowEndpointGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/dataflowEndpointGroup");
    let body;
    body = JSON.stringify(take(input, {
        contactPostPassDurationSeconds: [],
        contactPrePassDurationSeconds: [],
        endpointDetails: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateEphemerisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ephemeris");
    let body;
    body = JSON.stringify(take(input, {
        enabled: [],
        ephemeris: (_) => se_EphemerisData(_, context),
        expirationTime: (_) => Math.round(_.getTime() / 1000),
        kmsKeyArn: [],
        name: [],
        priority: [],
        satelliteId: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMissionProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/missionprofile");
    let body;
    body = JSON.stringify(take(input, {
        contactPostPassDurationSeconds: [],
        contactPrePassDurationSeconds: [],
        dataflowEdges: (_) => _json(_),
        minimumViableContactDurationSeconds: [],
        name: [],
        streamsKmsKey: (_) => _json(_),
        streamsKmsRole: [],
        tags: (_) => _json(_),
        trackingConfigArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/config/{configType}/{configId}");
    b.p("configId", () => input.configId, "{configId}", false);
    b.p("configType", () => input.configType, "{configType}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDataflowEndpointGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/dataflowEndpointGroup/{dataflowEndpointGroupId}");
    b.p("dataflowEndpointGroupId", () => input.dataflowEndpointGroupId, "{dataflowEndpointGroupId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEphemerisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ephemeris/{ephemerisId}");
    b.p("ephemerisId", () => input.ephemerisId, "{ephemerisId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteMissionProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/missionprofile/{missionProfileId}");
    b.p("missionProfileId", () => input.missionProfileId, "{missionProfileId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/contact/{contactId}");
    b.p("contactId", () => input.contactId, "{contactId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeEphemerisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ephemeris/{ephemerisId}");
    b.p("ephemerisId", () => input.ephemerisId, "{ephemerisId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAgentConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/agent/{agentId}/configuration");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/config/{configType}/{configId}");
    b.p("configId", () => input.configId, "{configId}", false);
    b.p("configType", () => input.configType, "{configType}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDataflowEndpointGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/dataflowEndpointGroup/{dataflowEndpointGroupId}");
    b.p("dataflowEndpointGroupId", () => input.dataflowEndpointGroupId, "{dataflowEndpointGroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMinuteUsageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/minute-usage");
    let body;
    body = JSON.stringify(take(input, {
        month: [],
        year: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetMissionProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/missionprofile/{missionProfileId}");
    b.p("missionProfileId", () => input.missionProfileId, "{missionProfileId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSatelliteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/satellite/{satelliteId}");
    b.p("satelliteId", () => input.satelliteId, "{satelliteId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListConfigsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/config");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListContactsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contacts");
    let body;
    body = JSON.stringify(take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        groundStation: [],
        maxResults: [],
        missionProfileArn: [],
        nextToken: [],
        satelliteArn: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statusList: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListDataflowEndpointGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/dataflowEndpointGroup");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEphemeridesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ephemerides");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    body = JSON.stringify(take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        satelliteId: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        statusList: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListGroundStationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/groundstation");
    const query = map({
        [_sI]: [, input[_sI]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMissionProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/missionprofile");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSatellitesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/satellite");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_RegisterAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agent");
    let body;
    body = JSON.stringify(take(input, {
        agentDetails: (_) => _json(_),
        discoveryData: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ReserveContactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact");
    let body;
    body = JSON.stringify(take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        groundStation: [],
        missionProfileArn: [],
        satelliteArn: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAgentStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agent/{agentId}");
    b.p("agentId", () => input.agentId, "{agentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        aggregateStatus: (_) => _json(_),
        componentStatuses: (_) => _json(_),
        taskId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/config/{configType}/{configId}");
    b.p("configId", () => input.configId, "{configId}", false);
    b.p("configType", () => input.configType, "{configType}", false);
    let body;
    body = JSON.stringify(take(input, {
        configData: (_) => se_ConfigTypeData(_, context),
        name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateEphemerisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ephemeris/{ephemerisId}");
    b.p("ephemerisId", () => input.ephemerisId, "{ephemerisId}", false);
    let body;
    body = JSON.stringify(take(input, {
        enabled: [],
        name: [],
        priority: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateMissionProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/missionprofile/{missionProfileId}");
    b.p("missionProfileId", () => input.missionProfileId, "{missionProfileId}", false);
    let body;
    body = JSON.stringify(take(input, {
        contactPostPassDurationSeconds: [],
        contactPrePassDurationSeconds: [],
        dataflowEdges: (_) => _json(_),
        minimumViableContactDurationSeconds: [],
        name: [],
        streamsKmsKey: (_) => _json(_),
        streamsKmsRole: [],
        trackingConfigArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_CancelContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        contactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configArn: __expectString,
        configId: __expectString,
        configType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDataflowEndpointGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataflowEndpointGroupId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateEphemerisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ephemerisId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMissionProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        missionProfileId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configArn: __expectString,
        configId: __expectString,
        configType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDataflowEndpointGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataflowEndpointGroupId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteEphemerisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ephemerisId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteMissionProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        missionProfileId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        contactId: __expectString,
        contactStatus: __expectString,
        dataflowList: _json,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        errorMessage: __expectString,
        groundStation: __expectString,
        maximumElevation: (_) => de_Elevation(_, context),
        missionProfileArn: __expectString,
        postPassEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        prePassStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        region: __expectString,
        satelliteArn: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeEphemerisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        enabled: __expectBoolean,
        ephemerisId: __expectString,
        invalidReason: __expectString,
        name: __expectString,
        priority: __expectInt32,
        satelliteId: __expectString,
        status: __expectString,
        suppliedData: (_) => _json(__expectUnion(_)),
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAgentConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentId: __expectString,
        taskingDocument: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configArn: __expectString,
        configData: (_) => de_ConfigTypeData(__expectUnion(_), context),
        configId: __expectString,
        configType: __expectString,
        name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDataflowEndpointGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        contactPostPassDurationSeconds: __expectInt32,
        contactPrePassDurationSeconds: __expectInt32,
        dataflowEndpointGroupArn: __expectString,
        dataflowEndpointGroupId: __expectString,
        endpointsDetails: _json,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMinuteUsageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        estimatedMinutesRemaining: __expectInt32,
        isReservedMinutesCustomer: __expectBoolean,
        totalReservedMinuteAllocation: __expectInt32,
        totalScheduledMinutes: __expectInt32,
        upcomingMinutesScheduled: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMissionProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        contactPostPassDurationSeconds: __expectInt32,
        contactPrePassDurationSeconds: __expectInt32,
        dataflowEdges: _json,
        minimumViableContactDurationSeconds: __expectInt32,
        missionProfileArn: __expectString,
        missionProfileId: __expectString,
        name: __expectString,
        region: __expectString,
        streamsKmsKey: (_) => _json(__expectUnion(_)),
        streamsKmsRole: __expectString,
        tags: _json,
        trackingConfigArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSatelliteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        currentEphemeris: (_) => de_EphemerisMetaData(_, context),
        groundStations: _json,
        noradSatelliteID: __expectInt32,
        satelliteArn: __expectString,
        satelliteId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configList: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListContactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        contactList: (_) => de_ContactList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDataflowEndpointGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        dataflowEndpointGroupList: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEphemeridesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ephemerides: (_) => de_EphemeridesList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListGroundStationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        groundStationList: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMissionProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        missionProfileList: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSatellitesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        satellites: (_) => de_SatelliteList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RegisterAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ReserveContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        contactId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAgentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        agentId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configArn: __expectString,
        configId: __expectString,
        configType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateEphemerisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ephemerisId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateMissionProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        missionProfileId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DependencyException":
        case "com.amazonaws.groundstation#DependencyException":
            throw await de_DependencyExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.groundstation#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.groundstation#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.groundstation#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_DependencyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        parameterName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new DependencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        parameterName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        parameterName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_AntennaDownlinkConfig = (input, context) => {
    return take(input, {
        spectrumConfig: (_) => se_SpectrumConfig(_, context),
    });
};
const se_AntennaDownlinkDemodDecodeConfig = (input, context) => {
    return take(input, {
        decodeConfig: _json,
        demodulationConfig: _json,
        spectrumConfig: (_) => se_SpectrumConfig(_, context),
    });
};
const se_AntennaUplinkConfig = (input, context) => {
    return take(input, {
        spectrumConfig: (_) => se_UplinkSpectrumConfig(_, context),
        targetEirp: (_) => se_Eirp(_, context),
        transmitDisabled: [],
    });
};
const se_ConfigTypeData = (input, context) => {
    return ConfigTypeData.visit(input, {
        antennaDownlinkConfig: (value) => ({ antennaDownlinkConfig: se_AntennaDownlinkConfig(value, context) }),
        antennaDownlinkDemodDecodeConfig: (value) => ({
            antennaDownlinkDemodDecodeConfig: se_AntennaDownlinkDemodDecodeConfig(value, context),
        }),
        antennaUplinkConfig: (value) => ({ antennaUplinkConfig: se_AntennaUplinkConfig(value, context) }),
        dataflowEndpointConfig: (value) => ({ dataflowEndpointConfig: _json(value) }),
        s3RecordingConfig: (value) => ({ s3RecordingConfig: _json(value) }),
        trackingConfig: (value) => ({ trackingConfig: _json(value) }),
        uplinkEchoConfig: (value) => ({ uplinkEchoConfig: _json(value) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_Eirp = (input, context) => {
    return take(input, {
        units: [],
        value: __serializeFloat,
    });
};
const se_EphemerisData = (input, context) => {
    return EphemerisData.visit(input, {
        oem: (value) => ({ oem: _json(value) }),
        tle: (value) => ({ tle: se_TLEEphemeris(value, context) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_Frequency = (input, context) => {
    return take(input, {
        units: [],
        value: __serializeFloat,
    });
};
const se_FrequencyBandwidth = (input, context) => {
    return take(input, {
        units: [],
        value: __serializeFloat,
    });
};
const se_SpectrumConfig = (input, context) => {
    return take(input, {
        bandwidth: (_) => se_FrequencyBandwidth(_, context),
        centerFrequency: (_) => se_Frequency(_, context),
        polarization: [],
    });
};
const se_TimeRange = (input, context) => {
    return take(input, {
        endTime: (_) => Math.round(_.getTime() / 1000),
        startTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_TLEData = (input, context) => {
    return take(input, {
        tleLine1: [],
        tleLine2: [],
        validTimeRange: (_) => se_TimeRange(_, context),
    });
};
const se_TLEDataList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TLEData(entry, context);
    });
};
const se_TLEEphemeris = (input, context) => {
    return take(input, {
        s3Object: _json,
        tleData: (_) => se_TLEDataList(_, context),
    });
};
const se_UplinkSpectrumConfig = (input, context) => {
    return take(input, {
        centerFrequency: (_) => se_Frequency(_, context),
        polarization: [],
    });
};
const de_AntennaDownlinkConfig = (output, context) => {
    return take(output, {
        spectrumConfig: (_) => de_SpectrumConfig(_, context),
    });
};
const de_AntennaDownlinkDemodDecodeConfig = (output, context) => {
    return take(output, {
        decodeConfig: _json,
        demodulationConfig: _json,
        spectrumConfig: (_) => de_SpectrumConfig(_, context),
    });
};
const de_AntennaUplinkConfig = (output, context) => {
    return take(output, {
        spectrumConfig: (_) => de_UplinkSpectrumConfig(_, context),
        targetEirp: (_) => de_Eirp(_, context),
        transmitDisabled: __expectBoolean,
    });
};
const de_ConfigTypeData = (output, context) => {
    if (output.antennaDownlinkConfig != null) {
        return {
            antennaDownlinkConfig: de_AntennaDownlinkConfig(output.antennaDownlinkConfig, context),
        };
    }
    if (output.antennaDownlinkDemodDecodeConfig != null) {
        return {
            antennaDownlinkDemodDecodeConfig: de_AntennaDownlinkDemodDecodeConfig(output.antennaDownlinkDemodDecodeConfig, context),
        };
    }
    if (output.antennaUplinkConfig != null) {
        return {
            antennaUplinkConfig: de_AntennaUplinkConfig(output.antennaUplinkConfig, context),
        };
    }
    if (output.dataflowEndpointConfig != null) {
        return {
            dataflowEndpointConfig: _json(output.dataflowEndpointConfig),
        };
    }
    if (output.s3RecordingConfig != null) {
        return {
            s3RecordingConfig: _json(output.s3RecordingConfig),
        };
    }
    if (output.trackingConfig != null) {
        return {
            trackingConfig: _json(output.trackingConfig),
        };
    }
    if (output.uplinkEchoConfig != null) {
        return {
            uplinkEchoConfig: _json(output.uplinkEchoConfig),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ContactData = (output, context) => {
    return take(output, {
        contactId: __expectString,
        contactStatus: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        errorMessage: __expectString,
        groundStation: __expectString,
        maximumElevation: (_) => de_Elevation(_, context),
        missionProfileArn: __expectString,
        postPassEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        prePassStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        region: __expectString,
        satelliteArn: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        tags: _json,
    });
};
const de_ContactList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContactData(entry, context);
    });
    return retVal;
};
const de_Eirp = (output, context) => {
    return take(output, {
        units: __expectString,
        value: __limitedParseDouble,
    });
};
const de_Elevation = (output, context) => {
    return take(output, {
        unit: __expectString,
        value: __limitedParseDouble,
    });
};
const de_EphemeridesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EphemerisItem(entry, context);
    });
    return retVal;
};
const de_EphemerisItem = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        enabled: __expectBoolean,
        ephemerisId: __expectString,
        name: __expectString,
        priority: __expectInt32,
        sourceS3Object: _json,
        status: __expectString,
    });
};
const de_EphemerisMetaData = (output, context) => {
    return take(output, {
        ephemerisId: __expectString,
        epoch: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        source: __expectString,
    });
};
const de_Frequency = (output, context) => {
    return take(output, {
        units: __expectString,
        value: __limitedParseDouble,
    });
};
const de_FrequencyBandwidth = (output, context) => {
    return take(output, {
        units: __expectString,
        value: __limitedParseDouble,
    });
};
const de_SatelliteList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SatelliteListItem(entry, context);
    });
    return retVal;
};
const de_SatelliteListItem = (output, context) => {
    return take(output, {
        currentEphemeris: (_) => de_EphemerisMetaData(_, context),
        groundStations: _json,
        noradSatelliteID: __expectInt32,
        satelliteArn: __expectString,
        satelliteId: __expectString,
    });
};
const de_SpectrumConfig = (output, context) => {
    return take(output, {
        bandwidth: (_) => de_FrequencyBandwidth(_, context),
        centerFrequency: (_) => de_Frequency(_, context),
        polarization: __expectString,
    });
};
const de_UplinkSpectrumConfig = (output, context) => {
    return take(output, {
        centerFrequency: (_) => de_Frequency(_, context),
        polarization: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _mR = "maxResults";
const _nT = "nextToken";
const _sI = "satelliteId";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
