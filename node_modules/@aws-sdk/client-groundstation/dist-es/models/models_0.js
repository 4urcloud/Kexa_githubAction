import { GroundStationServiceException as __BaseException } from "./GroundStationServiceException";
export class DependencyException extends __BaseException {
    constructor(opts) {
        super({
            name: "DependencyException",
            $fault: "server",
            ...opts,
        });
        this.name = "DependencyException";
        this.$fault = "server";
        Object.setPrototypeOf(this, DependencyException.prototype);
        this.parameterName = opts.parameterName;
    }
}
export class InvalidParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.parameterName = opts.parameterName;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const AgentStatus = {
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
    SUCCESS: "SUCCESS",
};
export const AngleUnits = {
    DEGREE_ANGLE: "DEGREE_ANGLE",
    RADIAN: "RADIAN",
};
export const BandwidthUnits = {
    GHZ: "GHz",
    KHZ: "kHz",
    MHZ: "MHz",
};
export const FrequencyUnits = {
    GHZ: "GHz",
    KHZ: "kHz",
    MHZ: "MHz",
};
export const Polarization = {
    LEFT_HAND: "LEFT_HAND",
    NONE: "NONE",
    RIGHT_HAND: "RIGHT_HAND",
};
export const EirpUnits = {
    DBW: "dBW",
};
export const AuditResults = {
    HEALTHY: "HEALTHY",
    UNHEALTHY: "UNHEALTHY",
};
export const CapabilityHealth = {
    HEALTHY: "HEALTHY",
    UNHEALTHY: "UNHEALTHY",
};
export const CapabilityHealthReason = {
    DATAPLANE_FAILURE: "DATAPLANE_FAILURE",
    HEALTHY: "HEALTHY",
    INITIALIZING_DATAPLANE: "INITIALIZING_DATAPLANE",
    INVALID_IP_OWNERSHIP: "INVALID_IP_OWNERSHIP",
    NOT_AUTHORIZED_TO_CREATE_SLR: "NOT_AUTHORIZED_TO_CREATE_SLR",
    NO_REGISTERED_AGENT: "NO_REGISTERED_AGENT",
    UNVERIFIED_IP_OWNERSHIP: "UNVERIFIED_IP_OWNERSHIP",
};
export const ConfigCapabilityType = {
    ANTENNA_DOWNLINK: "antenna-downlink",
    ANTENNA_DOWNLINK_DEMOD_DECODE: "antenna-downlink-demod-decode",
    ANTENNA_UPLINK: "antenna-uplink",
    DATAFLOW_ENDPOINT: "dataflow-endpoint",
    S3_RECORDING: "s3-recording",
    TRACKING: "tracking",
    UPLINK_ECHO: "uplink-echo",
};
export const Criticality = {
    PREFERRED: "PREFERRED",
    REMOVED: "REMOVED",
    REQUIRED: "REQUIRED",
};
export var ConfigTypeData;
(function (ConfigTypeData) {
    ConfigTypeData.visit = (value, visitor) => {
        if (value.antennaDownlinkConfig !== undefined)
            return visitor.antennaDownlinkConfig(value.antennaDownlinkConfig);
        if (value.trackingConfig !== undefined)
            return visitor.trackingConfig(value.trackingConfig);
        if (value.dataflowEndpointConfig !== undefined)
            return visitor.dataflowEndpointConfig(value.dataflowEndpointConfig);
        if (value.antennaDownlinkDemodDecodeConfig !== undefined)
            return visitor.antennaDownlinkDemodDecodeConfig(value.antennaDownlinkDemodDecodeConfig);
        if (value.antennaUplinkConfig !== undefined)
            return visitor.antennaUplinkConfig(value.antennaUplinkConfig);
        if (value.uplinkEchoConfig !== undefined)
            return visitor.uplinkEchoConfig(value.uplinkEchoConfig);
        if (value.s3RecordingConfig !== undefined)
            return visitor.s3RecordingConfig(value.s3RecordingConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ConfigTypeData || (ConfigTypeData = {}));
export class ResourceLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);
        this.parameterName = opts.parameterName;
    }
}
export const EndpointStatus = {
    created: "created",
    creating: "creating",
    deleted: "deleted",
    deleting: "deleting",
    failed: "failed",
};
export var ConfigDetails;
(function (ConfigDetails) {
    ConfigDetails.visit = (value, visitor) => {
        if (value.endpointDetails !== undefined)
            return visitor.endpointDetails(value.endpointDetails);
        if (value.antennaDemodDecodeDetails !== undefined)
            return visitor.antennaDemodDecodeDetails(value.antennaDemodDecodeDetails);
        if (value.s3RecordingDetails !== undefined)
            return visitor.s3RecordingDetails(value.s3RecordingDetails);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ConfigDetails || (ConfigDetails = {}));
export const ContactStatus = {
    AVAILABLE: "AVAILABLE",
    AWS_CANCELLED: "AWS_CANCELLED",
    AWS_FAILED: "AWS_FAILED",
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    FAILED_TO_SCHEDULE: "FAILED_TO_SCHEDULE",
    PASS: "PASS",
    POSTPASS: "POSTPASS",
    PREPASS: "PREPASS",
    SCHEDULED: "SCHEDULED",
    SCHEDULING: "SCHEDULING",
};
export var EphemerisData;
(function (EphemerisData) {
    EphemerisData.visit = (value, visitor) => {
        if (value.tle !== undefined)
            return visitor.tle(value.tle);
        if (value.oem !== undefined)
            return visitor.oem(value.oem);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(EphemerisData || (EphemerisData = {}));
export var KmsKey;
(function (KmsKey) {
    KmsKey.visit = (value, visitor) => {
        if (value.kmsKeyArn !== undefined)
            return visitor.kmsKeyArn(value.kmsKeyArn);
        if (value.kmsAliasArn !== undefined)
            return visitor.kmsAliasArn(value.kmsAliasArn);
        if (value.kmsAliasName !== undefined)
            return visitor.kmsAliasName(value.kmsAliasName);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(KmsKey || (KmsKey = {}));
export const EphemerisInvalidReason = {
    KMS_KEY_INVALID: "KMS_KEY_INVALID",
    METADATA_INVALID: "METADATA_INVALID",
    TIME_RANGE_INVALID: "TIME_RANGE_INVALID",
    TRAJECTORY_INVALID: "TRAJECTORY_INVALID",
    VALIDATION_ERROR: "VALIDATION_ERROR",
};
export const EphemerisStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    ERROR: "ERROR",
    EXPIRED: "EXPIRED",
    INVALID: "INVALID",
    VALIDATING: "VALIDATING",
};
export var EphemerisTypeDescription;
(function (EphemerisTypeDescription) {
    EphemerisTypeDescription.visit = (value, visitor) => {
        if (value.tle !== undefined)
            return visitor.tle(value.tle);
        if (value.oem !== undefined)
            return visitor.oem(value.oem);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(EphemerisTypeDescription || (EphemerisTypeDescription = {}));
export const EphemerisSource = {
    CUSTOMER_PROVIDED: "CUSTOMER_PROVIDED",
    SPACE_TRACK: "SPACE_TRACK",
};
