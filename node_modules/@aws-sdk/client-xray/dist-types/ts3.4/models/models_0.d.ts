import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { XRayServiceException as __BaseException } from "./XRayServiceException";
export interface Alias {
  Name?: string;
  Names?: string[];
  Type?: string;
}
export type AnnotationValue =
  | AnnotationValue.BooleanValueMember
  | AnnotationValue.NumberValueMember
  | AnnotationValue.StringValueMember
  | AnnotationValue.$UnknownMember;
export declare namespace AnnotationValue {
  interface NumberValueMember {
    NumberValue: number;
    BooleanValue?: never;
    StringValue?: never;
    $unknown?: never;
  }
  interface BooleanValueMember {
    NumberValue?: never;
    BooleanValue: boolean;
    StringValue?: never;
    $unknown?: never;
  }
  interface StringValueMember {
    NumberValue?: never;
    BooleanValue?: never;
    StringValue: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    NumberValue?: never;
    BooleanValue?: never;
    StringValue?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    NumberValue: (value: number) => T;
    BooleanValue: (value: boolean) => T;
    StringValue: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: AnnotationValue, visitor: Visitor<T>) => T;
}
export interface ServiceId {
  Name?: string;
  Names?: string[];
  AccountId?: string;
  Type?: string;
}
export interface ValueWithServiceIds {
  AnnotationValue?: AnnotationValue;
  ServiceIds?: ServiceId[];
}
export interface AnomalousService {
  ServiceId?: ServiceId;
}
export interface AvailabilityZoneDetail {
  Name?: string;
}
export interface BatchGetTracesRequest {
  TraceIds: string[] | undefined;
  NextToken?: string;
}
export interface Segment {
  Id?: string;
  Document?: string;
}
export interface Trace {
  Id?: string;
  Duration?: number;
  LimitExceeded?: boolean;
  Segments?: Segment[];
}
export interface BatchGetTracesResult {
  Traces?: Trace[];
  UnprocessedTraceIds?: string[];
  NextToken?: string;
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export declare class ThrottledException extends __BaseException {
  readonly name: "ThrottledException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ThrottledException, __BaseException>);
}
export interface InsightsConfiguration {
  InsightsEnabled?: boolean;
  NotificationsEnabled?: boolean;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateGroupRequest {
  GroupName: string | undefined;
  FilterExpression?: string;
  InsightsConfiguration?: InsightsConfiguration;
  Tags?: Tag[];
}
export interface Group {
  GroupName?: string;
  GroupARN?: string;
  FilterExpression?: string;
  InsightsConfiguration?: InsightsConfiguration;
}
export interface CreateGroupResult {
  Group?: Group;
}
export interface SamplingRule {
  RuleName?: string;
  RuleARN?: string;
  ResourceARN: string | undefined;
  Priority: number | undefined;
  FixedRate: number | undefined;
  ReservoirSize: number | undefined;
  ServiceName: string | undefined;
  ServiceType: string | undefined;
  Host: string | undefined;
  HTTPMethod: string | undefined;
  URLPath: string | undefined;
  Version: number | undefined;
  Attributes?: Record<string, string>;
}
export interface CreateSamplingRuleRequest {
  SamplingRule: SamplingRule | undefined;
  Tags?: Tag[];
}
export interface SamplingRuleRecord {
  SamplingRule?: SamplingRule;
  CreatedAt?: Date;
  ModifiedAt?: Date;
}
export interface CreateSamplingRuleResult {
  SamplingRuleRecord?: SamplingRuleRecord;
}
export declare class RuleLimitExceededException extends __BaseException {
  readonly name: "RuleLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<RuleLimitExceededException, __BaseException>
  );
}
export interface DeleteGroupRequest {
  GroupName?: string;
  GroupARN?: string;
}
export interface DeleteGroupResult {}
export interface DeleteResourcePolicyRequest {
  PolicyName: string | undefined;
  PolicyRevisionId?: string;
}
export interface DeleteResourcePolicyResult {}
export declare class InvalidPolicyRevisionIdException extends __BaseException {
  readonly name: "InvalidPolicyRevisionIdException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      InvalidPolicyRevisionIdException,
      __BaseException
    >
  );
}
export interface DeleteSamplingRuleRequest {
  RuleName?: string;
  RuleARN?: string;
}
export interface DeleteSamplingRuleResult {
  SamplingRuleRecord?: SamplingRuleRecord;
}
export interface GetEncryptionConfigRequest {}
export declare const EncryptionStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly UPDATING: "UPDATING";
};
export type EncryptionStatus =
  (typeof EncryptionStatus)[keyof typeof EncryptionStatus];
export declare const EncryptionType: {
  readonly KMS: "KMS";
  readonly NONE: "NONE";
};
export type EncryptionType =
  (typeof EncryptionType)[keyof typeof EncryptionType];
export interface EncryptionConfig {
  KeyId?: string;
  Status?: EncryptionStatus;
  Type?: EncryptionType;
}
export interface GetEncryptionConfigResult {
  EncryptionConfig?: EncryptionConfig;
}
export interface GetGroupRequest {
  GroupName?: string;
  GroupARN?: string;
}
export interface GetGroupResult {
  Group?: Group;
}
export interface GetGroupsRequest {
  NextToken?: string;
}
export interface GroupSummary {
  GroupName?: string;
  GroupARN?: string;
  FilterExpression?: string;
  InsightsConfiguration?: InsightsConfiguration;
}
export interface GetGroupsResult {
  Groups?: GroupSummary[];
  NextToken?: string;
}
export interface GetInsightRequest {
  InsightId: string | undefined;
}
export declare const InsightCategory: {
  readonly FAULT: "FAULT";
};
export type InsightCategory =
  (typeof InsightCategory)[keyof typeof InsightCategory];
export interface RequestImpactStatistics {
  FaultCount?: number;
  OkCount?: number;
  TotalCount?: number;
}
export declare const InsightState: {
  readonly ACTIVE: "ACTIVE";
  readonly CLOSED: "CLOSED";
};
export type InsightState = (typeof InsightState)[keyof typeof InsightState];
export interface Insight {
  InsightId?: string;
  GroupARN?: string;
  GroupName?: string;
  RootCauseServiceId?: ServiceId;
  Categories?: InsightCategory[];
  State?: InsightState;
  StartTime?: Date;
  EndTime?: Date;
  Summary?: string;
  ClientRequestImpactStatistics?: RequestImpactStatistics;
  RootCauseServiceRequestImpactStatistics?: RequestImpactStatistics;
  TopAnomalousServices?: AnomalousService[];
}
export interface GetInsightResult {
  Insight?: Insight;
}
export interface GetInsightEventsRequest {
  InsightId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface InsightEvent {
  Summary?: string;
  EventTime?: Date;
  ClientRequestImpactStatistics?: RequestImpactStatistics;
  RootCauseServiceRequestImpactStatistics?: RequestImpactStatistics;
  TopAnomalousServices?: AnomalousService[];
}
export interface GetInsightEventsResult {
  InsightEvents?: InsightEvent[];
  NextToken?: string;
}
export interface GetInsightImpactGraphRequest {
  InsightId: string | undefined;
  StartTime: Date | undefined;
  EndTime: Date | undefined;
  NextToken?: string;
}
export interface InsightImpactGraphEdge {
  ReferenceId?: number;
}
export interface InsightImpactGraphService {
  ReferenceId?: number;
  Type?: string;
  Name?: string;
  Names?: string[];
  AccountId?: string;
  Edges?: InsightImpactGraphEdge[];
}
export interface GetInsightImpactGraphResult {
  InsightId?: string;
  StartTime?: Date;
  EndTime?: Date;
  ServiceGraphStartTime?: Date;
  ServiceGraphEndTime?: Date;
  Services?: InsightImpactGraphService[];
  NextToken?: string;
}
export interface GetInsightSummariesRequest {
  States?: InsightState[];
  GroupARN?: string;
  GroupName?: string;
  StartTime: Date | undefined;
  EndTime: Date | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface InsightSummary {
  InsightId?: string;
  GroupARN?: string;
  GroupName?: string;
  RootCauseServiceId?: ServiceId;
  Categories?: InsightCategory[];
  State?: InsightState;
  StartTime?: Date;
  EndTime?: Date;
  Summary?: string;
  ClientRequestImpactStatistics?: RequestImpactStatistics;
  RootCauseServiceRequestImpactStatistics?: RequestImpactStatistics;
  TopAnomalousServices?: AnomalousService[];
  LastUpdateTime?: Date;
}
export interface GetInsightSummariesResult {
  InsightSummaries?: InsightSummary[];
  NextToken?: string;
}
export interface GetSamplingRulesRequest {
  NextToken?: string;
}
export interface GetSamplingRulesResult {
  SamplingRuleRecords?: SamplingRuleRecord[];
  NextToken?: string;
}
export interface GetSamplingStatisticSummariesRequest {
  NextToken?: string;
}
export interface SamplingStatisticSummary {
  RuleName?: string;
  Timestamp?: Date;
  RequestCount?: number;
  BorrowCount?: number;
  SampledCount?: number;
}
export interface GetSamplingStatisticSummariesResult {
  SamplingStatisticSummaries?: SamplingStatisticSummary[];
  NextToken?: string;
}
export interface SamplingStatisticsDocument {
  RuleName: string | undefined;
  ClientID: string | undefined;
  Timestamp: Date | undefined;
  RequestCount: number | undefined;
  SampledCount: number | undefined;
  BorrowCount?: number;
}
export interface GetSamplingTargetsRequest {
  SamplingStatisticsDocuments: SamplingStatisticsDocument[] | undefined;
}
export interface SamplingTargetDocument {
  RuleName?: string;
  FixedRate?: number;
  ReservoirQuota?: number;
  ReservoirQuotaTTL?: Date;
  Interval?: number;
}
export interface UnprocessedStatistics {
  RuleName?: string;
  ErrorCode?: string;
  Message?: string;
}
export interface GetSamplingTargetsResult {
  SamplingTargetDocuments?: SamplingTargetDocument[];
  LastRuleModification?: Date;
  UnprocessedStatistics?: UnprocessedStatistics[];
}
export interface GetServiceGraphRequest {
  StartTime: Date | undefined;
  EndTime: Date | undefined;
  GroupName?: string;
  GroupARN?: string;
  NextToken?: string;
}
export interface HistogramEntry {
  Value?: number;
  Count?: number;
}
export interface ErrorStatistics {
  ThrottleCount?: number;
  OtherCount?: number;
  TotalCount?: number;
}
export interface FaultStatistics {
  OtherCount?: number;
  TotalCount?: number;
}
export interface EdgeStatistics {
  OkCount?: number;
  ErrorStatistics?: ErrorStatistics;
  FaultStatistics?: FaultStatistics;
  TotalCount?: number;
  TotalResponseTime?: number;
}
export interface Edge {
  ReferenceId?: number;
  StartTime?: Date;
  EndTime?: Date;
  SummaryStatistics?: EdgeStatistics;
  ResponseTimeHistogram?: HistogramEntry[];
  Aliases?: Alias[];
  EdgeType?: string;
  ReceivedEventAgeHistogram?: HistogramEntry[];
}
export interface ServiceStatistics {
  OkCount?: number;
  ErrorStatistics?: ErrorStatistics;
  FaultStatistics?: FaultStatistics;
  TotalCount?: number;
  TotalResponseTime?: number;
}
export interface Service {
  ReferenceId?: number;
  Name?: string;
  Names?: string[];
  Root?: boolean;
  AccountId?: string;
  Type?: string;
  State?: string;
  StartTime?: Date;
  EndTime?: Date;
  Edges?: Edge[];
  SummaryStatistics?: ServiceStatistics;
  DurationHistogram?: HistogramEntry[];
  ResponseTimeHistogram?: HistogramEntry[];
}
export interface GetServiceGraphResult {
  StartTime?: Date;
  EndTime?: Date;
  Services?: Service[];
  ContainsOldGroupVersions?: boolean;
  NextToken?: string;
}
export interface GetTimeSeriesServiceStatisticsRequest {
  StartTime: Date | undefined;
  EndTime: Date | undefined;
  GroupName?: string;
  GroupARN?: string;
  EntitySelectorExpression?: string;
  Period?: number;
  ForecastStatistics?: boolean;
  NextToken?: string;
}
export interface ForecastStatistics {
  FaultCountHigh?: number;
  FaultCountLow?: number;
}
export interface TimeSeriesServiceStatistics {
  Timestamp?: Date;
  EdgeSummaryStatistics?: EdgeStatistics;
  ServiceSummaryStatistics?: ServiceStatistics;
  ServiceForecastStatistics?: ForecastStatistics;
  ResponseTimeHistogram?: HistogramEntry[];
}
export interface GetTimeSeriesServiceStatisticsResult {
  TimeSeriesServiceStatistics?: TimeSeriesServiceStatistics[];
  ContainsOldGroupVersions?: boolean;
  NextToken?: string;
}
export interface GetTraceGraphRequest {
  TraceIds: string[] | undefined;
  NextToken?: string;
}
export interface GetTraceGraphResult {
  Services?: Service[];
  NextToken?: string;
}
export declare const SamplingStrategyName: {
  readonly FixedRate: "FixedRate";
  readonly PartialScan: "PartialScan";
};
export type SamplingStrategyName =
  (typeof SamplingStrategyName)[keyof typeof SamplingStrategyName];
export interface SamplingStrategy {
  Name?: SamplingStrategyName;
  Value?: number;
}
export declare const TimeRangeType: {
  readonly Event: "Event";
  readonly Service: "Service";
  readonly TraceId: "TraceId";
};
export type TimeRangeType = (typeof TimeRangeType)[keyof typeof TimeRangeType];
export interface GetTraceSummariesRequest {
  StartTime: Date | undefined;
  EndTime: Date | undefined;
  TimeRangeType?: TimeRangeType;
  Sampling?: boolean;
  SamplingStrategy?: SamplingStrategy;
  FilterExpression?: string;
  NextToken?: string;
}
export interface RootCauseException {
  Name?: string;
  Message?: string;
}
export interface ErrorRootCauseEntity {
  Name?: string;
  Exceptions?: RootCauseException[];
  Remote?: boolean;
}
export interface ErrorRootCauseService {
  Name?: string;
  Names?: string[];
  Type?: string;
  AccountId?: string;
  EntityPath?: ErrorRootCauseEntity[];
  Inferred?: boolean;
}
export interface ErrorRootCause {
  Services?: ErrorRootCauseService[];
  ClientImpacting?: boolean;
}
export interface FaultRootCauseEntity {
  Name?: string;
  Exceptions?: RootCauseException[];
  Remote?: boolean;
}
export interface FaultRootCauseService {
  Name?: string;
  Names?: string[];
  Type?: string;
  AccountId?: string;
  EntityPath?: FaultRootCauseEntity[];
  Inferred?: boolean;
}
export interface FaultRootCause {
  Services?: FaultRootCauseService[];
  ClientImpacting?: boolean;
}
export interface Http {
  HttpURL?: string;
  HttpStatus?: number;
  HttpMethod?: string;
  UserAgent?: string;
  ClientIp?: string;
}
export interface InstanceIdDetail {
  Id?: string;
}
export interface ResourceARNDetail {
  ARN?: string;
}
export interface ResponseTimeRootCauseEntity {
  Name?: string;
  Coverage?: number;
  Remote?: boolean;
}
export interface ResponseTimeRootCauseService {
  Name?: string;
  Names?: string[];
  Type?: string;
  AccountId?: string;
  EntityPath?: ResponseTimeRootCauseEntity[];
  Inferred?: boolean;
}
export interface ResponseTimeRootCause {
  Services?: ResponseTimeRootCauseService[];
  ClientImpacting?: boolean;
}
export interface TraceUser {
  UserName?: string;
  ServiceIds?: ServiceId[];
}
export interface TraceSummary {
  Id?: string;
  StartTime?: Date;
  Duration?: number;
  ResponseTime?: number;
  HasFault?: boolean;
  HasError?: boolean;
  HasThrottle?: boolean;
  IsPartial?: boolean;
  Http?: Http;
  Annotations?: Record<string, ValueWithServiceIds[]>;
  Users?: TraceUser[];
  ServiceIds?: ServiceId[];
  ResourceARNs?: ResourceARNDetail[];
  InstanceIds?: InstanceIdDetail[];
  AvailabilityZones?: AvailabilityZoneDetail[];
  EntryPoint?: ServiceId;
  FaultRootCauses?: FaultRootCause[];
  ErrorRootCauses?: ErrorRootCause[];
  ResponseTimeRootCauses?: ResponseTimeRootCause[];
  Revision?: number;
  MatchedEventTime?: Date;
}
export interface GetTraceSummariesResult {
  TraceSummaries?: TraceSummary[];
  ApproximateTime?: Date;
  TracesProcessedCount?: number;
  NextToken?: string;
}
export interface ListResourcePoliciesRequest {
  NextToken?: string;
}
export interface ResourcePolicy {
  PolicyName?: string;
  PolicyDocument?: string;
  PolicyRevisionId?: string;
  LastUpdatedTime?: Date;
}
export interface ListResourcePoliciesResult {
  ResourcePolicies?: ResourcePolicy[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceARN: string | undefined;
  NextToken?: string;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
  NextToken?: string;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  ResourceName?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface PutEncryptionConfigRequest {
  KeyId?: string;
  Type: EncryptionType | undefined;
}
export interface PutEncryptionConfigResult {
  EncryptionConfig?: EncryptionConfig;
}
export declare class LockoutPreventionException extends __BaseException {
  readonly name: "LockoutPreventionException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LockoutPreventionException, __BaseException>
  );
}
export declare class MalformedPolicyDocumentException extends __BaseException {
  readonly name: "MalformedPolicyDocumentException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      MalformedPolicyDocumentException,
      __BaseException
    >
  );
}
export declare class PolicyCountLimitExceededException extends __BaseException {
  readonly name: "PolicyCountLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      PolicyCountLimitExceededException,
      __BaseException
    >
  );
}
export declare class PolicySizeLimitExceededException extends __BaseException {
  readonly name: "PolicySizeLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      PolicySizeLimitExceededException,
      __BaseException
    >
  );
}
export interface PutResourcePolicyRequest {
  PolicyName: string | undefined;
  PolicyDocument: string | undefined;
  PolicyRevisionId?: string;
  BypassPolicyLockoutCheck?: boolean;
}
export interface PutResourcePolicyResult {
  ResourcePolicy?: ResourcePolicy;
}
export interface BackendConnectionErrors {
  TimeoutCount?: number;
  ConnectionRefusedCount?: number;
  HTTPCode4XXCount?: number;
  HTTPCode5XXCount?: number;
  UnknownHostCount?: number;
  OtherCount?: number;
}
export interface TelemetryRecord {
  Timestamp: Date | undefined;
  SegmentsReceivedCount?: number;
  SegmentsSentCount?: number;
  SegmentsSpilloverCount?: number;
  SegmentsRejectedCount?: number;
  BackendConnectionErrors?: BackendConnectionErrors;
}
export interface PutTelemetryRecordsRequest {
  TelemetryRecords: TelemetryRecord[] | undefined;
  EC2InstanceId?: string;
  Hostname?: string;
  ResourceARN?: string;
}
export interface PutTelemetryRecordsResult {}
export interface PutTraceSegmentsRequest {
  TraceSegmentDocuments: string[] | undefined;
}
export interface UnprocessedTraceSegment {
  Id?: string;
  ErrorCode?: string;
  Message?: string;
}
export interface PutTraceSegmentsResult {
  UnprocessedTraceSegments?: UnprocessedTraceSegment[];
}
export interface TagResourceRequest {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  Message?: string;
  ResourceName?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface UntagResourceRequest {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateGroupRequest {
  GroupName?: string;
  GroupARN?: string;
  FilterExpression?: string;
  InsightsConfiguration?: InsightsConfiguration;
}
export interface UpdateGroupResult {
  Group?: Group;
}
export interface SamplingRuleUpdate {
  RuleName?: string;
  RuleARN?: string;
  ResourceARN?: string;
  Priority?: number;
  FixedRate?: number;
  ReservoirSize?: number;
  Host?: string;
  ServiceName?: string;
  ServiceType?: string;
  HTTPMethod?: string;
  URLPath?: string;
  Attributes?: Record<string, string>;
}
export interface UpdateSamplingRuleRequest {
  SamplingRuleUpdate: SamplingRuleUpdate | undefined;
}
export interface UpdateSamplingRuleResult {
  SamplingRuleRecord?: SamplingRuleRecord;
}
