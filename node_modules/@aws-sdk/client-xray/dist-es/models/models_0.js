import { XRayServiceException as __BaseException } from "./XRayServiceException";
export var AnnotationValue;
(function (AnnotationValue) {
    AnnotationValue.visit = (value, visitor) => {
        if (value.NumberValue !== undefined)
            return visitor.NumberValue(value.NumberValue);
        if (value.BooleanValue !== undefined)
            return visitor.BooleanValue(value.BooleanValue);
        if (value.StringValue !== undefined)
            return visitor.StringValue(value.StringValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AnnotationValue || (AnnotationValue = {}));
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottledException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottledException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottledException.prototype);
        this.Message = opts.Message;
    }
}
export class RuleLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "RuleLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "RuleLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RuleLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidPolicyRevisionIdException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidPolicyRevisionIdException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPolicyRevisionIdException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyRevisionIdException.prototype);
        this.Message = opts.Message;
    }
}
export const EncryptionStatus = {
    ACTIVE: "ACTIVE",
    UPDATING: "UPDATING",
};
export const EncryptionType = {
    KMS: "KMS",
    NONE: "NONE",
};
export const InsightCategory = {
    FAULT: "FAULT",
};
export const InsightState = {
    ACTIVE: "ACTIVE",
    CLOSED: "CLOSED",
};
export const SamplingStrategyName = {
    FixedRate: "FixedRate",
    PartialScan: "PartialScan",
};
export const TimeRangeType = {
    Event: "Event",
    Service: "Service",
    TraceId: "TraceId",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
export class LockoutPreventionException extends __BaseException {
    constructor(opts) {
        super({
            name: "LockoutPreventionException",
            $fault: "client",
            ...opts,
        });
        this.name = "LockoutPreventionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LockoutPreventionException.prototype);
        this.Message = opts.Message;
    }
}
export class MalformedPolicyDocumentException extends __BaseException {
    constructor(opts) {
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
        this.Message = opts.Message;
    }
}
export class PolicyCountLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "PolicyCountLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyCountLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyCountLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class PolicySizeLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "PolicySizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicySizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicySizeLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
