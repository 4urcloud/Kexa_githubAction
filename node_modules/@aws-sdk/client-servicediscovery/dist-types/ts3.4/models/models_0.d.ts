import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ServiceDiscoveryServiceException as __BaseException } from "./ServiceDiscoveryServiceException";
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateHttpNamespaceRequest {
  Name: string | undefined;
  CreatorRequestId?: string;
  Description?: string;
  Tags?: Tag[];
}
export interface CreateHttpNamespaceResponse {
  OperationId?: string;
}
export declare class DuplicateRequest extends __BaseException {
  readonly name: "DuplicateRequest";
  readonly $fault: "client";
  Message?: string;
  DuplicateOperationId?: string;
  constructor(opts: __ExceptionOptionType<DuplicateRequest, __BaseException>);
}
export declare class InvalidInput extends __BaseException {
  readonly name: "InvalidInput";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<InvalidInput, __BaseException>);
}
export declare class NamespaceAlreadyExists extends __BaseException {
  readonly name: "NamespaceAlreadyExists";
  readonly $fault: "client";
  Message?: string;
  CreatorRequestId?: string;
  NamespaceId?: string;
  constructor(
    opts: __ExceptionOptionType<NamespaceAlreadyExists, __BaseException>
  );
}
export declare class ResourceLimitExceeded extends __BaseException {
  readonly name: "ResourceLimitExceeded";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceLimitExceeded, __BaseException>
  );
}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  Message?: string;
  ResourceName?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface SOA {
  TTL: number | undefined;
}
export interface PrivateDnsPropertiesMutable {
  SOA: SOA | undefined;
}
export interface PrivateDnsNamespaceProperties {
  DnsProperties: PrivateDnsPropertiesMutable | undefined;
}
export interface CreatePrivateDnsNamespaceRequest {
  Name: string | undefined;
  CreatorRequestId?: string;
  Description?: string;
  Vpc: string | undefined;
  Tags?: Tag[];
  Properties?: PrivateDnsNamespaceProperties;
}
export interface CreatePrivateDnsNamespaceResponse {
  OperationId?: string;
}
export interface PublicDnsPropertiesMutable {
  SOA: SOA | undefined;
}
export interface PublicDnsNamespaceProperties {
  DnsProperties: PublicDnsPropertiesMutable | undefined;
}
export interface CreatePublicDnsNamespaceRequest {
  Name: string | undefined;
  CreatorRequestId?: string;
  Description?: string;
  Tags?: Tag[];
  Properties?: PublicDnsNamespaceProperties;
}
export interface CreatePublicDnsNamespaceResponse {
  OperationId?: string;
}
export declare const RecordType: {
  readonly A: "A";
  readonly AAAA: "AAAA";
  readonly CNAME: "CNAME";
  readonly SRV: "SRV";
};
export type RecordType = (typeof RecordType)[keyof typeof RecordType];
export interface DnsRecord {
  Type: RecordType | undefined;
  TTL: number | undefined;
}
export declare const RoutingPolicy: {
  readonly MULTIVALUE: "MULTIVALUE";
  readonly WEIGHTED: "WEIGHTED";
};
export type RoutingPolicy = (typeof RoutingPolicy)[keyof typeof RoutingPolicy];
export interface DnsConfig {
  NamespaceId?: string;
  RoutingPolicy?: RoutingPolicy;
  DnsRecords: DnsRecord[] | undefined;
}
export declare const HealthCheckType: {
  readonly HTTP: "HTTP";
  readonly HTTPS: "HTTPS";
  readonly TCP: "TCP";
};
export type HealthCheckType =
  (typeof HealthCheckType)[keyof typeof HealthCheckType];
export interface HealthCheckConfig {
  Type: HealthCheckType | undefined;
  ResourcePath?: string;
  FailureThreshold?: number;
}
export interface HealthCheckCustomConfig {
  FailureThreshold?: number;
}
export declare const ServiceTypeOption: {
  readonly HTTP: "HTTP";
};
export type ServiceTypeOption =
  (typeof ServiceTypeOption)[keyof typeof ServiceTypeOption];
export interface CreateServiceRequest {
  Name: string | undefined;
  NamespaceId?: string;
  CreatorRequestId?: string;
  Description?: string;
  DnsConfig?: DnsConfig;
  HealthCheckConfig?: HealthCheckConfig;
  HealthCheckCustomConfig?: HealthCheckCustomConfig;
  Tags?: Tag[];
  Type?: ServiceTypeOption;
}
export declare const ServiceType: {
  readonly DNS: "DNS";
  readonly DNS_HTTP: "DNS_HTTP";
  readonly HTTP: "HTTP";
};
export type ServiceType = (typeof ServiceType)[keyof typeof ServiceType];
export interface Service {
  Id?: string;
  Arn?: string;
  Name?: string;
  NamespaceId?: string;
  Description?: string;
  InstanceCount?: number;
  DnsConfig?: DnsConfig;
  Type?: ServiceType;
  HealthCheckConfig?: HealthCheckConfig;
  HealthCheckCustomConfig?: HealthCheckCustomConfig;
  CreateDate?: Date;
  CreatorRequestId?: string;
}
export interface CreateServiceResponse {
  Service?: Service;
}
export declare class NamespaceNotFound extends __BaseException {
  readonly name: "NamespaceNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NamespaceNotFound, __BaseException>);
}
export declare class ServiceAlreadyExists extends __BaseException {
  readonly name: "ServiceAlreadyExists";
  readonly $fault: "client";
  Message?: string;
  CreatorRequestId?: string;
  ServiceId?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceAlreadyExists, __BaseException>
  );
}
export declare class CustomHealthNotFound extends __BaseException {
  readonly name: "CustomHealthNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<CustomHealthNotFound, __BaseException>
  );
}
export declare const CustomHealthStatus: {
  readonly HEALTHY: "HEALTHY";
  readonly UNHEALTHY: "UNHEALTHY";
};
export type CustomHealthStatus =
  (typeof CustomHealthStatus)[keyof typeof CustomHealthStatus];
export interface DeleteNamespaceRequest {
  Id: string | undefined;
}
export interface DeleteNamespaceResponse {
  OperationId?: string;
}
export declare class ResourceInUse extends __BaseException {
  readonly name: "ResourceInUse";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ResourceInUse, __BaseException>);
}
export interface DeleteServiceRequest {
  Id: string | undefined;
}
export interface DeleteServiceResponse {}
export declare class ServiceNotFound extends __BaseException {
  readonly name: "ServiceNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ServiceNotFound, __BaseException>);
}
export interface DeregisterInstanceRequest {
  ServiceId: string | undefined;
  InstanceId: string | undefined;
}
export interface DeregisterInstanceResponse {
  OperationId?: string;
}
export declare class InstanceNotFound extends __BaseException {
  readonly name: "InstanceNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<InstanceNotFound, __BaseException>);
}
export declare const HealthStatusFilter: {
  readonly ALL: "ALL";
  readonly HEALTHY: "HEALTHY";
  readonly HEALTHY_OR_ELSE_ALL: "HEALTHY_OR_ELSE_ALL";
  readonly UNHEALTHY: "UNHEALTHY";
};
export type HealthStatusFilter =
  (typeof HealthStatusFilter)[keyof typeof HealthStatusFilter];
export interface DiscoverInstancesRequest {
  NamespaceName: string | undefined;
  ServiceName: string | undefined;
  MaxResults?: number;
  QueryParameters?: Record<string, string>;
  OptionalParameters?: Record<string, string>;
  HealthStatus?: HealthStatusFilter;
}
export declare const HealthStatus: {
  readonly HEALTHY: "HEALTHY";
  readonly UNHEALTHY: "UNHEALTHY";
  readonly UNKNOWN: "UNKNOWN";
};
export type HealthStatus = (typeof HealthStatus)[keyof typeof HealthStatus];
export interface HttpInstanceSummary {
  InstanceId?: string;
  NamespaceName?: string;
  ServiceName?: string;
  HealthStatus?: HealthStatus;
  Attributes?: Record<string, string>;
}
export interface DiscoverInstancesResponse {
  Instances?: HttpInstanceSummary[];
  InstancesRevision?: number;
}
export declare class RequestLimitExceeded extends __BaseException {
  readonly name: "RequestLimitExceeded";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<RequestLimitExceeded, __BaseException>
  );
}
export interface DiscoverInstancesRevisionRequest {
  NamespaceName: string | undefined;
  ServiceName: string | undefined;
}
export interface DiscoverInstancesRevisionResponse {
  InstancesRevision?: number;
}
export interface DnsConfigChange {
  DnsRecords: DnsRecord[] | undefined;
}
export interface DnsProperties {
  HostedZoneId?: string;
  SOA?: SOA;
}
export declare const FilterCondition: {
  readonly BEGINS_WITH: "BEGINS_WITH";
  readonly BETWEEN: "BETWEEN";
  readonly EQ: "EQ";
  readonly IN: "IN";
};
export type FilterCondition =
  (typeof FilterCondition)[keyof typeof FilterCondition];
export interface GetInstanceRequest {
  ServiceId: string | undefined;
  InstanceId: string | undefined;
}
export interface Instance {
  Id: string | undefined;
  CreatorRequestId?: string;
  Attributes?: Record<string, string>;
}
export interface GetInstanceResponse {
  Instance?: Instance;
}
export interface GetInstancesHealthStatusRequest {
  ServiceId: string | undefined;
  Instances?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface GetInstancesHealthStatusResponse {
  Status?: Record<string, HealthStatus>;
  NextToken?: string;
}
export interface GetNamespaceRequest {
  Id: string | undefined;
}
export interface HttpProperties {
  HttpName?: string;
}
export interface NamespaceProperties {
  DnsProperties?: DnsProperties;
  HttpProperties?: HttpProperties;
}
export declare const NamespaceType: {
  readonly DNS_PRIVATE: "DNS_PRIVATE";
  readonly DNS_PUBLIC: "DNS_PUBLIC";
  readonly HTTP: "HTTP";
};
export type NamespaceType = (typeof NamespaceType)[keyof typeof NamespaceType];
export interface Namespace {
  Id?: string;
  Arn?: string;
  Name?: string;
  Type?: NamespaceType;
  Description?: string;
  ServiceCount?: number;
  Properties?: NamespaceProperties;
  CreateDate?: Date;
  CreatorRequestId?: string;
}
export interface GetNamespaceResponse {
  Namespace?: Namespace;
}
export interface GetOperationRequest {
  OperationId: string | undefined;
}
export declare const OperationStatus: {
  readonly FAIL: "FAIL";
  readonly PENDING: "PENDING";
  readonly SUBMITTED: "SUBMITTED";
  readonly SUCCESS: "SUCCESS";
};
export type OperationStatus =
  (typeof OperationStatus)[keyof typeof OperationStatus];
export declare const OperationTargetType: {
  readonly INSTANCE: "INSTANCE";
  readonly NAMESPACE: "NAMESPACE";
  readonly SERVICE: "SERVICE";
};
export type OperationTargetType =
  (typeof OperationTargetType)[keyof typeof OperationTargetType];
export declare const OperationType: {
  readonly CREATE_NAMESPACE: "CREATE_NAMESPACE";
  readonly DELETE_NAMESPACE: "DELETE_NAMESPACE";
  readonly DEREGISTER_INSTANCE: "DEREGISTER_INSTANCE";
  readonly REGISTER_INSTANCE: "REGISTER_INSTANCE";
  readonly UPDATE_NAMESPACE: "UPDATE_NAMESPACE";
  readonly UPDATE_SERVICE: "UPDATE_SERVICE";
};
export type OperationType = (typeof OperationType)[keyof typeof OperationType];
export interface Operation {
  Id?: string;
  Type?: OperationType;
  Status?: OperationStatus;
  ErrorMessage?: string;
  ErrorCode?: string;
  CreateDate?: Date;
  UpdateDate?: Date;
  Targets?: Partial<Record<OperationTargetType, string>>;
}
export interface GetOperationResponse {
  Operation?: Operation;
}
export declare class OperationNotFound extends __BaseException {
  readonly name: "OperationNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<OperationNotFound, __BaseException>);
}
export interface GetServiceRequest {
  Id: string | undefined;
}
export interface GetServiceResponse {
  Service?: Service;
}
export interface HttpNamespaceChange {
  Description: string | undefined;
}
export interface InstanceSummary {
  Id?: string;
  Attributes?: Record<string, string>;
}
export interface ListInstancesRequest {
  ServiceId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListInstancesResponse {
  Instances?: InstanceSummary[];
  NextToken?: string;
}
export declare const NamespaceFilterName: {
  readonly HTTP_NAME: "HTTP_NAME";
  readonly NAME: "NAME";
  readonly TYPE: "TYPE";
};
export type NamespaceFilterName =
  (typeof NamespaceFilterName)[keyof typeof NamespaceFilterName];
export interface NamespaceFilter {
  Name: NamespaceFilterName | undefined;
  Values: string[] | undefined;
  Condition?: FilterCondition;
}
export interface ListNamespacesRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: NamespaceFilter[];
}
export interface NamespaceSummary {
  Id?: string;
  Arn?: string;
  Name?: string;
  Type?: NamespaceType;
  Description?: string;
  ServiceCount?: number;
  Properties?: NamespaceProperties;
  CreateDate?: Date;
}
export interface ListNamespacesResponse {
  Namespaces?: NamespaceSummary[];
  NextToken?: string;
}
export declare const OperationFilterName: {
  readonly NAMESPACE_ID: "NAMESPACE_ID";
  readonly SERVICE_ID: "SERVICE_ID";
  readonly STATUS: "STATUS";
  readonly TYPE: "TYPE";
  readonly UPDATE_DATE: "UPDATE_DATE";
};
export type OperationFilterName =
  (typeof OperationFilterName)[keyof typeof OperationFilterName];
export interface OperationFilter {
  Name: OperationFilterName | undefined;
  Values: string[] | undefined;
  Condition?: FilterCondition;
}
export interface ListOperationsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: OperationFilter[];
}
export interface OperationSummary {
  Id?: string;
  Status?: OperationStatus;
}
export interface ListOperationsResponse {
  Operations?: OperationSummary[];
  NextToken?: string;
}
export declare const ServiceFilterName: {
  readonly NAMESPACE_ID: "NAMESPACE_ID";
};
export type ServiceFilterName =
  (typeof ServiceFilterName)[keyof typeof ServiceFilterName];
export interface ServiceFilter {
  Name: ServiceFilterName | undefined;
  Values: string[] | undefined;
  Condition?: FilterCondition;
}
export interface ListServicesRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: ServiceFilter[];
}
export interface ServiceSummary {
  Id?: string;
  Arn?: string;
  Name?: string;
  Type?: ServiceType;
  Description?: string;
  InstanceCount?: number;
  DnsConfig?: DnsConfig;
  HealthCheckConfig?: HealthCheckConfig;
  HealthCheckCustomConfig?: HealthCheckCustomConfig;
  CreateDate?: Date;
}
export interface ListServicesResponse {
  Services?: ServiceSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceARN: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface SOAChange {
  TTL: number | undefined;
}
export interface PrivateDnsPropertiesMutableChange {
  SOA: SOAChange | undefined;
}
export interface PrivateDnsNamespacePropertiesChange {
  DnsProperties: PrivateDnsPropertiesMutableChange | undefined;
}
export interface PrivateDnsNamespaceChange {
  Description?: string;
  Properties?: PrivateDnsNamespacePropertiesChange;
}
export interface PublicDnsPropertiesMutableChange {
  SOA: SOAChange | undefined;
}
export interface PublicDnsNamespacePropertiesChange {
  DnsProperties: PublicDnsPropertiesMutableChange | undefined;
}
export interface PublicDnsNamespaceChange {
  Description?: string;
  Properties?: PublicDnsNamespacePropertiesChange;
}
export interface RegisterInstanceRequest {
  ServiceId: string | undefined;
  InstanceId: string | undefined;
  CreatorRequestId?: string;
  Attributes: Record<string, string> | undefined;
}
export interface RegisterInstanceResponse {
  OperationId?: string;
}
export interface TagResourceRequest {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateHttpNamespaceRequest {
  Id: string | undefined;
  UpdaterRequestId?: string;
  Namespace: HttpNamespaceChange | undefined;
}
export interface UpdateHttpNamespaceResponse {
  OperationId?: string;
}
export interface UpdateInstanceCustomHealthStatusRequest {
  ServiceId: string | undefined;
  InstanceId: string | undefined;
  Status: CustomHealthStatus | undefined;
}
export interface UpdatePrivateDnsNamespaceRequest {
  Id: string | undefined;
  UpdaterRequestId?: string;
  Namespace: PrivateDnsNamespaceChange | undefined;
}
export interface UpdatePrivateDnsNamespaceResponse {
  OperationId?: string;
}
export interface UpdatePublicDnsNamespaceRequest {
  Id: string | undefined;
  UpdaterRequestId?: string;
  Namespace: PublicDnsNamespaceChange | undefined;
}
export interface UpdatePublicDnsNamespaceResponse {
  OperationId?: string;
}
export interface ServiceChange {
  Description?: string;
  DnsConfig?: DnsConfigChange;
  HealthCheckConfig?: HealthCheckConfig;
}
export interface UpdateServiceRequest {
  Id: string | undefined;
  Service: ServiceChange | undefined;
}
export interface UpdateServiceResponse {
  OperationId?: string;
}
