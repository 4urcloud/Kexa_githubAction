import { ServiceDiscoveryServiceException as __BaseException } from "./ServiceDiscoveryServiceException";
export class DuplicateRequest extends __BaseException {
    constructor(opts) {
        super({
            name: "DuplicateRequest",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateRequest";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateRequest.prototype);
        this.Message = opts.Message;
        this.DuplicateOperationId = opts.DuplicateOperationId;
    }
}
export class InvalidInput extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInput",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInput";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInput.prototype);
        this.Message = opts.Message;
    }
}
export class NamespaceAlreadyExists extends __BaseException {
    constructor(opts) {
        super({
            name: "NamespaceAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "NamespaceAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, NamespaceAlreadyExists.prototype);
        this.Message = opts.Message;
        this.CreatorRequestId = opts.CreatorRequestId;
        this.NamespaceId = opts.NamespaceId;
    }
}
export class ResourceLimitExceeded extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceLimitExceeded",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceLimitExceeded.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
export const RecordType = {
    A: "A",
    AAAA: "AAAA",
    CNAME: "CNAME",
    SRV: "SRV",
};
export const RoutingPolicy = {
    MULTIVALUE: "MULTIVALUE",
    WEIGHTED: "WEIGHTED",
};
export const HealthCheckType = {
    HTTP: "HTTP",
    HTTPS: "HTTPS",
    TCP: "TCP",
};
export const ServiceTypeOption = {
    HTTP: "HTTP",
};
export const ServiceType = {
    DNS: "DNS",
    DNS_HTTP: "DNS_HTTP",
    HTTP: "HTTP",
};
export class NamespaceNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "NamespaceNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "NamespaceNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, NamespaceNotFound.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceAlreadyExists extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceAlreadyExists",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceAlreadyExists.prototype);
        this.Message = opts.Message;
        this.CreatorRequestId = opts.CreatorRequestId;
        this.ServiceId = opts.ServiceId;
    }
}
export class CustomHealthNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "CustomHealthNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "CustomHealthNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, CustomHealthNotFound.prototype);
        this.Message = opts.Message;
    }
}
export const CustomHealthStatus = {
    HEALTHY: "HEALTHY",
    UNHEALTHY: "UNHEALTHY",
};
export class ResourceInUse extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUse",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUse";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUse.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceNotFound.prototype);
        this.Message = opts.Message;
    }
}
export class InstanceNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "InstanceNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceNotFound.prototype);
        this.Message = opts.Message;
    }
}
export const HealthStatusFilter = {
    ALL: "ALL",
    HEALTHY: "HEALTHY",
    HEALTHY_OR_ELSE_ALL: "HEALTHY_OR_ELSE_ALL",
    UNHEALTHY: "UNHEALTHY",
};
export const HealthStatus = {
    HEALTHY: "HEALTHY",
    UNHEALTHY: "UNHEALTHY",
    UNKNOWN: "UNKNOWN",
};
export class RequestLimitExceeded extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestLimitExceeded",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestLimitExceeded.prototype);
        this.Message = opts.Message;
    }
}
export const FilterCondition = {
    BEGINS_WITH: "BEGINS_WITH",
    BETWEEN: "BETWEEN",
    EQ: "EQ",
    IN: "IN",
};
export const NamespaceType = {
    DNS_PRIVATE: "DNS_PRIVATE",
    DNS_PUBLIC: "DNS_PUBLIC",
    HTTP: "HTTP",
};
export const OperationStatus = {
    FAIL: "FAIL",
    PENDING: "PENDING",
    SUBMITTED: "SUBMITTED",
    SUCCESS: "SUCCESS",
};
export const OperationTargetType = {
    INSTANCE: "INSTANCE",
    NAMESPACE: "NAMESPACE",
    SERVICE: "SERVICE",
};
export const OperationType = {
    CREATE_NAMESPACE: "CREATE_NAMESPACE",
    DELETE_NAMESPACE: "DELETE_NAMESPACE",
    DEREGISTER_INSTANCE: "DEREGISTER_INSTANCE",
    REGISTER_INSTANCE: "REGISTER_INSTANCE",
    UPDATE_NAMESPACE: "UPDATE_NAMESPACE",
    UPDATE_SERVICE: "UPDATE_SERVICE",
};
export class OperationNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "OperationNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationNotFound.prototype);
        this.Message = opts.Message;
    }
}
export const NamespaceFilterName = {
    HTTP_NAME: "HTTP_NAME",
    NAME: "NAME",
    TYPE: "TYPE",
};
export const OperationFilterName = {
    NAMESPACE_ID: "NAMESPACE_ID",
    SERVICE_ID: "SERVICE_ID",
    STATUS: "STATUS",
    TYPE: "TYPE",
    UPDATE_DATE: "UPDATE_DATE",
};
export const ServiceFilterName = {
    NAMESPACE_ID: "NAMESPACE_ID",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
