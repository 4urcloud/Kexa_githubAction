import { HttpRequest as __HttpRequest, isValidHostname as __isValidHostname, } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { CustomHealthNotFound, DuplicateRequest, InstanceNotFound, InvalidInput, NamespaceAlreadyExists, NamespaceNotFound, OperationNotFound, RequestLimitExceeded, ResourceInUse, ResourceLimitExceeded, ResourceNotFoundException, ServiceAlreadyExists, ServiceNotFound, TooManyTagsException, } from "../models/models_0";
import { ServiceDiscoveryServiceException as __BaseException } from "../models/ServiceDiscoveryServiceException";
export const se_CreateHttpNamespaceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHttpNamespace");
    let body;
    body = JSON.stringify(se_CreateHttpNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePrivateDnsNamespaceCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePrivateDnsNamespace");
    let body;
    body = JSON.stringify(se_CreatePrivateDnsNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePublicDnsNamespaceCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePublicDnsNamespace");
    let body;
    body = JSON.stringify(se_CreatePublicDnsNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateServiceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateService");
    let body;
    body = JSON.stringify(se_CreateServiceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNamespaceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteNamespace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteServiceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DiscoverInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("DiscoverInstances");
    let body;
    body = JSON.stringify(_json(input));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "data-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    return buildHttpRpcRequest(context, headers, "/", resolvedHostname, body);
};
export const se_DiscoverInstancesRevisionCommand = async (input, context) => {
    const headers = sharedHeaders("DiscoverInstancesRevision");
    let body;
    body = JSON.stringify(_json(input));
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "data-" + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    return buildHttpRpcRequest(context, headers, "/", resolvedHostname, body);
};
export const se_GetInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetInstancesHealthStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetInstancesHealthStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetNamespaceCommand = async (input, context) => {
    const headers = sharedHeaders("GetNamespace");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetOperationCommand = async (input, context) => {
    const headers = sharedHeaders("GetOperation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceCommand = async (input, context) => {
    const headers = sharedHeaders("GetService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("ListInstances");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListNamespacesCommand = async (input, context) => {
    const headers = sharedHeaders("ListNamespaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListOperationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOperations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListServices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterInstance");
    let body;
    body = JSON.stringify(se_RegisterInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateHttpNamespaceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateHttpNamespace");
    let body;
    body = JSON.stringify(se_UpdateHttpNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateInstanceCustomHealthStatusCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateInstanceCustomHealthStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdatePrivateDnsNamespaceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePrivateDnsNamespace");
    let body;
    body = JSON.stringify(se_UpdatePrivateDnsNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdatePublicDnsNamespaceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePublicDnsNamespace");
    let body;
    body = JSON.stringify(se_UpdatePublicDnsNamespaceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateServiceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateHttpNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePrivateDnsNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePublicDnsNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeregisterInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DiscoverInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DiscoverInstancesRevisionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetInstancesHealthStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetNamespaceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetOperationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListNamespacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListNamespacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListOperationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateHttpNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateInstanceCustomHealthStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UpdatePrivateDnsNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdatePublicDnsNamespaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "DuplicateRequest":
        case "com.amazonaws.servicediscovery#DuplicateRequest":
            throw await de_DuplicateRequestRes(parsedOutput, context);
        case "InvalidInput":
        case "com.amazonaws.servicediscovery#InvalidInput":
            throw await de_InvalidInputRes(parsedOutput, context);
        case "NamespaceAlreadyExists":
        case "com.amazonaws.servicediscovery#NamespaceAlreadyExists":
            throw await de_NamespaceAlreadyExistsRes(parsedOutput, context);
        case "ResourceLimitExceeded":
        case "com.amazonaws.servicediscovery#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.servicediscovery#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "NamespaceNotFound":
        case "com.amazonaws.servicediscovery#NamespaceNotFound":
            throw await de_NamespaceNotFoundRes(parsedOutput, context);
        case "ServiceAlreadyExists":
        case "com.amazonaws.servicediscovery#ServiceAlreadyExists":
            throw await de_ServiceAlreadyExistsRes(parsedOutput, context);
        case "ResourceInUse":
        case "com.amazonaws.servicediscovery#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput, context);
        case "ServiceNotFound":
        case "com.amazonaws.servicediscovery#ServiceNotFound":
            throw await de_ServiceNotFoundRes(parsedOutput, context);
        case "InstanceNotFound":
        case "com.amazonaws.servicediscovery#InstanceNotFound":
            throw await de_InstanceNotFoundRes(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.servicediscovery#RequestLimitExceeded":
            throw await de_RequestLimitExceededRes(parsedOutput, context);
        case "OperationNotFound":
        case "com.amazonaws.servicediscovery#OperationNotFound":
            throw await de_OperationNotFoundRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.servicediscovery#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "CustomHealthNotFound":
        case "com.amazonaws.servicediscovery#CustomHealthNotFound":
            throw await de_CustomHealthNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CustomHealthNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CustomHealthNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DuplicateRequestRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DuplicateRequest({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InstanceNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InstanceNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidInputRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInput({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NamespaceAlreadyExistsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NamespaceAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NamespaceNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NamespaceNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperationNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_RequestLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new RequestLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceInUseRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceAlreadyExistsRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateHttpNamespaceRequest = (input, context) => {
    return take(input, {
        CreatorRequestId: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Name: [],
        Tags: _json,
    });
};
const se_CreatePrivateDnsNamespaceRequest = (input, context) => {
    return take(input, {
        CreatorRequestId: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Name: [],
        Properties: _json,
        Tags: _json,
        Vpc: [],
    });
};
const se_CreatePublicDnsNamespaceRequest = (input, context) => {
    return take(input, {
        CreatorRequestId: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Name: [],
        Properties: _json,
        Tags: _json,
    });
};
const se_CreateServiceRequest = (input, context) => {
    return take(input, {
        CreatorRequestId: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        DnsConfig: _json,
        HealthCheckConfig: _json,
        HealthCheckCustomConfig: _json,
        Name: [],
        NamespaceId: [],
        Tags: _json,
        Type: [],
    });
};
const se_RegisterInstanceRequest = (input, context) => {
    return take(input, {
        Attributes: _json,
        CreatorRequestId: [true, (_) => _ ?? generateIdempotencyToken()],
        InstanceId: [],
        ServiceId: [],
    });
};
const se_UpdateHttpNamespaceRequest = (input, context) => {
    return take(input, {
        Id: [],
        Namespace: _json,
        UpdaterRequestId: [true, (_) => _ ?? generateIdempotencyToken()],
    });
};
const se_UpdatePrivateDnsNamespaceRequest = (input, context) => {
    return take(input, {
        Id: [],
        Namespace: _json,
        UpdaterRequestId: [true, (_) => _ ?? generateIdempotencyToken()],
    });
};
const se_UpdatePublicDnsNamespaceRequest = (input, context) => {
    return take(input, {
        Id: [],
        Namespace: _json,
        UpdaterRequestId: [true, (_) => _ ?? generateIdempotencyToken()],
    });
};
const de_CreateServiceResponse = (output, context) => {
    return take(output, {
        Service: (_) => de_Service(_, context),
    });
};
const de_GetNamespaceResponse = (output, context) => {
    return take(output, {
        Namespace: (_) => de_Namespace(_, context),
    });
};
const de_GetOperationResponse = (output, context) => {
    return take(output, {
        Operation: (_) => de_Operation(_, context),
    });
};
const de_GetServiceResponse = (output, context) => {
    return take(output, {
        Service: (_) => de_Service(_, context),
    });
};
const de_ListNamespacesResponse = (output, context) => {
    return take(output, {
        Namespaces: (_) => de_NamespaceSummariesList(_, context),
        NextToken: __expectString,
    });
};
const de_ListServicesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Services: (_) => de_ServiceSummariesList(_, context),
    });
};
const de_Namespace = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        Properties: _json,
        ServiceCount: __expectInt32,
        Type: __expectString,
    });
};
const de_NamespaceSummariesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NamespaceSummary(entry, context);
    });
    return retVal;
};
const de_NamespaceSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        Properties: _json,
        ServiceCount: __expectInt32,
        Type: __expectString,
    });
};
const de_Operation = (output, context) => {
    return take(output, {
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorCode: __expectString,
        ErrorMessage: __expectString,
        Id: __expectString,
        Status: __expectString,
        Targets: _json,
        Type: __expectString,
        UpdateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Service = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        Description: __expectString,
        DnsConfig: _json,
        HealthCheckConfig: _json,
        HealthCheckCustomConfig: _json,
        Id: __expectString,
        InstanceCount: __expectInt32,
        Name: __expectString,
        NamespaceId: __expectString,
        Type: __expectString,
    });
};
const de_ServiceSummariesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceSummary(entry, context);
    });
    return retVal;
};
const de_ServiceSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreateDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DnsConfig: _json,
        HealthCheckConfig: _json,
        HealthCheckCustomConfig: _json,
        Id: __expectString,
        InstanceCount: __expectInt32,
        Name: __expectString,
        Type: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `Route53AutoNaming_v20170314.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
