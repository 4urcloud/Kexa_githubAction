import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { SnowDeviceManagementClientResolvedConfig } from "../SnowDeviceManagementClient";
export interface SnowDeviceManagementHttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface SnowDeviceManagementHttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    SnowDeviceManagementClientResolvedConfig,
    HandlerExecutionContext,
    SnowDeviceManagementHttpAuthSchemeParameters,
    object
  > {}
export declare const defaultSnowDeviceManagementHttpAuthSchemeParametersProvider: (
  config: SnowDeviceManagementClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<SnowDeviceManagementHttpAuthSchemeParameters>;
export interface SnowDeviceManagementHttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<SnowDeviceManagementHttpAuthSchemeParameters> {}
export declare const defaultSnowDeviceManagementHttpAuthSchemeProvider: SnowDeviceManagementHttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: SnowDeviceManagementHttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: SnowDeviceManagementHttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
