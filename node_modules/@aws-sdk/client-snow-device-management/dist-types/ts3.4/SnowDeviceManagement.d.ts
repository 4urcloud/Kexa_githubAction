import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  CancelTaskCommandInput,
  CancelTaskCommandOutput,
} from "./commands/CancelTaskCommand";
import {
  CreateTaskCommandInput,
  CreateTaskCommandOutput,
} from "./commands/CreateTaskCommand";
import {
  DescribeDeviceCommandInput,
  DescribeDeviceCommandOutput,
} from "./commands/DescribeDeviceCommand";
import {
  DescribeDeviceEc2InstancesCommandInput,
  DescribeDeviceEc2InstancesCommandOutput,
} from "./commands/DescribeDeviceEc2InstancesCommand";
import {
  DescribeExecutionCommandInput,
  DescribeExecutionCommandOutput,
} from "./commands/DescribeExecutionCommand";
import {
  DescribeTaskCommandInput,
  DescribeTaskCommandOutput,
} from "./commands/DescribeTaskCommand";
import {
  ListDeviceResourcesCommandInput,
  ListDeviceResourcesCommandOutput,
} from "./commands/ListDeviceResourcesCommand";
import {
  ListDevicesCommandInput,
  ListDevicesCommandOutput,
} from "./commands/ListDevicesCommand";
import {
  ListExecutionsCommandInput,
  ListExecutionsCommandOutput,
} from "./commands/ListExecutionsCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  ListTasksCommandInput,
  ListTasksCommandOutput,
} from "./commands/ListTasksCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import { SnowDeviceManagementClient } from "./SnowDeviceManagementClient";
export interface SnowDeviceManagement {
  cancelTask(
    args: CancelTaskCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CancelTaskCommandOutput>;
  cancelTask(
    args: CancelTaskCommandInput,
    cb: (err: any, data?: CancelTaskCommandOutput) => void
  ): void;
  cancelTask(
    args: CancelTaskCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CancelTaskCommandOutput) => void
  ): void;
  createTask(
    args: CreateTaskCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateTaskCommandOutput>;
  createTask(
    args: CreateTaskCommandInput,
    cb: (err: any, data?: CreateTaskCommandOutput) => void
  ): void;
  createTask(
    args: CreateTaskCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateTaskCommandOutput) => void
  ): void;
  describeDevice(
    args: DescribeDeviceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeDeviceCommandOutput>;
  describeDevice(
    args: DescribeDeviceCommandInput,
    cb: (err: any, data?: DescribeDeviceCommandOutput) => void
  ): void;
  describeDevice(
    args: DescribeDeviceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeDeviceCommandOutput) => void
  ): void;
  describeDeviceEc2Instances(
    args: DescribeDeviceEc2InstancesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeDeviceEc2InstancesCommandOutput>;
  describeDeviceEc2Instances(
    args: DescribeDeviceEc2InstancesCommandInput,
    cb: (err: any, data?: DescribeDeviceEc2InstancesCommandOutput) => void
  ): void;
  describeDeviceEc2Instances(
    args: DescribeDeviceEc2InstancesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeDeviceEc2InstancesCommandOutput) => void
  ): void;
  describeExecution(
    args: DescribeExecutionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeExecutionCommandOutput>;
  describeExecution(
    args: DescribeExecutionCommandInput,
    cb: (err: any, data?: DescribeExecutionCommandOutput) => void
  ): void;
  describeExecution(
    args: DescribeExecutionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeExecutionCommandOutput) => void
  ): void;
  describeTask(
    args: DescribeTaskCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeTaskCommandOutput>;
  describeTask(
    args: DescribeTaskCommandInput,
    cb: (err: any, data?: DescribeTaskCommandOutput) => void
  ): void;
  describeTask(
    args: DescribeTaskCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeTaskCommandOutput) => void
  ): void;
  listDeviceResources(
    args: ListDeviceResourcesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDeviceResourcesCommandOutput>;
  listDeviceResources(
    args: ListDeviceResourcesCommandInput,
    cb: (err: any, data?: ListDeviceResourcesCommandOutput) => void
  ): void;
  listDeviceResources(
    args: ListDeviceResourcesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDeviceResourcesCommandOutput) => void
  ): void;
  listDevices(
    args: ListDevicesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDevicesCommandOutput>;
  listDevices(
    args: ListDevicesCommandInput,
    cb: (err: any, data?: ListDevicesCommandOutput) => void
  ): void;
  listDevices(
    args: ListDevicesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDevicesCommandOutput) => void
  ): void;
  listExecutions(
    args: ListExecutionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListExecutionsCommandOutput>;
  listExecutions(
    args: ListExecutionsCommandInput,
    cb: (err: any, data?: ListExecutionsCommandOutput) => void
  ): void;
  listExecutions(
    args: ListExecutionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListExecutionsCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTasks(
    args: ListTasksCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTasksCommandOutput>;
  listTasks(
    args: ListTasksCommandInput,
    cb: (err: any, data?: ListTasksCommandOutput) => void
  ): void;
  listTasks(
    args: ListTasksCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTasksCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
}
export declare class SnowDeviceManagement
  extends SnowDeviceManagementClient
  implements SnowDeviceManagement {}
