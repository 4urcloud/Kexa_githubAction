import { SnowDeviceManagementServiceException as __BaseException } from "./SnowDeviceManagementServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export const AttachmentStatus = {
    ATTACHED: "ATTACHED",
    ATTACHING: "ATTACHING",
    DETACHED: "DETACHED",
    DETACHING: "DETACHING",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        this.$retryable = {};
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        this.$retryable = {
            throttling: true,
        };
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export var Command;
(function (Command) {
    Command.visit = (value, visitor) => {
        if (value.unlock !== undefined)
            return visitor.unlock(value.unlock);
        if (value.reboot !== undefined)
            return visitor.reboot(value.reboot);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Command || (Command = {}));
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export const UnlockState = {
    LOCKED: "LOCKED",
    UNLOCKED: "UNLOCKED",
    UNLOCKING: "UNLOCKING",
};
export const IpAddressAssignment = {
    DHCP: "DHCP",
    STATIC: "STATIC",
};
export const PhysicalConnectorType = {
    QSFP: "QSFP",
    RJ45: "RJ45",
    RJ45_2: "RJ45_2",
    SFP_PLUS: "SFP_PLUS",
    WIFI: "WIFI",
};
export const InstanceStateName = {
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    SHUTTING_DOWN: "SHUTTING_DOWN",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    TERMINATED: "TERMINATED",
};
export const ExecutionState = {
    CANCELED: "CANCELED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
    REJECTED: "REJECTED",
    SUCCEEDED: "SUCCEEDED",
    TIMED_OUT: "TIMED_OUT",
};
export const TaskState = {
    CANCELED: "CANCELED",
    COMPLETED: "COMPLETED",
    IN_PROGRESS: "IN_PROGRESS",
};
