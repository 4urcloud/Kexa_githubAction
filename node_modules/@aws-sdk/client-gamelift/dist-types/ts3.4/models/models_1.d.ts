import {
  BackfillMode,
  BalancingStrategy,
  FilterConfiguration,
  FlexMatchMode,
  GameProperty,
  GameServer,
  GameServerGroup,
  GameServerProtectionPolicy,
  GameServerUtilizationStatus,
  GameSession,
  GameSessionQueue,
  GameSessionQueueDestination,
  InstanceDefinition,
  IpPermission,
  MatchmakingConfiguration,
  PlayerLatencyPolicy,
  PlayerSessionCreationPolicy,
  PriorityConfiguration,
  ProtectionPolicy,
  RuntimeConfiguration,
  S3Location,
  Script,
} from "./models_0";
export interface UpdateFleetCapacityInput {
  FleetId: string | undefined;
  DesiredInstances?: number;
  MinSize?: number;
  MaxSize?: number;
  Location?: string;
}
export interface UpdateFleetCapacityOutput {
  FleetId?: string;
  FleetArn?: string;
  Location?: string;
}
export interface UpdateFleetPortSettingsInput {
  FleetId: string | undefined;
  InboundPermissionAuthorizations?: IpPermission[];
  InboundPermissionRevocations?: IpPermission[];
}
export interface UpdateFleetPortSettingsOutput {
  FleetId?: string;
  FleetArn?: string;
}
export declare const GameServerHealthCheck: {
  readonly HEALTHY: "HEALTHY";
};
export type GameServerHealthCheck =
  (typeof GameServerHealthCheck)[keyof typeof GameServerHealthCheck];
export interface UpdateGameServerInput {
  GameServerGroupName: string | undefined;
  GameServerId: string | undefined;
  GameServerData?: string;
  UtilizationStatus?: GameServerUtilizationStatus;
  HealthCheck?: GameServerHealthCheck;
}
export interface UpdateGameServerOutput {
  GameServer?: GameServer;
}
export interface UpdateGameServerGroupInput {
  GameServerGroupName: string | undefined;
  RoleArn?: string;
  InstanceDefinitions?: InstanceDefinition[];
  GameServerProtectionPolicy?: GameServerProtectionPolicy;
  BalancingStrategy?: BalancingStrategy;
}
export interface UpdateGameServerGroupOutput {
  GameServerGroup?: GameServerGroup;
}
export interface UpdateGameSessionInput {
  GameSessionId: string | undefined;
  MaximumPlayerSessionCount?: number;
  Name?: string;
  PlayerSessionCreationPolicy?: PlayerSessionCreationPolicy;
  ProtectionPolicy?: ProtectionPolicy;
  GameProperties?: GameProperty[];
}
export interface UpdateGameSessionOutput {
  GameSession?: GameSession;
}
export interface UpdateGameSessionQueueInput {
  Name: string | undefined;
  TimeoutInSeconds?: number;
  PlayerLatencyPolicies?: PlayerLatencyPolicy[];
  Destinations?: GameSessionQueueDestination[];
  FilterConfiguration?: FilterConfiguration;
  PriorityConfiguration?: PriorityConfiguration;
  CustomEventData?: string;
  NotificationTarget?: string;
}
export interface UpdateGameSessionQueueOutput {
  GameSessionQueue?: GameSessionQueue;
}
export interface UpdateMatchmakingConfigurationInput {
  Name: string | undefined;
  Description?: string;
  GameSessionQueueArns?: string[];
  RequestTimeoutSeconds?: number;
  AcceptanceTimeoutSeconds?: number;
  AcceptanceRequired?: boolean;
  RuleSetName?: string;
  NotificationTarget?: string;
  AdditionalPlayerCount?: number;
  CustomEventData?: string;
  GameProperties?: GameProperty[];
  GameSessionData?: string;
  BackfillMode?: BackfillMode;
  FlexMatchMode?: FlexMatchMode;
}
export interface UpdateMatchmakingConfigurationOutput {
  Configuration?: MatchmakingConfiguration;
}
export interface UpdateRuntimeConfigurationInput {
  FleetId: string | undefined;
  RuntimeConfiguration: RuntimeConfiguration | undefined;
}
export interface UpdateRuntimeConfigurationOutput {
  RuntimeConfiguration?: RuntimeConfiguration;
}
export interface UpdateScriptInput {
  ScriptId: string | undefined;
  Name?: string;
  Version?: string;
  StorageLocation?: S3Location;
  ZipFile?: Uint8Array;
}
export interface UpdateScriptOutput {
  Script?: Script;
}
export interface ValidateMatchmakingRuleSetInput {
  RuleSetBody: string | undefined;
}
export interface ValidateMatchmakingRuleSetOutput {
  Valid?: boolean;
}
export declare const UpdateFleetPortSettingsInputFilterSensitiveLog: (
  obj: UpdateFleetPortSettingsInput
) => any;
export declare const UpdateGameSessionOutputFilterSensitiveLog: (
  obj: UpdateGameSessionOutput
) => any;
