import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { MgnServiceException as __BaseException } from "./MgnServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.code = opts.code;
    }
}
export const ActionCategory = {
    BACKUP: "BACKUP",
    CONFIGURATION: "CONFIGURATION",
    DISASTER_RECOVERY: "DISASTER_RECOVERY",
    LICENSE_AND_SUBSCRIPTION: "LICENSE_AND_SUBSCRIPTION",
    NETWORKING: "NETWORKING",
    OBSERVABILITY: "OBSERVABILITY",
    OPERATING_SYSTEM: "OPERATING_SYSTEM",
    OTHER: "OTHER",
    REFACTORING: "REFACTORING",
    SECURITY: "SECURITY",
    VALIDATION: "VALIDATION",
};
export const ApplicationHealthStatus = {
    ERROR: "ERROR",
    HEALTHY: "HEALTHY",
    LAGGING: "LAGGING",
};
export const ApplicationProgressStatus = {
    COMPLETED: "COMPLETED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.code = opts.code;
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
        this.errors = opts.errors;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.code = opts.code;
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.code = opts.code;
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
        this.serviceCode = opts.serviceCode;
        this.quotaCode = opts.quotaCode;
        this.quotaValue = opts.quotaValue;
    }
}
export class UninitializedAccountException extends __BaseException {
    constructor(opts) {
        super({
            name: "UninitializedAccountException",
            $fault: "client",
            ...opts,
        });
        this.name = "UninitializedAccountException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UninitializedAccountException.prototype);
        this.code = opts.code;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "cannotParse",
    FIELD_VALIDATION_FAILED: "fieldValidationFailed",
    OTHER: "other",
    UNKNOWN_OPERATION: "unknownOperation",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.code = opts.code;
        this.reason = opts.reason;
        this.fieldList = opts.fieldList;
    }
}
export const ExportStatus = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    STARTED: "STARTED",
    SUCCEEDED: "SUCCEEDED",
};
export const ImportErrorType = {
    PROCESSING_ERROR: "PROCESSING_ERROR",
    VALIDATION_ERROR: "VALIDATION_ERROR",
};
export const ImportStatus = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    STARTED: "STARTED",
    SUCCEEDED: "SUCCEEDED",
};
export const JobLogEvent = {
    CLEANUP_END: "CLEANUP_END",
    CLEANUP_FAIL: "CLEANUP_FAIL",
    CLEANUP_START: "CLEANUP_START",
    CONVERSION_END: "CONVERSION_END",
    CONVERSION_FAIL: "CONVERSION_FAIL",
    CONVERSION_START: "CONVERSION_START",
    JOB_CANCEL: "JOB_CANCEL",
    JOB_END: "JOB_END",
    JOB_START: "JOB_START",
    LAUNCH_FAILED: "LAUNCH_FAILED",
    LAUNCH_START: "LAUNCH_START",
    SERVER_SKIPPED: "SERVER_SKIPPED",
    SNAPSHOT_END: "SNAPSHOT_END",
    SNAPSHOT_FAIL: "SNAPSHOT_FAIL",
    SNAPSHOT_START: "SNAPSHOT_START",
    USING_PREVIOUS_SNAPSHOT: "USING_PREVIOUS_SNAPSHOT",
};
export const InitiatedBy = {
    DIAGNOSTIC: "DIAGNOSTIC",
    START_CUTOVER: "START_CUTOVER",
    START_TEST: "START_TEST",
    TERMINATE: "TERMINATE",
};
export const LaunchStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    LAUNCHED: "LAUNCHED",
    PENDING: "PENDING",
    TERMINATED: "TERMINATED",
};
export const PostLaunchActionExecutionStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCESS: "SUCCESS",
};
export var SsmExternalParameter;
(function (SsmExternalParameter) {
    SsmExternalParameter.visit = (value, visitor) => {
        if (value.dynamicPath !== undefined)
            return visitor.dynamicPath(value.dynamicPath);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(SsmExternalParameter || (SsmExternalParameter = {}));
export const SsmParameterStoreParameterType = {
    STRING: "STRING",
};
export const SsmDocumentType = {
    AUTOMATION: "AUTOMATION",
    COMMAND: "COMMAND",
};
export const JobStatus = {
    COMPLETED: "COMPLETED",
    PENDING: "PENDING",
    STARTED: "STARTED",
};
export const JobType = {
    LAUNCH: "LAUNCH",
    TERMINATE: "TERMINATE",
};
export const BootMode = {
    LEGACY_BIOS: "LEGACY_BIOS",
    UEFI: "UEFI",
    USE_SOURCE: "USE_SOURCE",
};
export const VolumeType = {
    gp2: "gp2",
    gp3: "gp3",
    io1: "io1",
    io2: "io2",
    sc1: "sc1",
    st1: "st1",
    standard: "standard",
};
export const LaunchDisposition = {
    STARTED: "STARTED",
    STOPPED: "STOPPED",
};
export const PostLaunchActionsDeploymentType = {
    CUTOVER_ONLY: "CUTOVER_ONLY",
    TEST_AND_CUTOVER: "TEST_AND_CUTOVER",
    TEST_ONLY: "TEST_ONLY",
};
export const TargetInstanceTypeRightSizingMethod = {
    BASIC: "BASIC",
    NONE: "NONE",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.serviceCode = opts.serviceCode;
        this.quotaCode = opts.quotaCode;
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export const ReplicationConfigurationDataPlaneRouting = {
    PRIVATE_IP: "PRIVATE_IP",
    PUBLIC_IP: "PUBLIC_IP",
};
export const ReplicationConfigurationDefaultLargeStagingDiskType = {
    GP2: "GP2",
    GP3: "GP3",
    ST1: "ST1",
};
export const ReplicationConfigurationEbsEncryption = {
    CUSTOM: "CUSTOM",
    DEFAULT: "DEFAULT",
};
export const ChangeServerLifeCycleStateSourceServerLifecycleState = {
    CUTOVER: "CUTOVER",
    READY_FOR_CUTOVER: "READY_FOR_CUTOVER",
    READY_FOR_TEST: "READY_FOR_TEST",
};
export const DataReplicationErrorString = {
    AGENT_NOT_SEEN: "AGENT_NOT_SEEN",
    FAILED_TO_ATTACH_STAGING_DISKS: "FAILED_TO_ATTACH_STAGING_DISKS",
    FAILED_TO_AUTHENTICATE_WITH_SERVICE: "FAILED_TO_AUTHENTICATE_WITH_SERVICE",
    FAILED_TO_BOOT_REPLICATION_SERVER: "FAILED_TO_BOOT_REPLICATION_SERVER",
    FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER: "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER",
    FAILED_TO_CREATE_SECURITY_GROUP: "FAILED_TO_CREATE_SECURITY_GROUP",
    FAILED_TO_CREATE_STAGING_DISKS: "FAILED_TO_CREATE_STAGING_DISKS",
    FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE: "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE",
    FAILED_TO_LAUNCH_REPLICATION_SERVER: "FAILED_TO_LAUNCH_REPLICATION_SERVER",
    FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT: "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT",
    FAILED_TO_START_DATA_TRANSFER: "FAILED_TO_START_DATA_TRANSFER",
    LAST_SNAPSHOT_JOB_FAILED: "LAST_SNAPSHOT_JOB_FAILED",
    NOT_CONVERGING: "NOT_CONVERGING",
    SNAPSHOTS_FAILURE: "SNAPSHOTS_FAILURE",
    UNSTABLE_NETWORK: "UNSTABLE_NETWORK",
    UNSUPPORTED_VM_CONFIGURATION: "UNSUPPORTED_VM_CONFIGURATION",
};
export const DataReplicationInitiationStepName = {
    ATTACH_STAGING_DISKS: "ATTACH_STAGING_DISKS",
    AUTHENTICATE_WITH_SERVICE: "AUTHENTICATE_WITH_SERVICE",
    BOOT_REPLICATION_SERVER: "BOOT_REPLICATION_SERVER",
    CONNECT_AGENT_TO_REPLICATION_SERVER: "CONNECT_AGENT_TO_REPLICATION_SERVER",
    CREATE_SECURITY_GROUP: "CREATE_SECURITY_GROUP",
    CREATE_STAGING_DISKS: "CREATE_STAGING_DISKS",
    DOWNLOAD_REPLICATION_SOFTWARE: "DOWNLOAD_REPLICATION_SOFTWARE",
    LAUNCH_REPLICATION_SERVER: "LAUNCH_REPLICATION_SERVER",
    PAIR_REPLICATION_SERVER_WITH_AGENT: "PAIR_REPLICATION_SERVER_WITH_AGENT",
    START_DATA_TRANSFER: "START_DATA_TRANSFER",
    WAIT: "WAIT",
};
export const DataReplicationInitiationStepStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
    SKIPPED: "SKIPPED",
    SUCCEEDED: "SUCCEEDED",
};
export const DataReplicationState = {
    BACKLOG: "BACKLOG",
    CONTINUOUS: "CONTINUOUS",
    CREATING_SNAPSHOT: "CREATING_SNAPSHOT",
    DISCONNECTED: "DISCONNECTED",
    INITIAL_SYNC: "INITIAL_SYNC",
    INITIATING: "INITIATING",
    PAUSED: "PAUSED",
    PENDING_SNAPSHOT_SHIPPING: "PENDING_SNAPSHOT_SHIPPING",
    RESCAN: "RESCAN",
    SHIPPING_SNAPSHOT: "SHIPPING_SNAPSHOT",
    STALLED: "STALLED",
    STOPPED: "STOPPED",
};
export const FirstBoot = {
    STOPPED: "STOPPED",
    SUCCEEDED: "SUCCEEDED",
    UNKNOWN: "UNKNOWN",
    WAITING: "WAITING",
};
export const LifeCycleState = {
    CUTOVER: "CUTOVER",
    CUTTING_OVER: "CUTTING_OVER",
    DISCONNECTED: "DISCONNECTED",
    DISCOVERED: "DISCOVERED",
    NOT_READY: "NOT_READY",
    PENDING_INSTALLATION: "PENDING_INSTALLATION",
    READY_FOR_CUTOVER: "READY_FOR_CUTOVER",
    READY_FOR_TEST: "READY_FOR_TEST",
    STOPPED: "STOPPED",
    TESTING: "TESTING",
};
export const ReplicationType = {
    AGENT_BASED: "AGENT_BASED",
    SNAPSHOT_SHIPPING: "SNAPSHOT_SHIPPING",
};
export const ReplicationConfigurationReplicatedDiskStagingDiskType = {
    AUTO: "AUTO",
    GP2: "GP2",
    GP3: "GP3",
    IO1: "IO1",
    IO2: "IO2",
    SC1: "SC1",
    ST1: "ST1",
    STANDARD: "STANDARD",
};
export const WaveHealthStatus = {
    ERROR: "ERROR",
    HEALTHY: "HEALTHY",
    LAGGING: "LAGGING",
};
export const WaveProgressStatus = {
    COMPLETED: "COMPLETED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
};
export const ApplicationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const CreateApplicationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const ListApplicationsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => ApplicationFilterSensitiveLog(item)) }),
});
export const ConnectorFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const CreateConnectorRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const ListConnectorsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => ConnectorFilterSensitiveLog(item)) }),
});
export const JobFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const DescribeJobsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => JobFilterSensitiveLog(item)) }),
});
export const CreateLaunchConfigurationTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.postLaunchActions && { postLaunchActions: obj.postLaunchActions }),
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const LaunchConfigurationTemplateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.postLaunchActions && { postLaunchActions: obj.postLaunchActions }),
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const DescribeLaunchConfigurationTemplatesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => LaunchConfigurationTemplateFilterSensitiveLog(item)) }),
});
export const ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const CreateReplicationConfigurationTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const ReplicationConfigurationTemplateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const DescribeReplicationConfigurationTemplatesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => ReplicationConfigurationTemplateFilterSensitiveLog(item)) }),
});
export const UpdateReplicationConfigurationTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
});
export const SourceServerFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const DescribeSourceServersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => SourceServerFilterSensitiveLog(item)) }),
});
export const ReplicationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
});
export const StartCutoverRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const StartCutoverResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.job && { job: JobFilterSensitiveLog(obj.job) }),
});
export const StartTestRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const StartTestResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.job && { job: JobFilterSensitiveLog(obj.job) }),
});
export const TerminateTargetInstancesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const TerminateTargetInstancesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.job && { job: JobFilterSensitiveLog(obj.job) }),
});
export const UpdateReplicationConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.stagingAreaTags && { stagingAreaTags: SENSITIVE_STRING }),
});
export const TagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const UntagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tagKeys && { tagKeys: SENSITIVE_STRING }),
});
export const VcenterClientFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceServerTags && { sourceServerTags: SENSITIVE_STRING }),
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const DescribeVcenterClientsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => VcenterClientFilterSensitiveLog(item)) }),
});
export const WaveFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const CreateWaveRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tags && { tags: SENSITIVE_STRING }),
});
export const ListWavesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.items && { items: obj.items.map((item) => WaveFilterSensitiveLog(item)) }),
});
