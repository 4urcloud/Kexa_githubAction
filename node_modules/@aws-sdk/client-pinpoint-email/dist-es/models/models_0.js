import { PinpointEmailServiceException as __BaseException } from "./PinpointEmailServiceException";
export class AccountSuspendedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccountSuspendedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountSuspendedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountSuspendedException.prototype);
    }
}
export class AlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
    }
}
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "server",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
export const TlsPolicy = {
    OPTIONAL: "OPTIONAL",
    REQUIRE: "REQUIRE",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
    }
}
export const DimensionValueSource = {
    EMAIL_HEADER: "EMAIL_HEADER",
    LINK_TAG: "LINK_TAG",
    MESSAGE_TAG: "MESSAGE_TAG",
};
export const EventType = {
    BOUNCE: "BOUNCE",
    CLICK: "CLICK",
    COMPLAINT: "COMPLAINT",
    DELIVERY: "DELIVERY",
    OPEN: "OPEN",
    REJECT: "REJECT",
    RENDERING_FAILURE: "RENDERING_FAILURE",
    SEND: "SEND",
};
export const DeliverabilityTestStatus = {
    COMPLETED: "COMPLETED",
    IN_PROGRESS: "IN_PROGRESS",
};
export class MailFromDomainNotVerifiedException extends __BaseException {
    constructor(opts) {
        super({
            name: "MailFromDomainNotVerifiedException",
            $fault: "client",
            ...opts,
        });
        this.name = "MailFromDomainNotVerifiedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MailFromDomainNotVerifiedException.prototype);
    }
}
export class MessageRejected extends __BaseException {
    constructor(opts) {
        super({
            name: "MessageRejected",
            $fault: "client",
            ...opts,
        });
        this.name = "MessageRejected";
        this.$fault = "client";
        Object.setPrototypeOf(this, MessageRejected.prototype);
    }
}
export class SendingPausedException extends __BaseException {
    constructor(opts) {
        super({
            name: "SendingPausedException",
            $fault: "client",
            ...opts,
        });
        this.name = "SendingPausedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SendingPausedException.prototype);
    }
}
export const DkimStatus = {
    FAILED: "FAILED",
    NOT_STARTED: "NOT_STARTED",
    PENDING: "PENDING",
    SUCCESS: "SUCCESS",
    TEMPORARY_FAILURE: "TEMPORARY_FAILURE",
};
export const IdentityType = {
    DOMAIN: "DOMAIN",
    EMAIL_ADDRESS: "EMAIL_ADDRESS",
    MANAGED_DOMAIN: "MANAGED_DOMAIN",
};
export const WarmupStatus = {
    DONE: "DONE",
    IN_PROGRESS: "IN_PROGRESS",
};
export const DeliverabilityDashboardAccountStatus = {
    ACTIVE: "ACTIVE",
    DISABLED: "DISABLED",
    PENDING_EXPIRATION: "PENDING_EXPIRATION",
};
export const BehaviorOnMxFailure = {
    REJECT_MESSAGE: "REJECT_MESSAGE",
    USE_DEFAULT_VALUE: "USE_DEFAULT_VALUE",
};
export const MailFromDomainStatus = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    SUCCESS: "SUCCESS",
    TEMPORARY_FAILURE: "TEMPORARY_FAILURE",
};
