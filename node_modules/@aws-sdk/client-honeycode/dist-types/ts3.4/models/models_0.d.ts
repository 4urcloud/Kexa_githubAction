import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { HoneycodeServiceException as __BaseException } from "./HoneycodeServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class AutomationExecutionException extends __BaseException {
  readonly name: "AutomationExecutionException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AutomationExecutionException, __BaseException>
  );
}
export declare class AutomationExecutionTimeoutException extends __BaseException {
  readonly name: "AutomationExecutionTimeoutException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<
      AutomationExecutionTimeoutException,
      __BaseException
    >
  );
}
export interface CellInput {
  fact?: string;
  facts?: string[];
}
export interface CreateRowData {
  batchItemId: string | undefined;
  cellsToCreate: Record<string, CellInput> | undefined;
}
export interface BatchCreateTableRowsRequest {
  workbookId: string | undefined;
  tableId: string | undefined;
  rowsToCreate: CreateRowData[] | undefined;
  clientRequestToken?: string;
}
export interface FailedBatchItem {
  id: string | undefined;
  errorMessage: string | undefined;
}
export interface BatchCreateTableRowsResult {
  workbookCursor: number | undefined;
  createdRows: Record<string, string> | undefined;
  failedBatchItems?: FailedBatchItem[];
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class RequestTimeoutException extends __BaseException {
  readonly name: "RequestTimeoutException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<RequestTimeoutException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface BatchDeleteTableRowsRequest {
  workbookId: string | undefined;
  tableId: string | undefined;
  rowIds: string[] | undefined;
  clientRequestToken?: string;
}
export interface BatchDeleteTableRowsResult {
  workbookCursor: number | undefined;
  failedBatchItems?: FailedBatchItem[];
}
export interface UpdateRowData {
  rowId: string | undefined;
  cellsToUpdate: Record<string, CellInput> | undefined;
}
export interface BatchUpdateTableRowsRequest {
  workbookId: string | undefined;
  tableId: string | undefined;
  rowsToUpdate: UpdateRowData[] | undefined;
  clientRequestToken?: string;
}
export interface BatchUpdateTableRowsResult {
  workbookCursor: number | undefined;
  failedBatchItems?: FailedBatchItem[];
}
export interface Filter {
  formula: string | undefined;
  contextRowId?: string;
}
export interface UpsertRowData {
  batchItemId: string | undefined;
  filter: Filter | undefined;
  cellsToUpdate: Record<string, CellInput> | undefined;
}
export interface BatchUpsertTableRowsRequest {
  workbookId: string | undefined;
  tableId: string | undefined;
  rowsToUpsert: UpsertRowData[] | undefined;
  clientRequestToken?: string;
}
export declare const UpsertAction: {
  readonly Appended: "APPENDED";
  readonly Updated: "UPDATED";
};
export type UpsertAction = (typeof UpsertAction)[keyof typeof UpsertAction];
export interface UpsertRowsResult {
  rowIds: string[] | undefined;
  upsertAction: UpsertAction | undefined;
}
export interface BatchUpsertTableRowsResult {
  rows: Record<string, UpsertRowsResult> | undefined;
  workbookCursor: number | undefined;
  failedBatchItems?: FailedBatchItem[];
}
export declare const Format: {
  readonly Accounting: "ACCOUNTING";
  readonly Auto: "AUTO";
  readonly Contact: "CONTACT";
  readonly Currency: "CURRENCY";
  readonly Date: "DATE";
  readonly DateTime: "DATE_TIME";
  readonly Number: "NUMBER";
  readonly Percentage: "PERCENTAGE";
  readonly Rowlink: "ROWLINK";
  readonly Rowset: "ROWSET";
  readonly Text: "TEXT";
  readonly Time: "TIME";
};
export type Format = (typeof Format)[keyof typeof Format];
export interface Cell {
  formula?: string;
  format?: Format;
  rawValue?: string;
  formattedValue?: string;
  formattedValues?: string[];
}
export interface ColumnMetadata {
  name: string | undefined;
  format: Format | undefined;
}
export interface DataItem {
  overrideFormat?: Format;
  rawValue?: string;
  formattedValue?: string;
}
export declare const ImportDataCharacterEncoding: {
  readonly ISO_8859_1: "ISO-8859-1";
  readonly US_ASCII: "US-ASCII";
  readonly UTF_16: "UTF-16";
  readonly UTF_16BE: "UTF-16BE";
  readonly UTF_16LE: "UTF-16LE";
  readonly UTF_8: "UTF-8";
};
export type ImportDataCharacterEncoding =
  (typeof ImportDataCharacterEncoding)[keyof typeof ImportDataCharacterEncoding];
export interface DelimitedTextImportOptions {
  delimiter: string | undefined;
  hasHeaderRow?: boolean;
  ignoreEmptyRows?: boolean;
  dataCharacterEncoding?: ImportDataCharacterEncoding;
}
export interface DescribeTableDataImportJobRequest {
  workbookId: string | undefined;
  tableId: string | undefined;
  jobId: string | undefined;
}
export declare const ErrorCode: {
  readonly AccessDenied: "ACCESS_DENIED";
  readonly FileEmptyError: "FILE_EMPTY_ERROR";
  readonly FileNotFoundError: "FILE_NOT_FOUND_ERROR";
  readonly FileParsingError: "FILE_PARSING_ERROR";
  readonly FileSizeLimitError: "FILE_SIZE_LIMIT_ERROR";
  readonly InvalidFileTypeError: "INVALID_FILE_TYPE_ERROR";
  readonly InvalidImportOptionsError: "INVALID_IMPORT_OPTIONS_ERROR";
  readonly InvalidTableColumnIdError: "INVALID_TABLE_COLUMN_ID_ERROR";
  readonly InvalidTableIdError: "INVALID_TABLE_ID_ERROR";
  readonly InvalidUrlError: "INVALID_URL_ERROR";
  readonly ResourceNotFoundError: "RESOURCE_NOT_FOUND_ERROR";
  readonly SystemLimitError: "SYSTEM_LIMIT_ERROR";
  readonly TableNotFoundError: "TABLE_NOT_FOUND_ERROR";
  readonly UnknownError: "UNKNOWN_ERROR";
};
export type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];
export interface ImportDataSourceConfig {
  dataSourceUrl?: string;
}
export interface ImportDataSource {
  dataSourceConfig: ImportDataSourceConfig | undefined;
}
export interface SourceDataColumnProperties {
  columnIndex?: number;
}
export interface DestinationOptions {
  columnMap?: Record<string, SourceDataColumnProperties>;
}
export interface ImportOptions {
  destinationOptions?: DestinationOptions;
  delimitedTextOptions?: DelimitedTextImportOptions;
}
export interface ImportJobSubmitter {
  email?: string;
  userArn?: string;
}
export interface TableDataImportJobMetadata {
  submitter: ImportJobSubmitter | undefined;
  submitTime: Date | undefined;
  importOptions: ImportOptions | undefined;
  dataSource: ImportDataSource | undefined;
}
export declare const TableDataImportJobStatus: {
  readonly Completed: "COMPLETED";
  readonly Failed: "FAILED";
  readonly InProgress: "IN_PROGRESS";
  readonly Submitted: "SUBMITTED";
};
export type TableDataImportJobStatus =
  (typeof TableDataImportJobStatus)[keyof typeof TableDataImportJobStatus];
export interface DescribeTableDataImportJobResult {
  jobStatus: TableDataImportJobStatus | undefined;
  message: string | undefined;
  jobMetadata: TableDataImportJobMetadata | undefined;
  errorCode?: ErrorCode;
}
export interface VariableValue {
  rawValue: string | undefined;
}
export interface GetScreenDataRequest {
  workbookId: string | undefined;
  appId: string | undefined;
  screenId: string | undefined;
  variables?: Record<string, VariableValue>;
  maxResults?: number;
  nextToken?: string;
}
export interface ResultRow {
  rowId?: string;
  dataItems: DataItem[] | undefined;
}
export interface ResultSet {
  headers: ColumnMetadata[] | undefined;
  rows: ResultRow[] | undefined;
}
export interface GetScreenDataResult {
  results: Record<string, ResultSet> | undefined;
  workbookCursor: number | undefined;
  nextToken?: string;
}
export declare const ImportSourceDataFormat: {
  readonly DelimitedText: "DELIMITED_TEXT";
};
export type ImportSourceDataFormat =
  (typeof ImportSourceDataFormat)[keyof typeof ImportSourceDataFormat];
export interface InvokeScreenAutomationRequest {
  workbookId: string | undefined;
  appId: string | undefined;
  screenId: string | undefined;
  screenAutomationId: string | undefined;
  variables?: Record<string, VariableValue>;
  rowId?: string;
  clientRequestToken?: string;
}
export interface InvokeScreenAutomationResult {
  workbookCursor: number | undefined;
}
export interface ListTableColumnsRequest {
  workbookId: string | undefined;
  tableId: string | undefined;
  nextToken?: string;
}
export interface TableColumn {
  tableColumnId?: string;
  tableColumnName?: string;
  format?: Format;
}
export interface ListTableColumnsResult {
  tableColumns: TableColumn[] | undefined;
  nextToken?: string;
  workbookCursor?: number;
}
export interface ListTableRowsRequest {
  workbookId: string | undefined;
  tableId: string | undefined;
  rowIds?: string[];
  maxResults?: number;
  nextToken?: string;
}
export interface TableRow {
  rowId: string | undefined;
  cells: Cell[] | undefined;
}
export interface ListTableRowsResult {
  columnIds: string[] | undefined;
  rows: TableRow[] | undefined;
  rowIdsNotFound?: string[];
  nextToken?: string;
  workbookCursor: number | undefined;
}
export interface ListTablesRequest {
  workbookId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface Table {
  tableId?: string;
  tableName?: string;
}
export interface ListTablesResult {
  tables: Table[] | undefined;
  nextToken?: string;
  workbookCursor?: number;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResult {
  tags?: Record<string, string>;
}
export interface QueryTableRowsRequest {
  workbookId: string | undefined;
  tableId: string | undefined;
  filterFormula: Filter | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface QueryTableRowsResult {
  columnIds: string[] | undefined;
  rows: TableRow[] | undefined;
  nextToken?: string;
  workbookCursor: number | undefined;
}
export interface StartTableDataImportJobRequest {
  workbookId: string | undefined;
  dataSource: ImportDataSource | undefined;
  dataFormat: ImportSourceDataFormat | undefined;
  destinationTableId: string | undefined;
  importOptions: ImportOptions | undefined;
  clientRequestToken: string | undefined;
}
export interface StartTableDataImportJobResult {
  jobId: string | undefined;
  jobStatus: TableDataImportJobStatus | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResult {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResult {}
export declare const CellInputFilterSensitiveLog: (obj: CellInput) => any;
export declare const CreateRowDataFilterSensitiveLog: (
  obj: CreateRowData
) => any;
export declare const BatchCreateTableRowsRequestFilterSensitiveLog: (
  obj: BatchCreateTableRowsRequest
) => any;
export declare const UpdateRowDataFilterSensitiveLog: (
  obj: UpdateRowData
) => any;
export declare const BatchUpdateTableRowsRequestFilterSensitiveLog: (
  obj: BatchUpdateTableRowsRequest
) => any;
export declare const FilterFilterSensitiveLog: (obj: Filter) => any;
export declare const UpsertRowDataFilterSensitiveLog: (
  obj: UpsertRowData
) => any;
export declare const BatchUpsertTableRowsRequestFilterSensitiveLog: (
  obj: BatchUpsertTableRowsRequest
) => any;
export declare const CellFilterSensitiveLog: (obj: Cell) => any;
export declare const ColumnMetadataFilterSensitiveLog: (
  obj: ColumnMetadata
) => any;
export declare const DataItemFilterSensitiveLog: (obj: DataItem) => any;
export declare const ImportDataSourceConfigFilterSensitiveLog: (
  obj: ImportDataSourceConfig
) => any;
export declare const ImportDataSourceFilterSensitiveLog: (
  obj: ImportDataSource
) => any;
export declare const ImportJobSubmitterFilterSensitiveLog: (
  obj: ImportJobSubmitter
) => any;
export declare const TableDataImportJobMetadataFilterSensitiveLog: (
  obj: TableDataImportJobMetadata
) => any;
export declare const DescribeTableDataImportJobResultFilterSensitiveLog: (
  obj: DescribeTableDataImportJobResult
) => any;
export declare const VariableValueFilterSensitiveLog: (
  obj: VariableValue
) => any;
export declare const GetScreenDataRequestFilterSensitiveLog: (
  obj: GetScreenDataRequest
) => any;
export declare const ResultRowFilterSensitiveLog: (obj: ResultRow) => any;
export declare const ResultSetFilterSensitiveLog: (obj: ResultSet) => any;
export declare const GetScreenDataResultFilterSensitiveLog: (
  obj: GetScreenDataResult
) => any;
export declare const InvokeScreenAutomationRequestFilterSensitiveLog: (
  obj: InvokeScreenAutomationRequest
) => any;
export declare const TableRowFilterSensitiveLog: (obj: TableRow) => any;
export declare const ListTableRowsResultFilterSensitiveLog: (
  obj: ListTableRowsResult
) => any;
export declare const QueryTableRowsRequestFilterSensitiveLog: (
  obj: QueryTableRowsRequest
) => any;
export declare const QueryTableRowsResultFilterSensitiveLog: (
  obj: QueryTableRowsResult
) => any;
export declare const StartTableDataImportJobRequestFilterSensitiveLog: (
  obj: StartTableDataImportJobRequest
) => any;
