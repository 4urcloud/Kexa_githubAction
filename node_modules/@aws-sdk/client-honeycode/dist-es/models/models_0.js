import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { HoneycodeServiceException as __BaseException } from "./HoneycodeServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export class AutomationExecutionException extends __BaseException {
    constructor(opts) {
        super({
            name: "AutomationExecutionException",
            $fault: "client",
            ...opts,
        });
        this.name = "AutomationExecutionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AutomationExecutionException.prototype);
    }
}
export class AutomationExecutionTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "AutomationExecutionTimeoutException",
            $fault: "server",
            ...opts,
        });
        this.name = "AutomationExecutionTimeoutException";
        this.$fault = "server";
        Object.setPrototypeOf(this, AutomationExecutionTimeoutException.prototype);
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class RequestTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestTimeoutException",
            $fault: "server",
            ...opts,
        });
        this.name = "RequestTimeoutException";
        this.$fault = "server";
        Object.setPrototypeOf(this, RequestTimeoutException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const UpsertAction = {
    Appended: "APPENDED",
    Updated: "UPDATED",
};
export const Format = {
    Accounting: "ACCOUNTING",
    Auto: "AUTO",
    Contact: "CONTACT",
    Currency: "CURRENCY",
    Date: "DATE",
    DateTime: "DATE_TIME",
    Number: "NUMBER",
    Percentage: "PERCENTAGE",
    Rowlink: "ROWLINK",
    Rowset: "ROWSET",
    Text: "TEXT",
    Time: "TIME",
};
export const ImportDataCharacterEncoding = {
    ISO_8859_1: "ISO-8859-1",
    US_ASCII: "US-ASCII",
    UTF_16: "UTF-16",
    UTF_16BE: "UTF-16BE",
    UTF_16LE: "UTF-16LE",
    UTF_8: "UTF-8",
};
export const ErrorCode = {
    AccessDenied: "ACCESS_DENIED",
    FileEmptyError: "FILE_EMPTY_ERROR",
    FileNotFoundError: "FILE_NOT_FOUND_ERROR",
    FileParsingError: "FILE_PARSING_ERROR",
    FileSizeLimitError: "FILE_SIZE_LIMIT_ERROR",
    InvalidFileTypeError: "INVALID_FILE_TYPE_ERROR",
    InvalidImportOptionsError: "INVALID_IMPORT_OPTIONS_ERROR",
    InvalidTableColumnIdError: "INVALID_TABLE_COLUMN_ID_ERROR",
    InvalidTableIdError: "INVALID_TABLE_ID_ERROR",
    InvalidUrlError: "INVALID_URL_ERROR",
    ResourceNotFoundError: "RESOURCE_NOT_FOUND_ERROR",
    SystemLimitError: "SYSTEM_LIMIT_ERROR",
    TableNotFoundError: "TABLE_NOT_FOUND_ERROR",
    UnknownError: "UNKNOWN_ERROR",
};
export const TableDataImportJobStatus = {
    Completed: "COMPLETED",
    Failed: "FAILED",
    InProgress: "IN_PROGRESS",
    Submitted: "SUBMITTED",
};
export const ImportSourceDataFormat = {
    DelimitedText: "DELIMITED_TEXT",
};
export const CellInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.fact && { fact: SENSITIVE_STRING }),
    ...(obj.facts && { facts: SENSITIVE_STRING }),
});
export const CreateRowDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.cellsToCreate && {
        cellsToCreate: Object.entries(obj.cellsToCreate).reduce((acc, [key, value]) => ((acc[key] = CellInputFilterSensitiveLog(value)), acc), {}),
    }),
});
export const BatchCreateTableRowsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.rowsToCreate && { rowsToCreate: obj.rowsToCreate.map((item) => CreateRowDataFilterSensitiveLog(item)) }),
});
export const UpdateRowDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.cellsToUpdate && {
        cellsToUpdate: Object.entries(obj.cellsToUpdate).reduce((acc, [key, value]) => ((acc[key] = CellInputFilterSensitiveLog(value)), acc), {}),
    }),
});
export const BatchUpdateTableRowsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.rowsToUpdate && { rowsToUpdate: obj.rowsToUpdate.map((item) => UpdateRowDataFilterSensitiveLog(item)) }),
});
export const FilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.formula && { formula: SENSITIVE_STRING }),
});
export const UpsertRowDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filter && { filter: FilterFilterSensitiveLog(obj.filter) }),
    ...(obj.cellsToUpdate && {
        cellsToUpdate: Object.entries(obj.cellsToUpdate).reduce((acc, [key, value]) => ((acc[key] = CellInputFilterSensitiveLog(value)), acc), {}),
    }),
});
export const BatchUpsertTableRowsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.rowsToUpsert && { rowsToUpsert: obj.rowsToUpsert.map((item) => UpsertRowDataFilterSensitiveLog(item)) }),
});
export const CellFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.formula && { formula: SENSITIVE_STRING }),
});
export const ColumnMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.name && { name: SENSITIVE_STRING }),
});
export const DataItemFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ImportDataSourceConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataSourceUrl && { dataSourceUrl: SENSITIVE_STRING }),
});
export const ImportDataSourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataSourceConfig && { dataSourceConfig: ImportDataSourceConfigFilterSensitiveLog(obj.dataSourceConfig) }),
});
export const ImportJobSubmitterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.email && { email: SENSITIVE_STRING }),
});
export const TableDataImportJobMetadataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.submitter && { submitter: ImportJobSubmitterFilterSensitiveLog(obj.submitter) }),
    ...(obj.dataSource && { dataSource: ImportDataSourceFilterSensitiveLog(obj.dataSource) }),
});
export const DescribeTableDataImportJobResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobMetadata && { jobMetadata: TableDataImportJobMetadataFilterSensitiveLog(obj.jobMetadata) }),
});
export const VariableValueFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GetScreenDataRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.variables && { variables: SENSITIVE_STRING }),
});
export const ResultRowFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataItems && { dataItems: SENSITIVE_STRING }),
});
export const ResultSetFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.headers && { headers: obj.headers.map((item) => ColumnMetadataFilterSensitiveLog(item)) }),
    ...(obj.rows && { rows: obj.rows.map((item) => ResultRowFilterSensitiveLog(item)) }),
});
export const GetScreenDataResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.results && {
        results: Object.entries(obj.results).reduce((acc, [key, value]) => ((acc[key] = ResultSetFilterSensitiveLog(value)), acc), {}),
    }),
});
export const InvokeScreenAutomationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.variables && { variables: SENSITIVE_STRING }),
});
export const TableRowFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.cells && { cells: SENSITIVE_STRING }),
});
export const ListTableRowsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.rows && { rows: obj.rows.map((item) => TableRowFilterSensitiveLog(item)) }),
});
export const QueryTableRowsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filterFormula && { filterFormula: FilterFilterSensitiveLog(obj.filterFormula) }),
});
export const QueryTableRowsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.rows && { rows: obj.rows.map((item) => TableRowFilterSensitiveLog(item)) }),
});
export const StartTableDataImportJobRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataSource && { dataSource: ImportDataSourceFilterSensitiveLog(obj.dataSource) }),
});
