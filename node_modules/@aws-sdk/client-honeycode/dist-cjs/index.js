"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AccessDeniedException: () => AccessDeniedException,
  AutomationExecutionException: () => AutomationExecutionException,
  AutomationExecutionTimeoutException: () => AutomationExecutionTimeoutException,
  BatchCreateTableRowsCommand: () => BatchCreateTableRowsCommand,
  BatchCreateTableRowsRequestFilterSensitiveLog: () => BatchCreateTableRowsRequestFilterSensitiveLog,
  BatchDeleteTableRowsCommand: () => BatchDeleteTableRowsCommand,
  BatchUpdateTableRowsCommand: () => BatchUpdateTableRowsCommand,
  BatchUpdateTableRowsRequestFilterSensitiveLog: () => BatchUpdateTableRowsRequestFilterSensitiveLog,
  BatchUpsertTableRowsCommand: () => BatchUpsertTableRowsCommand,
  BatchUpsertTableRowsRequestFilterSensitiveLog: () => BatchUpsertTableRowsRequestFilterSensitiveLog,
  CellFilterSensitiveLog: () => CellFilterSensitiveLog,
  CellInputFilterSensitiveLog: () => CellInputFilterSensitiveLog,
  ColumnMetadataFilterSensitiveLog: () => ColumnMetadataFilterSensitiveLog,
  CreateRowDataFilterSensitiveLog: () => CreateRowDataFilterSensitiveLog,
  DataItemFilterSensitiveLog: () => DataItemFilterSensitiveLog,
  DescribeTableDataImportJobCommand: () => DescribeTableDataImportJobCommand,
  DescribeTableDataImportJobResultFilterSensitiveLog: () => DescribeTableDataImportJobResultFilterSensitiveLog,
  ErrorCode: () => ErrorCode,
  FilterFilterSensitiveLog: () => FilterFilterSensitiveLog,
  Format: () => Format,
  GetScreenDataCommand: () => GetScreenDataCommand,
  GetScreenDataRequestFilterSensitiveLog: () => GetScreenDataRequestFilterSensitiveLog,
  GetScreenDataResultFilterSensitiveLog: () => GetScreenDataResultFilterSensitiveLog,
  Honeycode: () => Honeycode,
  HoneycodeClient: () => HoneycodeClient,
  HoneycodeServiceException: () => HoneycodeServiceException,
  ImportDataCharacterEncoding: () => ImportDataCharacterEncoding,
  ImportDataSourceConfigFilterSensitiveLog: () => ImportDataSourceConfigFilterSensitiveLog,
  ImportDataSourceFilterSensitiveLog: () => ImportDataSourceFilterSensitiveLog,
  ImportJobSubmitterFilterSensitiveLog: () => ImportJobSubmitterFilterSensitiveLog,
  ImportSourceDataFormat: () => ImportSourceDataFormat,
  InternalServerException: () => InternalServerException,
  InvokeScreenAutomationCommand: () => InvokeScreenAutomationCommand,
  InvokeScreenAutomationRequestFilterSensitiveLog: () => InvokeScreenAutomationRequestFilterSensitiveLog,
  ListTableColumnsCommand: () => ListTableColumnsCommand,
  ListTableRowsCommand: () => ListTableRowsCommand,
  ListTableRowsResultFilterSensitiveLog: () => ListTableRowsResultFilterSensitiveLog,
  ListTablesCommand: () => ListTablesCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  QueryTableRowsCommand: () => QueryTableRowsCommand,
  QueryTableRowsRequestFilterSensitiveLog: () => QueryTableRowsRequestFilterSensitiveLog,
  QueryTableRowsResultFilterSensitiveLog: () => QueryTableRowsResultFilterSensitiveLog,
  RequestTimeoutException: () => RequestTimeoutException,
  ResourceNotFoundException: () => ResourceNotFoundException,
  ResultRowFilterSensitiveLog: () => ResultRowFilterSensitiveLog,
  ResultSetFilterSensitiveLog: () => ResultSetFilterSensitiveLog,
  ServiceQuotaExceededException: () => ServiceQuotaExceededException,
  ServiceUnavailableException: () => ServiceUnavailableException,
  StartTableDataImportJobCommand: () => StartTableDataImportJobCommand,
  StartTableDataImportJobRequestFilterSensitiveLog: () => StartTableDataImportJobRequestFilterSensitiveLog,
  TableDataImportJobMetadataFilterSensitiveLog: () => TableDataImportJobMetadataFilterSensitiveLog,
  TableDataImportJobStatus: () => TableDataImportJobStatus,
  TableRowFilterSensitiveLog: () => TableRowFilterSensitiveLog,
  TagResourceCommand: () => TagResourceCommand,
  ThrottlingException: () => ThrottlingException,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateRowDataFilterSensitiveLog: () => UpdateRowDataFilterSensitiveLog,
  UpsertAction: () => UpsertAction,
  UpsertRowDataFilterSensitiveLog: () => UpsertRowDataFilterSensitiveLog,
  ValidationException: () => ValidationException,
  VariableValueFilterSensitiveLog: () => VariableValueFilterSensitiveLog,
  __Client: () => import_smithy_client.Client,
  paginateListTableColumns: () => paginateListTableColumns,
  paginateListTableRows: () => paginateListTableRows,
  paginateListTables: () => paginateListTables,
  paginateQueryTableRows: () => paginateQueryTableRows
});
module.exports = __toCommonJS(src_exports);

// src/HoneycodeClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "honeycode"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/HoneycodeClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/HoneycodeClient.ts
var _HoneycodeClient = class _HoneycodeClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultHoneycodeHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_HoneycodeClient, "HoneycodeClient");
var HoneycodeClient = _HoneycodeClient;

// src/Honeycode.ts


// src/commands/BatchCreateTableRowsCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/models/models_0.ts


// src/models/HoneycodeServiceException.ts

var _HoneycodeServiceException = class _HoneycodeServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _HoneycodeServiceException.prototype);
  }
};
__name(_HoneycodeServiceException, "HoneycodeServiceException");
var HoneycodeServiceException = _HoneycodeServiceException;

// src/models/models_0.ts
var _AccessDeniedException = class _AccessDeniedException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    this.name = "AccessDeniedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
  }
};
__name(_AccessDeniedException, "AccessDeniedException");
var AccessDeniedException = _AccessDeniedException;
var _AutomationExecutionException = class _AutomationExecutionException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AutomationExecutionException",
      $fault: "client",
      ...opts
    });
    this.name = "AutomationExecutionException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AutomationExecutionException.prototype);
  }
};
__name(_AutomationExecutionException, "AutomationExecutionException");
var AutomationExecutionException = _AutomationExecutionException;
var _AutomationExecutionTimeoutException = class _AutomationExecutionTimeoutException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AutomationExecutionTimeoutException",
      $fault: "server",
      ...opts
    });
    this.name = "AutomationExecutionTimeoutException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _AutomationExecutionTimeoutException.prototype);
  }
};
__name(_AutomationExecutionTimeoutException, "AutomationExecutionTimeoutException");
var AutomationExecutionTimeoutException = _AutomationExecutionTimeoutException;
var _InternalServerException = class _InternalServerException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
__name(_InternalServerException, "InternalServerException");
var InternalServerException = _InternalServerException;
var _RequestTimeoutException = class _RequestTimeoutException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RequestTimeoutException",
      $fault: "server",
      ...opts
    });
    this.name = "RequestTimeoutException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _RequestTimeoutException.prototype);
  }
};
__name(_RequestTimeoutException, "RequestTimeoutException");
var RequestTimeoutException = _RequestTimeoutException;
var _ResourceNotFoundException = class _ResourceNotFoundException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
__name(_ResourceNotFoundException, "ResourceNotFoundException");
var ResourceNotFoundException = _ResourceNotFoundException;
var _ServiceQuotaExceededException = class _ServiceQuotaExceededException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ServiceQuotaExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
  }
};
__name(_ServiceQuotaExceededException, "ServiceQuotaExceededException");
var ServiceQuotaExceededException = _ServiceQuotaExceededException;
var _ServiceUnavailableException = class _ServiceUnavailableException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "ServiceUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
  }
};
__name(_ServiceUnavailableException, "ServiceUnavailableException");
var ServiceUnavailableException = _ServiceUnavailableException;
var _ThrottlingException = class _ThrottlingException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
__name(_ThrottlingException, "ThrottlingException");
var ThrottlingException = _ThrottlingException;
var _ValidationException = class _ValidationException extends HoneycodeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
__name(_ValidationException, "ValidationException");
var ValidationException = _ValidationException;
var UpsertAction = {
  Appended: "APPENDED",
  Updated: "UPDATED"
};
var Format = {
  Accounting: "ACCOUNTING",
  Auto: "AUTO",
  Contact: "CONTACT",
  Currency: "CURRENCY",
  Date: "DATE",
  DateTime: "DATE_TIME",
  Number: "NUMBER",
  Percentage: "PERCENTAGE",
  Rowlink: "ROWLINK",
  Rowset: "ROWSET",
  Text: "TEXT",
  Time: "TIME"
};
var ImportDataCharacterEncoding = {
  ISO_8859_1: "ISO-8859-1",
  US_ASCII: "US-ASCII",
  UTF_16: "UTF-16",
  UTF_16BE: "UTF-16BE",
  UTF_16LE: "UTF-16LE",
  UTF_8: "UTF-8"
};
var ErrorCode = {
  AccessDenied: "ACCESS_DENIED",
  FileEmptyError: "FILE_EMPTY_ERROR",
  FileNotFoundError: "FILE_NOT_FOUND_ERROR",
  FileParsingError: "FILE_PARSING_ERROR",
  FileSizeLimitError: "FILE_SIZE_LIMIT_ERROR",
  InvalidFileTypeError: "INVALID_FILE_TYPE_ERROR",
  InvalidImportOptionsError: "INVALID_IMPORT_OPTIONS_ERROR",
  InvalidTableColumnIdError: "INVALID_TABLE_COLUMN_ID_ERROR",
  InvalidTableIdError: "INVALID_TABLE_ID_ERROR",
  InvalidUrlError: "INVALID_URL_ERROR",
  ResourceNotFoundError: "RESOURCE_NOT_FOUND_ERROR",
  SystemLimitError: "SYSTEM_LIMIT_ERROR",
  TableNotFoundError: "TABLE_NOT_FOUND_ERROR",
  UnknownError: "UNKNOWN_ERROR"
};
var TableDataImportJobStatus = {
  Completed: "COMPLETED",
  Failed: "FAILED",
  InProgress: "IN_PROGRESS",
  Submitted: "SUBMITTED"
};
var ImportSourceDataFormat = {
  DelimitedText: "DELIMITED_TEXT"
};
var CellInputFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.fact && { fact: import_smithy_client.SENSITIVE_STRING },
  ...obj.facts && { facts: import_smithy_client.SENSITIVE_STRING }
}), "CellInputFilterSensitiveLog");
var CreateRowDataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.cellsToCreate && {
    cellsToCreate: Object.entries(obj.cellsToCreate).reduce(
      (acc, [key, value]) => (acc[key] = CellInputFilterSensitiveLog(value), acc),
      {}
    )
  }
}), "CreateRowDataFilterSensitiveLog");
var BatchCreateTableRowsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.rowsToCreate && { rowsToCreate: obj.rowsToCreate.map((item) => CreateRowDataFilterSensitiveLog(item)) }
}), "BatchCreateTableRowsRequestFilterSensitiveLog");
var UpdateRowDataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.cellsToUpdate && {
    cellsToUpdate: Object.entries(obj.cellsToUpdate).reduce(
      (acc, [key, value]) => (acc[key] = CellInputFilterSensitiveLog(value), acc),
      {}
    )
  }
}), "UpdateRowDataFilterSensitiveLog");
var BatchUpdateTableRowsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.rowsToUpdate && { rowsToUpdate: obj.rowsToUpdate.map((item) => UpdateRowDataFilterSensitiveLog(item)) }
}), "BatchUpdateTableRowsRequestFilterSensitiveLog");
var FilterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.formula && { formula: import_smithy_client.SENSITIVE_STRING }
}), "FilterFilterSensitiveLog");
var UpsertRowDataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.filter && { filter: FilterFilterSensitiveLog(obj.filter) },
  ...obj.cellsToUpdate && {
    cellsToUpdate: Object.entries(obj.cellsToUpdate).reduce(
      (acc, [key, value]) => (acc[key] = CellInputFilterSensitiveLog(value), acc),
      {}
    )
  }
}), "UpsertRowDataFilterSensitiveLog");
var BatchUpsertTableRowsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.rowsToUpsert && { rowsToUpsert: obj.rowsToUpsert.map((item) => UpsertRowDataFilterSensitiveLog(item)) }
}), "BatchUpsertTableRowsRequestFilterSensitiveLog");
var CellFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.formula && { formula: import_smithy_client.SENSITIVE_STRING }
}), "CellFilterSensitiveLog");
var ColumnMetadataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.name && { name: import_smithy_client.SENSITIVE_STRING }
}), "ColumnMetadataFilterSensitiveLog");
var DataItemFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj
}), "DataItemFilterSensitiveLog");
var ImportDataSourceConfigFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.dataSourceUrl && { dataSourceUrl: import_smithy_client.SENSITIVE_STRING }
}), "ImportDataSourceConfigFilterSensitiveLog");
var ImportDataSourceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.dataSourceConfig && { dataSourceConfig: ImportDataSourceConfigFilterSensitiveLog(obj.dataSourceConfig) }
}), "ImportDataSourceFilterSensitiveLog");
var ImportJobSubmitterFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.email && { email: import_smithy_client.SENSITIVE_STRING }
}), "ImportJobSubmitterFilterSensitiveLog");
var TableDataImportJobMetadataFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.submitter && { submitter: ImportJobSubmitterFilterSensitiveLog(obj.submitter) },
  ...obj.dataSource && { dataSource: ImportDataSourceFilterSensitiveLog(obj.dataSource) }
}), "TableDataImportJobMetadataFilterSensitiveLog");
var DescribeTableDataImportJobResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.jobMetadata && { jobMetadata: TableDataImportJobMetadataFilterSensitiveLog(obj.jobMetadata) }
}), "DescribeTableDataImportJobResultFilterSensitiveLog");
var VariableValueFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj
}), "VariableValueFilterSensitiveLog");
var GetScreenDataRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.variables && { variables: import_smithy_client.SENSITIVE_STRING }
}), "GetScreenDataRequestFilterSensitiveLog");
var ResultRowFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.dataItems && { dataItems: import_smithy_client.SENSITIVE_STRING }
}), "ResultRowFilterSensitiveLog");
var ResultSetFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.headers && { headers: obj.headers.map((item) => ColumnMetadataFilterSensitiveLog(item)) },
  ...obj.rows && { rows: obj.rows.map((item) => ResultRowFilterSensitiveLog(item)) }
}), "ResultSetFilterSensitiveLog");
var GetScreenDataResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.results && {
    results: Object.entries(obj.results).reduce(
      (acc, [key, value]) => (acc[key] = ResultSetFilterSensitiveLog(value), acc),
      {}
    )
  }
}), "GetScreenDataResultFilterSensitiveLog");
var InvokeScreenAutomationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.variables && { variables: import_smithy_client.SENSITIVE_STRING }
}), "InvokeScreenAutomationRequestFilterSensitiveLog");
var TableRowFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.cells && { cells: import_smithy_client.SENSITIVE_STRING }
}), "TableRowFilterSensitiveLog");
var ListTableRowsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.rows && { rows: obj.rows.map((item) => TableRowFilterSensitiveLog(item)) }
}), "ListTableRowsResultFilterSensitiveLog");
var QueryTableRowsRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.filterFormula && { filterFormula: FilterFilterSensitiveLog(obj.filterFormula) }
}), "QueryTableRowsRequestFilterSensitiveLog");
var QueryTableRowsResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.rows && { rows: obj.rows.map((item) => TableRowFilterSensitiveLog(item)) }
}), "QueryTableRowsResultFilterSensitiveLog");
var StartTableDataImportJobRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.dataSource && { dataSource: ImportDataSourceFilterSensitiveLog(obj.dataSource) }
}), "StartTableDataImportJobRequestFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts


var se_BatchCreateTableRowsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workbooks/{workbookId}/tables/{tableId}/rows/batchcreate");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("tableId", () => input.tableId, "{tableId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientRequestToken: [],
      rowsToCreate: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchCreateTableRowsCommand");
var se_BatchDeleteTableRowsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workbooks/{workbookId}/tables/{tableId}/rows/batchdelete");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("tableId", () => input.tableId, "{tableId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientRequestToken: [],
      rowIds: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchDeleteTableRowsCommand");
var se_BatchUpdateTableRowsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workbooks/{workbookId}/tables/{tableId}/rows/batchupdate");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("tableId", () => input.tableId, "{tableId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientRequestToken: [],
      rowsToUpdate: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchUpdateTableRowsCommand");
var se_BatchUpsertTableRowsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workbooks/{workbookId}/tables/{tableId}/rows/batchupsert");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("tableId", () => input.tableId, "{tableId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientRequestToken: [],
      rowsToUpsert: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchUpsertTableRowsCommand");
var se_DescribeTableDataImportJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workbooks/{workbookId}/tables/{tableId}/import/{jobId}");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("tableId", () => input.tableId, "{tableId}", false);
  b.p("jobId", () => input.jobId, "{jobId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeTableDataImportJobCommand");
var se_GetScreenDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/screendata");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      appId: [],
      maxResults: [],
      nextToken: [],
      screenId: [],
      variables: (_) => (0, import_smithy_client._json)(_),
      workbookId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetScreenDataCommand");
var se_InvokeScreenAutomationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workbooks/{workbookId}/apps/{appId}/screens/{screenId}/automations/{screenAutomationId}");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("appId", () => input.appId, "{appId}", false);
  b.p("screenId", () => input.screenId, "{screenId}", false);
  b.p("screenAutomationId", () => input.screenAutomationId, "{screenAutomationId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientRequestToken: [],
      rowId: [],
      variables: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_InvokeScreenAutomationCommand");
var se_ListTableColumnsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workbooks/{workbookId}/tables/{tableId}/columns");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("tableId", () => input.tableId, "{tableId}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTableColumnsCommand");
var se_ListTableRowsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workbooks/{workbookId}/tables/{tableId}/rows/list");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("tableId", () => input.tableId, "{tableId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      rowIds: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListTableRowsCommand");
var se_ListTablesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workbooks/{workbookId}/tables");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTablesCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_QueryTableRowsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workbooks/{workbookId}/tables/{tableId}/rows/query");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("tableId", () => input.tableId, "{tableId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filterFormula: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_QueryTableRowsCommand");
var se_StartTableDataImportJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workbooks/{workbookId}/tables/{destinationTableId}/import");
  b.p("workbookId", () => input.workbookId, "{workbookId}", false);
  b.p("destinationTableId", () => input.destinationTableId, "{destinationTableId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientRequestToken: [],
      dataFormat: [],
      dataSource: (_) => (0, import_smithy_client._json)(_),
      importOptions: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartTableDataImportJobCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.tagKeys, `tagKeys`) != null,
      () => (input[_tK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var de_BatchCreateTableRowsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    createdRows: import_smithy_client._json,
    failedBatchItems: import_smithy_client._json,
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchCreateTableRowsCommand");
var de_BatchDeleteTableRowsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    failedBatchItems: import_smithy_client._json,
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchDeleteTableRowsCommand");
var de_BatchUpdateTableRowsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    failedBatchItems: import_smithy_client._json,
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchUpdateTableRowsCommand");
var de_BatchUpsertTableRowsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    failedBatchItems: import_smithy_client._json,
    rows: import_smithy_client._json,
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchUpsertTableRowsCommand");
var de_DescribeTableDataImportJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errorCode: import_smithy_client.expectString,
    jobMetadata: (_) => de_TableDataImportJobMetadata(_, context),
    jobStatus: import_smithy_client.expectString,
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeTableDataImportJobCommand");
var de_GetScreenDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    results: import_smithy_client._json,
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetScreenDataCommand");
var de_InvokeScreenAutomationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_InvokeScreenAutomationCommand");
var de_ListTableColumnsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    tableColumns: import_smithy_client._json,
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTableColumnsCommand");
var de_ListTableRowsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    columnIds: import_smithy_client._json,
    nextToken: import_smithy_client.expectString,
    rowIdsNotFound: import_smithy_client._json,
    rows: import_smithy_client._json,
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTableRowsCommand");
var de_ListTablesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    tables: import_smithy_client._json,
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTablesCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_QueryTableRowsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    columnIds: import_smithy_client._json,
    nextToken: import_smithy_client.expectString,
    rows: import_smithy_client._json,
    workbookCursor: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_QueryTableRowsCommand");
var de_StartTableDataImportJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    jobId: import_smithy_client.expectString,
    jobStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartTableDataImportJobCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.honeycode#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.honeycode#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "RequestTimeoutException":
    case "com.amazonaws.honeycode#RequestTimeoutException":
      throw await de_RequestTimeoutExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.honeycode#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.honeycode#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.honeycode#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.honeycode#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.honeycode#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "AutomationExecutionException":
    case "com.amazonaws.honeycode#AutomationExecutionException":
      throw await de_AutomationExecutionExceptionRes(parsedOutput, context);
    case "AutomationExecutionTimeoutException":
    case "com.amazonaws.honeycode#AutomationExecutionTimeoutException":
      throw await de_AutomationExecutionTimeoutExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(HoneycodeServiceException);
var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessDeniedExceptionRes");
var de_AutomationExecutionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AutomationExecutionException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AutomationExecutionExceptionRes");
var de_AutomationExecutionTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AutomationExecutionTimeoutException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AutomationExecutionTimeoutExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerExceptionRes");
var de_RequestTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new RequestTimeoutException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_RequestTimeoutExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceQuotaExceededExceptionRes");
var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var de_TableDataImportJobMetadata = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    dataSource: import_smithy_client._json,
    importOptions: import_smithy_client._json,
    submitTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    submitter: import_smithy_client._json
  });
}, "de_TableDataImportJobMetadata");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
var _mR = "maxResults";
var _nT = "nextToken";
var _tK = "tagKeys";
var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
}), "parseBody");
var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
}, "parseErrorBody");
var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
  const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
  const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  }, "sanitizeErrorCode");
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
}, "loadRestJsonErrorCode");

// src/commands/BatchCreateTableRowsCommand.ts
var _BatchCreateTableRowsCommand = class _BatchCreateTableRowsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "BatchCreateTableRows", {}).n("HoneycodeClient", "BatchCreateTableRowsCommand").f(BatchCreateTableRowsRequestFilterSensitiveLog, void 0).ser(se_BatchCreateTableRowsCommand).de(de_BatchCreateTableRowsCommand).build() {
};
__name(_BatchCreateTableRowsCommand, "BatchCreateTableRowsCommand");
var BatchCreateTableRowsCommand = _BatchCreateTableRowsCommand;

// src/commands/BatchDeleteTableRowsCommand.ts




var _BatchDeleteTableRowsCommand = class _BatchDeleteTableRowsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "BatchDeleteTableRows", {}).n("HoneycodeClient", "BatchDeleteTableRowsCommand").f(void 0, void 0).ser(se_BatchDeleteTableRowsCommand).de(de_BatchDeleteTableRowsCommand).build() {
};
__name(_BatchDeleteTableRowsCommand, "BatchDeleteTableRowsCommand");
var BatchDeleteTableRowsCommand = _BatchDeleteTableRowsCommand;

// src/commands/BatchUpdateTableRowsCommand.ts




var _BatchUpdateTableRowsCommand = class _BatchUpdateTableRowsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "BatchUpdateTableRows", {}).n("HoneycodeClient", "BatchUpdateTableRowsCommand").f(BatchUpdateTableRowsRequestFilterSensitiveLog, void 0).ser(se_BatchUpdateTableRowsCommand).de(de_BatchUpdateTableRowsCommand).build() {
};
__name(_BatchUpdateTableRowsCommand, "BatchUpdateTableRowsCommand");
var BatchUpdateTableRowsCommand = _BatchUpdateTableRowsCommand;

// src/commands/BatchUpsertTableRowsCommand.ts




var _BatchUpsertTableRowsCommand = class _BatchUpsertTableRowsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "BatchUpsertTableRows", {}).n("HoneycodeClient", "BatchUpsertTableRowsCommand").f(BatchUpsertTableRowsRequestFilterSensitiveLog, void 0).ser(se_BatchUpsertTableRowsCommand).de(de_BatchUpsertTableRowsCommand).build() {
};
__name(_BatchUpsertTableRowsCommand, "BatchUpsertTableRowsCommand");
var BatchUpsertTableRowsCommand = _BatchUpsertTableRowsCommand;

// src/commands/DescribeTableDataImportJobCommand.ts




var _DescribeTableDataImportJobCommand = class _DescribeTableDataImportJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "DescribeTableDataImportJob", {}).n("HoneycodeClient", "DescribeTableDataImportJobCommand").f(void 0, DescribeTableDataImportJobResultFilterSensitiveLog).ser(se_DescribeTableDataImportJobCommand).de(de_DescribeTableDataImportJobCommand).build() {
};
__name(_DescribeTableDataImportJobCommand, "DescribeTableDataImportJobCommand");
var DescribeTableDataImportJobCommand = _DescribeTableDataImportJobCommand;

// src/commands/GetScreenDataCommand.ts




var _GetScreenDataCommand = class _GetScreenDataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "GetScreenData", {}).n("HoneycodeClient", "GetScreenDataCommand").f(GetScreenDataRequestFilterSensitiveLog, GetScreenDataResultFilterSensitiveLog).ser(se_GetScreenDataCommand).de(de_GetScreenDataCommand).build() {
};
__name(_GetScreenDataCommand, "GetScreenDataCommand");
var GetScreenDataCommand = _GetScreenDataCommand;

// src/commands/InvokeScreenAutomationCommand.ts




var _InvokeScreenAutomationCommand = class _InvokeScreenAutomationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "InvokeScreenAutomation", {}).n("HoneycodeClient", "InvokeScreenAutomationCommand").f(InvokeScreenAutomationRequestFilterSensitiveLog, void 0).ser(se_InvokeScreenAutomationCommand).de(de_InvokeScreenAutomationCommand).build() {
};
__name(_InvokeScreenAutomationCommand, "InvokeScreenAutomationCommand");
var InvokeScreenAutomationCommand = _InvokeScreenAutomationCommand;

// src/commands/ListTableColumnsCommand.ts




var _ListTableColumnsCommand = class _ListTableColumnsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "ListTableColumns", {}).n("HoneycodeClient", "ListTableColumnsCommand").f(void 0, void 0).ser(se_ListTableColumnsCommand).de(de_ListTableColumnsCommand).build() {
};
__name(_ListTableColumnsCommand, "ListTableColumnsCommand");
var ListTableColumnsCommand = _ListTableColumnsCommand;

// src/commands/ListTableRowsCommand.ts




var _ListTableRowsCommand = class _ListTableRowsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "ListTableRows", {}).n("HoneycodeClient", "ListTableRowsCommand").f(void 0, ListTableRowsResultFilterSensitiveLog).ser(se_ListTableRowsCommand).de(de_ListTableRowsCommand).build() {
};
__name(_ListTableRowsCommand, "ListTableRowsCommand");
var ListTableRowsCommand = _ListTableRowsCommand;

// src/commands/ListTablesCommand.ts




var _ListTablesCommand = class _ListTablesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "ListTables", {}).n("HoneycodeClient", "ListTablesCommand").f(void 0, void 0).ser(se_ListTablesCommand).de(de_ListTablesCommand).build() {
};
__name(_ListTablesCommand, "ListTablesCommand");
var ListTablesCommand = _ListTablesCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "ListTagsForResource", {}).n("HoneycodeClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/QueryTableRowsCommand.ts




var _QueryTableRowsCommand = class _QueryTableRowsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "QueryTableRows", {}).n("HoneycodeClient", "QueryTableRowsCommand").f(QueryTableRowsRequestFilterSensitiveLog, QueryTableRowsResultFilterSensitiveLog).ser(se_QueryTableRowsCommand).de(de_QueryTableRowsCommand).build() {
};
__name(_QueryTableRowsCommand, "QueryTableRowsCommand");
var QueryTableRowsCommand = _QueryTableRowsCommand;

// src/commands/StartTableDataImportJobCommand.ts




var _StartTableDataImportJobCommand = class _StartTableDataImportJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "StartTableDataImportJob", {}).n("HoneycodeClient", "StartTableDataImportJobCommand").f(StartTableDataImportJobRequestFilterSensitiveLog, void 0).ser(se_StartTableDataImportJobCommand).de(de_StartTableDataImportJobCommand).build() {
};
__name(_StartTableDataImportJobCommand, "StartTableDataImportJobCommand");
var StartTableDataImportJobCommand = _StartTableDataImportJobCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "TagResource", {}).n("HoneycodeClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SheetsPublicApiService", "UntagResource", {}).n("HoneycodeClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/Honeycode.ts
var commands = {
  BatchCreateTableRowsCommand,
  BatchDeleteTableRowsCommand,
  BatchUpdateTableRowsCommand,
  BatchUpsertTableRowsCommand,
  DescribeTableDataImportJobCommand,
  GetScreenDataCommand,
  InvokeScreenAutomationCommand,
  ListTableColumnsCommand,
  ListTableRowsCommand,
  ListTablesCommand,
  ListTagsForResourceCommand,
  QueryTableRowsCommand,
  StartTableDataImportJobCommand,
  TagResourceCommand,
  UntagResourceCommand
};
var _Honeycode = class _Honeycode extends HoneycodeClient {
};
__name(_Honeycode, "Honeycode");
var Honeycode = _Honeycode;
(0, import_smithy_client.createAggregatedClient)(commands, Honeycode);

// src/pagination/ListTableColumnsPaginator.ts

var paginateListTableColumns = (0, import_core.createPaginator)(HoneycodeClient, ListTableColumnsCommand, "nextToken", "nextToken", "");

// src/pagination/ListTableRowsPaginator.ts

var paginateListTableRows = (0, import_core.createPaginator)(HoneycodeClient, ListTableRowsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListTablesPaginator.ts

var paginateListTables = (0, import_core.createPaginator)(HoneycodeClient, ListTablesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/QueryTableRowsPaginator.ts

var paginateQueryTableRows = (0, import_core.createPaginator)(HoneycodeClient, QueryTableRowsCommand, "nextToken", "nextToken", "maxResults");

// src/index.ts
var import_util_endpoints = require("@aws-sdk/util-endpoints");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  HoneycodeServiceException,
  __Client,
  HoneycodeClient,
  Honeycode,
  $Command,
  BatchCreateTableRowsCommand,
  BatchDeleteTableRowsCommand,
  BatchUpdateTableRowsCommand,
  BatchUpsertTableRowsCommand,
  DescribeTableDataImportJobCommand,
  GetScreenDataCommand,
  InvokeScreenAutomationCommand,
  ListTableColumnsCommand,
  ListTableRowsCommand,
  ListTablesCommand,
  ListTagsForResourceCommand,
  QueryTableRowsCommand,
  StartTableDataImportJobCommand,
  TagResourceCommand,
  UntagResourceCommand,
  paginateListTableColumns,
  paginateListTableRows,
  paginateListTables,
  paginateQueryTableRows,
  AccessDeniedException,
  AutomationExecutionException,
  AutomationExecutionTimeoutException,
  InternalServerException,
  RequestTimeoutException,
  ResourceNotFoundException,
  ServiceQuotaExceededException,
  ServiceUnavailableException,
  ThrottlingException,
  ValidationException,
  UpsertAction,
  Format,
  ImportDataCharacterEncoding,
  ErrorCode,
  TableDataImportJobStatus,
  ImportSourceDataFormat,
  CellInputFilterSensitiveLog,
  CreateRowDataFilterSensitiveLog,
  BatchCreateTableRowsRequestFilterSensitiveLog,
  UpdateRowDataFilterSensitiveLog,
  BatchUpdateTableRowsRequestFilterSensitiveLog,
  FilterFilterSensitiveLog,
  UpsertRowDataFilterSensitiveLog,
  BatchUpsertTableRowsRequestFilterSensitiveLog,
  CellFilterSensitiveLog,
  ColumnMetadataFilterSensitiveLog,
  DataItemFilterSensitiveLog,
  ImportDataSourceConfigFilterSensitiveLog,
  ImportDataSourceFilterSensitiveLog,
  ImportJobSubmitterFilterSensitiveLog,
  TableDataImportJobMetadataFilterSensitiveLog,
  DescribeTableDataImportJobResultFilterSensitiveLog,
  VariableValueFilterSensitiveLog,
  GetScreenDataRequestFilterSensitiveLog,
  ResultRowFilterSensitiveLog,
  ResultSetFilterSensitiveLog,
  GetScreenDataResultFilterSensitiveLog,
  InvokeScreenAutomationRequestFilterSensitiveLog,
  TableRowFilterSensitiveLog,
  ListTableRowsResultFilterSensitiveLog,
  QueryTableRowsRequestFilterSensitiveLog,
  QueryTableRowsResultFilterSensitiveLog,
  StartTableDataImportJobRequestFilterSensitiveLog
});

