import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { AmplifyBackendServiceException as __BaseException } from "../models/AmplifyBackendServiceException";
import { BadRequestException, GatewayTimeoutException, NotFoundException, TooManyRequestsException, } from "../models/models_0";
export const se_CloneBackendCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/environments/{BackendEnvironmentName}/clone");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        targetEnvironmentName: [, , `TargetEnvironmentName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateBackendCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend");
    let body;
    body = JSON.stringify(take(input, {
        appId: [, , `AppId`],
        appName: [, , `AppName`],
        backendEnvironmentName: [, , `BackendEnvironmentName`],
        resourceConfig: [, (_) => _json(_), `ResourceConfig`],
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateBackendAPICommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/api");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    let body;
    body = JSON.stringify(take(input, {
        backendEnvironmentName: [, , `BackendEnvironmentName`],
        resourceConfig: [, (_) => se_BackendAPIResourceConfig(_, context), `ResourceConfig`],
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateBackendAuthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/auth");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    let body;
    body = JSON.stringify(take(input, {
        backendEnvironmentName: [, , `BackendEnvironmentName`],
        resourceConfig: [, (_) => se_CreateBackendAuthResourceConfig(_, context), `ResourceConfig`],
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateBackendConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/config");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    let body;
    body = JSON.stringify(take(input, {
        backendManagerAppId: [, , `BackendManagerAppId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateBackendStorageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/storage");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    let body;
    body = JSON.stringify(take(input, {
        backendEnvironmentName: [, , `BackendEnvironmentName`],
        resourceConfig: [, (_) => se_CreateBackendStorageResourceConfig(_, context), `ResourceConfig`],
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTokenCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backend/{AppId}/challenge");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackendCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backend/{AppId}/environments/{BackendEnvironmentName}/remove");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackendAPICommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/api/{BackendEnvironmentName}/remove");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceConfig: [, (_) => se_BackendAPIResourceConfig(_, context), `ResourceConfig`],
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackendAuthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/auth/{BackendEnvironmentName}/remove");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackendStorageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/storage/{BackendEnvironmentName}/remove");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceName: [, , `ResourceName`],
        serviceName: [, , `ServiceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteTokenCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backend/{AppId}/challenge/{SessionId}/remove");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("SessionId", () => input.SessionId, "{SessionId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GenerateBackendAPIModelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/api/{BackendEnvironmentName}/generateModels");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetBackendCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/details");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    let body;
    body = JSON.stringify(take(input, {
        backendEnvironmentName: [, , `BackendEnvironmentName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetBackendAPICommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/api/{BackendEnvironmentName}/details");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceConfig: [, (_) => se_BackendAPIResourceConfig(_, context), `ResourceConfig`],
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetBackendAPIModelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/api/{BackendEnvironmentName}/getModels");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetBackendAuthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/auth/{BackendEnvironmentName}/details");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetBackendJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backend/{AppId}/job/{BackendEnvironmentName}/{JobId}");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBackendStorageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/storage/{BackendEnvironmentName}/details");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetTokenCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backend/{AppId}/challenge/{SessionId}");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("SessionId", () => input.SessionId, "{SessionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ImportBackendAuthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/auth/{BackendEnvironmentName}/import");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        identityPoolId: [, , `IdentityPoolId`],
        nativeClientId: [, , `NativeClientId`],
        userPoolId: [, , `UserPoolId`],
        webClientId: [, , `WebClientId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ImportBackendStorageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/storage/{BackendEnvironmentName}/import");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        bucketName: [, , `BucketName`],
        serviceName: [, , `ServiceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListBackendJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/job/{BackendEnvironmentName}");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        jobId: [, , `JobId`],
        maxResults: [, , `MaxResults`],
        nextToken: [, , `NextToken`],
        operation: [, , `Operation`],
        status: [, , `Status`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListS3BucketsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/s3Buckets");
    let body;
    body = JSON.stringify(take(input, {
        nextToken: [, , `NextToken`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RemoveAllBackendsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/remove");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    let body;
    body = JSON.stringify(take(input, {
        cleanAmplifyApp: [, , `CleanAmplifyApp`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RemoveBackendConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backend/{AppId}/config/remove");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateBackendAPICommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/api/{BackendEnvironmentName}");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceConfig: [, (_) => se_BackendAPIResourceConfig(_, context), `ResourceConfig`],
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateBackendAuthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/auth/{BackendEnvironmentName}");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceConfig: [, (_) => se_UpdateBackendAuthResourceConfig(_, context), `ResourceConfig`],
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateBackendConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/config/update");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    let body;
    body = JSON.stringify(take(input, {
        loginAuthConfig: [, (_) => se_LoginAuthConfigReqObj(_, context), `LoginAuthConfig`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateBackendJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/job/{BackendEnvironmentName}/{JobId}");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    body = JSON.stringify(take(input, {
        operation: [, , `Operation`],
        status: [, , `Status`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateBackendStorageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backend/{AppId}/storage/{BackendEnvironmentName}");
    b.p("AppId", () => input.AppId, "{AppId}", false);
    b.p("BackendEnvironmentName", () => input.BackendEnvironmentName, "{BackendEnvironmentName}", false);
    let body;
    body = JSON.stringify(take(input, {
        resourceConfig: [, (_) => se_UpdateBackendStorageResourceConfig(_, context), `ResourceConfig`],
        resourceName: [, , `ResourceName`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CloneBackendCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBackendCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBackendAPICommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBackendAuthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBackendConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        JobId: [, __expectString, `jobId`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBackendStorageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        JobId: [, __expectString, `jobId`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        ChallengeCode: [, __expectString, `challengeCode`],
        SessionId: [, __expectString, `sessionId`],
        Ttl: [, __expectString, `ttl`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBackendCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBackendAPICommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBackendAuthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBackendStorageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        JobId: [, __expectString, `jobId`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IsSuccess: [, __expectBoolean, `isSuccess`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GenerateBackendAPIModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackendCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AmplifyFeatureFlags: [, __expectString, `amplifyFeatureFlags`],
        AmplifyMetaConfig: [, __expectString, `amplifyMetaConfig`],
        AppId: [, __expectString, `appId`],
        AppName: [, __expectString, `appName`],
        BackendEnvironmentList: [, _json, `backendEnvironmentList`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackendAPICommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        ResourceConfig: [, (_) => de_BackendAPIResourceConfig(_, context), `resourceConfig`],
        ResourceName: [, __expectString, `resourceName`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackendAPIModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ModelIntrospectionSchema: [, __expectString, `modelIntrospectionSchema`],
        Models: [, __expectString, `models`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackendAuthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        ResourceConfig: [, (_) => de_CreateBackendAuthResourceConfig(_, context), `resourceConfig`],
        ResourceName: [, __expectString, `resourceName`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackendJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        CreateTime: [, __expectString, `createTime`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
        UpdateTime: [, __expectString, `updateTime`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackendStorageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        ResourceConfig: [, (_) => de_GetBackendStorageResourceConfig(_, context), `resourceConfig`],
        ResourceName: [, __expectString, `resourceName`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        ChallengeCode: [, __expectString, `challengeCode`],
        SessionId: [, __expectString, `sessionId`],
        Ttl: [, __expectString, `ttl`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ImportBackendAuthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ImportBackendStorageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        JobId: [, __expectString, `jobId`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBackendJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Jobs: [, (_) => de_ListOfBackendJobRespObj(_, context), `jobs`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListS3BucketsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Buckets: [, (_) => de_ListOfS3BucketInfo(_, context), `buckets`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RemoveAllBackendsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RemoveBackendConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Error: [, __expectString, `error`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateBackendAPICommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateBackendAuthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateBackendConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendManagerAppId: [, __expectString, `backendManagerAppId`],
        Error: [, __expectString, `error`],
        LoginAuthConfig: [, (_) => de_LoginAuthConfigReqObj(_, context), `loginAuthConfig`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateBackendJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        CreateTime: [, __expectString, `createTime`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
        UpdateTime: [, __expectString, `updateTime`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateBackendStorageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        JobId: [, __expectString, `jobId`],
        Status: [, __expectString, `status`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.amplifybackend#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "GatewayTimeoutException":
        case "com.amazonaws.amplifybackend#GatewayTimeoutException":
            throw await de_GatewayTimeoutExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.amplifybackend#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.amplifybackend#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_GatewayTimeoutExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new GatewayTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
        ResourceType: [, __expectString, `resourceType`],
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        LimitType: [, __expectString, `limitType`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_BackendAPIAppSyncAuthSettings = (input, context) => {
    return take(input, {
        cognitoUserPoolId: [, , `CognitoUserPoolId`],
        description: [, , `Description`],
        expirationTime: [, __serializeFloat, `ExpirationTime`],
        openIDAuthTTL: [, , `OpenIDAuthTTL`],
        openIDClientId: [, , `OpenIDClientId`],
        openIDIatTTL: [, , `OpenIDIatTTL`],
        openIDIssueURL: [, , `OpenIDIssueURL`],
        openIDProviderName: [, , `OpenIDProviderName`],
    });
};
const se_BackendAPIAuthType = (input, context) => {
    return take(input, {
        mode: [, , `Mode`],
        settings: [, (_) => se_BackendAPIAppSyncAuthSettings(_, context), `Settings`],
    });
};
const se_BackendAPIConflictResolution = (input, context) => {
    return take(input, {
        resolutionStrategy: [, , `ResolutionStrategy`],
    });
};
const se_BackendAPIResourceConfig = (input, context) => {
    return take(input, {
        additionalAuthTypes: [, (_) => se_ListOfBackendAPIAuthType(_, context), `AdditionalAuthTypes`],
        apiName: [, , `ApiName`],
        conflictResolution: [, (_) => se_BackendAPIConflictResolution(_, context), `ConflictResolution`],
        defaultAuthType: [, (_) => se_BackendAPIAuthType(_, context), `DefaultAuthType`],
        service: [, , `Service`],
        transformSchema: [, , `TransformSchema`],
    });
};
const se_BackendAuthAppleProviderConfig = (input, context) => {
    return take(input, {
        client_id: [, , `ClientId`],
        key_id: [, , `KeyId`],
        private_key: [, , `PrivateKey`],
        team_id: [, , `TeamId`],
    });
};
const se_BackendAuthSocialProviderConfig = (input, context) => {
    return take(input, {
        client_id: [, , `ClientId`],
        client_secret: [, , `ClientSecret`],
    });
};
const se_BackendStoragePermissions = (input, context) => {
    return take(input, {
        authenticated: [, _json, `Authenticated`],
        unAuthenticated: [, _json, `UnAuthenticated`],
    });
};
const se_CreateBackendAuthForgotPasswordConfig = (input, context) => {
    return take(input, {
        deliveryMethod: [, , `DeliveryMethod`],
        emailSettings: [, (_) => se_EmailSettings(_, context), `EmailSettings`],
        smsSettings: [, (_) => se_SmsSettings(_, context), `SmsSettings`],
    });
};
const se_CreateBackendAuthIdentityPoolConfig = (input, context) => {
    return take(input, {
        identityPoolName: [, , `IdentityPoolName`],
        unauthenticatedLogin: [, , `UnauthenticatedLogin`],
    });
};
const se_CreateBackendAuthMFAConfig = (input, context) => {
    return take(input, {
        MFAMode: [],
        settings: [, (_) => se_Settings(_, context), `Settings`],
    });
};
const se_CreateBackendAuthOAuthConfig = (input, context) => {
    return take(input, {
        domainPrefix: [, , `DomainPrefix`],
        oAuthGrantType: [, , `OAuthGrantType`],
        oAuthScopes: [, _json, `OAuthScopes`],
        redirectSignInURIs: [, _json, `RedirectSignInURIs`],
        redirectSignOutURIs: [, _json, `RedirectSignOutURIs`],
        socialProviderSettings: [, (_) => se_SocialProviderSettings(_, context), `SocialProviderSettings`],
    });
};
const se_CreateBackendAuthPasswordPolicyConfig = (input, context) => {
    return take(input, {
        additionalConstraints: [, _json, `AdditionalConstraints`],
        minimumLength: [, __serializeFloat, `MinimumLength`],
    });
};
const se_CreateBackendAuthResourceConfig = (input, context) => {
    return take(input, {
        authResources: [, , `AuthResources`],
        identityPoolConfigs: [, (_) => se_CreateBackendAuthIdentityPoolConfig(_, context), `IdentityPoolConfigs`],
        service: [, , `Service`],
        userPoolConfigs: [, (_) => se_CreateBackendAuthUserPoolConfig(_, context), `UserPoolConfigs`],
    });
};
const se_CreateBackendAuthUserPoolConfig = (input, context) => {
    return take(input, {
        forgotPassword: [, (_) => se_CreateBackendAuthForgotPasswordConfig(_, context), `ForgotPassword`],
        mfa: [, (_) => se_CreateBackendAuthMFAConfig(_, context), `Mfa`],
        oAuth: [, (_) => se_CreateBackendAuthOAuthConfig(_, context), `OAuth`],
        passwordPolicy: [, (_) => se_CreateBackendAuthPasswordPolicyConfig(_, context), `PasswordPolicy`],
        requiredSignUpAttributes: [, _json, `RequiredSignUpAttributes`],
        signInMethod: [, , `SignInMethod`],
        userPoolName: [, , `UserPoolName`],
        verificationMessage: [, (_) => se_CreateBackendAuthVerificationMessageConfig(_, context), `VerificationMessage`],
    });
};
const se_CreateBackendAuthVerificationMessageConfig = (input, context) => {
    return take(input, {
        deliveryMethod: [, , `DeliveryMethod`],
        emailSettings: [, (_) => se_EmailSettings(_, context), `EmailSettings`],
        smsSettings: [, (_) => se_SmsSettings(_, context), `SmsSettings`],
    });
};
const se_CreateBackendStorageResourceConfig = (input, context) => {
    return take(input, {
        bucketName: [, , `BucketName`],
        permissions: [, (_) => se_BackendStoragePermissions(_, context), `Permissions`],
        serviceName: [, , `ServiceName`],
    });
};
const se_EmailSettings = (input, context) => {
    return take(input, {
        emailMessage: [, , `EmailMessage`],
        emailSubject: [, , `EmailSubject`],
    });
};
const se_ListOfBackendAPIAuthType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_BackendAPIAuthType(entry, context);
    });
};
const se_LoginAuthConfigReqObj = (input, context) => {
    return take(input, {
        aws_cognito_identity_pool_id: [, , `AwsCognitoIdentityPoolId`],
        aws_cognito_region: [, , `AwsCognitoRegion`],
        aws_user_pools_id: [, , `AwsUserPoolsId`],
        aws_user_pools_web_client_id: [, , `AwsUserPoolsWebClientId`],
    });
};
const se_Settings = (input, context) => {
    return take(input, {
        mfaTypes: [, _json, `MfaTypes`],
        smsMessage: [, , `SmsMessage`],
    });
};
const se_SmsSettings = (input, context) => {
    return take(input, {
        smsMessage: [, , `SmsMessage`],
    });
};
const se_SocialProviderSettings = (input, context) => {
    return take(input, {
        Facebook: (_) => se_BackendAuthSocialProviderConfig(_, context),
        Google: (_) => se_BackendAuthSocialProviderConfig(_, context),
        LoginWithAmazon: (_) => se_BackendAuthSocialProviderConfig(_, context),
        SignInWithApple: (_) => se_BackendAuthAppleProviderConfig(_, context),
    });
};
const se_UpdateBackendAuthForgotPasswordConfig = (input, context) => {
    return take(input, {
        deliveryMethod: [, , `DeliveryMethod`],
        emailSettings: [, (_) => se_EmailSettings(_, context), `EmailSettings`],
        smsSettings: [, (_) => se_SmsSettings(_, context), `SmsSettings`],
    });
};
const se_UpdateBackendAuthIdentityPoolConfig = (input, context) => {
    return take(input, {
        unauthenticatedLogin: [, , `UnauthenticatedLogin`],
    });
};
const se_UpdateBackendAuthMFAConfig = (input, context) => {
    return take(input, {
        MFAMode: [],
        settings: [, (_) => se_Settings(_, context), `Settings`],
    });
};
const se_UpdateBackendAuthOAuthConfig = (input, context) => {
    return take(input, {
        domainPrefix: [, , `DomainPrefix`],
        oAuthGrantType: [, , `OAuthGrantType`],
        oAuthScopes: [, _json, `OAuthScopes`],
        redirectSignInURIs: [, _json, `RedirectSignInURIs`],
        redirectSignOutURIs: [, _json, `RedirectSignOutURIs`],
        socialProviderSettings: [, (_) => se_SocialProviderSettings(_, context), `SocialProviderSettings`],
    });
};
const se_UpdateBackendAuthPasswordPolicyConfig = (input, context) => {
    return take(input, {
        additionalConstraints: [, _json, `AdditionalConstraints`],
        minimumLength: [, __serializeFloat, `MinimumLength`],
    });
};
const se_UpdateBackendAuthResourceConfig = (input, context) => {
    return take(input, {
        authResources: [, , `AuthResources`],
        identityPoolConfigs: [, (_) => se_UpdateBackendAuthIdentityPoolConfig(_, context), `IdentityPoolConfigs`],
        service: [, , `Service`],
        userPoolConfigs: [, (_) => se_UpdateBackendAuthUserPoolConfig(_, context), `UserPoolConfigs`],
    });
};
const se_UpdateBackendAuthUserPoolConfig = (input, context) => {
    return take(input, {
        forgotPassword: [, (_) => se_UpdateBackendAuthForgotPasswordConfig(_, context), `ForgotPassword`],
        mfa: [, (_) => se_UpdateBackendAuthMFAConfig(_, context), `Mfa`],
        oAuth: [, (_) => se_UpdateBackendAuthOAuthConfig(_, context), `OAuth`],
        passwordPolicy: [, (_) => se_UpdateBackendAuthPasswordPolicyConfig(_, context), `PasswordPolicy`],
        verificationMessage: [, (_) => se_UpdateBackendAuthVerificationMessageConfig(_, context), `VerificationMessage`],
    });
};
const se_UpdateBackendAuthVerificationMessageConfig = (input, context) => {
    return take(input, {
        deliveryMethod: [, , `DeliveryMethod`],
        emailSettings: [, (_) => se_EmailSettings(_, context), `EmailSettings`],
        smsSettings: [, (_) => se_SmsSettings(_, context), `SmsSettings`],
    });
};
const se_UpdateBackendStorageResourceConfig = (input, context) => {
    return take(input, {
        permissions: [, (_) => se_BackendStoragePermissions(_, context), `Permissions`],
        serviceName: [, , `ServiceName`],
    });
};
const de_BackendAPIAppSyncAuthSettings = (output, context) => {
    return take(output, {
        CognitoUserPoolId: [, __expectString, `cognitoUserPoolId`],
        Description: [, __expectString, `description`],
        ExpirationTime: [, __limitedParseDouble, `expirationTime`],
        OpenIDAuthTTL: [, __expectString, `openIDAuthTTL`],
        OpenIDClientId: [, __expectString, `openIDClientId`],
        OpenIDIatTTL: [, __expectString, `openIDIatTTL`],
        OpenIDIssueURL: [, __expectString, `openIDIssueURL`],
        OpenIDProviderName: [, __expectString, `openIDProviderName`],
    });
};
const de_BackendAPIAuthType = (output, context) => {
    return take(output, {
        Mode: [, __expectString, `mode`],
        Settings: [, (_) => de_BackendAPIAppSyncAuthSettings(_, context), `settings`],
    });
};
const de_BackendAPIConflictResolution = (output, context) => {
    return take(output, {
        ResolutionStrategy: [, __expectString, `resolutionStrategy`],
    });
};
const de_BackendAPIResourceConfig = (output, context) => {
    return take(output, {
        AdditionalAuthTypes: [, (_) => de_ListOfBackendAPIAuthType(_, context), `additionalAuthTypes`],
        ApiName: [, __expectString, `apiName`],
        ConflictResolution: [, (_) => de_BackendAPIConflictResolution(_, context), `conflictResolution`],
        DefaultAuthType: [, (_) => de_BackendAPIAuthType(_, context), `defaultAuthType`],
        Service: [, __expectString, `service`],
        TransformSchema: [, __expectString, `transformSchema`],
    });
};
const de_BackendAuthAppleProviderConfig = (output, context) => {
    return take(output, {
        ClientId: [, __expectString, `client_id`],
        KeyId: [, __expectString, `key_id`],
        PrivateKey: [, __expectString, `private_key`],
        TeamId: [, __expectString, `team_id`],
    });
};
const de_BackendAuthSocialProviderConfig = (output, context) => {
    return take(output, {
        ClientId: [, __expectString, `client_id`],
        ClientSecret: [, __expectString, `client_secret`],
    });
};
const de_BackendJobRespObj = (output, context) => {
    return take(output, {
        AppId: [, __expectString, `appId`],
        BackendEnvironmentName: [, __expectString, `backendEnvironmentName`],
        CreateTime: [, __expectString, `createTime`],
        Error: [, __expectString, `error`],
        JobId: [, __expectString, `jobId`],
        Operation: [, __expectString, `operation`],
        Status: [, __expectString, `status`],
        UpdateTime: [, __expectString, `updateTime`],
    });
};
const de_BackendStoragePermissions = (output, context) => {
    return take(output, {
        Authenticated: [, _json, `authenticated`],
        UnAuthenticated: [, _json, `unAuthenticated`],
    });
};
const de_CreateBackendAuthForgotPasswordConfig = (output, context) => {
    return take(output, {
        DeliveryMethod: [, __expectString, `deliveryMethod`],
        EmailSettings: [, (_) => de_EmailSettings(_, context), `emailSettings`],
        SmsSettings: [, (_) => de_SmsSettings(_, context), `smsSettings`],
    });
};
const de_CreateBackendAuthIdentityPoolConfig = (output, context) => {
    return take(output, {
        IdentityPoolName: [, __expectString, `identityPoolName`],
        UnauthenticatedLogin: [, __expectBoolean, `unauthenticatedLogin`],
    });
};
const de_CreateBackendAuthMFAConfig = (output, context) => {
    return take(output, {
        MFAMode: __expectString,
        Settings: [, (_) => de_Settings(_, context), `settings`],
    });
};
const de_CreateBackendAuthOAuthConfig = (output, context) => {
    return take(output, {
        DomainPrefix: [, __expectString, `domainPrefix`],
        OAuthGrantType: [, __expectString, `oAuthGrantType`],
        OAuthScopes: [, _json, `oAuthScopes`],
        RedirectSignInURIs: [, _json, `redirectSignInURIs`],
        RedirectSignOutURIs: [, _json, `redirectSignOutURIs`],
        SocialProviderSettings: [, (_) => de_SocialProviderSettings(_, context), `socialProviderSettings`],
    });
};
const de_CreateBackendAuthPasswordPolicyConfig = (output, context) => {
    return take(output, {
        AdditionalConstraints: [, _json, `additionalConstraints`],
        MinimumLength: [, __limitedParseDouble, `minimumLength`],
    });
};
const de_CreateBackendAuthResourceConfig = (output, context) => {
    return take(output, {
        AuthResources: [, __expectString, `authResources`],
        IdentityPoolConfigs: [, (_) => de_CreateBackendAuthIdentityPoolConfig(_, context), `identityPoolConfigs`],
        Service: [, __expectString, `service`],
        UserPoolConfigs: [, (_) => de_CreateBackendAuthUserPoolConfig(_, context), `userPoolConfigs`],
    });
};
const de_CreateBackendAuthUserPoolConfig = (output, context) => {
    return take(output, {
        ForgotPassword: [, (_) => de_CreateBackendAuthForgotPasswordConfig(_, context), `forgotPassword`],
        Mfa: [, (_) => de_CreateBackendAuthMFAConfig(_, context), `mfa`],
        OAuth: [, (_) => de_CreateBackendAuthOAuthConfig(_, context), `oAuth`],
        PasswordPolicy: [, (_) => de_CreateBackendAuthPasswordPolicyConfig(_, context), `passwordPolicy`],
        RequiredSignUpAttributes: [, _json, `requiredSignUpAttributes`],
        SignInMethod: [, __expectString, `signInMethod`],
        UserPoolName: [, __expectString, `userPoolName`],
        VerificationMessage: [
            ,
            (_) => de_CreateBackendAuthVerificationMessageConfig(_, context),
            `verificationMessage`,
        ],
    });
};
const de_CreateBackendAuthVerificationMessageConfig = (output, context) => {
    return take(output, {
        DeliveryMethod: [, __expectString, `deliveryMethod`],
        EmailSettings: [, (_) => de_EmailSettings(_, context), `emailSettings`],
        SmsSettings: [, (_) => de_SmsSettings(_, context), `smsSettings`],
    });
};
const de_EmailSettings = (output, context) => {
    return take(output, {
        EmailMessage: [, __expectString, `emailMessage`],
        EmailSubject: [, __expectString, `emailSubject`],
    });
};
const de_GetBackendStorageResourceConfig = (output, context) => {
    return take(output, {
        BucketName: [, __expectString, `bucketName`],
        Imported: [, __expectBoolean, `imported`],
        Permissions: [, (_) => de_BackendStoragePermissions(_, context), `permissions`],
        ServiceName: [, __expectString, `serviceName`],
    });
};
const de_ListOfBackendAPIAuthType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackendAPIAuthType(entry, context);
    });
    return retVal;
};
const de_ListOfBackendJobRespObj = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackendJobRespObj(entry, context);
    });
    return retVal;
};
const de_ListOfS3BucketInfo = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_S3BucketInfo(entry, context);
    });
    return retVal;
};
const de_LoginAuthConfigReqObj = (output, context) => {
    return take(output, {
        AwsCognitoIdentityPoolId: [, __expectString, `aws_cognito_identity_pool_id`],
        AwsCognitoRegion: [, __expectString, `aws_cognito_region`],
        AwsUserPoolsId: [, __expectString, `aws_user_pools_id`],
        AwsUserPoolsWebClientId: [, __expectString, `aws_user_pools_web_client_id`],
    });
};
const de_S3BucketInfo = (output, context) => {
    return take(output, {
        CreationDate: [, __expectString, `creationDate`],
        Name: [, __expectString, `name`],
    });
};
const de_Settings = (output, context) => {
    return take(output, {
        MfaTypes: [, _json, `mfaTypes`],
        SmsMessage: [, __expectString, `smsMessage`],
    });
};
const de_SmsSettings = (output, context) => {
    return take(output, {
        SmsMessage: [, __expectString, `smsMessage`],
    });
};
const de_SocialProviderSettings = (output, context) => {
    return take(output, {
        Facebook: (_) => de_BackendAuthSocialProviderConfig(_, context),
        Google: (_) => de_BackendAuthSocialProviderConfig(_, context),
        LoginWithAmazon: (_) => de_BackendAuthSocialProviderConfig(_, context),
        SignInWithApple: (_) => de_BackendAuthAppleProviderConfig(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
