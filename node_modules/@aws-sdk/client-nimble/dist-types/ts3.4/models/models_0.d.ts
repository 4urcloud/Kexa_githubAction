import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { NimbleServiceException as __BaseException } from "./NimbleServiceException";
export interface AcceptEulasRequest {
  clientToken?: string;
  eulaIds?: string[];
  studioId: string | undefined;
}
export interface EulaAcceptance {
  acceptedAt?: Date;
  acceptedBy?: string;
  accepteeId?: string;
  eulaAcceptanceId?: string;
  eulaId?: string;
}
export interface AcceptEulasResponse {
  eulaAcceptances?: EulaAcceptance[];
}
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  code?: string;
  context?: Record<string, string>;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  code?: string;
  context?: Record<string, string>;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  $retryable: {};
  code?: string;
  context?: Record<string, string>;
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  code?: string;
  context?: Record<string, string>;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  code?: string;
  context?: Record<string, string>;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  $retryable: {};
  code?: string;
  context?: Record<string, string>;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  code?: string;
  context?: Record<string, string>;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface ActiveDirectoryComputerAttribute {
  name?: string;
  value?: string;
}
export interface ActiveDirectoryConfiguration {
  computerAttributes?: ActiveDirectoryComputerAttribute[];
  directoryId?: string;
  organizationalUnitDistinguishedName?: string;
}
export declare const AutomaticTerminationMode: {
  readonly ACTIVATED: "ACTIVATED";
  readonly DEACTIVATED: "DEACTIVATED";
};
export type AutomaticTerminationMode =
  (typeof AutomaticTerminationMode)[keyof typeof AutomaticTerminationMode];
export interface ComputeFarmConfiguration {
  activeDirectoryUser?: string;
  endpoint?: string;
}
export declare const StreamingClipboardMode: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type StreamingClipboardMode =
  (typeof StreamingClipboardMode)[keyof typeof StreamingClipboardMode];
export declare const StreamingInstanceType: {
  readonly g3_4xlarge: "g3.4xlarge";
  readonly g3s_xlarge: "g3s.xlarge";
  readonly g4dn_12xlarge: "g4dn.12xlarge";
  readonly g4dn_16xlarge: "g4dn.16xlarge";
  readonly g4dn_2xlarge: "g4dn.2xlarge";
  readonly g4dn_4xlarge: "g4dn.4xlarge";
  readonly g4dn_8xlarge: "g4dn.8xlarge";
  readonly g4dn_xlarge: "g4dn.xlarge";
  readonly g5_16xlarge: "g5.16xlarge";
  readonly g5_2xlarge: "g5.2xlarge";
  readonly g5_4xlarge: "g5.4xlarge";
  readonly g5_8xlarge: "g5.8xlarge";
  readonly g5_xlarge: "g5.xlarge";
};
export type StreamingInstanceType =
  (typeof StreamingInstanceType)[keyof typeof StreamingInstanceType];
export declare const SessionBackupMode: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly DEACTIVATED: "DEACTIVATED";
};
export type SessionBackupMode =
  (typeof SessionBackupMode)[keyof typeof SessionBackupMode];
export interface StreamConfigurationSessionBackup {
  mode?: SessionBackupMode;
  maxBackupsToRetain?: number;
}
export declare const SessionPersistenceMode: {
  readonly ACTIVATED: "ACTIVATED";
  readonly DEACTIVATED: "DEACTIVATED";
};
export type SessionPersistenceMode =
  (typeof SessionPersistenceMode)[keyof typeof SessionPersistenceMode];
export declare const StreamingSessionStorageMode: {
  readonly UPLOAD: "UPLOAD";
};
export type StreamingSessionStorageMode =
  (typeof StreamingSessionStorageMode)[keyof typeof StreamingSessionStorageMode];
export interface StreamingSessionStorageRoot {
  linux?: string;
  windows?: string;
}
export interface StreamConfigurationSessionStorage {
  root?: StreamingSessionStorageRoot;
  mode: StreamingSessionStorageMode[] | undefined;
}
export interface VolumeConfiguration {
  size?: number;
  throughput?: number;
  iops?: number;
}
export interface StreamConfigurationCreate {
  clipboardMode: StreamingClipboardMode | undefined;
  ec2InstanceTypes: StreamingInstanceType[] | undefined;
  maxSessionLengthInMinutes?: number;
  streamingImageIds: string[] | undefined;
  maxStoppedSessionLengthInMinutes?: number;
  sessionStorage?: StreamConfigurationSessionStorage;
  sessionBackup?: StreamConfigurationSessionBackup;
  sessionPersistenceMode?: SessionPersistenceMode;
  volumeConfiguration?: VolumeConfiguration;
  automaticTerminationMode?: AutomaticTerminationMode;
}
export interface CreateLaunchProfileRequest {
  clientToken?: string;
  description?: string;
  ec2SubnetIds: string[] | undefined;
  launchProfileProtocolVersions: string[] | undefined;
  name: string | undefined;
  streamConfiguration: StreamConfigurationCreate | undefined;
  studioComponentIds: string[] | undefined;
  studioId: string | undefined;
  tags?: Record<string, string>;
}
export declare const LaunchProfileState: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly READY: "READY";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
};
export type LaunchProfileState =
  (typeof LaunchProfileState)[keyof typeof LaunchProfileState];
export declare const LaunchProfileStatusCode: {
  readonly ENCRYPTION_KEY_ACCESS_DENIED: "ENCRYPTION_KEY_ACCESS_DENIED";
  readonly ENCRYPTION_KEY_NOT_FOUND: "ENCRYPTION_KEY_NOT_FOUND";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly INVALID_INSTANCE_TYPES_PROVIDED: "INVALID_INSTANCE_TYPES_PROVIDED";
  readonly INVALID_SUBNETS_COMBINATION: "INVALID_SUBNETS_COMBINATION";
  readonly INVALID_SUBNETS_PROVIDED: "INVALID_SUBNETS_PROVIDED";
  readonly LAUNCH_PROFILE_CREATED: "LAUNCH_PROFILE_CREATED";
  readonly LAUNCH_PROFILE_CREATE_IN_PROGRESS: "LAUNCH_PROFILE_CREATE_IN_PROGRESS";
  readonly LAUNCH_PROFILE_DELETED: "LAUNCH_PROFILE_DELETED";
  readonly LAUNCH_PROFILE_DELETE_IN_PROGRESS: "LAUNCH_PROFILE_DELETE_IN_PROGRESS";
  readonly LAUNCH_PROFILE_UPDATED: "LAUNCH_PROFILE_UPDATED";
  readonly LAUNCH_PROFILE_UPDATE_IN_PROGRESS: "LAUNCH_PROFILE_UPDATE_IN_PROGRESS";
  readonly LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED: "LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED";
  readonly STREAMING_IMAGE_NOT_FOUND: "STREAMING_IMAGE_NOT_FOUND";
  readonly STREAMING_IMAGE_NOT_READY: "STREAMING_IMAGE_NOT_READY";
};
export type LaunchProfileStatusCode =
  (typeof LaunchProfileStatusCode)[keyof typeof LaunchProfileStatusCode];
export interface StreamConfiguration {
  clipboardMode: StreamingClipboardMode | undefined;
  ec2InstanceTypes: StreamingInstanceType[] | undefined;
  maxSessionLengthInMinutes?: number;
  streamingImageIds: string[] | undefined;
  maxStoppedSessionLengthInMinutes?: number;
  sessionStorage?: StreamConfigurationSessionStorage;
  sessionBackup?: StreamConfigurationSessionBackup;
  sessionPersistenceMode?: SessionPersistenceMode;
  volumeConfiguration?: VolumeConfiguration;
  automaticTerminationMode?: AutomaticTerminationMode;
}
export declare const LaunchProfileValidationState: {
  readonly VALIDATION_FAILED: "VALIDATION_FAILED";
  readonly VALIDATION_FAILED_INTERNAL_SERVER_ERROR: "VALIDATION_FAILED_INTERNAL_SERVER_ERROR";
  readonly VALIDATION_IN_PROGRESS: "VALIDATION_IN_PROGRESS";
  readonly VALIDATION_NOT_STARTED: "VALIDATION_NOT_STARTED";
  readonly VALIDATION_SUCCESS: "VALIDATION_SUCCESS";
};
export type LaunchProfileValidationState =
  (typeof LaunchProfileValidationState)[keyof typeof LaunchProfileValidationState];
export declare const LaunchProfileValidationStatusCode: {
  readonly VALIDATION_FAILED_INTERNAL_SERVER_ERROR: "VALIDATION_FAILED_INTERNAL_SERVER_ERROR";
  readonly VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY: "VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY";
  readonly VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION: "VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION";
  readonly VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION: "VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION";
  readonly VALIDATION_FAILED_SUBNET_NOT_FOUND: "VALIDATION_FAILED_SUBNET_NOT_FOUND";
  readonly VALIDATION_FAILED_UNAUTHORIZED: "VALIDATION_FAILED_UNAUTHORIZED";
  readonly VALIDATION_IN_PROGRESS: "VALIDATION_IN_PROGRESS";
  readonly VALIDATION_NOT_STARTED: "VALIDATION_NOT_STARTED";
  readonly VALIDATION_SUCCESS: "VALIDATION_SUCCESS";
};
export type LaunchProfileValidationStatusCode =
  (typeof LaunchProfileValidationStatusCode)[keyof typeof LaunchProfileValidationStatusCode];
export declare const LaunchProfileValidationType: {
  readonly VALIDATE_ACTIVE_DIRECTORY_STUDIO_COMPONENT: "VALIDATE_ACTIVE_DIRECTORY_STUDIO_COMPONENT";
  readonly VALIDATE_NETWORK_ACL_ASSOCIATION: "VALIDATE_NETWORK_ACL_ASSOCIATION";
  readonly VALIDATE_SECURITY_GROUP_ASSOCIATION: "VALIDATE_SECURITY_GROUP_ASSOCIATION";
  readonly VALIDATE_SUBNET_ASSOCIATION: "VALIDATE_SUBNET_ASSOCIATION";
};
export type LaunchProfileValidationType =
  (typeof LaunchProfileValidationType)[keyof typeof LaunchProfileValidationType];
export interface ValidationResult {
  type: LaunchProfileValidationType | undefined;
  state: LaunchProfileValidationState | undefined;
  statusCode: LaunchProfileValidationStatusCode | undefined;
  statusMessage: string | undefined;
}
export interface LaunchProfile {
  arn?: string;
  createdAt?: Date;
  createdBy?: string;
  description?: string;
  ec2SubnetIds?: string[];
  launchProfileId?: string;
  launchProfileProtocolVersions?: string[];
  name?: string;
  state?: LaunchProfileState;
  statusCode?: LaunchProfileStatusCode;
  statusMessage?: string;
  streamConfiguration?: StreamConfiguration;
  studioComponentIds?: string[];
  tags?: Record<string, string>;
  updatedAt?: Date;
  updatedBy?: string;
  validationResults?: ValidationResult[];
}
export interface CreateLaunchProfileResponse {
  launchProfile?: LaunchProfile;
}
export interface CreateStreamingImageRequest {
  clientToken?: string;
  description?: string;
  ec2ImageId: string | undefined;
  name: string | undefined;
  studioId: string | undefined;
  tags?: Record<string, string>;
}
export declare const StreamingImageEncryptionConfigurationKeyType: {
  readonly CUSTOMER_MANAGED_KEY: "CUSTOMER_MANAGED_KEY";
};
export type StreamingImageEncryptionConfigurationKeyType =
  (typeof StreamingImageEncryptionConfigurationKeyType)[keyof typeof StreamingImageEncryptionConfigurationKeyType];
export interface StreamingImageEncryptionConfiguration {
  keyArn?: string;
  keyType: StreamingImageEncryptionConfigurationKeyType | undefined;
}
export declare const StreamingImageState: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly READY: "READY";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
};
export type StreamingImageState =
  (typeof StreamingImageState)[keyof typeof StreamingImageState];
export declare const StreamingImageStatusCode: {
  readonly ACCESS_DENIED: "ACCESS_DENIED";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly STREAMING_IMAGE_CREATE_IN_PROGRESS: "STREAMING_IMAGE_CREATE_IN_PROGRESS";
  readonly STREAMING_IMAGE_DELETED: "STREAMING_IMAGE_DELETED";
  readonly STREAMING_IMAGE_DELETE_IN_PROGRESS: "STREAMING_IMAGE_DELETE_IN_PROGRESS";
  readonly STREAMING_IMAGE_READY: "STREAMING_IMAGE_READY";
  readonly STREAMING_IMAGE_UPDATE_IN_PROGRESS: "STREAMING_IMAGE_UPDATE_IN_PROGRESS";
};
export type StreamingImageStatusCode =
  (typeof StreamingImageStatusCode)[keyof typeof StreamingImageStatusCode];
export interface StreamingImage {
  arn?: string;
  description?: string;
  ec2ImageId?: string;
  encryptionConfiguration?: StreamingImageEncryptionConfiguration;
  eulaIds?: string[];
  name?: string;
  owner?: string;
  platform?: string;
  state?: StreamingImageState;
  statusCode?: StreamingImageStatusCode;
  statusMessage?: string;
  streamingImageId?: string;
  tags?: Record<string, string>;
}
export interface CreateStreamingImageResponse {
  streamingImage?: StreamingImage;
}
export interface CreateStreamingSessionRequest {
  clientToken?: string;
  ec2InstanceType?: StreamingInstanceType;
  launchProfileId: string | undefined;
  ownedBy?: string;
  streamingImageId?: string;
  studioId: string | undefined;
  tags?: Record<string, string>;
}
export declare const StreamingSessionState: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly READY: "READY";
  readonly START_FAILED: "START_FAILED";
  readonly START_IN_PROGRESS: "START_IN_PROGRESS";
  readonly STOPPED: "STOPPED";
  readonly STOP_FAILED: "STOP_FAILED";
  readonly STOP_IN_PROGRESS: "STOP_IN_PROGRESS";
};
export type StreamingSessionState =
  (typeof StreamingSessionState)[keyof typeof StreamingSessionState];
export declare const StreamingSessionStatusCode: {
  readonly ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR: "ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR";
  readonly AMI_VALIDATION_ERROR: "AMI_VALIDATION_ERROR";
  readonly DECRYPT_STREAMING_IMAGE_ERROR: "DECRYPT_STREAMING_IMAGE_ERROR";
  readonly INITIALIZATION_SCRIPT_ERROR: "INITIALIZATION_SCRIPT_ERROR";
  readonly INSUFFICIENT_CAPACITY: "INSUFFICIENT_CAPACITY";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly NETWORK_CONNECTION_ERROR: "NETWORK_CONNECTION_ERROR";
  readonly NETWORK_INTERFACE_ERROR: "NETWORK_INTERFACE_ERROR";
  readonly STREAMING_SESSION_CREATE_IN_PROGRESS: "STREAMING_SESSION_CREATE_IN_PROGRESS";
  readonly STREAMING_SESSION_DELETED: "STREAMING_SESSION_DELETED";
  readonly STREAMING_SESSION_DELETE_IN_PROGRESS: "STREAMING_SESSION_DELETE_IN_PROGRESS";
  readonly STREAMING_SESSION_READY: "STREAMING_SESSION_READY";
  readonly STREAMING_SESSION_STARTED: "STREAMING_SESSION_STARTED";
  readonly STREAMING_SESSION_START_IN_PROGRESS: "STREAMING_SESSION_START_IN_PROGRESS";
  readonly STREAMING_SESSION_STOPPED: "STREAMING_SESSION_STOPPED";
  readonly STREAMING_SESSION_STOP_IN_PROGRESS: "STREAMING_SESSION_STOP_IN_PROGRESS";
};
export type StreamingSessionStatusCode =
  (typeof StreamingSessionStatusCode)[keyof typeof StreamingSessionStatusCode];
export declare const VolumeRetentionMode: {
  readonly DELETE: "DELETE";
  readonly RETAIN: "RETAIN";
};
export type VolumeRetentionMode =
  (typeof VolumeRetentionMode)[keyof typeof VolumeRetentionMode];
export interface StreamingSession {
  arn?: string;
  createdAt?: Date;
  createdBy?: string;
  ec2InstanceType?: string;
  launchProfileId?: string;
  ownedBy?: string;
  sessionId?: string;
  state?: StreamingSessionState;
  statusCode?: StreamingSessionStatusCode;
  statusMessage?: string;
  streamingImageId?: string;
  tags?: Record<string, string>;
  terminateAt?: Date;
  updatedAt?: Date;
  updatedBy?: string;
  stoppedAt?: Date;
  stoppedBy?: string;
  startedAt?: Date;
  startedBy?: string;
  stopAt?: Date;
  startedFromBackupId?: string;
  backupMode?: SessionBackupMode;
  maxBackupsToRetain?: number;
  volumeRetentionMode?: VolumeRetentionMode;
  sessionPersistenceMode?: SessionPersistenceMode;
  volumeConfiguration?: VolumeConfiguration;
  automaticTerminationMode?: AutomaticTerminationMode;
}
export interface CreateStreamingSessionResponse {
  session?: StreamingSession;
}
export interface CreateStreamingSessionStreamRequest {
  clientToken?: string;
  expirationInSeconds?: number;
  sessionId: string | undefined;
  studioId: string | undefined;
}
export declare const StreamingSessionStreamState: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly READY: "READY";
};
export type StreamingSessionStreamState =
  (typeof StreamingSessionStreamState)[keyof typeof StreamingSessionStreamState];
export declare const StreamingSessionStreamStatusCode: {
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly NETWORK_CONNECTION_ERROR: "NETWORK_CONNECTION_ERROR";
  readonly STREAM_CREATE_IN_PROGRESS: "STREAM_CREATE_IN_PROGRESS";
  readonly STREAM_DELETED: "STREAM_DELETED";
  readonly STREAM_DELETE_IN_PROGRESS: "STREAM_DELETE_IN_PROGRESS";
  readonly STREAM_READY: "STREAM_READY";
};
export type StreamingSessionStreamStatusCode =
  (typeof StreamingSessionStreamStatusCode)[keyof typeof StreamingSessionStreamStatusCode];
export interface StreamingSessionStream {
  createdAt?: Date;
  createdBy?: string;
  expiresAt?: Date;
  ownedBy?: string;
  state?: StreamingSessionStreamState;
  statusCode?: StreamingSessionStreamStatusCode;
  streamId?: string;
  url?: string;
}
export interface CreateStreamingSessionStreamResponse {
  stream?: StreamingSessionStream;
}
export declare const StudioEncryptionConfigurationKeyType: {
  readonly AWS_OWNED_KEY: "AWS_OWNED_KEY";
  readonly CUSTOMER_MANAGED_KEY: "CUSTOMER_MANAGED_KEY";
};
export type StudioEncryptionConfigurationKeyType =
  (typeof StudioEncryptionConfigurationKeyType)[keyof typeof StudioEncryptionConfigurationKeyType];
export interface StudioEncryptionConfiguration {
  keyArn?: string;
  keyType: StudioEncryptionConfigurationKeyType | undefined;
}
export interface CreateStudioRequest {
  adminRoleArn: string | undefined;
  clientToken?: string;
  displayName: string | undefined;
  studioEncryptionConfiguration?: StudioEncryptionConfiguration;
  studioName: string | undefined;
  tags?: Record<string, string>;
  userRoleArn: string | undefined;
}
export declare const StudioState: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly READY: "READY";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
};
export type StudioState = (typeof StudioState)[keyof typeof StudioState];
export declare const StudioStatusCode: {
  readonly AWS_SSO_ACCESS_DENIED: "AWS_SSO_ACCESS_DENIED";
  readonly AWS_SSO_CONFIGURATION_REPAIRED: "AWS_SSO_CONFIGURATION_REPAIRED";
  readonly AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS: "AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS";
  readonly AWS_SSO_NOT_ENABLED: "AWS_SSO_NOT_ENABLED";
  readonly AWS_STS_REGION_DISABLED: "AWS_STS_REGION_DISABLED";
  readonly ENCRYPTION_KEY_ACCESS_DENIED: "ENCRYPTION_KEY_ACCESS_DENIED";
  readonly ENCRYPTION_KEY_NOT_FOUND: "ENCRYPTION_KEY_NOT_FOUND";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly ROLE_COULD_NOT_BE_ASSUMED: "ROLE_COULD_NOT_BE_ASSUMED";
  readonly ROLE_NOT_OWNED_BY_STUDIO_OWNER: "ROLE_NOT_OWNED_BY_STUDIO_OWNER";
  readonly STUDIO_CREATED: "STUDIO_CREATED";
  readonly STUDIO_CREATE_IN_PROGRESS: "STUDIO_CREATE_IN_PROGRESS";
  readonly STUDIO_DELETED: "STUDIO_DELETED";
  readonly STUDIO_DELETE_IN_PROGRESS: "STUDIO_DELETE_IN_PROGRESS";
  readonly STUDIO_UPDATED: "STUDIO_UPDATED";
  readonly STUDIO_UPDATE_IN_PROGRESS: "STUDIO_UPDATE_IN_PROGRESS";
  readonly STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED: "STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED";
  readonly STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED: "STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED";
  readonly STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED: "STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED";
};
export type StudioStatusCode =
  (typeof StudioStatusCode)[keyof typeof StudioStatusCode];
export interface Studio {
  adminRoleArn?: string;
  arn?: string;
  createdAt?: Date;
  displayName?: string;
  homeRegion?: string;
  ssoClientId?: string;
  state?: StudioState;
  statusCode?: StudioStatusCode;
  statusMessage?: string;
  studioEncryptionConfiguration?: StudioEncryptionConfiguration;
  studioId?: string;
  studioName?: string;
  studioUrl?: string;
  tags?: Record<string, string>;
  updatedAt?: Date;
  userRoleArn?: string;
}
export interface CreateStudioResponse {
  studio?: Studio;
}
export interface LicenseServiceConfiguration {
  endpoint?: string;
}
export interface SharedFileSystemConfiguration {
  endpoint?: string;
  fileSystemId?: string;
  linuxMountPoint?: string;
  shareName?: string;
  windowsMountDrive?: string;
}
export interface StudioComponentConfiguration {
  activeDirectoryConfiguration?: ActiveDirectoryConfiguration;
  computeFarmConfiguration?: ComputeFarmConfiguration;
  licenseServiceConfiguration?: LicenseServiceConfiguration;
  sharedFileSystemConfiguration?: SharedFileSystemConfiguration;
}
export declare const LaunchProfilePlatform: {
  readonly LINUX: "LINUX";
  readonly WINDOWS: "WINDOWS";
};
export type LaunchProfilePlatform =
  (typeof LaunchProfilePlatform)[keyof typeof LaunchProfilePlatform];
export declare const StudioComponentInitializationScriptRunContext: {
  readonly SYSTEM_INITIALIZATION: "SYSTEM_INITIALIZATION";
  readonly USER_INITIALIZATION: "USER_INITIALIZATION";
};
export type StudioComponentInitializationScriptRunContext =
  (typeof StudioComponentInitializationScriptRunContext)[keyof typeof StudioComponentInitializationScriptRunContext];
export interface StudioComponentInitializationScript {
  launchProfileProtocolVersion?: string;
  platform?: LaunchProfilePlatform;
  runContext?: StudioComponentInitializationScriptRunContext;
  script?: string;
}
export interface ScriptParameterKeyValue {
  key?: string;
  value?: string;
}
export declare const StudioComponentSubtype: {
  readonly AMAZON_FSX_FOR_LUSTRE: "AMAZON_FSX_FOR_LUSTRE";
  readonly AMAZON_FSX_FOR_WINDOWS: "AMAZON_FSX_FOR_WINDOWS";
  readonly AWS_MANAGED_MICROSOFT_AD: "AWS_MANAGED_MICROSOFT_AD";
  readonly CUSTOM: "CUSTOM";
};
export type StudioComponentSubtype =
  (typeof StudioComponentSubtype)[keyof typeof StudioComponentSubtype];
export declare const StudioComponentType: {
  readonly ACTIVE_DIRECTORY: "ACTIVE_DIRECTORY";
  readonly COMPUTE_FARM: "COMPUTE_FARM";
  readonly CUSTOM: "CUSTOM";
  readonly LICENSE_SERVICE: "LICENSE_SERVICE";
  readonly SHARED_FILE_SYSTEM: "SHARED_FILE_SYSTEM";
};
export type StudioComponentType =
  (typeof StudioComponentType)[keyof typeof StudioComponentType];
export interface CreateStudioComponentRequest {
  clientToken?: string;
  configuration?: StudioComponentConfiguration;
  description?: string;
  ec2SecurityGroupIds?: string[];
  initializationScripts?: StudioComponentInitializationScript[];
  name: string | undefined;
  scriptParameters?: ScriptParameterKeyValue[];
  studioId: string | undefined;
  subtype?: StudioComponentSubtype;
  tags?: Record<string, string>;
  type: StudioComponentType | undefined;
  secureInitializationRoleArn?: string;
  runtimeRoleArn?: string;
}
export declare const StudioComponentState: {
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly READY: "READY";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
};
export type StudioComponentState =
  (typeof StudioComponentState)[keyof typeof StudioComponentState];
export declare const StudioComponentStatusCode: {
  readonly ACTIVE_DIRECTORY_ALREADY_EXISTS: "ACTIVE_DIRECTORY_ALREADY_EXISTS";
  readonly ENCRYPTION_KEY_ACCESS_DENIED: "ENCRYPTION_KEY_ACCESS_DENIED";
  readonly ENCRYPTION_KEY_NOT_FOUND: "ENCRYPTION_KEY_NOT_FOUND";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly STUDIO_COMPONENT_CREATED: "STUDIO_COMPONENT_CREATED";
  readonly STUDIO_COMPONENT_CREATE_IN_PROGRESS: "STUDIO_COMPONENT_CREATE_IN_PROGRESS";
  readonly STUDIO_COMPONENT_DELETED: "STUDIO_COMPONENT_DELETED";
  readonly STUDIO_COMPONENT_DELETE_IN_PROGRESS: "STUDIO_COMPONENT_DELETE_IN_PROGRESS";
  readonly STUDIO_COMPONENT_UPDATED: "STUDIO_COMPONENT_UPDATED";
  readonly STUDIO_COMPONENT_UPDATE_IN_PROGRESS: "STUDIO_COMPONENT_UPDATE_IN_PROGRESS";
};
export type StudioComponentStatusCode =
  (typeof StudioComponentStatusCode)[keyof typeof StudioComponentStatusCode];
export interface StudioComponent {
  arn?: string;
  configuration?: StudioComponentConfiguration;
  createdAt?: Date;
  createdBy?: string;
  description?: string;
  ec2SecurityGroupIds?: string[];
  initializationScripts?: StudioComponentInitializationScript[];
  name?: string;
  scriptParameters?: ScriptParameterKeyValue[];
  state?: StudioComponentState;
  statusCode?: StudioComponentStatusCode;
  statusMessage?: string;
  studioComponentId?: string;
  subtype?: StudioComponentSubtype;
  tags?: Record<string, string>;
  type?: StudioComponentType;
  updatedAt?: Date;
  updatedBy?: string;
  secureInitializationRoleArn?: string;
  runtimeRoleArn?: string;
}
export interface CreateStudioComponentResponse {
  studioComponent?: StudioComponent;
}
export interface DeleteLaunchProfileRequest {
  clientToken?: string;
  launchProfileId: string | undefined;
  studioId: string | undefined;
}
export interface DeleteLaunchProfileResponse {
  launchProfile?: LaunchProfile;
}
export interface DeleteLaunchProfileMemberRequest {
  clientToken?: string;
  launchProfileId: string | undefined;
  principalId: string | undefined;
  studioId: string | undefined;
}
export interface DeleteLaunchProfileMemberResponse {}
export interface DeleteStreamingImageRequest {
  clientToken?: string;
  streamingImageId: string | undefined;
  studioId: string | undefined;
}
export interface DeleteStreamingImageResponse {
  streamingImage?: StreamingImage;
}
export interface DeleteStreamingSessionRequest {
  clientToken?: string;
  sessionId: string | undefined;
  studioId: string | undefined;
}
export interface DeleteStreamingSessionResponse {
  session?: StreamingSession;
}
export interface DeleteStudioRequest {
  clientToken?: string;
  studioId: string | undefined;
}
export interface DeleteStudioResponse {
  studio: Studio | undefined;
}
export interface DeleteStudioComponentRequest {
  clientToken?: string;
  studioComponentId: string | undefined;
  studioId: string | undefined;
}
export interface DeleteStudioComponentResponse {
  studioComponent?: StudioComponent;
}
export interface DeleteStudioMemberRequest {
  clientToken?: string;
  principalId: string | undefined;
  studioId: string | undefined;
}
export interface DeleteStudioMemberResponse {}
export interface Eula {
  content?: string;
  createdAt?: Date;
  eulaId?: string;
  name?: string;
  updatedAt?: Date;
}
export interface ListEulaAcceptancesRequest {
  eulaIds?: string[];
  nextToken?: string;
  studioId: string | undefined;
}
export interface ListEulaAcceptancesResponse {
  eulaAcceptances?: EulaAcceptance[];
  nextToken?: string;
}
export interface GetEulaRequest {
  eulaId: string | undefined;
}
export interface GetEulaResponse {
  eula?: Eula;
}
export interface ListEulasRequest {
  eulaIds?: string[];
  nextToken?: string;
}
export interface ListEulasResponse {
  eulas?: Eula[];
  nextToken?: string;
}
export interface GetLaunchProfileRequest {
  launchProfileId: string | undefined;
  studioId: string | undefined;
}
export interface GetLaunchProfileResponse {
  launchProfile?: LaunchProfile;
}
export interface GetLaunchProfileDetailsRequest {
  launchProfileId: string | undefined;
  studioId: string | undefined;
}
export interface StudioComponentSummary {
  createdAt?: Date;
  createdBy?: string;
  description?: string;
  name?: string;
  studioComponentId?: string;
  subtype?: StudioComponentSubtype;
  type?: StudioComponentType;
  updatedAt?: Date;
  updatedBy?: string;
}
export interface GetLaunchProfileDetailsResponse {
  launchProfile?: LaunchProfile;
  streamingImages?: StreamingImage[];
  studioComponentSummaries?: StudioComponentSummary[];
}
export interface GetLaunchProfileInitializationRequest {
  launchProfileId: string | undefined;
  launchProfileProtocolVersions: string[] | undefined;
  launchPurpose: string | undefined;
  platform: string | undefined;
  studioId: string | undefined;
}
export interface LaunchProfileInitializationActiveDirectory {
  computerAttributes?: ActiveDirectoryComputerAttribute[];
  directoryId?: string;
  directoryName?: string;
  dnsIpAddresses?: string[];
  organizationalUnitDistinguishedName?: string;
  studioComponentId?: string;
  studioComponentName?: string;
}
export interface LaunchProfileInitializationScript {
  script?: string;
  studioComponentId?: string;
  studioComponentName?: string;
  secureInitializationRoleArn?: string;
  runtimeRoleArn?: string;
}
export interface LaunchProfileInitialization {
  activeDirectory?: LaunchProfileInitializationActiveDirectory;
  ec2SecurityGroupIds?: string[];
  launchProfileId?: string;
  launchProfileProtocolVersion?: string;
  launchPurpose?: string;
  name?: string;
  platform?: LaunchProfilePlatform;
  systemInitializationScripts?: LaunchProfileInitializationScript[];
  userInitializationScripts?: LaunchProfileInitializationScript[];
}
export interface GetLaunchProfileInitializationResponse {
  launchProfileInitialization?: LaunchProfileInitialization;
}
export interface GetLaunchProfileMemberRequest {
  launchProfileId: string | undefined;
  principalId: string | undefined;
  studioId: string | undefined;
}
export declare const LaunchProfilePersona: {
  readonly USER: "USER";
};
export type LaunchProfilePersona =
  (typeof LaunchProfilePersona)[keyof typeof LaunchProfilePersona];
export interface LaunchProfileMembership {
  identityStoreId?: string;
  persona?: LaunchProfilePersona;
  principalId?: string;
  sid?: string;
}
export interface GetLaunchProfileMemberResponse {
  member?: LaunchProfileMembership;
}
export interface GetStreamingImageRequest {
  streamingImageId: string | undefined;
  studioId: string | undefined;
}
export interface GetStreamingImageResponse {
  streamingImage?: StreamingImage;
}
export interface GetStreamingSessionRequest {
  sessionId: string | undefined;
  studioId: string | undefined;
}
export interface GetStreamingSessionResponse {
  session?: StreamingSession;
}
export interface GetStreamingSessionBackupRequest {
  backupId: string | undefined;
  studioId: string | undefined;
}
export interface StreamingSessionBackup {
  arn?: string;
  createdAt?: Date;
  launchProfileId?: string;
  ownedBy?: string;
  sessionId?: string;
  state?: StreamingSessionState;
  statusCode?: StreamingSessionStatusCode;
  statusMessage?: string;
  backupId?: string;
  tags?: Record<string, string>;
}
export interface GetStreamingSessionBackupResponse {
  streamingSessionBackup?: StreamingSessionBackup;
}
export interface GetStreamingSessionStreamRequest {
  sessionId: string | undefined;
  streamId: string | undefined;
  studioId: string | undefined;
}
export interface GetStreamingSessionStreamResponse {
  stream?: StreamingSessionStream;
}
export interface GetStudioRequest {
  studioId: string | undefined;
}
export interface GetStudioResponse {
  studio: Studio | undefined;
}
export interface GetStudioComponentRequest {
  studioComponentId: string | undefined;
  studioId: string | undefined;
}
export interface GetStudioComponentResponse {
  studioComponent?: StudioComponent;
}
export interface GetStudioMemberRequest {
  principalId: string | undefined;
  studioId: string | undefined;
}
export declare const StudioPersona: {
  readonly ADMINISTRATOR: "ADMINISTRATOR";
};
export type StudioPersona = (typeof StudioPersona)[keyof typeof StudioPersona];
export interface StudioMembership {
  identityStoreId?: string;
  persona?: StudioPersona;
  principalId?: string;
  sid?: string;
}
export interface GetStudioMemberResponse {
  member?: StudioMembership;
}
export interface ListLaunchProfileMembersRequest {
  launchProfileId: string | undefined;
  maxResults?: number;
  nextToken?: string;
  studioId: string | undefined;
}
export interface ListLaunchProfileMembersResponse {
  members?: LaunchProfileMembership[];
  nextToken?: string;
}
export interface ListLaunchProfilesRequest {
  maxResults?: number;
  nextToken?: string;
  principalId?: string;
  states?: LaunchProfileState[];
  studioId: string | undefined;
}
export interface ListLaunchProfilesResponse {
  launchProfiles?: LaunchProfile[];
  nextToken?: string;
}
export interface NewLaunchProfileMember {
  persona: LaunchProfilePersona | undefined;
  principalId: string | undefined;
}
export interface PutLaunchProfileMembersRequest {
  clientToken?: string;
  identityStoreId: string | undefined;
  launchProfileId: string | undefined;
  members: NewLaunchProfileMember[] | undefined;
  studioId: string | undefined;
}
export interface PutLaunchProfileMembersResponse {}
export interface UpdateLaunchProfileRequest {
  clientToken?: string;
  description?: string;
  launchProfileId: string | undefined;
  launchProfileProtocolVersions?: string[];
  name?: string;
  streamConfiguration?: StreamConfigurationCreate;
  studioComponentIds?: string[];
  studioId: string | undefined;
}
export interface UpdateLaunchProfileResponse {
  launchProfile?: LaunchProfile;
}
export interface UpdateLaunchProfileMemberRequest {
  clientToken?: string;
  launchProfileId: string | undefined;
  persona: LaunchProfilePersona | undefined;
  principalId: string | undefined;
  studioId: string | undefined;
}
export interface UpdateLaunchProfileMemberResponse {
  member?: LaunchProfileMembership;
}
export interface ListStreamingImagesRequest {
  nextToken?: string;
  owner?: string;
  studioId: string | undefined;
}
export interface ListStreamingImagesResponse {
  nextToken?: string;
  streamingImages?: StreamingImage[];
}
export interface ListStreamingSessionBackupsRequest {
  nextToken?: string;
  ownedBy?: string;
  studioId: string | undefined;
}
export interface ListStreamingSessionBackupsResponse {
  nextToken?: string;
  streamingSessionBackups?: StreamingSessionBackup[];
}
export interface ListStreamingSessionsRequest {
  createdBy?: string;
  nextToken?: string;
  ownedBy?: string;
  sessionIds?: string;
  studioId: string | undefined;
}
export interface ListStreamingSessionsResponse {
  nextToken?: string;
  sessions?: StreamingSession[];
}
export interface ListStudioComponentsRequest {
  maxResults?: number;
  nextToken?: string;
  states?: StudioComponentState[];
  studioId: string | undefined;
  types?: StudioComponentType[];
}
export interface ListStudioComponentsResponse {
  nextToken?: string;
  studioComponents?: StudioComponent[];
}
export interface ListStudioMembersRequest {
  maxResults?: number;
  nextToken?: string;
  studioId: string | undefined;
}
export interface ListStudioMembersResponse {
  members?: StudioMembership[];
  nextToken?: string;
}
export interface ListStudiosRequest {
  nextToken?: string;
}
export interface ListStudiosResponse {
  nextToken?: string;
  studios: Studio[] | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface NewStudioMember {
  persona: StudioPersona | undefined;
  principalId: string | undefined;
}
export interface UpdateStreamingImageRequest {
  clientToken?: string;
  description?: string;
  name?: string;
  streamingImageId: string | undefined;
  studioId: string | undefined;
}
export interface UpdateStreamingImageResponse {
  streamingImage?: StreamingImage;
}
export interface StartStreamingSessionRequest {
  clientToken?: string;
  sessionId: string | undefined;
  studioId: string | undefined;
  backupId?: string;
}
export interface StartStreamingSessionResponse {
  session?: StreamingSession;
}
export interface StopStreamingSessionRequest {
  clientToken?: string;
  sessionId: string | undefined;
  studioId: string | undefined;
  volumeRetentionMode?: VolumeRetentionMode;
}
export interface StopStreamingSessionResponse {
  session?: StreamingSession;
}
export interface UpdateStudioComponentRequest {
  clientToken?: string;
  configuration?: StudioComponentConfiguration;
  description?: string;
  ec2SecurityGroupIds?: string[];
  initializationScripts?: StudioComponentInitializationScript[];
  name?: string;
  scriptParameters?: ScriptParameterKeyValue[];
  studioComponentId: string | undefined;
  studioId: string | undefined;
  subtype?: StudioComponentSubtype;
  type?: StudioComponentType;
  secureInitializationRoleArn?: string;
  runtimeRoleArn?: string;
}
export interface UpdateStudioComponentResponse {
  studioComponent?: StudioComponent;
}
export interface PutStudioMembersRequest {
  clientToken?: string;
  identityStoreId: string | undefined;
  members: NewStudioMember[] | undefined;
  studioId: string | undefined;
}
export interface PutStudioMembersResponse {}
export interface StartStudioSSOConfigurationRepairRequest {
  clientToken?: string;
  studioId: string | undefined;
}
export interface StartStudioSSOConfigurationRepairResponse {
  studio: Studio | undefined;
}
export interface UpdateStudioRequest {
  adminRoleArn?: string;
  clientToken?: string;
  displayName?: string;
  studioId: string | undefined;
  userRoleArn?: string;
}
export interface UpdateStudioResponse {
  studio: Studio | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags?: Record<string, string>;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export declare const ActiveDirectoryConfigurationFilterSensitiveLog: (
  obj: ActiveDirectoryConfiguration
) => any;
export declare const ComputeFarmConfigurationFilterSensitiveLog: (
  obj: ComputeFarmConfiguration
) => any;
export declare const StreamingSessionStorageRootFilterSensitiveLog: (
  obj: StreamingSessionStorageRoot
) => any;
export declare const StreamConfigurationSessionStorageFilterSensitiveLog: (
  obj: StreamConfigurationSessionStorage
) => any;
export declare const StreamConfigurationCreateFilterSensitiveLog: (
  obj: StreamConfigurationCreate
) => any;
export declare const CreateLaunchProfileRequestFilterSensitiveLog: (
  obj: CreateLaunchProfileRequest
) => any;
export declare const StreamConfigurationFilterSensitiveLog: (
  obj: StreamConfiguration
) => any;
export declare const LaunchProfileFilterSensitiveLog: (
  obj: LaunchProfile
) => any;
export declare const CreateLaunchProfileResponseFilterSensitiveLog: (
  obj: CreateLaunchProfileResponse
) => any;
export declare const CreateStreamingImageRequestFilterSensitiveLog: (
  obj: CreateStreamingImageRequest
) => any;
export declare const StreamingImageFilterSensitiveLog: (
  obj: StreamingImage
) => any;
export declare const CreateStreamingImageResponseFilterSensitiveLog: (
  obj: CreateStreamingImageResponse
) => any;
export declare const StreamingSessionStreamFilterSensitiveLog: (
  obj: StreamingSessionStream
) => any;
export declare const CreateStreamingSessionStreamResponseFilterSensitiveLog: (
  obj: CreateStreamingSessionStreamResponse
) => any;
export declare const CreateStudioRequestFilterSensitiveLog: (
  obj: CreateStudioRequest
) => any;
export declare const StudioFilterSensitiveLog: (obj: Studio) => any;
export declare const CreateStudioResponseFilterSensitiveLog: (
  obj: CreateStudioResponse
) => any;
export declare const LicenseServiceConfigurationFilterSensitiveLog: (
  obj: LicenseServiceConfiguration
) => any;
export declare const SharedFileSystemConfigurationFilterSensitiveLog: (
  obj: SharedFileSystemConfiguration
) => any;
export declare const StudioComponentConfigurationFilterSensitiveLog: (
  obj: StudioComponentConfiguration
) => any;
export declare const StudioComponentInitializationScriptFilterSensitiveLog: (
  obj: StudioComponentInitializationScript
) => any;
export declare const CreateStudioComponentRequestFilterSensitiveLog: (
  obj: CreateStudioComponentRequest
) => any;
export declare const StudioComponentFilterSensitiveLog: (
  obj: StudioComponent
) => any;
export declare const CreateStudioComponentResponseFilterSensitiveLog: (
  obj: CreateStudioComponentResponse
) => any;
export declare const DeleteLaunchProfileResponseFilterSensitiveLog: (
  obj: DeleteLaunchProfileResponse
) => any;
export declare const DeleteStreamingImageResponseFilterSensitiveLog: (
  obj: DeleteStreamingImageResponse
) => any;
export declare const DeleteStudioResponseFilterSensitiveLog: (
  obj: DeleteStudioResponse
) => any;
export declare const DeleteStudioComponentResponseFilterSensitiveLog: (
  obj: DeleteStudioComponentResponse
) => any;
export declare const GetLaunchProfileResponseFilterSensitiveLog: (
  obj: GetLaunchProfileResponse
) => any;
export declare const StudioComponentSummaryFilterSensitiveLog: (
  obj: StudioComponentSummary
) => any;
export declare const GetLaunchProfileDetailsResponseFilterSensitiveLog: (
  obj: GetLaunchProfileDetailsResponse
) => any;
export declare const LaunchProfileInitializationActiveDirectoryFilterSensitiveLog: (
  obj: LaunchProfileInitializationActiveDirectory
) => any;
export declare const LaunchProfileInitializationScriptFilterSensitiveLog: (
  obj: LaunchProfileInitializationScript
) => any;
export declare const LaunchProfileInitializationFilterSensitiveLog: (
  obj: LaunchProfileInitialization
) => any;
export declare const GetLaunchProfileInitializationResponseFilterSensitiveLog: (
  obj: GetLaunchProfileInitializationResponse
) => any;
export declare const GetStreamingImageResponseFilterSensitiveLog: (
  obj: GetStreamingImageResponse
) => any;
export declare const GetStreamingSessionStreamResponseFilterSensitiveLog: (
  obj: GetStreamingSessionStreamResponse
) => any;
export declare const GetStudioResponseFilterSensitiveLog: (
  obj: GetStudioResponse
) => any;
export declare const GetStudioComponentResponseFilterSensitiveLog: (
  obj: GetStudioComponentResponse
) => any;
export declare const ListLaunchProfilesResponseFilterSensitiveLog: (
  obj: ListLaunchProfilesResponse
) => any;
export declare const UpdateLaunchProfileRequestFilterSensitiveLog: (
  obj: UpdateLaunchProfileRequest
) => any;
export declare const UpdateLaunchProfileResponseFilterSensitiveLog: (
  obj: UpdateLaunchProfileResponse
) => any;
export declare const ListStreamingImagesResponseFilterSensitiveLog: (
  obj: ListStreamingImagesResponse
) => any;
export declare const ListStudioComponentsResponseFilterSensitiveLog: (
  obj: ListStudioComponentsResponse
) => any;
export declare const ListStudiosResponseFilterSensitiveLog: (
  obj: ListStudiosResponse
) => any;
export declare const UpdateStreamingImageRequestFilterSensitiveLog: (
  obj: UpdateStreamingImageRequest
) => any;
export declare const UpdateStreamingImageResponseFilterSensitiveLog: (
  obj: UpdateStreamingImageResponse
) => any;
export declare const UpdateStudioComponentRequestFilterSensitiveLog: (
  obj: UpdateStudioComponentRequest
) => any;
export declare const UpdateStudioComponentResponseFilterSensitiveLog: (
  obj: UpdateStudioComponentResponse
) => any;
export declare const StartStudioSSOConfigurationRepairResponseFilterSensitiveLog: (
  obj: StartStudioSSOConfigurationRepairResponse
) => any;
export declare const UpdateStudioRequestFilterSensitiveLog: (
  obj: UpdateStudioRequest
) => any;
export declare const UpdateStudioResponseFilterSensitiveLog: (
  obj: UpdateStudioResponse
) => any;
