import { WaiterConfiguration, WaiterResult } from "@smithy/util-waiter";
import { GetStreamingSessionCommandInput } from "../commands/GetStreamingSessionCommand";
import { NimbleClient } from "../NimbleClient";
/**
 * Wait until a StreamingSession is ready. Use this after invoking CreateStreamingSession, StartStreamingSession
 *  @deprecated Use waitUntilStreamingSessionReady instead. waitForStreamingSessionReady does not throw error in non-success cases.
 */
export declare const waitForStreamingSessionReady: (params: WaiterConfiguration<NimbleClient>, input: GetStreamingSessionCommandInput) => Promise<WaiterResult>;
/**
 * Wait until a StreamingSession is ready. Use this after invoking CreateStreamingSession, StartStreamingSession
 *  @param params - Waiter configuration options.
 *  @param input - The input to GetStreamingSessionCommand for polling.
 */
export declare const waitUntilStreamingSessionReady: (params: WaiterConfiguration<NimbleClient>, input: GetStreamingSessionCommandInput) => Promise<WaiterResult>;
