import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { AccessDeniedException, ConflictException, InternalServerErrorException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { NimbleServiceException as __BaseException } from "../models/NimbleServiceException";
export const se_AcceptEulasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/eula-acceptances");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        eulaIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLaunchProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        ec2SubnetIds: (_) => _json(_),
        launchProfileProtocolVersions: (_) => _json(_),
        name: [],
        streamConfiguration: (_) => _json(_),
        studioComponentIds: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateStreamingImageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/streaming-images");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        ec2ImageId: [],
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateStreamingSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/streaming-sessions");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ec2InstanceType: [],
        launchProfileId: [],
        ownedBy: [],
        streamingImageId: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateStreamingSessionStreamCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams");
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        expirationInSeconds: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateStudioCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios");
    let body;
    body = JSON.stringify(take(input, {
        adminRoleArn: [],
        displayName: [],
        studioEncryptionConfiguration: (_) => _json(_),
        studioName: [],
        tags: (_) => _json(_),
        userRoleArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateStudioComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/studio-components");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        configuration: (_) => _json(_),
        description: [],
        ec2SecurityGroupIds: (_) => _json(_),
        initializationScripts: (_) => _json(_),
        name: [],
        runtimeRoleArn: [],
        scriptParameters: (_) => _json(_),
        secureInitializationRoleArn: [],
        subtype: [],
        tags: (_) => _json(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteLaunchProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteLaunchProfileMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("principalId", () => input.principalId, "{principalId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteStreamingImageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}");
    b.p("streamingImageId", () => input.streamingImageId, "{streamingImageId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteStreamingSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}");
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteStudioCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteStudioComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}");
    b.p("studioComponentId", () => input.studioComponentId, "{studioComponentId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteStudioMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/membership/{principalId}");
    b.p("principalId", () => input.principalId, "{principalId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetEulaCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/eulas/{eulaId}");
    b.p("eulaId", () => input.eulaId, "{eulaId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetLaunchProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetLaunchProfileDetailsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/details");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetLaunchProfileInitializationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/init");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    const query = map({
        [_lPPV]: [
            __expectNonNull(input.launchProfileProtocolVersions, `launchProfileProtocolVersions`) != null,
            () => (input[_lPPV] || []).map((_entry) => _entry),
        ],
        [_lP]: [, __expectNonNull(input[_lP], `launchPurpose`)],
        [_p]: [, __expectNonNull(input[_p], `platform`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetLaunchProfileMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("principalId", () => input.principalId, "{principalId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetStreamingImageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}");
    b.p("streamingImageId", () => input.streamingImageId, "{streamingImageId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetStreamingSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}");
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetStreamingSessionBackupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/streaming-session-backups/{backupId}");
    b.p("backupId", () => input.backupId, "{backupId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetStreamingSessionStreamCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams/{streamId}");
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    b.p("streamId", () => input.streamId, "{streamId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetStudioCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetStudioComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}");
    b.p("studioComponentId", () => input.studioComponentId, "{studioComponentId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetStudioMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/membership/{principalId}");
    b.p("principalId", () => input.principalId, "{principalId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListEulaAcceptancesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/eula-acceptances");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    const query = map({
        [_eI]: [() => input.eulaIds !== void 0, () => (input[_eI] || []).map((_entry) => _entry)],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEulasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/eulas");
    const query = map({
        [_eI]: [() => input.eulaIds !== void 0, () => (input[_eI] || []).map((_entry) => _entry)],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLaunchProfileMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLaunchProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_pI]: [, input[_pI]],
        [_s]: [() => input.states !== void 0, () => (input[_s] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListStreamingImagesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/streaming-images");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_o]: [, input[_o]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListStreamingSessionBackupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/streaming-session-backups");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_oB]: [, input[_oB]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListStreamingSessionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/streaming-sessions");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    const query = map({
        [_cB]: [, input[_cB]],
        [_nT]: [, input[_nT]],
        [_oB]: [, input[_oB]],
        [_sI]: [, input[_sI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListStudioComponentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/studio-components");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_s]: [() => input.states !== void 0, () => (input[_s] || []).map((_entry) => _entry)],
        [_t]: [() => input.types !== void 0, () => (input[_t] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListStudioMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios/{studioId}/membership");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListStudiosCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/studios");
    const query = map({
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutLaunchProfileMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        identityStoreId: [],
        members: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutStudioMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/membership");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        identityStoreId: [],
        members: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartStreamingSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/start");
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        backupId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartStudioSSOConfigurationRepairCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/sso-configuration");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StopStreamingSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/stop");
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        volumeRetentionMode: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2020-08-01/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2020-08-01/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateLaunchProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        launchProfileProtocolVersions: (_) => _json(_),
        name: [],
        streamConfiguration: (_) => _json(_),
        studioComponentIds: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateLaunchProfileMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}");
    b.p("launchProfileId", () => input.launchProfileId, "{launchProfileId}", false);
    b.p("principalId", () => input.principalId, "{principalId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        persona: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateStreamingImageCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}");
    b.p("streamingImageId", () => input.streamingImageId, "{streamingImageId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateStudioCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}");
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        adminRoleArn: [],
        displayName: [],
        userRoleArn: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateStudioComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_cT],
    });
    b.bp("/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}");
    b.p("studioComponentId", () => input.studioComponentId, "{studioComponentId}", false);
    b.p("studioId", () => input.studioId, "{studioId}", false);
    let body;
    body = JSON.stringify(take(input, {
        configuration: (_) => _json(_),
        description: [],
        ec2SecurityGroupIds: (_) => _json(_),
        initializationScripts: (_) => _json(_),
        name: [],
        runtimeRoleArn: [],
        scriptParameters: (_) => _json(_),
        secureInitializationRoleArn: [],
        subtype: [],
        type: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_AcceptEulasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        eulaAcceptances: (_) => de_EulaAcceptanceList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLaunchProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        launchProfile: (_) => de_LaunchProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateStreamingImageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        streamingImage: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateStreamingSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        session: (_) => de_StreamingSession(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateStreamingSessionStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        stream: (_) => de_StreamingSessionStream(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateStudioCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        studio: (_) => de_Studio(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateStudioComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        studioComponent: (_) => de_StudioComponent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteLaunchProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        launchProfile: (_) => de_LaunchProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteLaunchProfileMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteStreamingImageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        streamingImage: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteStreamingSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        session: (_) => de_StreamingSession(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteStudioCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        studio: (_) => de_Studio(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteStudioComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        studioComponent: (_) => de_StudioComponent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteStudioMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetEulaCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        eula: (_) => de_Eula(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLaunchProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        launchProfile: (_) => de_LaunchProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLaunchProfileDetailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        launchProfile: (_) => de_LaunchProfile(_, context),
        streamingImages: _json,
        studioComponentSummaries: (_) => de_StudioComponentSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLaunchProfileInitializationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        launchProfileInitialization: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLaunchProfileMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        member: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetStreamingImageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        streamingImage: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetStreamingSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        session: (_) => de_StreamingSession(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetStreamingSessionBackupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        streamingSessionBackup: (_) => de_StreamingSessionBackup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetStreamingSessionStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        stream: (_) => de_StreamingSessionStream(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetStudioCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        studio: (_) => de_Studio(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetStudioComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        studioComponent: (_) => de_StudioComponent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetStudioMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        member: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEulaAcceptancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        eulaAcceptances: (_) => de_EulaAcceptanceList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEulasCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        eulas: (_) => de_EulaList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLaunchProfileMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        members: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLaunchProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        launchProfiles: (_) => de_LaunchProfileList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListStreamingImagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        streamingImages: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListStreamingSessionBackupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        streamingSessionBackups: (_) => de_StreamingSessionBackupList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListStreamingSessionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        sessions: (_) => de_StreamingSessionList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListStudioComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        studioComponents: (_) => de_StudioComponentList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListStudioMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        members: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListStudiosCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        studios: (_) => de_StudioList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutLaunchProfileMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutStudioMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartStreamingSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        session: (_) => de_StreamingSession(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartStudioSSOConfigurationRepairCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        studio: (_) => de_Studio(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopStreamingSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        session: (_) => de_StreamingSession(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateLaunchProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        launchProfile: (_) => de_LaunchProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateLaunchProfileMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        member: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateStreamingImageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        streamingImage: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateStudioCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        studio: (_) => de_Studio(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateStudioComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        studioComponent: (_) => de_StudioComponent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.nimble#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.nimble#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.nimble#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.nimble#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.nimble#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.nimble#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.nimble#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        context: _json,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        context: _json,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        context: _json,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        context: _json,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        context: _json,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        context: _json,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        code: __expectString,
        context: _json,
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_Eula = (output, context) => {
    return take(output, {
        content: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        eulaId: __expectString,
        name: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_EulaAcceptance = (output, context) => {
    return take(output, {
        acceptedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        acceptedBy: __expectString,
        accepteeId: __expectString,
        eulaAcceptanceId: __expectString,
        eulaId: __expectString,
    });
};
const de_EulaAcceptanceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EulaAcceptance(entry, context);
    });
    return retVal;
};
const de_EulaList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Eula(entry, context);
    });
    return retVal;
};
const de_LaunchProfile = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        createdBy: __expectString,
        description: __expectString,
        ec2SubnetIds: _json,
        launchProfileId: __expectString,
        launchProfileProtocolVersions: _json,
        name: __expectString,
        state: __expectString,
        statusCode: __expectString,
        statusMessage: __expectString,
        streamConfiguration: _json,
        studioComponentIds: _json,
        tags: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        updatedBy: __expectString,
        validationResults: _json,
    });
};
const de_LaunchProfileList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchProfile(entry, context);
    });
    return retVal;
};
const de_StreamingSession = (output, context) => {
    return take(output, {
        arn: __expectString,
        automaticTerminationMode: __expectString,
        backupMode: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        createdBy: __expectString,
        ec2InstanceType: __expectString,
        launchProfileId: __expectString,
        maxBackupsToRetain: __expectInt32,
        ownedBy: __expectString,
        sessionId: __expectString,
        sessionPersistenceMode: __expectString,
        startedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        startedBy: __expectString,
        startedFromBackupId: __expectString,
        state: __expectString,
        statusCode: __expectString,
        statusMessage: __expectString,
        stopAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        stoppedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        stoppedBy: __expectString,
        streamingImageId: __expectString,
        tags: _json,
        terminateAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        updatedBy: __expectString,
        volumeConfiguration: _json,
        volumeRetentionMode: __expectString,
    });
};
const de_StreamingSessionBackup = (output, context) => {
    return take(output, {
        arn: __expectString,
        backupId: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        launchProfileId: __expectString,
        ownedBy: __expectString,
        sessionId: __expectString,
        state: __expectString,
        statusCode: __expectString,
        statusMessage: __expectString,
        tags: _json,
    });
};
const de_StreamingSessionBackupList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StreamingSessionBackup(entry, context);
    });
    return retVal;
};
const de_StreamingSessionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StreamingSession(entry, context);
    });
    return retVal;
};
const de_StreamingSessionStream = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        createdBy: __expectString,
        expiresAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ownedBy: __expectString,
        state: __expectString,
        statusCode: __expectString,
        streamId: __expectString,
        url: __expectString,
    });
};
const de_Studio = (output, context) => {
    return take(output, {
        adminRoleArn: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        displayName: __expectString,
        homeRegion: __expectString,
        ssoClientId: __expectString,
        state: __expectString,
        statusCode: __expectString,
        statusMessage: __expectString,
        studioEncryptionConfiguration: _json,
        studioId: __expectString,
        studioName: __expectString,
        studioUrl: __expectString,
        tags: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        userRoleArn: __expectString,
    });
};
const de_StudioComponent = (output, context) => {
    return take(output, {
        arn: __expectString,
        configuration: _json,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        createdBy: __expectString,
        description: __expectString,
        ec2SecurityGroupIds: _json,
        initializationScripts: _json,
        name: __expectString,
        runtimeRoleArn: __expectString,
        scriptParameters: _json,
        secureInitializationRoleArn: __expectString,
        state: __expectString,
        statusCode: __expectString,
        statusMessage: __expectString,
        studioComponentId: __expectString,
        subtype: __expectString,
        tags: _json,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        updatedBy: __expectString,
    });
};
const de_StudioComponentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StudioComponent(entry, context);
    });
    return retVal;
};
const de_StudioComponentSummary = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        createdBy: __expectString,
        description: __expectString,
        name: __expectString,
        studioComponentId: __expectString,
        subtype: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        updatedBy: __expectString,
    });
};
const de_StudioComponentSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StudioComponentSummary(entry, context);
    });
    return retVal;
};
const de_StudioList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Studio(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _cB = "createdBy";
const _cT = "clientToken";
const _eI = "eulaIds";
const _lP = "launchPurpose";
const _lPPV = "launchProfileProtocolVersions";
const _mR = "maxResults";
const _nT = "nextToken";
const _o = "owner";
const _oB = "ownedBy";
const _p = "platform";
const _pI = "principalId";
const _s = "states";
const _sI = "sessionIds";
const _t = "types";
const _tK = "tagKeys";
const _xact = "x-amz-client-token";
