import { requestBuilder as rb } from "@smithy/core";
import { isValidHostname as __isValidHostname, } from "@smithy/protocol-http";
import { _json, collectBody, convertMap, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { DataExchangeServiceException as __BaseException } from "../models/DataExchangeServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceLimitExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_CancelJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/jobs/{JobId}");
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_CreateDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/data-sets");
    let body;
    body = JSON.stringify(take(input, {
        AssetType: [],
        Description: [],
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateEventActionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/event-actions");
    let body;
    body = JSON.stringify(take(input, {
        Action: (_) => _json(_),
        Event: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/jobs");
    let body;
    body = JSON.stringify(take(input, {
        Details: (_) => _json(_),
        Type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRevisionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/data-sets/{DataSetId}/revisions");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Comment: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAssetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}");
    b.p("AssetId", () => input.AssetId, "{AssetId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/data-sets/{DataSetId}");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEventActionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/event-actions/{EventActionId}");
    b.p("EventActionId", () => input.EventActionId, "{EventActionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRevisionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/data-sets/{DataSetId}/revisions/{RevisionId}");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetAssetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}");
    b.p("AssetId", () => input.AssetId, "{AssetId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/data-sets/{DataSetId}");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEventActionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/event-actions/{EventActionId}");
    b.p("EventActionId", () => input.EventActionId, "{EventActionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/jobs/{JobId}");
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRevisionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/data-sets/{DataSetId}/revisions/{RevisionId}");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListDataSetRevisionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/data-sets/{DataSetId}/revisions");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDataSetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/data-sets");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEventActionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/event-actions");
    const query = map({
        [_eSI]: [, input[_ESI]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/jobs");
    const query = map({
        [_dSI]: [, input[_DSI]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_rI]: [, input[_RI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRevisionAssetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("RevisionId", () => input.RevisionId, "{RevisionId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_RevokeRevisionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/data-sets/{DataSetId}/revisions/{RevisionId}/revoke");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        RevocationComment: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SendApiAssetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "text/plain",
        [_xadai]: input[_AI],
        [_xaddsi]: input[_DSI],
        [_xadhm]: input[_M],
        [_xadp]: input[_P],
        [_xadri]: input[_RI],
        ...(input.RequestHeaders !== undefined &&
            Object.keys(input.RequestHeaders).reduce((acc, suffix) => {
                acc[`x-amzn-dataexchange-header-${suffix.toLowerCase()}`] = input.RequestHeaders[suffix];
                return acc;
            }, {})),
    });
    b.bp("/v1");
    const query = map({
        ...convertMap(input.QueryStringParameters),
    });
    let body;
    if (input.Body !== undefined) {
        body = input.Body;
    }
    let { hostname: resolvedHostname } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
        resolvedHostname = "api-fulfill." + resolvedHostname;
        if (!__isValidHostname(resolvedHostname)) {
            throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
    }
    b.hn(resolvedHostname);
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_SendDataSetNotificationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/data-sets/{DataSetId}/notification");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Comment: [],
        Details: (_) => se_NotificationDetails(_, context),
        Scope: (_) => _json(_),
        Type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/jobs/{JobId}");
    b.p("JobId", () => input.JobId, "{JobId}", false);
    let body;
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAssetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}");
    b.p("AssetId", () => input.AssetId, "{AssetId}", false);
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateDataSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/data-sets/{DataSetId}");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateEventActionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/event-actions/{EventActionId}");
    b.p("EventActionId", () => input.EventActionId, "{EventActionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Action: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateRevisionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/data-sets/{DataSetId}/revisions/{RevisionId}");
    b.p("DataSetId", () => input.DataSetId, "{DataSetId}", false);
    b.p("RevisionId", () => input.RevisionId, "{RevisionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Comment: [],
        Finalized: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_CancelJobCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateDataSetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssetType: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        Origin: __expectString,
        OriginDetails: _json,
        SourceId: __expectString,
        Tags: _json,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateEventActionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Action: _json,
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Event: _json,
        Id: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Details: (_) => de_ResponseDetails(_, context),
        Errors: (_) => de_ListOfJobError(_, context),
        Id: __expectString,
        State: __expectString,
        Type: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRevisionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Comment: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DataSetId: __expectString,
        Finalized: __expectBoolean,
        Id: __expectString,
        RevocationComment: __expectString,
        Revoked: __expectBoolean,
        RevokedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SourceId: __expectString,
        Tags: _json,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAssetCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDataSetCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteEventActionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRevisionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAssetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssetDetails: (_) => de_AssetDetails(_, context),
        AssetType: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DataSetId: __expectString,
        Id: __expectString,
        Name: __expectString,
        RevisionId: __expectString,
        SourceId: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssetType: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        Origin: __expectString,
        OriginDetails: _json,
        SourceId: __expectString,
        Tags: _json,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEventActionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Action: _json,
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Event: _json,
        Id: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Details: (_) => de_ResponseDetails(_, context),
        Errors: (_) => de_ListOfJobError(_, context),
        Id: __expectString,
        State: __expectString,
        Type: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRevisionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Comment: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DataSetId: __expectString,
        Finalized: __expectBoolean,
        Id: __expectString,
        RevocationComment: __expectString,
        Revoked: __expectBoolean,
        RevokedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SourceId: __expectString,
        Tags: _json,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDataSetRevisionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Revisions: (_) => de_ListOfRevisionEntry(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDataSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DataSets: (_) => de_ListOfDataSetEntry(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEventActionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EventActions: (_) => de_ListOfEventActionEntry(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Jobs: (_) => de_ListOfJobEntry(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRevisionAssetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Assets: (_) => de_ListOfAssetEntry(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RevokeRevisionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Comment: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DataSetId: __expectString,
        Finalized: __expectBoolean,
        Id: __expectString,
        RevocationComment: __expectString,
        Revoked: __expectBoolean,
        RevokedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SourceId: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SendApiAssetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        ResponseHeaders: [
            ,
            Object.keys(output.headers)
                .filter((header) => header.startsWith(""))
                .reduce((acc, header) => {
                acc[header.substring(0)] = output.headers[header];
                return acc;
            }, {}),
        ],
    });
    const data = await collectBodyString(output.body, context);
    contents.Body = __expectString(data);
    return contents;
};
export const de_SendDataSetNotificationCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAssetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssetDetails: (_) => de_AssetDetails(_, context),
        AssetType: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DataSetId: __expectString,
        Id: __expectString,
        Name: __expectString,
        RevisionId: __expectString,
        SourceId: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssetType: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        Origin: __expectString,
        OriginDetails: _json,
        SourceId: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateEventActionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Action: _json,
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Event: _json,
        Id: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRevisionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Comment: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DataSetId: __expectString,
        Finalized: __expectBoolean,
        Id: __expectString,
        RevocationComment: __expectString,
        Revoked: __expectBoolean,
        RevokedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SourceId: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.dataexchange#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.dataexchange#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dataexchange#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.dataexchange#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.dataexchange#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.dataexchange#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ServiceLimitExceededException":
        case "com.amazonaws.dataexchange#ServiceLimitExceededException":
            throw await de_ServiceLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        LimitName: __expectString,
        LimitValue: __limitedParseDouble,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ExceptionCause: __expectString,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_DataUpdateRequestDetails = (input, context) => {
    return take(input, {
        DataUpdatedAt: (_) => _.toISOString().split(".")[0] + "Z",
    });
};
const se_DeprecationRequestDetails = (input, context) => {
    return take(input, {
        DeprecationAt: (_) => _.toISOString().split(".")[0] + "Z",
    });
};
const se_NotificationDetails = (input, context) => {
    return take(input, {
        DataUpdate: (_) => se_DataUpdateRequestDetails(_, context),
        Deprecation: (_) => se_DeprecationRequestDetails(_, context),
        SchemaChange: (_) => se_SchemaChangeRequestDetails(_, context),
    });
};
const se_SchemaChangeRequestDetails = (input, context) => {
    return take(input, {
        Changes: _json,
        SchemaChangeAt: (_) => _.toISOString().split(".")[0] + "Z",
    });
};
const de_ApiGatewayApiAsset = (output, context) => {
    return take(output, {
        ApiDescription: __expectString,
        ApiEndpoint: __expectString,
        ApiId: __expectString,
        ApiKey: __expectString,
        ApiName: __expectString,
        ApiSpecificationDownloadUrl: __expectString,
        ApiSpecificationDownloadUrlExpiresAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ProtocolType: __expectString,
        Stage: __expectString,
    });
};
const de_AssetDetails = (output, context) => {
    return take(output, {
        ApiGatewayApiAsset: (_) => de_ApiGatewayApiAsset(_, context),
        LakeFormationDataPermissionAsset: _json,
        RedshiftDataShareAsset: _json,
        S3DataAccessAsset: _json,
        S3SnapshotAsset: (_) => de_S3SnapshotAsset(_, context),
    });
};
const de_AssetEntry = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AssetDetails: (_) => de_AssetDetails(_, context),
        AssetType: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DataSetId: __expectString,
        Id: __expectString,
        Name: __expectString,
        RevisionId: __expectString,
        SourceId: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_DataSetEntry = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AssetType: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        Origin: __expectString,
        OriginDetails: _json,
        SourceId: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_EventActionEntry = (output, context) => {
    return take(output, {
        Action: _json,
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Event: _json,
        Id: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ExportAssetToSignedUrlResponseDetails = (output, context) => {
    return take(output, {
        AssetId: __expectString,
        DataSetId: __expectString,
        RevisionId: __expectString,
        SignedUrl: __expectString,
        SignedUrlExpiresAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ImportAssetFromApiGatewayApiResponseDetails = (output, context) => {
    return take(output, {
        ApiDescription: __expectString,
        ApiId: __expectString,
        ApiKey: __expectString,
        ApiName: __expectString,
        ApiSpecificationMd5Hash: __expectString,
        ApiSpecificationUploadUrl: __expectString,
        ApiSpecificationUploadUrlExpiresAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DataSetId: __expectString,
        ProtocolType: __expectString,
        RevisionId: __expectString,
        Stage: __expectString,
    });
};
const de_ImportAssetFromSignedUrlResponseDetails = (output, context) => {
    return take(output, {
        AssetName: __expectString,
        DataSetId: __expectString,
        Md5Hash: __expectString,
        RevisionId: __expectString,
        SignedUrl: __expectString,
        SignedUrlExpiresAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_JobEntry = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Details: (_) => de_ResponseDetails(_, context),
        Errors: (_) => de_ListOfJobError(_, context),
        Id: __expectString,
        State: __expectString,
        Type: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_JobError = (output, context) => {
    return take(output, {
        Code: __expectString,
        Details: _json,
        LimitName: __expectString,
        LimitValue: __limitedParseDouble,
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
};
const de_ListOfAssetEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssetEntry(entry, context);
    });
    return retVal;
};
const de_ListOfDataSetEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSetEntry(entry, context);
    });
    return retVal;
};
const de_ListOfEventActionEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventActionEntry(entry, context);
    });
    return retVal;
};
const de_ListOfJobEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobEntry(entry, context);
    });
    return retVal;
};
const de_ListOfJobError = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobError(entry, context);
    });
    return retVal;
};
const de_ListOfRevisionEntry = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RevisionEntry(entry, context);
    });
    return retVal;
};
const de_ResponseDetails = (output, context) => {
    return take(output, {
        CreateS3DataAccessFromS3Bucket: _json,
        ExportAssetToSignedUrl: (_) => de_ExportAssetToSignedUrlResponseDetails(_, context),
        ExportAssetsToS3: _json,
        ExportRevisionsToS3: _json,
        ImportAssetFromApiGatewayApi: (_) => de_ImportAssetFromApiGatewayApiResponseDetails(_, context),
        ImportAssetFromSignedUrl: (_) => de_ImportAssetFromSignedUrlResponseDetails(_, context),
        ImportAssetsFromLakeFormationTagPolicy: _json,
        ImportAssetsFromRedshiftDataShares: _json,
        ImportAssetsFromS3: _json,
    });
};
const de_RevisionEntry = (output, context) => {
    return take(output, {
        Arn: __expectString,
        Comment: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        DataSetId: __expectString,
        Finalized: __expectBoolean,
        Id: __expectString,
        RevocationComment: __expectString,
        Revoked: __expectBoolean,
        RevokedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        SourceId: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_S3SnapshotAsset = (output, context) => {
    return take(output, {
        Size: __limitedParseDouble,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _AI = "AssetId";
const _DSI = "DataSetId";
const _ESI = "EventSourceId";
const _M = "Method";
const _MR = "MaxResults";
const _NT = "NextToken";
const _O = "Origin";
const _P = "Path";
const _RI = "RevisionId";
const _TK = "TagKeys";
const _dSI = "dataSetId";
const _eSI = "eventSourceId";
const _mR = "maxResults";
const _nT = "nextToken";
const _o = "origin";
const _rI = "revisionId";
const _tK = "tagKeys";
const _xadai = "x-amzn-dataexchange-asset-id";
const _xaddsi = "x-amzn-dataexchange-data-set-id";
const _xadhm = "x-amzn-dataexchange-http-method";
const _xadp = "x-amzn-dataexchange-path";
const _xadri = "x-amzn-dataexchange-revision-id";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
