import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { DirectoryInUseException, DirectoryServiceAuthenticationFailedException, DirectoryUnavailableException, EmailAddressInUseException, EntityAlreadyRegisteredException, EntityNotFoundException, EntityStateException, InvalidConfigurationException, InvalidCustomSesConfigurationException, InvalidParameterException, InvalidPasswordException, LimitExceededException, MailDomainInUseException, MailDomainNotFoundException, MailDomainStateException, NameAvailabilityException, OrganizationNotFoundException, OrganizationStateException, ReservedNameException, ResourceNotFoundException, TooManyTagsException, UnsupportedOperationException, } from "../models/models_0";
import { WorkMailServiceException as __BaseException } from "../models/WorkMailServiceException";
export const se_AssociateDelegateToResourceCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateDelegateToResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateMemberToGroupCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateMemberToGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssumeImpersonationRoleCommand = async (input, context) => {
    const headers = sharedHeaders("AssumeImpersonationRole");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelMailboxExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CancelMailboxExportJob");
    let body;
    body = JSON.stringify(se_CancelMailboxExportJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAliasCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAvailabilityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAvailabilityConfiguration");
    let body;
    body = JSON.stringify(se_CreateAvailabilityConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateImpersonationRoleCommand = async (input, context) => {
    const headers = sharedHeaders("CreateImpersonationRole");
    let body;
    body = JSON.stringify(se_CreateImpersonationRoleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateMobileDeviceAccessRuleCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMobileDeviceAccessRule");
    let body;
    body = JSON.stringify(se_CreateMobileDeviceAccessRuleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateOrganization");
    let body;
    body = JSON.stringify(se_CreateOrganizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateResourceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateUserCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUser");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAccessControlRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAccessControlRule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAliasCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAlias");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAvailabilityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAvailabilityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEmailMonitoringConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEmailMonitoringConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteImpersonationRoleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteImpersonationRole");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMailboxPermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMailboxPermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMobileDeviceAccessOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMobileDeviceAccessOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMobileDeviceAccessRuleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMobileDeviceAccessRule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOrganization");
    let body;
    body = JSON.stringify(se_DeleteOrganizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRetentionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRetentionPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteUserCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUser");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterFromWorkMailCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterFromWorkMail");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeregisterMailDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterMailDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEmailMonitoringConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEmailMonitoringConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEntityCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEntity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInboundDmarcSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInboundDmarcSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeMailboxExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMailboxExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOrganization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeResourceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeUserCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUser");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateDelegateFromResourceCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateDelegateFromResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateMemberFromGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateMemberFromGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAccessControlEffectCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccessControlEffect");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDefaultRetentionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetDefaultRetentionPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetImpersonationRoleCommand = async (input, context) => {
    const headers = sharedHeaders("GetImpersonationRole");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetImpersonationRoleEffectCommand = async (input, context) => {
    const headers = sharedHeaders("GetImpersonationRoleEffect");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMailboxDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetMailboxDetails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMailDomainCommand = async (input, context) => {
    const headers = sharedHeaders("GetMailDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMobileDeviceAccessEffectCommand = async (input, context) => {
    const headers = sharedHeaders("GetMobileDeviceAccessEffect");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMobileDeviceAccessOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("GetMobileDeviceAccessOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAccessControlRulesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAccessControlRules");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAliasesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAliases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAvailabilityConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAvailabilityConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListGroupMembersCommand = async (input, context) => {
    const headers = sharedHeaders("ListGroupMembers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListGroupsForEntityCommand = async (input, context) => {
    const headers = sharedHeaders("ListGroupsForEntity");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListImpersonationRolesCommand = async (input, context) => {
    const headers = sharedHeaders("ListImpersonationRoles");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMailboxExportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMailboxExportJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMailboxPermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMailboxPermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMailDomainsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMailDomains");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMobileDeviceAccessOverridesCommand = async (input, context) => {
    const headers = sharedHeaders("ListMobileDeviceAccessOverrides");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMobileDeviceAccessRulesCommand = async (input, context) => {
    const headers = sharedHeaders("ListMobileDeviceAccessRules");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListOrganizationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOrganizations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListResourceDelegatesCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceDelegates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListUsersCommand = async (input, context) => {
    const headers = sharedHeaders("ListUsers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutAccessControlRuleCommand = async (input, context) => {
    const headers = sharedHeaders("PutAccessControlRule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutEmailMonitoringConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutEmailMonitoringConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutInboundDmarcSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("PutInboundDmarcSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutMailboxPermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("PutMailboxPermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutMobileDeviceAccessOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("PutMobileDeviceAccessOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutRetentionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutRetentionPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterMailDomainCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterMailDomain");
    let body;
    body = JSON.stringify(se_RegisterMailDomainRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RegisterToWorkMailCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterToWorkMail");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResetPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("ResetPassword");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartMailboxExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartMailboxExportJob");
    let body;
    body = JSON.stringify(se_StartMailboxExportJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TestAvailabilityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("TestAvailabilityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAvailabilityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAvailabilityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDefaultMailDomainCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDefaultMailDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateImpersonationRoleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateImpersonationRole");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateMailboxQuotaCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMailboxQuota");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateMobileDeviceAccessRuleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMobileDeviceAccessRule");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdatePrimaryEmailAddressCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePrimaryEmailAddress");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateUserCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUser");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateDelegateToResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateMemberToGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssumeImpersonationRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelMailboxExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAvailabilityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateImpersonationRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateMobileDeviceAccessRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAccessControlRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAliasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAvailabilityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteEmailMonitoringConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteImpersonationRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteMailboxPermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteMobileDeviceAccessOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteMobileDeviceAccessRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRetentionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeregisterFromWorkMailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeregisterMailDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEmailMonitoringConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEntityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeInboundDmarcSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeMailboxExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMailboxExportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOrganizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeUserResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateDelegateFromResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateMemberFromGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAccessControlEffectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDefaultRetentionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetImpersonationRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetImpersonationRoleResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetImpersonationRoleEffectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMailboxDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMailboxDetailsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMailDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMobileDeviceAccessEffectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMobileDeviceAccessOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMobileDeviceAccessOverrideResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAccessControlRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAccessControlRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAliasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAvailabilityConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAvailabilityConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListGroupMembersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListGroupMembersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListGroupsForEntityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListImpersonationRolesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListImpersonationRolesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMailboxExportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMailboxExportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMailboxPermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMailDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMobileDeviceAccessOverridesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMobileDeviceAccessOverridesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMobileDeviceAccessRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMobileDeviceAccessRulesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListOrganizationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListResourceDelegatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListResourcesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListUsersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutAccessControlRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutEmailMonitoringConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutInboundDmarcSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutMailboxPermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutMobileDeviceAccessOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutRetentionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterMailDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RegisterToWorkMailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResetPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartMailboxExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TestAvailabilityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAvailabilityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDefaultMailDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateImpersonationRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateMailboxQuotaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateMobileDeviceAccessRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdatePrimaryEmailAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "EntityNotFoundException":
        case "com.amazonaws.workmail#EntityNotFoundException":
            throw await de_EntityNotFoundExceptionRes(parsedOutput, context);
        case "EntityStateException":
        case "com.amazonaws.workmail#EntityStateException":
            throw await de_EntityStateExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.workmail#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "OrganizationNotFoundException":
        case "com.amazonaws.workmail#OrganizationNotFoundException":
            throw await de_OrganizationNotFoundExceptionRes(parsedOutput, context);
        case "OrganizationStateException":
        case "com.amazonaws.workmail#OrganizationStateException":
            throw await de_OrganizationStateExceptionRes(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.workmail#UnsupportedOperationException":
            throw await de_UnsupportedOperationExceptionRes(parsedOutput, context);
        case "DirectoryServiceAuthenticationFailedException":
        case "com.amazonaws.workmail#DirectoryServiceAuthenticationFailedException":
            throw await de_DirectoryServiceAuthenticationFailedExceptionRes(parsedOutput, context);
        case "DirectoryUnavailableException":
        case "com.amazonaws.workmail#DirectoryUnavailableException":
            throw await de_DirectoryUnavailableExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.workmail#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "EmailAddressInUseException":
        case "com.amazonaws.workmail#EmailAddressInUseException":
            throw await de_EmailAddressInUseExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.workmail#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "MailDomainNotFoundException":
        case "com.amazonaws.workmail#MailDomainNotFoundException":
            throw await de_MailDomainNotFoundExceptionRes(parsedOutput, context);
        case "MailDomainStateException":
        case "com.amazonaws.workmail#MailDomainStateException":
            throw await de_MailDomainStateExceptionRes(parsedOutput, context);
        case "NameAvailabilityException":
        case "com.amazonaws.workmail#NameAvailabilityException":
            throw await de_NameAvailabilityExceptionRes(parsedOutput, context);
        case "ReservedNameException":
        case "com.amazonaws.workmail#ReservedNameException":
            throw await de_ReservedNameExceptionRes(parsedOutput, context);
        case "DirectoryInUseException":
        case "com.amazonaws.workmail#DirectoryInUseException":
            throw await de_DirectoryInUseExceptionRes(parsedOutput, context);
        case "InvalidPasswordException":
        case "com.amazonaws.workmail#InvalidPasswordException":
            throw await de_InvalidPasswordExceptionRes(parsedOutput, context);
        case "InvalidCustomSesConfigurationException":
        case "com.amazonaws.workmail#InvalidCustomSesConfigurationException":
            throw await de_InvalidCustomSesConfigurationExceptionRes(parsedOutput, context);
        case "MailDomainInUseException":
        case "com.amazonaws.workmail#MailDomainInUseException":
            throw await de_MailDomainInUseExceptionRes(parsedOutput, context);
        case "EntityAlreadyRegisteredException":
        case "com.amazonaws.workmail#EntityAlreadyRegisteredException":
            throw await de_EntityAlreadyRegisteredExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.workmail#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "InvalidConfigurationException":
        case "com.amazonaws.workmail#InvalidConfigurationException":
            throw await de_InvalidConfigurationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DirectoryInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DirectoryInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DirectoryServiceAuthenticationFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DirectoryServiceAuthenticationFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DirectoryUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DirectoryUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EmailAddressInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EmailAddressInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EntityAlreadyRegisteredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EntityAlreadyRegisteredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EntityNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EntityNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EntityStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EntityStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidCustomSesConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidCustomSesConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidPasswordExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPasswordException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MailDomainInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MailDomainInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MailDomainNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MailDomainNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MailDomainStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MailDomainStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NameAvailabilityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NameAvailabilityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OrganizationNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OrganizationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OrganizationStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OrganizationStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ReservedNameExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ReservedNameException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CancelMailboxExportJobRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        JobId: [],
        OrganizationId: [],
    });
};
const se_CreateAvailabilityConfigurationRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DomainName: [],
        EwsProvider: _json,
        LambdaProvider: _json,
        OrganizationId: [],
    });
};
const se_CreateImpersonationRoleRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Name: [],
        OrganizationId: [],
        Rules: _json,
        Type: [],
    });
};
const se_CreateMobileDeviceAccessRuleRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        DeviceModels: _json,
        DeviceOperatingSystems: _json,
        DeviceTypes: _json,
        DeviceUserAgents: _json,
        Effect: [],
        Name: [],
        NotDeviceModels: _json,
        NotDeviceOperatingSystems: _json,
        NotDeviceTypes: _json,
        NotDeviceUserAgents: _json,
        OrganizationId: [],
    });
};
const se_CreateOrganizationRequest = (input, context) => {
    return take(input, {
        Alias: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DirectoryId: [],
        Domains: _json,
        EnableInteroperability: [],
        KmsKeyArn: [],
    });
};
const se_DeleteOrganizationRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DeleteDirectory: [],
        ForceDelete: [],
        OrganizationId: [],
    });
};
const se_RegisterMailDomainRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DomainName: [],
        OrganizationId: [],
    });
};
const se_StartMailboxExportJobRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        EntityId: [],
        KmsKeyArn: [],
        OrganizationId: [],
        RoleArn: [],
        S3BucketName: [],
        S3Prefix: [],
    });
};
const de_AccessControlRule = (output, context) => {
    return take(output, {
        Actions: _json,
        DateCreated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DateModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Effect: __expectString,
        ImpersonationRoleIds: _json,
        IpRanges: _json,
        Name: __expectString,
        NotActions: _json,
        NotImpersonationRoleIds: _json,
        NotIpRanges: _json,
        NotUserIds: _json,
        UserIds: _json,
    });
};
const de_AccessControlRulesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessControlRule(entry, context);
    });
    return retVal;
};
const de_AvailabilityConfiguration = (output, context) => {
    return take(output, {
        DateCreated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DateModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainName: __expectString,
        EwsProvider: _json,
        LambdaProvider: _json,
        ProviderType: __expectString,
    });
};
const de_AvailabilityConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AvailabilityConfiguration(entry, context);
    });
    return retVal;
};
const de_DescribeGroupResponse = (output, context) => {
    return take(output, {
        DisabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Email: __expectString,
        EnabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        GroupId: __expectString,
        HiddenFromGlobalAddressList: __expectBoolean,
        Name: __expectString,
        State: __expectString,
    });
};
const de_DescribeMailboxExportJobResponse = (output, context) => {
    return take(output, {
        Description: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EntityId: __expectString,
        ErrorInfo: __expectString,
        EstimatedProgress: __expectInt32,
        KmsKeyArn: __expectString,
        RoleArn: __expectString,
        S3BucketName: __expectString,
        S3Path: __expectString,
        S3Prefix: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
    });
};
const de_DescribeOrganizationResponse = (output, context) => {
    return take(output, {
        ARN: __expectString,
        Alias: __expectString,
        CompletedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultMailDomain: __expectString,
        DirectoryId: __expectString,
        DirectoryType: __expectString,
        ErrorMessage: __expectString,
        InteroperabilityEnabled: __expectBoolean,
        MigrationAdmin: __expectString,
        OrganizationId: __expectString,
        State: __expectString,
    });
};
const de_DescribeResourceResponse = (output, context) => {
    return take(output, {
        BookingOptions: _json,
        Description: __expectString,
        DisabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Email: __expectString,
        EnabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HiddenFromGlobalAddressList: __expectBoolean,
        Name: __expectString,
        ResourceId: __expectString,
        State: __expectString,
        Type: __expectString,
    });
};
const de_DescribeUserResponse = (output, context) => {
    return take(output, {
        City: __expectString,
        Company: __expectString,
        Country: __expectString,
        Department: __expectString,
        DisabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        Email: __expectString,
        EnabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FirstName: __expectString,
        HiddenFromGlobalAddressList: __expectBoolean,
        Initials: __expectString,
        JobTitle: __expectString,
        LastName: __expectString,
        MailboxDeprovisionedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MailboxProvisionedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Office: __expectString,
        State: __expectString,
        Street: __expectString,
        Telephone: __expectString,
        UserId: __expectString,
        UserRole: __expectString,
        ZipCode: __expectString,
    });
};
const de_GetImpersonationRoleResponse = (output, context) => {
    return take(output, {
        DateCreated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DateModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        ImpersonationRoleId: __expectString,
        Name: __expectString,
        Rules: _json,
        Type: __expectString,
    });
};
const de_GetMailboxDetailsResponse = (output, context) => {
    return take(output, {
        MailboxQuota: __expectInt32,
        MailboxSize: __limitedParseDouble,
    });
};
const de_GetMobileDeviceAccessOverrideResponse = (output, context) => {
    return take(output, {
        DateCreated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DateModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DeviceId: __expectString,
        Effect: __expectString,
        UserId: __expectString,
    });
};
const de_Group = (output, context) => {
    return take(output, {
        DisabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Email: __expectString,
        EnabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
        Name: __expectString,
        State: __expectString,
    });
};
const de_Groups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Group(entry, context);
    });
    return retVal;
};
const de_ImpersonationRole = (output, context) => {
    return take(output, {
        DateCreated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DateModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImpersonationRoleId: __expectString,
        Name: __expectString,
        Type: __expectString,
    });
};
const de_ImpersonationRoleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImpersonationRole(entry, context);
    });
    return retVal;
};
const de_Jobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MailboxExportJob(entry, context);
    });
    return retVal;
};
const de_ListAccessControlRulesResponse = (output, context) => {
    return take(output, {
        Rules: (_) => de_AccessControlRulesList(_, context),
    });
};
const de_ListAvailabilityConfigurationsResponse = (output, context) => {
    return take(output, {
        AvailabilityConfigurations: (_) => de_AvailabilityConfigurationList(_, context),
        NextToken: __expectString,
    });
};
const de_ListGroupMembersResponse = (output, context) => {
    return take(output, {
        Members: (_) => de_Members(_, context),
        NextToken: __expectString,
    });
};
const de_ListGroupsResponse = (output, context) => {
    return take(output, {
        Groups: (_) => de_Groups(_, context),
        NextToken: __expectString,
    });
};
const de_ListImpersonationRolesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Roles: (_) => de_ImpersonationRoleList(_, context),
    });
};
const de_ListMailboxExportJobsResponse = (output, context) => {
    return take(output, {
        Jobs: (_) => de_Jobs(_, context),
        NextToken: __expectString,
    });
};
const de_ListMobileDeviceAccessOverridesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Overrides: (_) => de_MobileDeviceAccessOverridesList(_, context),
    });
};
const de_ListMobileDeviceAccessRulesResponse = (output, context) => {
    return take(output, {
        Rules: (_) => de_MobileDeviceAccessRulesList(_, context),
    });
};
const de_ListResourcesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Resources: (_) => de_Resources(_, context),
    });
};
const de_ListUsersResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Users: (_) => de_Users(_, context),
    });
};
const de_MailboxExportJob = (output, context) => {
    return take(output, {
        Description: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EntityId: __expectString,
        EstimatedProgress: __expectInt32,
        JobId: __expectString,
        S3BucketName: __expectString,
        S3Path: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
    });
};
const de_Member = (output, context) => {
    return take(output, {
        DisabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
        Name: __expectString,
        State: __expectString,
        Type: __expectString,
    });
};
const de_Members = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Member(entry, context);
    });
    return retVal;
};
const de_MobileDeviceAccessOverride = (output, context) => {
    return take(output, {
        DateCreated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DateModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DeviceId: __expectString,
        Effect: __expectString,
        UserId: __expectString,
    });
};
const de_MobileDeviceAccessOverridesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MobileDeviceAccessOverride(entry, context);
    });
    return retVal;
};
const de_MobileDeviceAccessRule = (output, context) => {
    return take(output, {
        DateCreated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DateModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DeviceModels: _json,
        DeviceOperatingSystems: _json,
        DeviceTypes: _json,
        DeviceUserAgents: _json,
        Effect: __expectString,
        MobileDeviceAccessRuleId: __expectString,
        Name: __expectString,
        NotDeviceModels: _json,
        NotDeviceOperatingSystems: _json,
        NotDeviceTypes: _json,
        NotDeviceUserAgents: _json,
    });
};
const de_MobileDeviceAccessRulesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MobileDeviceAccessRule(entry, context);
    });
    return retVal;
};
const de_Resource = (output, context) => {
    return take(output, {
        Description: __expectString,
        DisabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Email: __expectString,
        EnabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
        Name: __expectString,
        State: __expectString,
        Type: __expectString,
    });
};
const de_Resources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Resource(entry, context);
    });
    return retVal;
};
const de_User = (output, context) => {
    return take(output, {
        DisabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        Email: __expectString,
        EnabledDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
        Name: __expectString,
        State: __expectString,
        UserRole: __expectString,
    });
};
const de_Users = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_User(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `WorkMailService.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
