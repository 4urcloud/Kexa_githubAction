import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, DataEncryptionException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { SSMContactsServiceException as __BaseException } from "../models/SSMContactsServiceException";
export const se_AcceptPageCommand = async (input, context) => {
    const headers = sharedHeaders("AcceptPage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ActivateContactChannelCommand = async (input, context) => {
    const headers = sharedHeaders("ActivateContactChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateContactCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContact");
    let body;
    body = JSON.stringify(se_CreateContactRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateContactChannelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContactChannel");
    let body;
    body = JSON.stringify(se_CreateContactChannelRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRotationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRotation");
    let body;
    body = JSON.stringify(se_CreateRotationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRotationOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRotationOverride");
    let body;
    body = JSON.stringify(se_CreateRotationOverrideRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeactivateContactChannelCommand = async (input, context) => {
    const headers = sharedHeaders("DeactivateContactChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteContactCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContact");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteContactChannelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContactChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRotationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRotation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRotationOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRotationOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEngagementCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEngagement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePageCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContactCommand = async (input, context) => {
    const headers = sharedHeaders("GetContact");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContactChannelCommand = async (input, context) => {
    const headers = sharedHeaders("GetContactChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContactPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetContactPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRotationCommand = async (input, context) => {
    const headers = sharedHeaders("GetRotation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRotationOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("GetRotationOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListContactChannelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListContactChannels");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListContactsCommand = async (input, context) => {
    const headers = sharedHeaders("ListContacts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEngagementsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEngagements");
    let body;
    body = JSON.stringify(se_ListEngagementsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPageReceiptsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPageReceipts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPageResolutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPageResolutions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPagesByContactCommand = async (input, context) => {
    const headers = sharedHeaders("ListPagesByContact");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPagesByEngagementCommand = async (input, context) => {
    const headers = sharedHeaders("ListPagesByEngagement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPreviewRotationShiftsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPreviewRotationShifts");
    let body;
    body = JSON.stringify(se_ListPreviewRotationShiftsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRotationOverridesCommand = async (input, context) => {
    const headers = sharedHeaders("ListRotationOverrides");
    let body;
    body = JSON.stringify(se_ListRotationOverridesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRotationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRotations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRotationShiftsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRotationShifts");
    let body;
    body = JSON.stringify(se_ListRotationShiftsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutContactPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutContactPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendActivationCodeCommand = async (input, context) => {
    const headers = sharedHeaders("SendActivationCode");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartEngagementCommand = async (input, context) => {
    const headers = sharedHeaders("StartEngagement");
    let body;
    body = JSON.stringify(se_StartEngagementRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopEngagementCommand = async (input, context) => {
    const headers = sharedHeaders("StopEngagement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateContactCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContact");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateContactChannelCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContactChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRotationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRotation");
    let body;
    body = JSON.stringify(se_UpdateRotationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AcceptPageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ActivateContactChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateContactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateContactChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRotationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRotationOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeactivateContactChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteContactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteContactChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRotationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRotationOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEngagementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEngagementResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribePageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContactChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContactPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRotationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRotationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRotationOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRotationOverrideResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListContactChannelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListContactsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEngagementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEngagementsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPageReceiptsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPageReceiptsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPageResolutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPagesByContactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPagesByContactResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPagesByEngagementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPagesByEngagementResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPreviewRotationShiftsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPreviewRotationShiftsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRotationOverridesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRotationOverridesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRotationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRotationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRotationShiftsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRotationShiftsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutContactPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SendActivationCodeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartEngagementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopEngagementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateContactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateContactChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRotationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssmcontacts#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssmcontacts#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.ssmcontacts#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.ssmcontacts#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ssmcontacts#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.ssmcontacts#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "DataEncryptionException":
        case "com.amazonaws.ssmcontacts#DataEncryptionException":
            throw await de_DataEncryptionExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.ssmcontacts#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DataEncryptionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DataEncryptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateContactChannelRequest = (input, context) => {
    return take(input, {
        ContactId: [],
        DeferActivation: [],
        DeliveryAddress: _json,
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Name: [],
        Type: [],
    });
};
const se_CreateContactRequest = (input, context) => {
    return take(input, {
        Alias: [],
        DisplayName: [],
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Plan: _json,
        Tags: _json,
        Type: [],
    });
};
const se_CreateRotationOverrideRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        IdempotencyToken: [],
        NewContactIds: _json,
        RotationId: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_CreateRotationRequest = (input, context) => {
    return take(input, {
        ContactIds: _json,
        IdempotencyToken: [],
        Name: [],
        Recurrence: _json,
        StartTime: (_) => Math.round(_.getTime() / 1000),
        Tags: _json,
        TimeZoneId: [],
    });
};
const se_ListEngagementsRequest = (input, context) => {
    return take(input, {
        IncidentId: [],
        MaxResults: [],
        NextToken: [],
        TimeRangeValue: (_) => se_TimeRange(_, context),
    });
};
const se_ListPreviewRotationShiftsRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        Members: _json,
        NextToken: [],
        Overrides: (_) => se_OverrideList(_, context),
        Recurrence: _json,
        RotationStartTime: (_) => Math.round(_.getTime() / 1000),
        StartTime: (_) => Math.round(_.getTime() / 1000),
        TimeZoneId: [],
    });
};
const se_ListRotationOverridesRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        RotationId: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ListRotationShiftsRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
        RotationId: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_OverrideList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PreviewOverride(entry, context);
    });
};
const se_PreviewOverride = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        NewMembers: _json,
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_StartEngagementRequest = (input, context) => {
    return take(input, {
        ContactId: [],
        Content: [],
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        IncidentId: [],
        PublicContent: [],
        PublicSubject: [],
        Sender: [],
        Subject: [],
    });
};
const se_TimeRange = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_UpdateRotationRequest = (input, context) => {
    return take(input, {
        ContactIds: _json,
        Recurrence: _json,
        RotationId: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
        TimeZoneId: [],
    });
};
const de_DescribeEngagementResult = (output, context) => {
    return take(output, {
        ContactArn: __expectString,
        Content: __expectString,
        EngagementArn: __expectString,
        IncidentId: __expectString,
        PublicContent: __expectString,
        PublicSubject: __expectString,
        Sender: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StopTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Subject: __expectString,
    });
};
const de_DescribePageResult = (output, context) => {
    return take(output, {
        ContactArn: __expectString,
        Content: __expectString,
        DeliveryTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EngagementArn: __expectString,
        IncidentId: __expectString,
        PageArn: __expectString,
        PublicContent: __expectString,
        PublicSubject: __expectString,
        ReadTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Sender: __expectString,
        SentTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Subject: __expectString,
    });
};
const de_Engagement = (output, context) => {
    return take(output, {
        ContactArn: __expectString,
        EngagementArn: __expectString,
        IncidentId: __expectString,
        Sender: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StopTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_EngagementsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Engagement(entry, context);
    });
    return retVal;
};
const de_GetRotationOverrideResult = (output, context) => {
    return take(output, {
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NewContactIds: _json,
        RotationArn: __expectString,
        RotationOverrideId: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_GetRotationResult = (output, context) => {
    return take(output, {
        ContactIds: _json,
        Name: __expectString,
        Recurrence: _json,
        RotationArn: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TimeZoneId: __expectString,
    });
};
const de_ListEngagementsResult = (output, context) => {
    return take(output, {
        Engagements: (_) => de_EngagementsList(_, context),
        NextToken: __expectString,
    });
};
const de_ListPageReceiptsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Receipts: (_) => de_ReceiptsList(_, context),
    });
};
const de_ListPagesByContactResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Pages: (_) => de_PagesList(_, context),
    });
};
const de_ListPagesByEngagementResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Pages: (_) => de_PagesList(_, context),
    });
};
const de_ListPreviewRotationShiftsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        RotationShifts: (_) => de_RotationShifts(_, context),
    });
};
const de_ListRotationOverridesResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        RotationOverrides: (_) => de_RotationOverrides(_, context),
    });
};
const de_ListRotationShiftsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        RotationShifts: (_) => de_RotationShifts(_, context),
    });
};
const de_ListRotationsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Rotations: (_) => de_Rotations(_, context),
    });
};
const de_Page = (output, context) => {
    return take(output, {
        ContactArn: __expectString,
        DeliveryTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EngagementArn: __expectString,
        IncidentId: __expectString,
        PageArn: __expectString,
        ReadTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Sender: __expectString,
        SentTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_PagesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Page(entry, context);
    });
    return retVal;
};
const de_Receipt = (output, context) => {
    return take(output, {
        ContactChannelArn: __expectString,
        ReceiptInfo: __expectString,
        ReceiptTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReceiptType: __expectString,
    });
};
const de_ReceiptsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Receipt(entry, context);
    });
    return retVal;
};
const de_Rotation = (output, context) => {
    return take(output, {
        ContactIds: _json,
        Name: __expectString,
        Recurrence: _json,
        RotationArn: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TimeZoneId: __expectString,
    });
};
const de_RotationOverride = (output, context) => {
    return take(output, {
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NewContactIds: _json,
        RotationOverrideId: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_RotationOverrides = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RotationOverride(entry, context);
    });
    return retVal;
};
const de_Rotations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Rotation(entry, context);
    });
    return retVal;
};
const de_RotationShift = (output, context) => {
    return take(output, {
        ContactIds: _json,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ShiftDetails: _json,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Type: __expectString,
    });
};
const de_RotationShifts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RotationShift(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `SSMContacts.${operation}`,
    };
}
