import { SSMContactsServiceException as __BaseException } from "./SSMContactsServiceException";
export const AcceptCodeValidation = {
    ENFORCE: "ENFORCE",
    IGNORE: "IGNORE",
};
export const AcceptType = {
    DELIVERED: "DELIVERED",
    READ: "READ",
};
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "CANNOT_PARSE",
    FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED",
    OTHER: "OTHER",
    UNKNOWN_OPERATION: "UNKNOWN_OPERATION",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Fields = opts.Fields;
    }
}
export const ActivationStatus = {
    ACTIVATED: "ACTIVATED",
    NOT_ACTIVATED: "NOT_ACTIVATED",
};
export const ChannelType = {
    EMAIL: "EMAIL",
    SMS: "SMS",
    VOICE: "VOICE",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
        this.DependentEntities = opts.DependentEntities;
    }
}
export const ContactType = {
    ESCALATION: "ESCALATION",
    ONCALL_SCHEDULE: "ONCALL_SCHEDULE",
    PERSONAL: "PERSONAL",
};
export class DataEncryptionException extends __BaseException {
    constructor(opts) {
        super({
            name: "DataEncryptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "DataEncryptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DataEncryptionException.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
    }
}
export const DayOfWeek = {
    FRI: "FRI",
    MON: "MON",
    SAT: "SAT",
    SUN: "SUN",
    THU: "THU",
    TUE: "TUE",
    WED: "WED",
};
export const ReceiptType = {
    DELIVERED: "DELIVERED",
    ERROR: "ERROR",
    READ: "READ",
    SENT: "SENT",
    STOP: "STOP",
};
export const ShiftType = {
    OVERRIDDEN: "OVERRIDDEN",
    REGULAR: "REGULAR",
};
