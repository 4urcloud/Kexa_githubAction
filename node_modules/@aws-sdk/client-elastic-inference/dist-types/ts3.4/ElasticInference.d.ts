import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  DescribeAcceleratorOfferingsCommandInput,
  DescribeAcceleratorOfferingsCommandOutput,
} from "./commands/DescribeAcceleratorOfferingsCommand";
import {
  DescribeAcceleratorsCommandInput,
  DescribeAcceleratorsCommandOutput,
} from "./commands/DescribeAcceleratorsCommand";
import {
  DescribeAcceleratorTypesCommandInput,
  DescribeAcceleratorTypesCommandOutput,
} from "./commands/DescribeAcceleratorTypesCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import { ElasticInferenceClient } from "./ElasticInferenceClient";
export interface ElasticInference {
  describeAcceleratorOfferings(
    args: DescribeAcceleratorOfferingsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeAcceleratorOfferingsCommandOutput>;
  describeAcceleratorOfferings(
    args: DescribeAcceleratorOfferingsCommandInput,
    cb: (err: any, data?: DescribeAcceleratorOfferingsCommandOutput) => void
  ): void;
  describeAcceleratorOfferings(
    args: DescribeAcceleratorOfferingsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeAcceleratorOfferingsCommandOutput) => void
  ): void;
  describeAccelerators(
    args: DescribeAcceleratorsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeAcceleratorsCommandOutput>;
  describeAccelerators(
    args: DescribeAcceleratorsCommandInput,
    cb: (err: any, data?: DescribeAcceleratorsCommandOutput) => void
  ): void;
  describeAccelerators(
    args: DescribeAcceleratorsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeAcceleratorsCommandOutput) => void
  ): void;
  describeAcceleratorTypes(
    args: DescribeAcceleratorTypesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeAcceleratorTypesCommandOutput>;
  describeAcceleratorTypes(
    args: DescribeAcceleratorTypesCommandInput,
    cb: (err: any, data?: DescribeAcceleratorTypesCommandOutput) => void
  ): void;
  describeAcceleratorTypes(
    args: DescribeAcceleratorTypesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeAcceleratorTypesCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
}
export declare class ElasticInference
  extends ElasticInferenceClient
  implements ElasticInference {}
