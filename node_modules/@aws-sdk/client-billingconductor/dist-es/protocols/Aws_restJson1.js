import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, serializeFloat as __serializeFloat, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { BillingconductorServiceException as __BaseException } from "../models/BillingconductorServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceLimitExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_AssociateAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associate-accounts");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
        Arn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociatePricingRulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associate-pricing-rules");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
        PricingRuleArns: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_BatchAssociateResourcesToCustomLineItemCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/batch-associate-resources-to-custom-line-item");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriodRange: (_) => _json(_),
        ResourceArns: (_) => _json(_),
        TargetArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_BatchDisassociateResourcesFromCustomLineItemCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/batch-disassociate-resources-from-custom-line-item");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriodRange: (_) => _json(_),
        ResourceArns: (_) => _json(_),
        TargetArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateBillingGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/create-billing-group");
    let body;
    body = JSON.stringify(take(input, {
        AccountGrouping: (_) => _json(_),
        ComputationPreference: (_) => _json(_),
        Description: [],
        Name: [],
        PrimaryAccountId: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCustomLineItemCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/create-custom-line-item");
    let body;
    body = JSON.stringify(take(input, {
        AccountId: [],
        BillingGroupArn: [],
        BillingPeriodRange: (_) => _json(_),
        ChargeDetails: (_) => se_CustomLineItemChargeDetails(_, context),
        Description: [],
        Name: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePricingPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/create-pricing-plan");
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Name: [],
        PricingRuleArns: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePricingRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_CT],
    });
    b.bp("/create-pricing-rule");
    let body;
    body = JSON.stringify(take(input, {
        BillingEntity: [],
        Description: [],
        ModifierPercentage: (_) => __serializeFloat(_),
        Name: [],
        Operation: [],
        Scope: [],
        Service: [],
        Tags: (_) => _json(_),
        Tiering: (_) => _json(_),
        Type: [],
        UsageType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteBillingGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-billing-group");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteCustomLineItemCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-custom-line-item");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
        BillingPeriodRange: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeletePricingPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-pricing-plan");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeletePricingRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-pricing-rule");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateAccountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/disassociate-accounts");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
        Arn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociatePricingRulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/disassociate-pricing-rules");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
        PricingRuleArns: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_GetBillingGroupCostReportCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/get-billing-group-cost-report");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
        BillingPeriodRange: (_) => _json(_),
        GroupBy: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAccountAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-account-associations");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriod: [],
        Filters: (_) => _json(_),
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListBillingGroupCostReportsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-billing-group-cost-reports");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriod: [],
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListBillingGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-billing-groups");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriod: [],
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListCustomLineItemsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-custom-line-items");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriod: [],
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListCustomLineItemVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-custom-line-item-versions");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPricingPlansCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-pricing-plans");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriod: [],
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPricingPlansAssociatedWithPricingRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-pricing-plans-associated-with-pricing-rule");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriod: [],
        MaxResults: [],
        NextToken: [],
        PricingRuleArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPricingRulesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-pricing-rules");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriod: [],
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListPricingRulesAssociatedToPricingPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-pricing-rules-associated-to-pricing-plan");
    let body;
    body = JSON.stringify(take(input, {
        BillingPeriod: [],
        MaxResults: [],
        NextToken: [],
        PricingPlanArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListResourcesAssociatedToCustomLineItemCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-resources-associated-to-custom-line-item");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
        BillingPeriod: [],
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateBillingGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-billing-group");
    let body;
    body = JSON.stringify(take(input, {
        AccountGrouping: (_) => _json(_),
        Arn: [],
        ComputationPreference: (_) => _json(_),
        Description: [],
        Name: [],
        Status: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateCustomLineItemCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-custom-line-item");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
        BillingPeriodRange: (_) => _json(_),
        ChargeDetails: (_) => se_UpdateCustomLineItemChargeDetails(_, context),
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdatePricingPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-pricing-plan");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
        Description: [],
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePricingRuleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-pricing-rule");
    let body;
    body = JSON.stringify(take(input, {
        Arn: [],
        Description: [],
        ModifierPercentage: (_) => __serializeFloat(_),
        Name: [],
        Tiering: (_) => _json(_),
        Type: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AssociateAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociatePricingRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchAssociateResourcesToCustomLineItemCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FailedAssociatedResources: _json,
        SuccessfullyAssociatedResources: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchDisassociateResourcesFromCustomLineItemCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FailedDisassociatedResources: _json,
        SuccessfullyDisassociatedResources: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBillingGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCustomLineItemCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePricingPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePricingRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBillingGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteCustomLineItemCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeletePricingPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeletePricingRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateAccountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociatePricingRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBillingGroupCostReportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BillingGroupCostReportResults: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAccountAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LinkedAccounts: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBillingGroupCostReportsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BillingGroupCostReports: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBillingGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BillingGroups: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCustomLineItemsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CustomLineItems: (_) => de_CustomLineItemList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCustomLineItemVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CustomLineItemVersions: (_) => de_CustomLineItemVersionList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPricingPlansCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BillingPeriod: __expectString,
        NextToken: __expectString,
        PricingPlans: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPricingPlansAssociatedWithPricingRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BillingPeriod: __expectString,
        NextToken: __expectString,
        PricingPlanArns: _json,
        PricingRuleArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPricingRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BillingPeriod: __expectString,
        NextToken: __expectString,
        PricingRules: (_) => de_PricingRuleList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPricingRulesAssociatedToPricingPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BillingPeriod: __expectString,
        NextToken: __expectString,
        PricingPlanArn: __expectString,
        PricingRuleArns: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResourcesAssociatedToCustomLineItemCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssociatedResources: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateBillingGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountGrouping: _json,
        Arn: __expectString,
        Description: __expectString,
        LastModifiedTime: __expectLong,
        Name: __expectString,
        PricingPlanArn: __expectString,
        PrimaryAccountId: __expectString,
        Size: __expectLong,
        Status: __expectString,
        StatusReason: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateCustomLineItemCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssociationSize: __expectLong,
        BillingGroupArn: __expectString,
        ChargeDetails: (_) => de_ListCustomLineItemChargeDetails(_, context),
        Description: __expectString,
        LastModifiedTime: __expectLong,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdatePricingPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Description: __expectString,
        LastModifiedTime: __expectLong,
        Name: __expectString,
        Size: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdatePricingRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        AssociatedPricingPlanCount: __expectLong,
        BillingEntity: __expectString,
        Description: __expectString,
        LastModifiedTime: __expectLong,
        ModifierPercentage: __limitedParseDouble,
        Name: __expectString,
        Operation: __expectString,
        Scope: __expectString,
        Service: __expectString,
        Tiering: _json,
        Type: __expectString,
        UsageType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.billingconductor#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.billingconductor#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.billingconductor#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.billingconductor#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceLimitExceededException":
        case "com.amazonaws.billingconductor#ServiceLimitExceededException":
            throw await de_ServiceLimitExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.billingconductor#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.billingconductor#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        Reason: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        LimitCode: __expectString,
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Fields: _json,
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_CustomLineItemChargeDetails = (input, context) => {
    return take(input, {
        Flat: (_) => se_CustomLineItemFlatChargeDetails(_, context),
        LineItemFilters: _json,
        Percentage: (_) => se_CustomLineItemPercentageChargeDetails(_, context),
        Type: [],
    });
};
const se_CustomLineItemFlatChargeDetails = (input, context) => {
    return take(input, {
        ChargeValue: __serializeFloat,
    });
};
const se_CustomLineItemPercentageChargeDetails = (input, context) => {
    return take(input, {
        AssociatedValues: _json,
        PercentageValue: __serializeFloat,
    });
};
const se_UpdateCustomLineItemChargeDetails = (input, context) => {
    return take(input, {
        Flat: (_) => se_UpdateCustomLineItemFlatChargeDetails(_, context),
        LineItemFilters: _json,
        Percentage: (_) => se_UpdateCustomLineItemPercentageChargeDetails(_, context),
    });
};
const se_UpdateCustomLineItemFlatChargeDetails = (input, context) => {
    return take(input, {
        ChargeValue: __serializeFloat,
    });
};
const se_UpdateCustomLineItemPercentageChargeDetails = (input, context) => {
    return take(input, {
        PercentageValue: __serializeFloat,
    });
};
const de_CustomLineItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomLineItemListElement(entry, context);
    });
    return retVal;
};
const de_CustomLineItemListElement = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Arn: __expectString,
        AssociationSize: __expectLong,
        BillingGroupArn: __expectString,
        ChargeDetails: (_) => de_ListCustomLineItemChargeDetails(_, context),
        CreationTime: __expectLong,
        CurrencyCode: __expectString,
        Description: __expectString,
        LastModifiedTime: __expectLong,
        Name: __expectString,
        ProductCode: __expectString,
    });
};
const de_CustomLineItemVersionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomLineItemVersionListElement(entry, context);
    });
    return retVal;
};
const de_CustomLineItemVersionListElement = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Arn: __expectString,
        AssociationSize: __expectLong,
        BillingGroupArn: __expectString,
        ChargeDetails: (_) => de_ListCustomLineItemChargeDetails(_, context),
        CreationTime: __expectLong,
        CurrencyCode: __expectString,
        Description: __expectString,
        EndBillingPeriod: __expectString,
        LastModifiedTime: __expectLong,
        Name: __expectString,
        ProductCode: __expectString,
        StartBillingPeriod: __expectString,
        StartTime: __expectLong,
    });
};
const de_ListCustomLineItemChargeDetails = (output, context) => {
    return take(output, {
        Flat: (_) => de_ListCustomLineItemFlatChargeDetails(_, context),
        LineItemFilters: _json,
        Percentage: (_) => de_ListCustomLineItemPercentageChargeDetails(_, context),
        Type: __expectString,
    });
};
const de_ListCustomLineItemFlatChargeDetails = (output, context) => {
    return take(output, {
        ChargeValue: __limitedParseDouble,
    });
};
const de_ListCustomLineItemPercentageChargeDetails = (output, context) => {
    return take(output, {
        PercentageValue: __limitedParseDouble,
    });
};
const de_PricingRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PricingRuleListElement(entry, context);
    });
    return retVal;
};
const de_PricingRuleListElement = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AssociatedPricingPlanCount: __expectLong,
        BillingEntity: __expectString,
        CreationTime: __expectLong,
        Description: __expectString,
        LastModifiedTime: __expectLong,
        ModifierPercentage: __limitedParseDouble,
        Name: __expectString,
        Operation: __expectString,
        Scope: __expectString,
        Service: __expectString,
        Tiering: _json,
        Type: __expectString,
        UsageType: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _CT = "ClientToken";
const _RAS = "RetryAfterSeconds";
const _TK = "TagKeys";
const _ra = "retry-after";
const _tK = "tagKeys";
const _xact = "x-amzn-client-token";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
