import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { DirectConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DirectConnectClient";
import { DescribeRouterConfigurationRequest, DescribeRouterConfigurationResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link DescribeRouterConfigurationCommand}.
 */
export interface DescribeRouterConfigurationCommandInput extends DescribeRouterConfigurationRequest {
}
/**
 * @public
 *
 * The output of {@link DescribeRouterConfigurationCommand}.
 */
export interface DescribeRouterConfigurationCommandOutput extends DescribeRouterConfigurationResponse, __MetadataBearer {
}
declare const DescribeRouterConfigurationCommand_base: {
    new (input: DescribeRouterConfigurationCommandInput): import("@smithy/smithy-client").CommandImpl<DescribeRouterConfigurationCommandInput, DescribeRouterConfigurationCommandOutput, DirectConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * @public
 * <p>
 *       Details about the router.
 *     </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { DirectConnectClient, DescribeRouterConfigurationCommand } from "@aws-sdk/client-direct-connect"; // ES Modules import
 * // const { DirectConnectClient, DescribeRouterConfigurationCommand } = require("@aws-sdk/client-direct-connect"); // CommonJS import
 * const client = new DirectConnectClient(config);
 * const input = { // DescribeRouterConfigurationRequest
 *   virtualInterfaceId: "STRING_VALUE", // required
 *   routerTypeIdentifier: "STRING_VALUE",
 * };
 * const command = new DescribeRouterConfigurationCommand(input);
 * const response = await client.send(command);
 * // { // DescribeRouterConfigurationResponse
 * //   customerRouterConfig: "STRING_VALUE",
 * //   router: { // RouterType
 * //     vendor: "STRING_VALUE",
 * //     platform: "STRING_VALUE",
 * //     software: "STRING_VALUE",
 * //     xsltTemplateName: "STRING_VALUE",
 * //     xsltTemplateNameForMacSec: "STRING_VALUE",
 * //     routerTypeIdentifier: "STRING_VALUE",
 * //   },
 * //   virtualInterfaceId: "STRING_VALUE",
 * //   virtualInterfaceName: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param DescribeRouterConfigurationCommandInput - {@link DescribeRouterConfigurationCommandInput}
 * @returns {@link DescribeRouterConfigurationCommandOutput}
 * @see {@link DescribeRouterConfigurationCommandInput} for command's `input` shape.
 * @see {@link DescribeRouterConfigurationCommandOutput} for command's `response` shape.
 * @see {@link DirectConnectClientResolvedConfig | config} for DirectConnectClient's `config` shape.
 *
 * @throws {@link DirectConnectClientException} (client fault)
 *  <p>One or more parameters are not valid.</p>
 *
 * @throws {@link DirectConnectServerException} (server fault)
 *  <p>A server-side error occurred.</p>
 *
 * @throws {@link DirectConnectServiceException}
 * <p>Base exception class for all service exceptions from DirectConnect service.</p>
 *
 */
export declare class DescribeRouterConfigurationCommand extends DescribeRouterConfigurationCommand_base {
}
