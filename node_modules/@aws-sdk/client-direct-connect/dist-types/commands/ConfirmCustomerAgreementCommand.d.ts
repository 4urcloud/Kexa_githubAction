import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { DirectConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../DirectConnectClient";
import { ConfirmCustomerAgreementRequest, ConfirmCustomerAgreementResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link ConfirmCustomerAgreementCommand}.
 */
export interface ConfirmCustomerAgreementCommandInput extends ConfirmCustomerAgreementRequest {
}
/**
 * @public
 *
 * The output of {@link ConfirmCustomerAgreementCommand}.
 */
export interface ConfirmCustomerAgreementCommandOutput extends ConfirmCustomerAgreementResponse, __MetadataBearer {
}
declare const ConfirmCustomerAgreementCommand_base: {
    new (input: ConfirmCustomerAgreementCommandInput): import("@smithy/smithy-client").CommandImpl<ConfirmCustomerAgreementCommandInput, ConfirmCustomerAgreementCommandOutput, DirectConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (...[input]: [] | [ConfirmCustomerAgreementCommandInput]): import("@smithy/smithy-client").CommandImpl<ConfirmCustomerAgreementCommandInput, ConfirmCustomerAgreementCommandOutput, DirectConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>
 *       The confirmation of the terms of agreement when creating the connection/link aggregation group (LAG).
 *     </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { DirectConnectClient, ConfirmCustomerAgreementCommand } from "@aws-sdk/client-direct-connect"; // ES Modules import
 * // const { DirectConnectClient, ConfirmCustomerAgreementCommand } = require("@aws-sdk/client-direct-connect"); // CommonJS import
 * const client = new DirectConnectClient(config);
 * const input = { // ConfirmCustomerAgreementRequest
 *   agreementName: "STRING_VALUE",
 * };
 * const command = new ConfirmCustomerAgreementCommand(input);
 * const response = await client.send(command);
 * // { // ConfirmCustomerAgreementResponse
 * //   status: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param ConfirmCustomerAgreementCommandInput - {@link ConfirmCustomerAgreementCommandInput}
 * @returns {@link ConfirmCustomerAgreementCommandOutput}
 * @see {@link ConfirmCustomerAgreementCommandInput} for command's `input` shape.
 * @see {@link ConfirmCustomerAgreementCommandOutput} for command's `response` shape.
 * @see {@link DirectConnectClientResolvedConfig | config} for DirectConnectClient's `config` shape.
 *
 * @throws {@link DirectConnectClientException} (client fault)
 *  <p>One or more parameters are not valid.</p>
 *
 * @throws {@link DirectConnectServerException} (server fault)
 *  <p>A server-side error occurred.</p>
 *
 * @throws {@link DirectConnectServiceException}
 * <p>Base exception class for all service exceptions from DirectConnect service.</p>
 *
 * @public
 */
export declare class ConfirmCustomerAgreementCommand extends ConfirmCustomerAgreementCommand_base {
}
