import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DirectConnectServiceException as __BaseException } from "./DirectConnectServiceException";
export interface RouteFilterPrefix {
  cidr?: string;
}
export interface AcceptDirectConnectGatewayAssociationProposalRequest {
  directConnectGatewayId: string | undefined;
  proposalId: string | undefined;
  associatedGatewayOwnerAccount: string | undefined;
  overrideAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[];
}
export declare const GatewayType: {
  readonly TransitGateway: "transitGateway";
  readonly VirtualPrivateGateway: "virtualPrivateGateway";
};
export type GatewayType = (typeof GatewayType)[keyof typeof GatewayType];
export interface AssociatedGateway {
  id?: string;
  type?: GatewayType;
  ownerAccount?: string;
  region?: string;
}
export declare const DirectConnectGatewayAssociationState: {
  readonly associated: "associated";
  readonly associating: "associating";
  readonly disassociated: "disassociated";
  readonly disassociating: "disassociating";
  readonly updating: "updating";
};
export type DirectConnectGatewayAssociationState =
  (typeof DirectConnectGatewayAssociationState)[keyof typeof DirectConnectGatewayAssociationState];
export interface DirectConnectGatewayAssociation {
  directConnectGatewayId?: string;
  directConnectGatewayOwnerAccount?: string;
  associationState?: DirectConnectGatewayAssociationState;
  stateChangeError?: string;
  associatedGateway?: AssociatedGateway;
  associationId?: string;
  allowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[];
  virtualGatewayId?: string;
  virtualGatewayRegion?: string;
  virtualGatewayOwnerAccount?: string;
}
export interface AcceptDirectConnectGatewayAssociationProposalResult {
  directConnectGatewayAssociation?: DirectConnectGatewayAssociation;
}
export declare class DirectConnectClientException extends __BaseException {
  readonly name: "DirectConnectClientException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DirectConnectClientException, __BaseException>
  );
}
export declare class DirectConnectServerException extends __BaseException {
  readonly name: "DirectConnectServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<DirectConnectServerException, __BaseException>
  );
}
export declare const AddressFamily: {
  readonly IPv4: "ipv4";
  readonly IPv6: "ipv6";
};
export type AddressFamily = (typeof AddressFamily)[keyof typeof AddressFamily];
export interface CustomerAgreement {
  agreementName?: string;
  status?: string;
}
export interface AllocateConnectionOnInterconnectRequest {
  bandwidth: string | undefined;
  connectionName: string | undefined;
  ownerAccount: string | undefined;
  interconnectId: string | undefined;
  vlan: number | undefined;
}
export declare const ConnectionState: {
  readonly available: "available";
  readonly deleted: "deleted";
  readonly deleting: "deleting";
  readonly down: "down";
  readonly ordering: "ordering";
  readonly pending: "pending";
  readonly rejected: "rejected";
  readonly requested: "requested";
  readonly unknown: "unknown";
};
export type ConnectionState =
  (typeof ConnectionState)[keyof typeof ConnectionState];
export declare const HasLogicalRedundancy: {
  readonly No: "no";
  readonly Unknown: "unknown";
  readonly Yes: "yes";
};
export type HasLogicalRedundancy =
  (typeof HasLogicalRedundancy)[keyof typeof HasLogicalRedundancy];
export interface MacSecKey {
  secretARN?: string;
  ckn?: string;
  state?: string;
  startOn?: string;
}
export interface Tag {
  key: string | undefined;
  value?: string;
}
export interface Connection {
  ownerAccount?: string;
  connectionId?: string;
  connectionName?: string;
  connectionState?: ConnectionState;
  region?: string;
  location?: string;
  bandwidth?: string;
  vlan?: number;
  partnerName?: string;
  loaIssueTime?: Date;
  lagId?: string;
  awsDevice?: string;
  jumboFrameCapable?: boolean;
  awsDeviceV2?: string;
  awsLogicalDeviceId?: string;
  hasLogicalRedundancy?: HasLogicalRedundancy;
  tags?: Tag[];
  providerName?: string;
  macSecCapable?: boolean;
  portEncryptionStatus?: string;
  encryptionMode?: string;
  macSecKeys?: MacSecKey[];
}
export interface AllocateHostedConnectionRequest {
  connectionId: string | undefined;
  ownerAccount: string | undefined;
  bandwidth: string | undefined;
  connectionName: string | undefined;
  vlan: number | undefined;
  tags?: Tag[];
}
export declare class DuplicateTagKeysException extends __BaseException {
  readonly name: "DuplicateTagKeysException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DuplicateTagKeysException, __BaseException>
  );
}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface NewPrivateVirtualInterfaceAllocation {
  virtualInterfaceName: string | undefined;
  vlan: number | undefined;
  asn: number | undefined;
  mtu?: number;
  authKey?: string;
  amazonAddress?: string;
  addressFamily?: AddressFamily;
  customerAddress?: string;
  tags?: Tag[];
}
export interface AllocatePrivateVirtualInterfaceRequest {
  connectionId: string | undefined;
  ownerAccount: string | undefined;
  newPrivateVirtualInterfaceAllocation:
    | NewPrivateVirtualInterfaceAllocation
    | undefined;
}
export declare const BGPPeerState: {
  readonly Available: "available";
  readonly Deleted: "deleted";
  readonly Deleting: "deleting";
  readonly Pending: "pending";
  readonly Verifying: "verifying";
};
export type BGPPeerState = (typeof BGPPeerState)[keyof typeof BGPPeerState];
export declare const BGPStatus: {
  readonly Down: "down";
  readonly Unknown: "unknown";
  readonly Up: "up";
};
export type BGPStatus = (typeof BGPStatus)[keyof typeof BGPStatus];
export interface BGPPeer {
  bgpPeerId?: string;
  asn?: number;
  authKey?: string;
  addressFamily?: AddressFamily;
  amazonAddress?: string;
  customerAddress?: string;
  bgpPeerState?: BGPPeerState;
  bgpStatus?: BGPStatus;
  awsDeviceV2?: string;
  awsLogicalDeviceId?: string;
}
export declare const VirtualInterfaceState: {
  readonly available: "available";
  readonly confirming: "confirming";
  readonly deleted: "deleted";
  readonly deleting: "deleting";
  readonly down: "down";
  readonly pending: "pending";
  readonly rejected: "rejected";
  readonly unknown: "unknown";
  readonly verifying: "verifying";
};
export type VirtualInterfaceState =
  (typeof VirtualInterfaceState)[keyof typeof VirtualInterfaceState];
export interface VirtualInterface {
  ownerAccount?: string;
  virtualInterfaceId?: string;
  location?: string;
  connectionId?: string;
  virtualInterfaceType?: string;
  virtualInterfaceName?: string;
  vlan?: number;
  asn?: number;
  amazonSideAsn?: number;
  authKey?: string;
  amazonAddress?: string;
  customerAddress?: string;
  addressFamily?: AddressFamily;
  virtualInterfaceState?: VirtualInterfaceState;
  customerRouterConfig?: string;
  mtu?: number;
  jumboFrameCapable?: boolean;
  virtualGatewayId?: string;
  directConnectGatewayId?: string;
  routeFilterPrefixes?: RouteFilterPrefix[];
  bgpPeers?: BGPPeer[];
  region?: string;
  awsDeviceV2?: string;
  awsLogicalDeviceId?: string;
  tags?: Tag[];
  siteLinkEnabled?: boolean;
}
export interface NewPublicVirtualInterfaceAllocation {
  virtualInterfaceName: string | undefined;
  vlan: number | undefined;
  asn: number | undefined;
  authKey?: string;
  amazonAddress?: string;
  customerAddress?: string;
  addressFamily?: AddressFamily;
  routeFilterPrefixes?: RouteFilterPrefix[];
  tags?: Tag[];
}
export interface AllocatePublicVirtualInterfaceRequest {
  connectionId: string | undefined;
  ownerAccount: string | undefined;
  newPublicVirtualInterfaceAllocation:
    | NewPublicVirtualInterfaceAllocation
    | undefined;
}
export interface NewTransitVirtualInterfaceAllocation {
  virtualInterfaceName?: string;
  vlan?: number;
  asn?: number;
  mtu?: number;
  authKey?: string;
  amazonAddress?: string;
  customerAddress?: string;
  addressFamily?: AddressFamily;
  tags?: Tag[];
}
export interface AllocateTransitVirtualInterfaceRequest {
  connectionId: string | undefined;
  ownerAccount: string | undefined;
  newTransitVirtualInterfaceAllocation:
    | NewTransitVirtualInterfaceAllocation
    | undefined;
}
export interface AllocateTransitVirtualInterfaceResult {
  virtualInterface?: VirtualInterface;
}
export interface AssociateConnectionWithLagRequest {
  connectionId: string | undefined;
  lagId: string | undefined;
}
export interface AssociateHostedConnectionRequest {
  connectionId: string | undefined;
  parentConnectionId: string | undefined;
}
export interface AssociateMacSecKeyRequest {
  connectionId: string | undefined;
  secretARN?: string;
  ckn?: string;
  cak?: string;
}
export interface AssociateMacSecKeyResponse {
  connectionId?: string;
  macSecKeys?: MacSecKey[];
}
export interface AssociateVirtualInterfaceRequest {
  virtualInterfaceId: string | undefined;
  connectionId: string | undefined;
}
export interface ConfirmConnectionRequest {
  connectionId: string | undefined;
}
export interface ConfirmConnectionResponse {
  connectionState?: ConnectionState;
}
export interface ConfirmCustomerAgreementRequest {
  agreementName?: string;
}
export interface ConfirmCustomerAgreementResponse {
  status?: string;
}
export interface ConfirmPrivateVirtualInterfaceRequest {
  virtualInterfaceId: string | undefined;
  virtualGatewayId?: string;
  directConnectGatewayId?: string;
}
export interface ConfirmPrivateVirtualInterfaceResponse {
  virtualInterfaceState?: VirtualInterfaceState;
}
export interface ConfirmPublicVirtualInterfaceRequest {
  virtualInterfaceId: string | undefined;
}
export interface ConfirmPublicVirtualInterfaceResponse {
  virtualInterfaceState?: VirtualInterfaceState;
}
export interface ConfirmTransitVirtualInterfaceRequest {
  virtualInterfaceId: string | undefined;
  directConnectGatewayId: string | undefined;
}
export interface ConfirmTransitVirtualInterfaceResponse {
  virtualInterfaceState?: VirtualInterfaceState;
}
export interface Connections {
  connections?: Connection[];
}
export interface NewBGPPeer {
  asn?: number;
  authKey?: string;
  addressFamily?: AddressFamily;
  amazonAddress?: string;
  customerAddress?: string;
}
export interface CreateBGPPeerRequest {
  virtualInterfaceId?: string;
  newBGPPeer?: NewBGPPeer;
}
export interface CreateBGPPeerResponse {
  virtualInterface?: VirtualInterface;
}
export interface CreateConnectionRequest {
  location: string | undefined;
  bandwidth: string | undefined;
  connectionName: string | undefined;
  lagId?: string;
  tags?: Tag[];
  providerName?: string;
  requestMACSec?: boolean;
}
export interface CreateDirectConnectGatewayRequest {
  directConnectGatewayName: string | undefined;
  amazonSideAsn?: number;
}
export declare const DirectConnectGatewayState: {
  readonly available: "available";
  readonly deleted: "deleted";
  readonly deleting: "deleting";
  readonly pending: "pending";
};
export type DirectConnectGatewayState =
  (typeof DirectConnectGatewayState)[keyof typeof DirectConnectGatewayState];
export interface DirectConnectGateway {
  directConnectGatewayId?: string;
  directConnectGatewayName?: string;
  amazonSideAsn?: number;
  ownerAccount?: string;
  directConnectGatewayState?: DirectConnectGatewayState;
  stateChangeError?: string;
}
export interface CreateDirectConnectGatewayResult {
  directConnectGateway?: DirectConnectGateway;
}
export interface CreateDirectConnectGatewayAssociationRequest {
  directConnectGatewayId: string | undefined;
  gatewayId?: string;
  addAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[];
  virtualGatewayId?: string;
}
export interface CreateDirectConnectGatewayAssociationResult {
  directConnectGatewayAssociation?: DirectConnectGatewayAssociation;
}
export interface CreateDirectConnectGatewayAssociationProposalRequest {
  directConnectGatewayId: string | undefined;
  directConnectGatewayOwnerAccount: string | undefined;
  gatewayId: string | undefined;
  addAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[];
  removeAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[];
}
export declare const DirectConnectGatewayAssociationProposalState: {
  readonly accepted: "accepted";
  readonly deleted: "deleted";
  readonly requested: "requested";
};
export type DirectConnectGatewayAssociationProposalState =
  (typeof DirectConnectGatewayAssociationProposalState)[keyof typeof DirectConnectGatewayAssociationProposalState];
export interface DirectConnectGatewayAssociationProposal {
  proposalId?: string;
  directConnectGatewayId?: string;
  directConnectGatewayOwnerAccount?: string;
  proposalState?: DirectConnectGatewayAssociationProposalState;
  associatedGateway?: AssociatedGateway;
  existingAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[];
  requestedAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[];
}
export interface CreateDirectConnectGatewayAssociationProposalResult {
  directConnectGatewayAssociationProposal?: DirectConnectGatewayAssociationProposal;
}
export interface CreateInterconnectRequest {
  interconnectName: string | undefined;
  bandwidth: string | undefined;
  location: string | undefined;
  lagId?: string;
  tags?: Tag[];
  providerName?: string;
}
export declare const InterconnectState: {
  readonly available: "available";
  readonly deleted: "deleted";
  readonly deleting: "deleting";
  readonly down: "down";
  readonly pending: "pending";
  readonly requested: "requested";
  readonly unknown: "unknown";
};
export type InterconnectState =
  (typeof InterconnectState)[keyof typeof InterconnectState];
export interface Interconnect {
  interconnectId?: string;
  interconnectName?: string;
  interconnectState?: InterconnectState;
  region?: string;
  location?: string;
  bandwidth?: string;
  loaIssueTime?: Date;
  lagId?: string;
  awsDevice?: string;
  jumboFrameCapable?: boolean;
  awsDeviceV2?: string;
  awsLogicalDeviceId?: string;
  hasLogicalRedundancy?: HasLogicalRedundancy;
  tags?: Tag[];
  providerName?: string;
}
export interface CreateLagRequest {
  numberOfConnections: number | undefined;
  location: string | undefined;
  connectionsBandwidth: string | undefined;
  lagName: string | undefined;
  connectionId?: string;
  tags?: Tag[];
  childConnectionTags?: Tag[];
  providerName?: string;
  requestMACSec?: boolean;
}
export declare const LagState: {
  readonly available: "available";
  readonly deleted: "deleted";
  readonly deleting: "deleting";
  readonly down: "down";
  readonly pending: "pending";
  readonly requested: "requested";
  readonly unknown: "unknown";
};
export type LagState = (typeof LagState)[keyof typeof LagState];
export interface Lag {
  connectionsBandwidth?: string;
  numberOfConnections?: number;
  lagId?: string;
  ownerAccount?: string;
  lagName?: string;
  lagState?: LagState;
  location?: string;
  region?: string;
  minimumLinks?: number;
  awsDevice?: string;
  awsDeviceV2?: string;
  awsLogicalDeviceId?: string;
  connections?: Connection[];
  allowsHostedConnections?: boolean;
  jumboFrameCapable?: boolean;
  hasLogicalRedundancy?: HasLogicalRedundancy;
  tags?: Tag[];
  providerName?: string;
  macSecCapable?: boolean;
  encryptionMode?: string;
  macSecKeys?: MacSecKey[];
}
export interface NewPrivateVirtualInterface {
  virtualInterfaceName: string | undefined;
  vlan: number | undefined;
  asn: number | undefined;
  mtu?: number;
  authKey?: string;
  amazonAddress?: string;
  customerAddress?: string;
  addressFamily?: AddressFamily;
  virtualGatewayId?: string;
  directConnectGatewayId?: string;
  tags?: Tag[];
  enableSiteLink?: boolean;
}
export interface CreatePrivateVirtualInterfaceRequest {
  connectionId: string | undefined;
  newPrivateVirtualInterface: NewPrivateVirtualInterface | undefined;
}
export interface NewPublicVirtualInterface {
  virtualInterfaceName: string | undefined;
  vlan: number | undefined;
  asn: number | undefined;
  authKey?: string;
  amazonAddress?: string;
  customerAddress?: string;
  addressFamily?: AddressFamily;
  routeFilterPrefixes?: RouteFilterPrefix[];
  tags?: Tag[];
}
export interface CreatePublicVirtualInterfaceRequest {
  connectionId: string | undefined;
  newPublicVirtualInterface: NewPublicVirtualInterface | undefined;
}
export interface NewTransitVirtualInterface {
  virtualInterfaceName?: string;
  vlan?: number;
  asn?: number;
  mtu?: number;
  authKey?: string;
  amazonAddress?: string;
  customerAddress?: string;
  addressFamily?: AddressFamily;
  directConnectGatewayId?: string;
  tags?: Tag[];
  enableSiteLink?: boolean;
}
export interface CreateTransitVirtualInterfaceRequest {
  connectionId: string | undefined;
  newTransitVirtualInterface: NewTransitVirtualInterface | undefined;
}
export interface CreateTransitVirtualInterfaceResult {
  virtualInterface?: VirtualInterface;
}
export interface DeleteBGPPeerRequest {
  virtualInterfaceId?: string;
  asn?: number;
  customerAddress?: string;
  bgpPeerId?: string;
}
export interface DeleteBGPPeerResponse {
  virtualInterface?: VirtualInterface;
}
export interface DeleteConnectionRequest {
  connectionId: string | undefined;
}
export interface DeleteDirectConnectGatewayRequest {
  directConnectGatewayId: string | undefined;
}
export interface DeleteDirectConnectGatewayResult {
  directConnectGateway?: DirectConnectGateway;
}
export interface DeleteDirectConnectGatewayAssociationRequest {
  associationId?: string;
  directConnectGatewayId?: string;
  virtualGatewayId?: string;
}
export interface DeleteDirectConnectGatewayAssociationResult {
  directConnectGatewayAssociation?: DirectConnectGatewayAssociation;
}
export interface DeleteDirectConnectGatewayAssociationProposalRequest {
  proposalId: string | undefined;
}
export interface DeleteDirectConnectGatewayAssociationProposalResult {
  directConnectGatewayAssociationProposal?: DirectConnectGatewayAssociationProposal;
}
export interface DeleteInterconnectRequest {
  interconnectId: string | undefined;
}
export interface DeleteInterconnectResponse {
  interconnectState?: InterconnectState;
}
export interface DeleteLagRequest {
  lagId: string | undefined;
}
export interface DeleteVirtualInterfaceRequest {
  virtualInterfaceId: string | undefined;
}
export interface DeleteVirtualInterfaceResponse {
  virtualInterfaceState?: VirtualInterfaceState;
}
export declare const LoaContentType: {
  readonly PDF: "application/pdf";
};
export type LoaContentType =
  (typeof LoaContentType)[keyof typeof LoaContentType];
export interface DescribeConnectionLoaRequest {
  connectionId: string | undefined;
  providerName?: string;
  loaContentType?: LoaContentType;
}
export interface Loa {
  loaContent?: Uint8Array;
  loaContentType?: LoaContentType;
}
export interface DescribeConnectionLoaResponse {
  loa?: Loa;
}
export interface DescribeConnectionsRequest {
  connectionId?: string;
}
export interface DescribeConnectionsOnInterconnectRequest {
  interconnectId: string | undefined;
}
export declare const NniPartnerType: {
  readonly NonPartner: "nonPartner";
  readonly V1: "v1";
  readonly V2: "v2";
};
export type NniPartnerType =
  (typeof NniPartnerType)[keyof typeof NniPartnerType];
export interface DescribeCustomerMetadataResponse {
  agreements?: CustomerAgreement[];
  nniPartnerType?: NniPartnerType;
}
export interface DescribeDirectConnectGatewayAssociationProposalsRequest {
  directConnectGatewayId?: string;
  proposalId?: string;
  associatedGatewayId?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface DescribeDirectConnectGatewayAssociationProposalsResult {
  directConnectGatewayAssociationProposals?: DirectConnectGatewayAssociationProposal[];
  nextToken?: string;
}
export interface DescribeDirectConnectGatewayAssociationsRequest {
  associationId?: string;
  associatedGatewayId?: string;
  directConnectGatewayId?: string;
  maxResults?: number;
  nextToken?: string;
  virtualGatewayId?: string;
}
export interface DescribeDirectConnectGatewayAssociationsResult {
  directConnectGatewayAssociations?: DirectConnectGatewayAssociation[];
  nextToken?: string;
}
export interface DescribeDirectConnectGatewayAttachmentsRequest {
  directConnectGatewayId?: string;
  virtualInterfaceId?: string;
  maxResults?: number;
  nextToken?: string;
}
export declare const DirectConnectGatewayAttachmentState: {
  readonly attached: "attached";
  readonly attaching: "attaching";
  readonly detached: "detached";
  readonly detaching: "detaching";
};
export type DirectConnectGatewayAttachmentState =
  (typeof DirectConnectGatewayAttachmentState)[keyof typeof DirectConnectGatewayAttachmentState];
export declare const DirectConnectGatewayAttachmentType: {
  readonly PrivateVirtualInterface: "PrivateVirtualInterface";
  readonly TransitVirtualInterface: "TransitVirtualInterface";
};
export type DirectConnectGatewayAttachmentType =
  (typeof DirectConnectGatewayAttachmentType)[keyof typeof DirectConnectGatewayAttachmentType];
export interface DirectConnectGatewayAttachment {
  directConnectGatewayId?: string;
  virtualInterfaceId?: string;
  virtualInterfaceRegion?: string;
  virtualInterfaceOwnerAccount?: string;
  attachmentState?: DirectConnectGatewayAttachmentState;
  attachmentType?: DirectConnectGatewayAttachmentType;
  stateChangeError?: string;
}
export interface DescribeDirectConnectGatewayAttachmentsResult {
  directConnectGatewayAttachments?: DirectConnectGatewayAttachment[];
  nextToken?: string;
}
export interface DescribeDirectConnectGatewaysRequest {
  directConnectGatewayId?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface DescribeDirectConnectGatewaysResult {
  directConnectGateways?: DirectConnectGateway[];
  nextToken?: string;
}
export interface DescribeHostedConnectionsRequest {
  connectionId: string | undefined;
}
export interface DescribeInterconnectLoaRequest {
  interconnectId: string | undefined;
  providerName?: string;
  loaContentType?: LoaContentType;
}
export interface DescribeInterconnectLoaResponse {
  loa?: Loa;
}
export interface DescribeInterconnectsRequest {
  interconnectId?: string;
}
export interface Interconnects {
  interconnects?: Interconnect[];
}
export interface DescribeLagsRequest {
  lagId?: string;
}
export interface Lags {
  lags?: Lag[];
}
export interface DescribeLoaRequest {
  connectionId: string | undefined;
  providerName?: string;
  loaContentType?: LoaContentType;
}
export interface Location {
  locationCode?: string;
  locationName?: string;
  region?: string;
  availablePortSpeeds?: string[];
  availableProviders?: string[];
  availableMacSecPortSpeeds?: string[];
}
export interface Locations {
  locations?: Location[];
}
export interface DescribeRouterConfigurationRequest {
  virtualInterfaceId: string | undefined;
  routerTypeIdentifier?: string;
}
export interface RouterType {
  vendor?: string;
  platform?: string;
  software?: string;
  xsltTemplateName?: string;
  xsltTemplateNameForMacSec?: string;
  routerTypeIdentifier?: string;
}
export interface DescribeRouterConfigurationResponse {
  customerRouterConfig?: string;
  router?: RouterType;
  virtualInterfaceId?: string;
  virtualInterfaceName?: string;
}
export interface DescribeTagsRequest {
  resourceArns: string[] | undefined;
}
export interface ResourceTag {
  resourceArn?: string;
  tags?: Tag[];
}
export interface DescribeTagsResponse {
  resourceTags?: ResourceTag[];
}
export interface VirtualGateway {
  virtualGatewayId?: string;
  virtualGatewayState?: string;
}
export interface VirtualGateways {
  virtualGateways?: VirtualGateway[];
}
export interface DescribeVirtualInterfacesRequest {
  connectionId?: string;
  virtualInterfaceId?: string;
}
export interface VirtualInterfaces {
  virtualInterfaces?: VirtualInterface[];
}
export interface DisassociateConnectionFromLagRequest {
  connectionId: string | undefined;
  lagId: string | undefined;
}
export interface DisassociateMacSecKeyRequest {
  connectionId: string | undefined;
  secretARN: string | undefined;
}
export interface DisassociateMacSecKeyResponse {
  connectionId?: string;
  macSecKeys?: MacSecKey[];
}
export interface ListVirtualInterfaceTestHistoryRequest {
  testId?: string;
  virtualInterfaceId?: string;
  bgpPeers?: string[];
  status?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface VirtualInterfaceTestHistory {
  testId?: string;
  virtualInterfaceId?: string;
  bgpPeers?: string[];
  status?: string;
  ownerAccount?: string;
  testDurationInMinutes?: number;
  startTime?: Date;
  endTime?: Date;
}
export interface ListVirtualInterfaceTestHistoryResponse {
  virtualInterfaceTestHistory?: VirtualInterfaceTestHistory[];
  nextToken?: string;
}
export interface StartBgpFailoverTestRequest {
  virtualInterfaceId: string | undefined;
  bgpPeers?: string[];
  testDurationInMinutes?: number;
}
export interface StartBgpFailoverTestResponse {
  virtualInterfaceTest?: VirtualInterfaceTestHistory;
}
export interface StopBgpFailoverTestRequest {
  virtualInterfaceId: string | undefined;
}
export interface StopBgpFailoverTestResponse {
  virtualInterfaceTest?: VirtualInterfaceTestHistory;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateConnectionRequest {
  connectionId: string | undefined;
  connectionName?: string;
  encryptionMode?: string;
}
export interface UpdateDirectConnectGatewayRequest {
  directConnectGatewayId: string | undefined;
  newDirectConnectGatewayName: string | undefined;
}
export interface UpdateDirectConnectGatewayResponse {
  directConnectGateway?: DirectConnectGateway;
}
export interface UpdateDirectConnectGatewayAssociationRequest {
  associationId?: string;
  addAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[];
  removeAllowedPrefixesToDirectConnectGateway?: RouteFilterPrefix[];
}
export interface UpdateDirectConnectGatewayAssociationResult {
  directConnectGatewayAssociation?: DirectConnectGatewayAssociation;
}
export interface UpdateLagRequest {
  lagId: string | undefined;
  lagName?: string;
  minimumLinks?: number;
  encryptionMode?: string;
}
export interface UpdateVirtualInterfaceAttributesRequest {
  virtualInterfaceId: string | undefined;
  mtu?: number;
  enableSiteLink?: boolean;
  virtualInterfaceName?: string;
}
