import { DirectConnectServiceException as __BaseException } from "./DirectConnectServiceException";
export const GatewayType = {
    TransitGateway: "transitGateway",
    VirtualPrivateGateway: "virtualPrivateGateway",
};
export const DirectConnectGatewayAssociationState = {
    associated: "associated",
    associating: "associating",
    disassociated: "disassociated",
    disassociating: "disassociating",
    updating: "updating",
};
export class DirectConnectClientException extends __BaseException {
    constructor(opts) {
        super({
            name: "DirectConnectClientException",
            $fault: "client",
            ...opts,
        });
        this.name = "DirectConnectClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DirectConnectClientException.prototype);
    }
}
export class DirectConnectServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "DirectConnectServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "DirectConnectServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, DirectConnectServerException.prototype);
    }
}
export const AddressFamily = {
    IPv4: "ipv4",
    IPv6: "ipv6",
};
export const ConnectionState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    down: "down",
    ordering: "ordering",
    pending: "pending",
    rejected: "rejected",
    requested: "requested",
    unknown: "unknown",
};
export const HasLogicalRedundancy = {
    No: "no",
    Unknown: "unknown",
    Yes: "yes",
};
export class DuplicateTagKeysException extends __BaseException {
    constructor(opts) {
        super({
            name: "DuplicateTagKeysException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateTagKeysException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateTagKeysException.prototype);
    }
}
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
export const BGPPeerState = {
    Available: "available",
    Deleted: "deleted",
    Deleting: "deleting",
    Pending: "pending",
    Verifying: "verifying",
};
export const BGPStatus = {
    Down: "down",
    Unknown: "unknown",
    Up: "up",
};
export const VirtualInterfaceState = {
    available: "available",
    confirming: "confirming",
    deleted: "deleted",
    deleting: "deleting",
    down: "down",
    pending: "pending",
    rejected: "rejected",
    unknown: "unknown",
    verifying: "verifying",
};
export const DirectConnectGatewayState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
export const DirectConnectGatewayAssociationProposalState = {
    accepted: "accepted",
    deleted: "deleted",
    requested: "requested",
};
export const InterconnectState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    down: "down",
    pending: "pending",
    requested: "requested",
    unknown: "unknown",
};
export const LagState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    down: "down",
    pending: "pending",
    requested: "requested",
    unknown: "unknown",
};
export const LoaContentType = {
    PDF: "application/pdf",
};
export const NniPartnerType = {
    NonPartner: "nonPartner",
    V1: "v1",
    V2: "v2",
};
export const DirectConnectGatewayAttachmentState = {
    attached: "attached",
    attaching: "attaching",
    detached: "detached",
    detaching: "detaching",
};
export const DirectConnectGatewayAttachmentType = {
    PrivateVirtualInterface: "PrivateVirtualInterface",
    TransitVirtualInterface: "TransitVirtualInterface",
};
