import { FisServiceException as __BaseException } from "./FisServiceException";
export const AccountTargeting = {
    MULTI_ACCOUNT: "multi-account",
    SINGLE_ACCOUNT: "single-account",
};
export const ActionsMode = {
    RUN_ALL: "run-all",
    SKIP_ALL: "skip-all",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export const EmptyTargetResolutionMode = {
    FAIL: "fail",
    SKIP: "skip",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const ExperimentActionStatus = {
    cancelled: "cancelled",
    completed: "completed",
    failed: "failed",
    initiating: "initiating",
    pending: "pending",
    running: "running",
    skipped: "skipped",
    stopped: "stopped",
    stopping: "stopping",
};
export const ExperimentStatus = {
    completed: "completed",
    failed: "failed",
    initiating: "initiating",
    pending: "pending",
    running: "running",
    stopped: "stopped",
    stopping: "stopping",
};
