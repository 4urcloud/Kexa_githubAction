import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { FisServiceException as __BaseException } from "./FisServiceException";
export declare const AccountTargeting: {
  readonly MULTI_ACCOUNT: "multi-account";
  readonly SINGLE_ACCOUNT: "single-account";
};
export type AccountTargeting =
  (typeof AccountTargeting)[keyof typeof AccountTargeting];
export interface ActionParameter {
  description?: string;
  required?: boolean;
}
export interface ActionTarget {
  resourceType?: string;
}
export interface Action {
  id?: string;
  arn?: string;
  description?: string;
  parameters?: Record<string, ActionParameter>;
  targets?: Record<string, ActionTarget>;
  tags?: Record<string, string>;
}
export declare const ActionsMode: {
  readonly RUN_ALL: "run-all";
  readonly SKIP_ALL: "skip-all";
};
export type ActionsMode = (typeof ActionsMode)[keyof typeof ActionsMode];
export interface ActionSummary {
  id?: string;
  arn?: string;
  description?: string;
  targets?: Record<string, ActionTarget>;
  tags?: Record<string, string>;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CreateExperimentTemplateActionInput {
  actionId: string | undefined;
  description?: string;
  parameters?: Record<string, string>;
  targets?: Record<string, string>;
  startAfter?: string[];
}
export declare const EmptyTargetResolutionMode: {
  readonly FAIL: "fail";
  readonly SKIP: "skip";
};
export type EmptyTargetResolutionMode =
  (typeof EmptyTargetResolutionMode)[keyof typeof EmptyTargetResolutionMode];
export interface CreateExperimentTemplateExperimentOptionsInput {
  accountTargeting?: AccountTargeting;
  emptyTargetResolutionMode?: EmptyTargetResolutionMode;
}
export interface ExperimentTemplateCloudWatchLogsLogConfigurationInput {
  logGroupArn: string | undefined;
}
export interface ExperimentTemplateS3LogConfigurationInput {
  bucketName: string | undefined;
  prefix?: string;
}
export interface CreateExperimentTemplateLogConfigurationInput {
  cloudWatchLogsConfiguration?: ExperimentTemplateCloudWatchLogsLogConfigurationInput;
  s3Configuration?: ExperimentTemplateS3LogConfigurationInput;
  logSchemaVersion: number | undefined;
}
export interface CreateExperimentTemplateStopConditionInput {
  source: string | undefined;
  value?: string;
}
export interface ExperimentTemplateTargetInputFilter {
  path: string | undefined;
  values: string[] | undefined;
}
export interface CreateExperimentTemplateTargetInput {
  resourceType: string | undefined;
  resourceArns?: string[];
  resourceTags?: Record<string, string>;
  filters?: ExperimentTemplateTargetInputFilter[];
  selectionMode: string | undefined;
  parameters?: Record<string, string>;
}
export interface CreateExperimentTemplateRequest {
  clientToken?: string;
  description: string | undefined;
  stopConditions: CreateExperimentTemplateStopConditionInput[] | undefined;
  targets?: Record<string, CreateExperimentTemplateTargetInput>;
  actions: Record<string, CreateExperimentTemplateActionInput> | undefined;
  roleArn: string | undefined;
  tags?: Record<string, string>;
  logConfiguration?: CreateExperimentTemplateLogConfigurationInput;
  experimentOptions?: CreateExperimentTemplateExperimentOptionsInput;
}
export interface ExperimentTemplateAction {
  actionId?: string;
  description?: string;
  parameters?: Record<string, string>;
  targets?: Record<string, string>;
  startAfter?: string[];
}
export interface ExperimentTemplateExperimentOptions {
  accountTargeting?: AccountTargeting;
  emptyTargetResolutionMode?: EmptyTargetResolutionMode;
}
export interface ExperimentTemplateCloudWatchLogsLogConfiguration {
  logGroupArn?: string;
}
export interface ExperimentTemplateS3LogConfiguration {
  bucketName?: string;
  prefix?: string;
}
export interface ExperimentTemplateLogConfiguration {
  cloudWatchLogsConfiguration?: ExperimentTemplateCloudWatchLogsLogConfiguration;
  s3Configuration?: ExperimentTemplateS3LogConfiguration;
  logSchemaVersion?: number;
}
export interface ExperimentTemplateStopCondition {
  source?: string;
  value?: string;
}
export interface ExperimentTemplateTargetFilter {
  path?: string;
  values?: string[];
}
export interface ExperimentTemplateTarget {
  resourceType?: string;
  resourceArns?: string[];
  resourceTags?: Record<string, string>;
  filters?: ExperimentTemplateTargetFilter[];
  selectionMode?: string;
  parameters?: Record<string, string>;
}
export interface ExperimentTemplate {
  id?: string;
  arn?: string;
  description?: string;
  targets?: Record<string, ExperimentTemplateTarget>;
  actions?: Record<string, ExperimentTemplateAction>;
  stopConditions?: ExperimentTemplateStopCondition[];
  creationTime?: Date;
  lastUpdateTime?: Date;
  roleArn?: string;
  tags?: Record<string, string>;
  logConfiguration?: ExperimentTemplateLogConfiguration;
  experimentOptions?: ExperimentTemplateExperimentOptions;
  targetAccountConfigurationsCount?: number;
}
export interface CreateExperimentTemplateResponse {
  experimentTemplate?: ExperimentTemplate;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CreateTargetAccountConfigurationRequest {
  clientToken?: string;
  experimentTemplateId: string | undefined;
  accountId: string | undefined;
  roleArn: string | undefined;
  description?: string;
}
export interface TargetAccountConfiguration {
  roleArn?: string;
  accountId?: string;
  description?: string;
}
export interface CreateTargetAccountConfigurationResponse {
  targetAccountConfiguration?: TargetAccountConfiguration;
}
export interface DeleteExperimentTemplateRequest {
  id: string | undefined;
}
export interface DeleteExperimentTemplateResponse {
  experimentTemplate?: ExperimentTemplate;
}
export interface DeleteTargetAccountConfigurationRequest {
  experimentTemplateId: string | undefined;
  accountId: string | undefined;
}
export interface DeleteTargetAccountConfigurationResponse {
  targetAccountConfiguration?: TargetAccountConfiguration;
}
export declare const ExperimentActionStatus: {
  readonly cancelled: "cancelled";
  readonly completed: "completed";
  readonly failed: "failed";
  readonly initiating: "initiating";
  readonly pending: "pending";
  readonly running: "running";
  readonly skipped: "skipped";
  readonly stopped: "stopped";
  readonly stopping: "stopping";
};
export type ExperimentActionStatus =
  (typeof ExperimentActionStatus)[keyof typeof ExperimentActionStatus];
export interface ExperimentActionState {
  status?: ExperimentActionStatus;
  reason?: string;
}
export interface ExperimentAction {
  actionId?: string;
  description?: string;
  parameters?: Record<string, string>;
  targets?: Record<string, string>;
  startAfter?: string[];
  state?: ExperimentActionState;
  startTime?: Date;
  endTime?: Date;
}
export interface ExperimentOptions {
  accountTargeting?: AccountTargeting;
  emptyTargetResolutionMode?: EmptyTargetResolutionMode;
  actionsMode?: ActionsMode;
}
export interface ExperimentCloudWatchLogsLogConfiguration {
  logGroupArn?: string;
}
export interface ExperimentS3LogConfiguration {
  bucketName?: string;
  prefix?: string;
}
export interface ExperimentLogConfiguration {
  cloudWatchLogsConfiguration?: ExperimentCloudWatchLogsLogConfiguration;
  s3Configuration?: ExperimentS3LogConfiguration;
  logSchemaVersion?: number;
}
export declare const ExperimentStatus: {
  readonly completed: "completed";
  readonly failed: "failed";
  readonly initiating: "initiating";
  readonly pending: "pending";
  readonly running: "running";
  readonly stopped: "stopped";
  readonly stopping: "stopping";
};
export type ExperimentStatus =
  (typeof ExperimentStatus)[keyof typeof ExperimentStatus];
export interface ExperimentState {
  status?: ExperimentStatus;
  reason?: string;
}
export interface ExperimentStopCondition {
  source?: string;
  value?: string;
}
export interface ExperimentTargetFilter {
  path?: string;
  values?: string[];
}
export interface ExperimentTarget {
  resourceType?: string;
  resourceArns?: string[];
  resourceTags?: Record<string, string>;
  filters?: ExperimentTargetFilter[];
  selectionMode?: string;
  parameters?: Record<string, string>;
}
export interface Experiment {
  id?: string;
  arn?: string;
  experimentTemplateId?: string;
  roleArn?: string;
  state?: ExperimentState;
  targets?: Record<string, ExperimentTarget>;
  actions?: Record<string, ExperimentAction>;
  stopConditions?: ExperimentStopCondition[];
  creationTime?: Date;
  startTime?: Date;
  endTime?: Date;
  tags?: Record<string, string>;
  logConfiguration?: ExperimentLogConfiguration;
  experimentOptions?: ExperimentOptions;
  targetAccountConfigurationsCount?: number;
}
export interface ExperimentSummary {
  id?: string;
  arn?: string;
  experimentTemplateId?: string;
  state?: ExperimentState;
  creationTime?: Date;
  tags?: Record<string, string>;
  experimentOptions?: ExperimentOptions;
}
export interface ExperimentTargetAccountConfiguration {
  roleArn?: string;
  accountId?: string;
  description?: string;
}
export interface ExperimentTargetAccountConfigurationSummary {
  roleArn?: string;
  accountId?: string;
  description?: string;
}
export interface ExperimentTemplateSummary {
  id?: string;
  arn?: string;
  description?: string;
  creationTime?: Date;
  lastUpdateTime?: Date;
  tags?: Record<string, string>;
}
export interface GetActionRequest {
  id: string | undefined;
}
export interface GetActionResponse {
  action?: Action;
}
export interface GetExperimentRequest {
  id: string | undefined;
}
export interface GetExperimentResponse {
  experiment?: Experiment;
}
export interface GetExperimentTargetAccountConfigurationRequest {
  experimentId: string | undefined;
  accountId: string | undefined;
}
export interface GetExperimentTargetAccountConfigurationResponse {
  targetAccountConfiguration?: ExperimentTargetAccountConfiguration;
}
export interface GetExperimentTemplateRequest {
  id: string | undefined;
}
export interface GetExperimentTemplateResponse {
  experimentTemplate?: ExperimentTemplate;
}
export interface GetTargetAccountConfigurationRequest {
  experimentTemplateId: string | undefined;
  accountId: string | undefined;
}
export interface GetTargetAccountConfigurationResponse {
  targetAccountConfiguration?: TargetAccountConfiguration;
}
export interface GetTargetResourceTypeRequest {
  resourceType: string | undefined;
}
export interface TargetResourceTypeParameter {
  description?: string;
  required?: boolean;
}
export interface TargetResourceType {
  resourceType?: string;
  description?: string;
  parameters?: Record<string, TargetResourceTypeParameter>;
}
export interface GetTargetResourceTypeResponse {
  targetResourceType?: TargetResourceType;
}
export interface ListActionsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ListActionsResponse {
  actions?: ActionSummary[];
  nextToken?: string;
}
export interface ListExperimentResolvedTargetsRequest {
  experimentId: string | undefined;
  maxResults?: number;
  nextToken?: string;
  targetName?: string;
}
export interface ResolvedTarget {
  resourceType?: string;
  targetName?: string;
  targetInformation?: Record<string, string>;
}
export interface ListExperimentResolvedTargetsResponse {
  resolvedTargets?: ResolvedTarget[];
  nextToken?: string;
}
export interface ListExperimentsRequest {
  maxResults?: number;
  nextToken?: string;
  experimentTemplateId?: string;
}
export interface ListExperimentsResponse {
  experiments?: ExperimentSummary[];
  nextToken?: string;
}
export interface ListExperimentTargetAccountConfigurationsRequest {
  experimentId: string | undefined;
  nextToken?: string;
}
export interface ListExperimentTargetAccountConfigurationsResponse {
  targetAccountConfigurations?: ExperimentTargetAccountConfigurationSummary[];
  nextToken?: string;
}
export interface ListExperimentTemplatesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ListExperimentTemplatesResponse {
  experimentTemplates?: ExperimentTemplateSummary[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface ListTargetAccountConfigurationsRequest {
  experimentTemplateId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface TargetAccountConfigurationSummary {
  roleArn?: string;
  accountId?: string;
  description?: string;
}
export interface ListTargetAccountConfigurationsResponse {
  targetAccountConfigurations?: TargetAccountConfigurationSummary[];
  nextToken?: string;
}
export interface ListTargetResourceTypesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface TargetResourceTypeSummary {
  resourceType?: string;
  description?: string;
}
export interface ListTargetResourceTypesResponse {
  targetResourceTypes?: TargetResourceTypeSummary[];
  nextToken?: string;
}
export interface StartExperimentExperimentOptionsInput {
  actionsMode?: ActionsMode;
}
export interface StartExperimentRequest {
  clientToken?: string;
  experimentTemplateId: string | undefined;
  experimentOptions?: StartExperimentExperimentOptionsInput;
  tags?: Record<string, string>;
}
export interface StartExperimentResponse {
  experiment?: Experiment;
}
export interface StopExperimentRequest {
  id: string | undefined;
}
export interface StopExperimentResponse {
  experiment?: Experiment;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys?: string[];
}
export interface UntagResourceResponse {}
export interface UpdateExperimentTemplateActionInputItem {
  actionId?: string;
  description?: string;
  parameters?: Record<string, string>;
  targets?: Record<string, string>;
  startAfter?: string[];
}
export interface UpdateExperimentTemplateExperimentOptionsInput {
  emptyTargetResolutionMode?: EmptyTargetResolutionMode;
}
export interface UpdateExperimentTemplateLogConfigurationInput {
  cloudWatchLogsConfiguration?: ExperimentTemplateCloudWatchLogsLogConfigurationInput;
  s3Configuration?: ExperimentTemplateS3LogConfigurationInput;
  logSchemaVersion?: number;
}
export interface UpdateExperimentTemplateStopConditionInput {
  source: string | undefined;
  value?: string;
}
export interface UpdateExperimentTemplateTargetInput {
  resourceType: string | undefined;
  resourceArns?: string[];
  resourceTags?: Record<string, string>;
  filters?: ExperimentTemplateTargetInputFilter[];
  selectionMode: string | undefined;
  parameters?: Record<string, string>;
}
export interface UpdateExperimentTemplateRequest {
  id: string | undefined;
  description?: string;
  stopConditions?: UpdateExperimentTemplateStopConditionInput[];
  targets?: Record<string, UpdateExperimentTemplateTargetInput>;
  actions?: Record<string, UpdateExperimentTemplateActionInputItem>;
  roleArn?: string;
  logConfiguration?: UpdateExperimentTemplateLogConfigurationInput;
  experimentOptions?: UpdateExperimentTemplateExperimentOptionsInput;
}
export interface UpdateExperimentTemplateResponse {
  experimentTemplate?: ExperimentTemplate;
}
export interface UpdateTargetAccountConfigurationRequest {
  experimentTemplateId: string | undefined;
  accountId: string | undefined;
  roleArn?: string;
  description?: string;
}
export interface UpdateTargetAccountConfigurationResponse {
  targetAccountConfiguration?: TargetAccountConfiguration;
}
