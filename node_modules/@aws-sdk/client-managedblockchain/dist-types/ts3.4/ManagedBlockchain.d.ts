import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  CreateAccessorCommandInput,
  CreateAccessorCommandOutput,
} from "./commands/CreateAccessorCommand";
import {
  CreateMemberCommandInput,
  CreateMemberCommandOutput,
} from "./commands/CreateMemberCommand";
import {
  CreateNetworkCommandInput,
  CreateNetworkCommandOutput,
} from "./commands/CreateNetworkCommand";
import {
  CreateNodeCommandInput,
  CreateNodeCommandOutput,
} from "./commands/CreateNodeCommand";
import {
  CreateProposalCommandInput,
  CreateProposalCommandOutput,
} from "./commands/CreateProposalCommand";
import {
  DeleteAccessorCommandInput,
  DeleteAccessorCommandOutput,
} from "./commands/DeleteAccessorCommand";
import {
  DeleteMemberCommandInput,
  DeleteMemberCommandOutput,
} from "./commands/DeleteMemberCommand";
import {
  DeleteNodeCommandInput,
  DeleteNodeCommandOutput,
} from "./commands/DeleteNodeCommand";
import {
  GetAccessorCommandInput,
  GetAccessorCommandOutput,
} from "./commands/GetAccessorCommand";
import {
  GetMemberCommandInput,
  GetMemberCommandOutput,
} from "./commands/GetMemberCommand";
import {
  GetNetworkCommandInput,
  GetNetworkCommandOutput,
} from "./commands/GetNetworkCommand";
import {
  GetNodeCommandInput,
  GetNodeCommandOutput,
} from "./commands/GetNodeCommand";
import {
  GetProposalCommandInput,
  GetProposalCommandOutput,
} from "./commands/GetProposalCommand";
import {
  ListAccessorsCommandInput,
  ListAccessorsCommandOutput,
} from "./commands/ListAccessorsCommand";
import {
  ListInvitationsCommandInput,
  ListInvitationsCommandOutput,
} from "./commands/ListInvitationsCommand";
import {
  ListMembersCommandInput,
  ListMembersCommandOutput,
} from "./commands/ListMembersCommand";
import {
  ListNetworksCommandInput,
  ListNetworksCommandOutput,
} from "./commands/ListNetworksCommand";
import {
  ListNodesCommandInput,
  ListNodesCommandOutput,
} from "./commands/ListNodesCommand";
import {
  ListProposalsCommandInput,
  ListProposalsCommandOutput,
} from "./commands/ListProposalsCommand";
import {
  ListProposalVotesCommandInput,
  ListProposalVotesCommandOutput,
} from "./commands/ListProposalVotesCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  RejectInvitationCommandInput,
  RejectInvitationCommandOutput,
} from "./commands/RejectInvitationCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateMemberCommandInput,
  UpdateMemberCommandOutput,
} from "./commands/UpdateMemberCommand";
import {
  UpdateNodeCommandInput,
  UpdateNodeCommandOutput,
} from "./commands/UpdateNodeCommand";
import {
  VoteOnProposalCommandInput,
  VoteOnProposalCommandOutput,
} from "./commands/VoteOnProposalCommand";
import { ManagedBlockchainClient } from "./ManagedBlockchainClient";
export interface ManagedBlockchain {
  createAccessor(
    args: CreateAccessorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateAccessorCommandOutput>;
  createAccessor(
    args: CreateAccessorCommandInput,
    cb: (err: any, data?: CreateAccessorCommandOutput) => void
  ): void;
  createAccessor(
    args: CreateAccessorCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateAccessorCommandOutput) => void
  ): void;
  createMember(
    args: CreateMemberCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateMemberCommandOutput>;
  createMember(
    args: CreateMemberCommandInput,
    cb: (err: any, data?: CreateMemberCommandOutput) => void
  ): void;
  createMember(
    args: CreateMemberCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateMemberCommandOutput) => void
  ): void;
  createNetwork(
    args: CreateNetworkCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateNetworkCommandOutput>;
  createNetwork(
    args: CreateNetworkCommandInput,
    cb: (err: any, data?: CreateNetworkCommandOutput) => void
  ): void;
  createNetwork(
    args: CreateNetworkCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateNetworkCommandOutput) => void
  ): void;
  createNode(
    args: CreateNodeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateNodeCommandOutput>;
  createNode(
    args: CreateNodeCommandInput,
    cb: (err: any, data?: CreateNodeCommandOutput) => void
  ): void;
  createNode(
    args: CreateNodeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateNodeCommandOutput) => void
  ): void;
  createProposal(
    args: CreateProposalCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateProposalCommandOutput>;
  createProposal(
    args: CreateProposalCommandInput,
    cb: (err: any, data?: CreateProposalCommandOutput) => void
  ): void;
  createProposal(
    args: CreateProposalCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateProposalCommandOutput) => void
  ): void;
  deleteAccessor(
    args: DeleteAccessorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteAccessorCommandOutput>;
  deleteAccessor(
    args: DeleteAccessorCommandInput,
    cb: (err: any, data?: DeleteAccessorCommandOutput) => void
  ): void;
  deleteAccessor(
    args: DeleteAccessorCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteAccessorCommandOutput) => void
  ): void;
  deleteMember(
    args: DeleteMemberCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteMemberCommandOutput>;
  deleteMember(
    args: DeleteMemberCommandInput,
    cb: (err: any, data?: DeleteMemberCommandOutput) => void
  ): void;
  deleteMember(
    args: DeleteMemberCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteMemberCommandOutput) => void
  ): void;
  deleteNode(
    args: DeleteNodeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteNodeCommandOutput>;
  deleteNode(
    args: DeleteNodeCommandInput,
    cb: (err: any, data?: DeleteNodeCommandOutput) => void
  ): void;
  deleteNode(
    args: DeleteNodeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteNodeCommandOutput) => void
  ): void;
  getAccessor(
    args: GetAccessorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetAccessorCommandOutput>;
  getAccessor(
    args: GetAccessorCommandInput,
    cb: (err: any, data?: GetAccessorCommandOutput) => void
  ): void;
  getAccessor(
    args: GetAccessorCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetAccessorCommandOutput) => void
  ): void;
  getMember(
    args: GetMemberCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetMemberCommandOutput>;
  getMember(
    args: GetMemberCommandInput,
    cb: (err: any, data?: GetMemberCommandOutput) => void
  ): void;
  getMember(
    args: GetMemberCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetMemberCommandOutput) => void
  ): void;
  getNetwork(
    args: GetNetworkCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetNetworkCommandOutput>;
  getNetwork(
    args: GetNetworkCommandInput,
    cb: (err: any, data?: GetNetworkCommandOutput) => void
  ): void;
  getNetwork(
    args: GetNetworkCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetNetworkCommandOutput) => void
  ): void;
  getNode(
    args: GetNodeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetNodeCommandOutput>;
  getNode(
    args: GetNodeCommandInput,
    cb: (err: any, data?: GetNodeCommandOutput) => void
  ): void;
  getNode(
    args: GetNodeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetNodeCommandOutput) => void
  ): void;
  getProposal(
    args: GetProposalCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetProposalCommandOutput>;
  getProposal(
    args: GetProposalCommandInput,
    cb: (err: any, data?: GetProposalCommandOutput) => void
  ): void;
  getProposal(
    args: GetProposalCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetProposalCommandOutput) => void
  ): void;
  listAccessors(
    args: ListAccessorsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListAccessorsCommandOutput>;
  listAccessors(
    args: ListAccessorsCommandInput,
    cb: (err: any, data?: ListAccessorsCommandOutput) => void
  ): void;
  listAccessors(
    args: ListAccessorsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListAccessorsCommandOutput) => void
  ): void;
  listInvitations(
    args: ListInvitationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListInvitationsCommandOutput>;
  listInvitations(
    args: ListInvitationsCommandInput,
    cb: (err: any, data?: ListInvitationsCommandOutput) => void
  ): void;
  listInvitations(
    args: ListInvitationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListInvitationsCommandOutput) => void
  ): void;
  listMembers(
    args: ListMembersCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListMembersCommandOutput>;
  listMembers(
    args: ListMembersCommandInput,
    cb: (err: any, data?: ListMembersCommandOutput) => void
  ): void;
  listMembers(
    args: ListMembersCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListMembersCommandOutput) => void
  ): void;
  listNetworks(
    args: ListNetworksCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListNetworksCommandOutput>;
  listNetworks(
    args: ListNetworksCommandInput,
    cb: (err: any, data?: ListNetworksCommandOutput) => void
  ): void;
  listNetworks(
    args: ListNetworksCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListNetworksCommandOutput) => void
  ): void;
  listNodes(
    args: ListNodesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListNodesCommandOutput>;
  listNodes(
    args: ListNodesCommandInput,
    cb: (err: any, data?: ListNodesCommandOutput) => void
  ): void;
  listNodes(
    args: ListNodesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListNodesCommandOutput) => void
  ): void;
  listProposals(
    args: ListProposalsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListProposalsCommandOutput>;
  listProposals(
    args: ListProposalsCommandInput,
    cb: (err: any, data?: ListProposalsCommandOutput) => void
  ): void;
  listProposals(
    args: ListProposalsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListProposalsCommandOutput) => void
  ): void;
  listProposalVotes(
    args: ListProposalVotesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListProposalVotesCommandOutput>;
  listProposalVotes(
    args: ListProposalVotesCommandInput,
    cb: (err: any, data?: ListProposalVotesCommandOutput) => void
  ): void;
  listProposalVotes(
    args: ListProposalVotesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListProposalVotesCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  rejectInvitation(
    args: RejectInvitationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RejectInvitationCommandOutput>;
  rejectInvitation(
    args: RejectInvitationCommandInput,
    cb: (err: any, data?: RejectInvitationCommandOutput) => void
  ): void;
  rejectInvitation(
    args: RejectInvitationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RejectInvitationCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateMember(
    args: UpdateMemberCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateMemberCommandOutput>;
  updateMember(
    args: UpdateMemberCommandInput,
    cb: (err: any, data?: UpdateMemberCommandOutput) => void
  ): void;
  updateMember(
    args: UpdateMemberCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateMemberCommandOutput) => void
  ): void;
  updateNode(
    args: UpdateNodeCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateNodeCommandOutput>;
  updateNode(
    args: UpdateNodeCommandInput,
    cb: (err: any, data?: UpdateNodeCommandOutput) => void
  ): void;
  updateNode(
    args: UpdateNodeCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateNodeCommandOutput) => void
  ): void;
  voteOnProposal(
    args: VoteOnProposalCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<VoteOnProposalCommandOutput>;
  voteOnProposal(
    args: VoteOnProposalCommandInput,
    cb: (err: any, data?: VoteOnProposalCommandOutput) => void
  ): void;
  voteOnProposal(
    args: VoteOnProposalCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: VoteOnProposalCommandOutput) => void
  ): void;
}
export declare class ManagedBlockchain
  extends ManagedBlockchainClient
  implements ManagedBlockchain {}
