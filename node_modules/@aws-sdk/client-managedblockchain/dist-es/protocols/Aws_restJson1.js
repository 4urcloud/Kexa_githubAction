import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { ManagedBlockchainServiceException as __BaseException } from "../models/ManagedBlockchainServiceException";
import { AccessDeniedException, IllegalActionException, InternalServiceErrorException, InvalidRequestException, ResourceAlreadyExistsException, ResourceLimitExceededException, ResourceNotFoundException, ResourceNotReadyException, ThrottlingException, TooManyTagsException, } from "../models/models_0";
export const se_CreateAccessorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accessors");
    let body;
    body = JSON.stringify(take(input, {
        AccessorType: [],
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        NetworkType: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/networks/{NetworkId}/members");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        InvitationId: [],
        MemberConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/networks");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Framework: [],
        FrameworkConfiguration: (_) => _json(_),
        FrameworkVersion: [],
        MemberConfiguration: (_) => _json(_),
        Name: [],
        Tags: (_) => _json(_),
        VotingPolicy: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateNodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/networks/{NetworkId}/nodes");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        MemberId: [],
        NodeConfiguration: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProposalCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/networks/{NetworkId}/proposals");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Actions: (_) => _json(_),
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        MemberId: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAccessorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accessors/{AccessorId}");
    b.p("AccessorId", () => input.AccessorId, "{AccessorId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}/members/{MemberId}");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    b.p("MemberId", () => input.MemberId, "{MemberId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteNodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}/nodes/{NodeId}");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    b.p("NodeId", () => input.NodeId, "{NodeId}", false);
    const query = map({
        [_mI]: [, input[_MI]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetAccessorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accessors/{AccessorId}");
    b.p("AccessorId", () => input.AccessorId, "{AccessorId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}/members/{MemberId}");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    b.p("MemberId", () => input.MemberId, "{MemberId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetNodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}/nodes/{NodeId}");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    b.p("NodeId", () => input.NodeId, "{NodeId}", false);
    const query = map({
        [_mI]: [, input[_MI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetProposalCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}/proposals/{ProposalId}");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    b.p("ProposalId", () => input.ProposalId, "{ProposalId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListAccessorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accessors");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_nTe]: [, input[_NTe]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInvitationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/invitations");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMembersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}/members");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    const query = map({
        [_n]: [, input[_N]],
        [_s]: [, input[_S]],
        [_iO]: [() => input.IsOwned !== void 0, () => input[_IO].toString()],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListNetworksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks");
    const query = map({
        [_n]: [, input[_N]],
        [_f]: [, input[_F]],
        [_s]: [, input[_S]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListNodesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}/nodes");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    const query = map({
        [_mI]: [, input[_MI]],
        [_s]: [, input[_S]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProposalsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}/proposals");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProposalVotesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/networks/{NetworkId}/proposals/{ProposalId}/votes");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    b.p("ProposalId", () => input.ProposalId, "{ProposalId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_RejectInvitationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/invitations/{InvitationId}");
    b.p("InvitationId", () => input.InvitationId, "{InvitationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateMemberCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/networks/{NetworkId}/members/{MemberId}");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    b.p("MemberId", () => input.MemberId, "{MemberId}", false);
    let body;
    body = JSON.stringify(take(input, {
        LogPublishingConfiguration: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateNodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/networks/{NetworkId}/nodes/{NodeId}");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    b.p("NodeId", () => input.NodeId, "{NodeId}", false);
    let body;
    body = JSON.stringify(take(input, {
        LogPublishingConfiguration: (_) => _json(_),
        MemberId: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_VoteOnProposalCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/networks/{NetworkId}/proposals/{ProposalId}/votes");
    b.p("NetworkId", () => input.NetworkId, "{NetworkId}", false);
    b.p("ProposalId", () => input.ProposalId, "{ProposalId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Vote: [],
        VoterMemberId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CreateAccessorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccessorId: __expectString,
        BillingToken: __expectString,
        NetworkType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MemberId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateNetworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MemberId: __expectString,
        NetworkId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateNodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NodeId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProposalCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProposalId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAccessorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteNodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAccessorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Accessor: (_) => de_Accessor(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Member: (_) => de_Member(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNetworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Network: (_) => de_Network(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Node: (_) => de_Node(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetProposalCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Proposal: (_) => de_Proposal(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAccessorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Accessors: (_) => de_AccessorSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInvitationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Invitations: (_) => de_InvitationList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMembersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Members: (_) => de_MemberSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListNetworksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Networks: (_) => de_NetworkSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListNodesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Nodes: (_) => de_NodeSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProposalsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Proposals: (_) => de_ProposalSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProposalVotesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProposalVotes: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RejectInvitationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateMemberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateNodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_VoteOnProposalCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.managedblockchain#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServiceErrorException":
        case "com.amazonaws.managedblockchain#InternalServiceErrorException":
            throw await de_InternalServiceErrorExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.managedblockchain#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.managedblockchain#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceLimitExceededException":
        case "com.amazonaws.managedblockchain#ResourceLimitExceededException":
            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.managedblockchain#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.managedblockchain#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.managedblockchain#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.managedblockchain#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case "IllegalActionException":
        case "com.amazonaws.managedblockchain#IllegalActionException":
            throw await de_IllegalActionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_IllegalActionExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new IllegalActionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServiceErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {});
    Object.assign(contents, doc);
    const exception = new InternalServiceErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotReadyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {});
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_Accessor = (output, context) => {
    return take(output, {
        Arn: __expectString,
        BillingToken: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Id: __expectString,
        NetworkType: __expectString,
        Status: __expectString,
        Tags: _json,
        Type: __expectString,
    });
};
const de_AccessorSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Id: __expectString,
        NetworkType: __expectString,
        Status: __expectString,
        Type: __expectString,
    });
};
const de_AccessorSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessorSummary(entry, context);
    });
    return retVal;
};
const de_Invitation = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ExpirationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        InvitationId: __expectString,
        NetworkSummary: (_) => de_NetworkSummary(_, context),
        Status: __expectString,
    });
};
const de_InvitationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Invitation(entry, context);
    });
    return retVal;
};
const de_Member = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        FrameworkAttributes: _json,
        Id: __expectString,
        KmsKeyArn: __expectString,
        LogPublishingConfiguration: _json,
        Name: __expectString,
        NetworkId: __expectString,
        Status: __expectString,
        Tags: _json,
    });
};
const de_MemberSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Id: __expectString,
        IsOwned: __expectBoolean,
        Name: __expectString,
        Status: __expectString,
    });
};
const de_MemberSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MemberSummary(entry, context);
    });
    return retVal;
};
const de_Network = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Framework: __expectString,
        FrameworkAttributes: _json,
        FrameworkVersion: __expectString,
        Id: __expectString,
        Name: __expectString,
        Status: __expectString,
        Tags: _json,
        VotingPolicy: _json,
        VpcEndpointServiceName: __expectString,
    });
};
const de_NetworkSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        Framework: __expectString,
        FrameworkVersion: __expectString,
        Id: __expectString,
        Name: __expectString,
        Status: __expectString,
    });
};
const de_NetworkSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkSummary(entry, context);
    });
    return retVal;
};
const de_Node = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AvailabilityZone: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        FrameworkAttributes: _json,
        Id: __expectString,
        InstanceType: __expectString,
        KmsKeyArn: __expectString,
        LogPublishingConfiguration: _json,
        MemberId: __expectString,
        NetworkId: __expectString,
        StateDB: __expectString,
        Status: __expectString,
        Tags: _json,
    });
};
const de_NodeSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        AvailabilityZone: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Id: __expectString,
        InstanceType: __expectString,
        Status: __expectString,
    });
};
const de_NodeSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NodeSummary(entry, context);
    });
    return retVal;
};
const de_Proposal = (output, context) => {
    return take(output, {
        Actions: _json,
        Arn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        ExpirationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        NetworkId: __expectString,
        NoVoteCount: __expectInt32,
        OutstandingVoteCount: __expectInt32,
        ProposalId: __expectString,
        ProposedByMemberId: __expectString,
        ProposedByMemberName: __expectString,
        Status: __expectString,
        Tags: _json,
        YesVoteCount: __expectInt32,
    });
};
const de_ProposalSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        Description: __expectString,
        ExpirationDate: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        ProposalId: __expectString,
        ProposedByMemberId: __expectString,
        ProposedByMemberName: __expectString,
        Status: __expectString,
    });
};
const de_ProposalSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProposalSummary(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _F = "Framework";
const _IO = "IsOwned";
const _MI = "MemberId";
const _MR = "MaxResults";
const _N = "Name";
const _NT = "NextToken";
const _NTe = "NetworkType";
const _S = "Status";
const _TK = "TagKeys";
const _f = "framework";
const _iO = "isOwned";
const _mI = "memberId";
const _mR = "maxResults";
const _n = "name";
const _nT = "nextToken";
const _nTe = "networkType";
const _s = "status";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
