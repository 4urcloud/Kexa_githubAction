import { ACMPCAServiceException as __BaseException } from "./ACMPCAServiceException";
export const AccessMethodType = {
    CA_REPOSITORY: "CA_REPOSITORY",
    RESOURCE_PKI_MANIFEST: "RESOURCE_PKI_MANIFEST",
    RESOURCE_PKI_NOTIFY: "RESOURCE_PKI_NOTIFY",
};
export const KeyAlgorithm = {
    EC_prime256v1: "EC_prime256v1",
    EC_secp384r1: "EC_secp384r1",
    RSA_2048: "RSA_2048",
    RSA_4096: "RSA_4096",
};
export const SigningAlgorithm = {
    SHA256WITHECDSA: "SHA256WITHECDSA",
    SHA256WITHRSA: "SHA256WITHRSA",
    SHA384WITHECDSA: "SHA384WITHECDSA",
    SHA384WITHRSA: "SHA384WITHRSA",
    SHA512WITHECDSA: "SHA512WITHECDSA",
    SHA512WITHRSA: "SHA512WITHRSA",
};
export const CertificateAuthorityType = {
    ROOT: "ROOT",
    SUBORDINATE: "SUBORDINATE",
};
export const KeyStorageSecurityStandard = {
    FIPS_140_2_LEVEL_2_OR_HIGHER: "FIPS_140_2_LEVEL_2_OR_HIGHER",
    FIPS_140_2_LEVEL_3_OR_HIGHER: "FIPS_140_2_LEVEL_3_OR_HIGHER",
};
export const S3ObjectAcl = {
    BUCKET_OWNER_FULL_CONTROL: "BUCKET_OWNER_FULL_CONTROL",
    PUBLIC_READ: "PUBLIC_READ",
};
export const CertificateAuthorityUsageMode = {
    GENERAL_PURPOSE: "GENERAL_PURPOSE",
    SHORT_LIVED_CERTIFICATE: "SHORT_LIVED_CERTIFICATE",
};
export class InvalidArgsException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidArgsException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArgsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArgsException.prototype);
    }
}
export class InvalidPolicyException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidPolicyException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPolicyException.prototype);
    }
}
export class InvalidTagException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidTagException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export const AuditReportResponseFormat = {
    CSV: "CSV",
    JSON: "JSON",
};
export class InvalidArnException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidArnException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArnException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArnException.prototype);
    }
}
export class InvalidStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStateException.prototype);
    }
}
export class RequestFailedException extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestFailedException.prototype);
    }
}
export class RequestInProgressException extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestInProgressException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const ActionType = {
    GetCertificate: "GetCertificate",
    IssueCertificate: "IssueCertificate",
    ListPermissions: "ListPermissions",
};
export class PermissionAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "PermissionAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "PermissionAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PermissionAlreadyExistsException.prototype);
    }
}
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
export class LockoutPreventedException extends __BaseException {
    constructor(opts) {
        super({
            name: "LockoutPreventedException",
            $fault: "client",
            ...opts,
        });
        this.name = "LockoutPreventedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LockoutPreventedException.prototype);
    }
}
export const FailureReason = {
    OTHER: "OTHER",
    REQUEST_TIMED_OUT: "REQUEST_TIMED_OUT",
    UNSUPPORTED_ALGORITHM: "UNSUPPORTED_ALGORITHM",
};
export const CertificateAuthorityStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DISABLED: "DISABLED",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    PENDING_CERTIFICATE: "PENDING_CERTIFICATE",
};
export const AuditReportStatus = {
    CREATING: "CREATING",
    FAILED: "FAILED",
    SUCCESS: "SUCCESS",
};
export class CertificateMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "CertificateMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "CertificateMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CertificateMismatchException.prototype);
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export class MalformedCertificateException extends __BaseException {
    constructor(opts) {
        super({
            name: "MalformedCertificateException",
            $fault: "client",
            ...opts,
        });
        this.name = "MalformedCertificateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedCertificateException.prototype);
    }
}
export const PolicyQualifierId = {
    CPS: "CPS",
};
export const ExtendedKeyUsageType = {
    CERTIFICATE_TRANSPARENCY: "CERTIFICATE_TRANSPARENCY",
    CLIENT_AUTH: "CLIENT_AUTH",
    CODE_SIGNING: "CODE_SIGNING",
    DOCUMENT_SIGNING: "DOCUMENT_SIGNING",
    EMAIL_PROTECTION: "EMAIL_PROTECTION",
    OCSP_SIGNING: "OCSP_SIGNING",
    SERVER_AUTH: "SERVER_AUTH",
    SMART_CARD_LOGIN: "SMART_CARD_LOGIN",
    TIME_STAMPING: "TIME_STAMPING",
};
export const ValidityPeriodType = {
    ABSOLUTE: "ABSOLUTE",
    DAYS: "DAYS",
    END_DATE: "END_DATE",
    MONTHS: "MONTHS",
    YEARS: "YEARS",
};
export class MalformedCSRException extends __BaseException {
    constructor(opts) {
        super({
            name: "MalformedCSRException",
            $fault: "client",
            ...opts,
        });
        this.name = "MalformedCSRException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedCSRException.prototype);
    }
}
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
    }
}
export const ResourceOwner = {
    OTHER_ACCOUNTS: "OTHER_ACCOUNTS",
    SELF: "SELF",
};
export class RequestAlreadyProcessedException extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestAlreadyProcessedException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestAlreadyProcessedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestAlreadyProcessedException.prototype);
    }
}
export const RevocationReason = {
    AFFILIATION_CHANGED: "AFFILIATION_CHANGED",
    A_A_COMPROMISE: "A_A_COMPROMISE",
    CERTIFICATE_AUTHORITY_COMPROMISE: "CERTIFICATE_AUTHORITY_COMPROMISE",
    CESSATION_OF_OPERATION: "CESSATION_OF_OPERATION",
    KEY_COMPROMISE: "KEY_COMPROMISE",
    PRIVILEGE_WITHDRAWN: "PRIVILEGE_WITHDRAWN",
    SUPERSEDED: "SUPERSEDED",
    UNSPECIFIED: "UNSPECIFIED",
};
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
