import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { ACMPCAServiceException as __BaseException } from "../models/ACMPCAServiceException";
import { CertificateMismatchException, ConcurrentModificationException, InvalidArgsException, InvalidArnException, InvalidNextTokenException, InvalidPolicyException, InvalidRequestException, InvalidStateException, InvalidTagException, LimitExceededException, LockoutPreventedException, MalformedCertificateException, MalformedCSRException, PermissionAlreadyExistsException, RequestAlreadyProcessedException, RequestFailedException, RequestInProgressException, ResourceNotFoundException, TooManyTagsException, } from "../models/models_0";
export const se_CreateCertificateAuthorityCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCertificateAuthority");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCertificateAuthorityAuditReportCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCertificateAuthorityAuditReport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePermissionCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePermission");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCertificateAuthorityCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCertificateAuthority");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePermissionCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePermission");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCertificateAuthorityCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCertificateAuthority");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCertificateAuthorityAuditReportCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCertificateAuthorityAuditReport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("GetCertificate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCertificateAuthorityCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("GetCertificateAuthorityCertificate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCertificateAuthorityCsrCommand = async (input, context) => {
    const headers = sharedHeaders("GetCertificateAuthorityCsr");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportCertificateAuthorityCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("ImportCertificateAuthorityCertificate");
    let body;
    body = JSON.stringify(se_ImportCertificateAuthorityCertificateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_IssueCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("IssueCertificate");
    let body;
    body = JSON.stringify(se_IssueCertificateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCertificateAuthoritiesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCertificateAuthorities");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPermissionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPermissions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestoreCertificateAuthorityCommand = async (input, context) => {
    const headers = sharedHeaders("RestoreCertificateAuthority");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RevokeCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("RevokeCertificate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagCertificateAuthorityCommand = async (input, context) => {
    const headers = sharedHeaders("TagCertificateAuthority");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagCertificateAuthorityCommand = async (input, context) => {
    const headers = sharedHeaders("UntagCertificateAuthority");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCertificateAuthorityCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCertificateAuthority");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCertificateAuthorityAuditReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeletePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeletePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCertificateAuthorityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCertificateAuthorityAuditReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCertificateAuthorityAuditReportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCertificateAuthorityCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCertificateAuthorityCsrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportCertificateAuthorityCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_IssueCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCertificateAuthoritiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCertificateAuthoritiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPermissionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RestoreCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RevokeCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_TagCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UntagCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UpdateCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidArgsException":
        case "com.amazonaws.acmpca#InvalidArgsException":
            throw await de_InvalidArgsExceptionRes(parsedOutput, context);
        case "InvalidPolicyException":
        case "com.amazonaws.acmpca#InvalidPolicyException":
            throw await de_InvalidPolicyExceptionRes(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.acmpca#InvalidTagException":
            throw await de_InvalidTagExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.acmpca#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "InvalidArnException":
        case "com.amazonaws.acmpca#InvalidArnException":
            throw await de_InvalidArnExceptionRes(parsedOutput, context);
        case "InvalidStateException":
        case "com.amazonaws.acmpca#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput, context);
        case "RequestFailedException":
        case "com.amazonaws.acmpca#RequestFailedException":
            throw await de_RequestFailedExceptionRes(parsedOutput, context);
        case "RequestInProgressException":
        case "com.amazonaws.acmpca#RequestInProgressException":
            throw await de_RequestInProgressExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.acmpca#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "PermissionAlreadyExistsException":
        case "com.amazonaws.acmpca#PermissionAlreadyExistsException":
            throw await de_PermissionAlreadyExistsExceptionRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.acmpca#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "LockoutPreventedException":
        case "com.amazonaws.acmpca#LockoutPreventedException":
            throw await de_LockoutPreventedExceptionRes(parsedOutput, context);
        case "CertificateMismatchException":
        case "com.amazonaws.acmpca#CertificateMismatchException":
            throw await de_CertificateMismatchExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.acmpca#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "MalformedCertificateException":
        case "com.amazonaws.acmpca#MalformedCertificateException":
            throw await de_MalformedCertificateExceptionRes(parsedOutput, context);
        case "MalformedCSRException":
        case "com.amazonaws.acmpca#MalformedCSRException":
            throw await de_MalformedCSRExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.acmpca#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "RequestAlreadyProcessedException":
        case "com.amazonaws.acmpca#RequestAlreadyProcessedException":
            throw await de_RequestAlreadyProcessedExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.acmpca#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CertificateMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new CertificateMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidArgsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidArgsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidArnExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidArnException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTagExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LockoutPreventedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LockoutPreventedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MalformedCertificateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MalformedCertificateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MalformedCSRExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MalformedCSRException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PermissionAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new PermissionAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_RequestAlreadyProcessedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new RequestAlreadyProcessedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_RequestFailedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new RequestFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_RequestInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new RequestInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_ImportCertificateAuthorityCertificateRequest = (input, context) => {
    return take(input, {
        Certificate: context.base64Encoder,
        CertificateAuthorityArn: [],
        CertificateChain: context.base64Encoder,
    });
};
const se_IssueCertificateRequest = (input, context) => {
    return take(input, {
        ApiPassthrough: _json,
        CertificateAuthorityArn: [],
        Csr: context.base64Encoder,
        IdempotencyToken: [],
        SigningAlgorithm: [],
        TemplateArn: [],
        Validity: _json,
        ValidityNotBefore: _json,
    });
};
const de_CertificateAuthorities = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CertificateAuthority(entry, context);
    });
    return retVal;
};
const de_CertificateAuthority = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CertificateAuthorityConfiguration: _json,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        KeyStorageSecurityStandard: __expectString,
        LastStateChangeAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NotAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NotBefore: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OwnerAccount: __expectString,
        RestorableUntil: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RevocationConfiguration: _json,
        Serial: __expectString,
        Status: __expectString,
        Type: __expectString,
        UsageMode: __expectString,
    });
};
const de_DescribeCertificateAuthorityAuditReportResponse = (output, context) => {
    return take(output, {
        AuditReportStatus: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        S3BucketName: __expectString,
        S3Key: __expectString,
    });
};
const de_DescribeCertificateAuthorityResponse = (output, context) => {
    return take(output, {
        CertificateAuthority: (_) => de_CertificateAuthority(_, context),
    });
};
const de_ListCertificateAuthoritiesResponse = (output, context) => {
    return take(output, {
        CertificateAuthorities: (_) => de_CertificateAuthorities(_, context),
        NextToken: __expectString,
    });
};
const de_ListPermissionsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Permissions: (_) => de_PermissionList(_, context),
    });
};
const de_Permission = (output, context) => {
    return take(output, {
        Actions: _json,
        CertificateAuthorityArn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Policy: __expectString,
        Principal: __expectString,
        SourceAccount: __expectString,
    });
};
const de_PermissionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Permission(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `ACMPrivateCA.${operation}`,
    };
}
