"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Operation = exports.GeneratedCodeJobState = exports.DeploymentState = exports.ResultCode = exports.DeploymentAction = exports.StageState = exports.ResourceNotFoundException = exports.ValidationException = exports.ThrottlingException = exports.ServiceQuotaExceededException = exports.InternalServerException = exports.GameState = exports.ConflictException = exports.AccessDeniedException = void 0;
const GameSparksServiceException_1 = require("./GameSparksServiceException");
class AccessDeniedException extends GameSparksServiceException_1.GameSparksServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
class ConflictException extends GameSparksServiceException_1.GameSparksServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
exports.GameState = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
};
class InternalServerException extends GameSparksServiceException_1.GameSparksServiceException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServerException = InternalServerException;
class ServiceQuotaExceededException extends GameSparksServiceException_1.GameSparksServiceException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
class ThrottlingException extends GameSparksServiceException_1.GameSparksServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
exports.ThrottlingException = ThrottlingException;
class ValidationException extends GameSparksServiceException_1.GameSparksServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ValidationException = ValidationException;
class ResourceNotFoundException extends GameSparksServiceException_1.GameSparksServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.StageState = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
};
exports.DeploymentAction = {
    DEPLOY: "DEPLOY",
    UNDEPLOY: "UNDEPLOY",
};
exports.ResultCode = {
    INVALID_ROLE_FAILURE: "INVALID_ROLE_FAILURE",
    SUCCESS: "SUCCESS",
    UNSPECIFIED_FAILURE: "UNSPECIFIED_FAILURE",
};
exports.DeploymentState = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
};
exports.GeneratedCodeJobState = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
};
exports.Operation = {
    ADD: "ADD",
    REMOVE: "REMOVE",
    REPLACE: "REPLACE",
};
