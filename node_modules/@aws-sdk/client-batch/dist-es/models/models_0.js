import { BatchServiceException as __BaseException } from "./BatchServiceException";
export const ArrayJobDependency = {
    N_TO_N: "N_TO_N",
    SEQUENTIAL: "SEQUENTIAL",
};
export const AssignPublicIp = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export class ClientException extends __BaseException {
    constructor(opts) {
        super({
            name: "ClientException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClientException.prototype);
    }
}
export class ServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServerException.prototype);
    }
}
export const CRAllocationStrategy = {
    BEST_FIT: "BEST_FIT",
    BEST_FIT_PROGRESSIVE: "BEST_FIT_PROGRESSIVE",
    SPOT_CAPACITY_OPTIMIZED: "SPOT_CAPACITY_OPTIMIZED",
    SPOT_PRICE_CAPACITY_OPTIMIZED: "SPOT_PRICE_CAPACITY_OPTIMIZED",
};
export const CRType = {
    EC2: "EC2",
    FARGATE: "FARGATE",
    FARGATE_SPOT: "FARGATE_SPOT",
    SPOT: "SPOT",
};
export const CEState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const CEType = {
    MANAGED: "MANAGED",
    UNMANAGED: "UNMANAGED",
};
export const JobStateTimeLimitActionsAction = {
    CANCEL: "CANCEL",
};
export const JobStateTimeLimitActionsState = {
    RUNNABLE: "RUNNABLE",
};
export const JQState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const OrchestrationType = {
    ECS: "ECS",
    EKS: "EKS",
};
export const CEStatus = {
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETING: "DELETING",
    INVALID: "INVALID",
    UPDATING: "UPDATING",
    VALID: "VALID",
};
export const DeviceCgroupPermission = {
    MKNOD: "MKNOD",
    READ: "READ",
    WRITE: "WRITE",
};
export const LogDriver = {
    AWSLOGS: "awslogs",
    FLUENTD: "fluentd",
    GELF: "gelf",
    JOURNALD: "journald",
    JSON_FILE: "json-file",
    SPLUNK: "splunk",
    SYSLOG: "syslog",
};
export const ResourceType = {
    GPU: "GPU",
    MEMORY: "MEMORY",
    VCPU: "VCPU",
};
export const EFSAuthorizationConfigIAM = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const EFSTransitEncryption = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const PlatformCapability = {
    EC2: "EC2",
    FARGATE: "FARGATE",
};
export const RetryAction = {
    EXIT: "EXIT",
    RETRY: "RETRY",
};
export const JQStatus = {
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETING: "DELETING",
    INVALID: "INVALID",
    UPDATING: "UPDATING",
    VALID: "VALID",
};
export const JobStatus = {
    FAILED: "FAILED",
    PENDING: "PENDING",
    RUNNABLE: "RUNNABLE",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    SUBMITTED: "SUBMITTED",
    SUCCEEDED: "SUCCEEDED",
};
export const JobDefinitionType = {
    Container: "container",
    Multinode: "multinode",
};
export const CRUpdateAllocationStrategy = {
    BEST_FIT_PROGRESSIVE: "BEST_FIT_PROGRESSIVE",
    SPOT_CAPACITY_OPTIMIZED: "SPOT_CAPACITY_OPTIMIZED",
    SPOT_PRICE_CAPACITY_OPTIMIZED: "SPOT_PRICE_CAPACITY_OPTIMIZED",
};
