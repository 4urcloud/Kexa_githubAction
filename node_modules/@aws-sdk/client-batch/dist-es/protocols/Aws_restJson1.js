import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, map, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { BatchServiceException as __BaseException } from "../models/BatchServiceException";
import { ClientException, ServerException, } from "../models/models_0";
export const se_CancelJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/canceljob");
    let body;
    body = JSON.stringify(take(input, {
        jobId: [],
        reason: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateComputeEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/createcomputeenvironment");
    let body;
    body = JSON.stringify(take(input, {
        computeEnvironmentName: [],
        computeResources: (_) => _json(_),
        eksConfiguration: (_) => _json(_),
        serviceRole: [],
        state: [],
        tags: (_) => _json(_),
        type: [],
        unmanagedvCpus: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateJobQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/createjobqueue");
    let body;
    body = JSON.stringify(take(input, {
        computeEnvironmentOrder: (_) => _json(_),
        jobQueueName: [],
        priority: [],
        schedulingPolicyArn: [],
        state: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSchedulingPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/createschedulingpolicy");
    let body;
    body = JSON.stringify(take(input, {
        fairsharePolicy: (_) => se_FairsharePolicy(_, context),
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteComputeEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/deletecomputeenvironment");
    let body;
    body = JSON.stringify(take(input, {
        computeEnvironment: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteJobQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/deletejobqueue");
    let body;
    body = JSON.stringify(take(input, {
        jobQueue: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteSchedulingPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/deleteschedulingpolicy");
    let body;
    body = JSON.stringify(take(input, {
        arn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeregisterJobDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/deregisterjobdefinition");
    let body;
    body = JSON.stringify(take(input, {
        jobDefinition: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeComputeEnvironmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/describecomputeenvironments");
    let body;
    body = JSON.stringify(take(input, {
        computeEnvironments: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeJobDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/describejobdefinitions");
    let body;
    body = JSON.stringify(take(input, {
        jobDefinitionName: [],
        jobDefinitions: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        status: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeJobQueuesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/describejobqueues");
    let body;
    body = JSON.stringify(take(input, {
        jobQueues: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/describejobs");
    let body;
    body = JSON.stringify(take(input, {
        jobs: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeSchedulingPoliciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/describeschedulingpolicies");
    let body;
    body = JSON.stringify(take(input, {
        arns: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/listjobs");
    let body;
    body = JSON.stringify(take(input, {
        arrayJobId: [],
        filters: (_) => _json(_),
        jobQueue: [],
        jobStatus: [],
        maxResults: [],
        multiNodeJobId: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListSchedulingPoliciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/listschedulingpolicies");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_RegisterJobDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/registerjobdefinition");
    let body;
    body = JSON.stringify(take(input, {
        containerProperties: (_) => _json(_),
        ecsProperties: (_) => _json(_),
        eksProperties: (_) => _json(_),
        jobDefinitionName: [],
        nodeProperties: (_) => se_NodeProperties(_, context),
        parameters: (_) => _json(_),
        platformCapabilities: (_) => _json(_),
        propagateTags: [],
        retryStrategy: (_) => _json(_),
        schedulingPriority: [],
        tags: (_) => _json(_),
        timeout: (_) => _json(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SubmitJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/submitjob");
    let body;
    body = JSON.stringify(take(input, {
        arrayProperties: (_) => _json(_),
        containerOverrides: (_) => _json(_),
        dependsOn: (_) => _json(_),
        ecsPropertiesOverride: (_) => _json(_),
        eksPropertiesOverride: (_) => _json(_),
        jobDefinition: [],
        jobName: [],
        jobQueue: [],
        nodeOverrides: (_) => _json(_),
        parameters: (_) => _json(_),
        propagateTags: [],
        retryStrategy: (_) => _json(_),
        schedulingPriorityOverride: [],
        shareIdentifier: [],
        tags: (_) => _json(_),
        timeout: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TerminateJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/terminatejob");
    let body;
    body = JSON.stringify(take(input, {
        jobId: [],
        reason: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateComputeEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/updatecomputeenvironment");
    let body;
    body = JSON.stringify(take(input, {
        computeEnvironment: [],
        computeResources: (_) => _json(_),
        serviceRole: [],
        state: [],
        unmanagedvCpus: [],
        updatePolicy: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateJobQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/updatejobqueue");
    let body;
    body = JSON.stringify(take(input, {
        computeEnvironmentOrder: (_) => _json(_),
        jobQueue: [],
        priority: [],
        schedulingPolicyArn: [],
        state: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateSchedulingPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/updateschedulingpolicy");
    let body;
    body = JSON.stringify(take(input, {
        arn: [],
        fairsharePolicy: (_) => se_FairsharePolicy(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CancelJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateComputeEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        computeEnvironmentArn: __expectString,
        computeEnvironmentName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateJobQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobQueueArn: __expectString,
        jobQueueName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSchedulingPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteComputeEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteJobQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSchedulingPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeregisterJobDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeComputeEnvironmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        computeEnvironments: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobDefinitions: (_) => de_JobDefinitionList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeJobQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobQueues: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobs: (_) => de_JobDetailList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeSchedulingPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        schedulingPolicies: (_) => de_SchedulingPolicyDetailList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobSummaryList: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSchedulingPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        schedulingPolicies: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RegisterJobDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobDefinitionArn: __expectString,
        jobDefinitionName: __expectString,
        revision: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SubmitJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobArn: __expectString,
        jobId: __expectString,
        jobName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TerminateJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateComputeEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        computeEnvironmentArn: __expectString,
        computeEnvironmentName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateJobQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobQueueArn: __expectString,
        jobQueueName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSchedulingPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ClientException":
        case "com.amazonaws.batch#ClientException":
            throw await de_ClientExceptionRes(parsedOutput, context);
        case "ServerException":
        case "com.amazonaws.batch#ServerException":
            throw await de_ServerExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_ClientExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_FairsharePolicy = (input, context) => {
    return take(input, {
        computeReservation: [],
        shareDecaySeconds: [],
        shareDistribution: (_) => se_ShareAttributesList(_, context),
    });
};
const se_NodeProperties = (input, context) => {
    return take(input, {
        mainNode: [],
        nodeRangeProperties: (_) => se_NodeRangeProperties(_, context),
        numNodes: [],
    });
};
const se_NodeRangeProperties = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return _json(entry);
    });
};
const se_ShareAttributes = (input, context) => {
    return take(input, {
        shareIdentifier: [],
        weightFactor: __serializeFloat,
    });
};
const se_ShareAttributesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ShareAttributes(entry, context);
    });
};
const de_FairsharePolicy = (output, context) => {
    return take(output, {
        computeReservation: __expectInt32,
        shareDecaySeconds: __expectInt32,
        shareDistribution: (_) => de_ShareAttributesList(_, context),
    });
};
const de_JobDefinition = (output, context) => {
    return take(output, {
        containerOrchestrationType: __expectString,
        containerProperties: _json,
        ecsProperties: _json,
        eksProperties: _json,
        jobDefinitionArn: __expectString,
        jobDefinitionName: __expectString,
        nodeProperties: (_) => de_NodeProperties(_, context),
        parameters: _json,
        platformCapabilities: _json,
        propagateTags: __expectBoolean,
        retryStrategy: _json,
        revision: __expectInt32,
        schedulingPriority: __expectInt32,
        status: __expectString,
        tags: _json,
        timeout: _json,
        type: __expectString,
    });
};
const de_JobDefinitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobDefinition(entry, context);
    });
    return retVal;
};
const de_JobDetail = (output, context) => {
    return take(output, {
        arrayProperties: _json,
        attempts: _json,
        container: _json,
        createdAt: __expectLong,
        dependsOn: _json,
        ecsProperties: _json,
        eksAttempts: _json,
        eksProperties: _json,
        isCancelled: __expectBoolean,
        isTerminated: __expectBoolean,
        jobArn: __expectString,
        jobDefinition: __expectString,
        jobId: __expectString,
        jobName: __expectString,
        jobQueue: __expectString,
        nodeDetails: _json,
        nodeProperties: (_) => de_NodeProperties(_, context),
        parameters: _json,
        platformCapabilities: _json,
        propagateTags: __expectBoolean,
        retryStrategy: _json,
        schedulingPriority: __expectInt32,
        shareIdentifier: __expectString,
        startedAt: __expectLong,
        status: __expectString,
        statusReason: __expectString,
        stoppedAt: __expectLong,
        tags: _json,
        timeout: _json,
    });
};
const de_JobDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobDetail(entry, context);
    });
    return retVal;
};
const de_NodeProperties = (output, context) => {
    return take(output, {
        mainNode: __expectInt32,
        nodeRangeProperties: (_) => de_NodeRangeProperties(_, context),
        numNodes: __expectInt32,
    });
};
const de_NodeRangeProperties = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return _json(entry);
    });
    return retVal;
};
const de_SchedulingPolicyDetail = (output, context) => {
    return take(output, {
        arn: __expectString,
        fairsharePolicy: (_) => de_FairsharePolicy(_, context),
        name: __expectString,
        tags: _json,
    });
};
const de_SchedulingPolicyDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SchedulingPolicyDetail(entry, context);
    });
    return retVal;
};
const de_ShareAttributes = (output, context) => {
    return take(output, {
        shareIdentifier: __expectString,
        weightFactor: __limitedParseFloat32,
    });
};
const de_ShareAttributesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ShareAttributes(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
