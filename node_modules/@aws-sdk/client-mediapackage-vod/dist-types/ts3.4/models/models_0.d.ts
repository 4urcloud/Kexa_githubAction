import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { MediaPackageVodServiceException as __BaseException } from "./MediaPackageVodServiceException";
export declare const __PeriodTriggersElement: {
  readonly ADS: "ADS";
};
export type __PeriodTriggersElement =
  (typeof __PeriodTriggersElement)[keyof typeof __PeriodTriggersElement];
export interface AssetShallow {
  Arn?: string;
  CreatedAt?: string;
  Id?: string;
  PackagingGroupId?: string;
  ResourceId?: string;
  SourceArn?: string;
  SourceRoleArn?: string;
  Tags?: Record<string, string>;
}
export declare const ManifestLayout: {
  readonly COMPACT: "COMPACT";
  readonly FULL: "FULL";
};
export type ManifestLayout =
  (typeof ManifestLayout)[keyof typeof ManifestLayout];
export declare const Profile: {
  readonly HBBTV_1_5: "HBBTV_1_5";
  readonly NONE: "NONE";
};
export type Profile = (typeof Profile)[keyof typeof Profile];
export declare const ScteMarkersSource: {
  readonly MANIFEST: "MANIFEST";
  readonly SEGMENTS: "SEGMENTS";
};
export type ScteMarkersSource =
  (typeof ScteMarkersSource)[keyof typeof ScteMarkersSource];
export declare const StreamOrder: {
  readonly ORIGINAL: "ORIGINAL";
  readonly VIDEO_BITRATE_ASCENDING: "VIDEO_BITRATE_ASCENDING";
  readonly VIDEO_BITRATE_DESCENDING: "VIDEO_BITRATE_DESCENDING";
};
export type StreamOrder = (typeof StreamOrder)[keyof typeof StreamOrder];
export interface StreamSelection {
  MaxVideoBitsPerSecond?: number;
  MinVideoBitsPerSecond?: number;
  StreamOrder?: StreamOrder;
}
export interface DashManifest {
  ManifestLayout?: ManifestLayout;
  ManifestName?: string;
  MinBufferTimeSeconds?: number;
  Profile?: Profile;
  ScteMarkersSource?: ScteMarkersSource;
  StreamSelection?: StreamSelection;
}
export interface EgressEndpoint {
  PackagingConfigurationId?: string;
  Status?: string;
  Url?: string;
}
export declare const AdMarkers: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
  readonly SCTE35_ENHANCED: "SCTE35_ENHANCED";
};
export type AdMarkers = (typeof AdMarkers)[keyof typeof AdMarkers];
export interface HlsManifest {
  AdMarkers?: AdMarkers;
  IncludeIframeOnlyStream?: boolean;
  ManifestName?: string;
  ProgramDateTimeIntervalSeconds?: number;
  RepeatExtXKey?: boolean;
  StreamSelection?: StreamSelection;
}
export interface MssManifest {
  ManifestName?: string;
  StreamSelection?: StreamSelection;
}
export declare const PresetSpeke20Audio: {
  readonly PRESET_AUDIO_1: "PRESET-AUDIO-1";
  readonly PRESET_AUDIO_2: "PRESET-AUDIO-2";
  readonly PRESET_AUDIO_3: "PRESET-AUDIO-3";
  readonly SHARED: "SHARED";
  readonly UNENCRYPTED: "UNENCRYPTED";
};
export type PresetSpeke20Audio =
  (typeof PresetSpeke20Audio)[keyof typeof PresetSpeke20Audio];
export declare const PresetSpeke20Video: {
  readonly PRESET_VIDEO_1: "PRESET-VIDEO-1";
  readonly PRESET_VIDEO_2: "PRESET-VIDEO-2";
  readonly PRESET_VIDEO_3: "PRESET-VIDEO-3";
  readonly PRESET_VIDEO_4: "PRESET-VIDEO-4";
  readonly PRESET_VIDEO_5: "PRESET-VIDEO-5";
  readonly PRESET_VIDEO_6: "PRESET-VIDEO-6";
  readonly PRESET_VIDEO_7: "PRESET-VIDEO-7";
  readonly PRESET_VIDEO_8: "PRESET-VIDEO-8";
  readonly SHARED: "SHARED";
  readonly UNENCRYPTED: "UNENCRYPTED";
};
export type PresetSpeke20Video =
  (typeof PresetSpeke20Video)[keyof typeof PresetSpeke20Video];
export interface EncryptionContractConfiguration {
  PresetSpeke20Audio: PresetSpeke20Audio | undefined;
  PresetSpeke20Video: PresetSpeke20Video | undefined;
}
export interface SpekeKeyProvider {
  EncryptionContractConfiguration?: EncryptionContractConfiguration;
  RoleArn: string | undefined;
  SystemIds: string[] | undefined;
  Url: string | undefined;
}
export interface CmafEncryption {
  ConstantInitializationVector?: string;
  SpekeKeyProvider: SpekeKeyProvider | undefined;
}
export interface CmafPackage {
  Encryption?: CmafEncryption;
  HlsManifests: HlsManifest[] | undefined;
  IncludeEncoderConfigurationInSegments?: boolean;
  SegmentDurationSeconds?: number;
}
export interface DashEncryption {
  SpekeKeyProvider: SpekeKeyProvider | undefined;
}
export declare const SegmentTemplateFormat: {
  readonly NUMBER_WITH_DURATION: "NUMBER_WITH_DURATION";
  readonly NUMBER_WITH_TIMELINE: "NUMBER_WITH_TIMELINE";
  readonly TIME_WITH_TIMELINE: "TIME_WITH_TIMELINE";
};
export type SegmentTemplateFormat =
  (typeof SegmentTemplateFormat)[keyof typeof SegmentTemplateFormat];
export interface DashPackage {
  DashManifests: DashManifest[] | undefined;
  Encryption?: DashEncryption;
  IncludeEncoderConfigurationInSegments?: boolean;
  IncludeIframeOnlyStream?: boolean;
  PeriodTriggers?: __PeriodTriggersElement[];
  SegmentDurationSeconds?: number;
  SegmentTemplateFormat?: SegmentTemplateFormat;
}
export declare const EncryptionMethod: {
  readonly AES_128: "AES_128";
  readonly SAMPLE_AES: "SAMPLE_AES";
};
export type EncryptionMethod =
  (typeof EncryptionMethod)[keyof typeof EncryptionMethod];
export interface HlsEncryption {
  ConstantInitializationVector?: string;
  EncryptionMethod?: EncryptionMethod;
  SpekeKeyProvider: SpekeKeyProvider | undefined;
}
export interface HlsPackage {
  Encryption?: HlsEncryption;
  HlsManifests: HlsManifest[] | undefined;
  IncludeDvbSubtitles?: boolean;
  SegmentDurationSeconds?: number;
  UseAudioRenditionGroup?: boolean;
}
export interface MssEncryption {
  SpekeKeyProvider: SpekeKeyProvider | undefined;
}
export interface MssPackage {
  Encryption?: MssEncryption;
  MssManifests: MssManifest[] | undefined;
  SegmentDurationSeconds?: number;
}
export interface PackagingConfiguration {
  Arn?: string;
  CmafPackage?: CmafPackage;
  CreatedAt?: string;
  DashPackage?: DashPackage;
  HlsPackage?: HlsPackage;
  Id?: string;
  MssPackage?: MssPackage;
  PackagingGroupId?: string;
  Tags?: Record<string, string>;
}
export interface Authorization {
  CdnIdentifierSecret: string | undefined;
  SecretsRoleArn: string | undefined;
}
export interface EgressAccessLogs {
  LogGroupName?: string;
}
export interface PackagingGroup {
  ApproximateAssetCount?: number;
  Arn?: string;
  Authorization?: Authorization;
  CreatedAt?: string;
  DomainName?: string;
  EgressAccessLogs?: EgressAccessLogs;
  Id?: string;
  Tags?: Record<string, string>;
}
export interface ConfigureLogsRequest {
  EgressAccessLogs?: EgressAccessLogs;
  Id: string | undefined;
}
export interface ConfigureLogsResponse {
  Arn?: string;
  Authorization?: Authorization;
  CreatedAt?: string;
  DomainName?: string;
  EgressAccessLogs?: EgressAccessLogs;
  Id?: string;
  Tags?: Record<string, string>;
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export declare class UnprocessableEntityException extends __BaseException {
  readonly name: "UnprocessableEntityException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<UnprocessableEntityException, __BaseException>
  );
}
export interface CreateAssetRequest {
  Id: string | undefined;
  PackagingGroupId: string | undefined;
  ResourceId?: string;
  SourceArn: string | undefined;
  SourceRoleArn: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateAssetResponse {
  Arn?: string;
  CreatedAt?: string;
  EgressEndpoints?: EgressEndpoint[];
  Id?: string;
  PackagingGroupId?: string;
  ResourceId?: string;
  SourceArn?: string;
  SourceRoleArn?: string;
  Tags?: Record<string, string>;
}
export interface CreatePackagingConfigurationRequest {
  CmafPackage?: CmafPackage;
  DashPackage?: DashPackage;
  HlsPackage?: HlsPackage;
  Id: string | undefined;
  MssPackage?: MssPackage;
  PackagingGroupId: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreatePackagingConfigurationResponse {
  Arn?: string;
  CmafPackage?: CmafPackage;
  CreatedAt?: string;
  DashPackage?: DashPackage;
  HlsPackage?: HlsPackage;
  Id?: string;
  MssPackage?: MssPackage;
  PackagingGroupId?: string;
  Tags?: Record<string, string>;
}
export interface CreatePackagingGroupRequest {
  Authorization?: Authorization;
  EgressAccessLogs?: EgressAccessLogs;
  Id: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreatePackagingGroupResponse {
  Arn?: string;
  Authorization?: Authorization;
  CreatedAt?: string;
  DomainName?: string;
  EgressAccessLogs?: EgressAccessLogs;
  Id?: string;
  Tags?: Record<string, string>;
}
export interface DeleteAssetRequest {
  Id: string | undefined;
}
export interface DeleteAssetResponse {}
export interface DeletePackagingConfigurationRequest {
  Id: string | undefined;
}
export interface DeletePackagingConfigurationResponse {}
export interface DeletePackagingGroupRequest {
  Id: string | undefined;
}
export interface DeletePackagingGroupResponse {}
export interface DescribeAssetRequest {
  Id: string | undefined;
}
export interface DescribeAssetResponse {
  Arn?: string;
  CreatedAt?: string;
  EgressEndpoints?: EgressEndpoint[];
  Id?: string;
  PackagingGroupId?: string;
  ResourceId?: string;
  SourceArn?: string;
  SourceRoleArn?: string;
  Tags?: Record<string, string>;
}
export interface DescribePackagingConfigurationRequest {
  Id: string | undefined;
}
export interface DescribePackagingConfigurationResponse {
  Arn?: string;
  CmafPackage?: CmafPackage;
  CreatedAt?: string;
  DashPackage?: DashPackage;
  HlsPackage?: HlsPackage;
  Id?: string;
  MssPackage?: MssPackage;
  PackagingGroupId?: string;
  Tags?: Record<string, string>;
}
export interface DescribePackagingGroupRequest {
  Id: string | undefined;
}
export interface DescribePackagingGroupResponse {
  ApproximateAssetCount?: number;
  Arn?: string;
  Authorization?: Authorization;
  CreatedAt?: string;
  DomainName?: string;
  EgressAccessLogs?: EgressAccessLogs;
  Id?: string;
  Tags?: Record<string, string>;
}
export interface ListAssetsRequest {
  MaxResults?: number;
  NextToken?: string;
  PackagingGroupId?: string;
}
export interface ListAssetsResponse {
  Assets?: AssetShallow[];
  NextToken?: string;
}
export interface ListPackagingConfigurationsRequest {
  MaxResults?: number;
  NextToken?: string;
  PackagingGroupId?: string;
}
export interface ListPackagingConfigurationsResponse {
  NextToken?: string;
  PackagingConfigurations?: PackagingConfiguration[];
}
export interface ListPackagingGroupsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListPackagingGroupsResponse {
  NextToken?: string;
  PackagingGroups?: PackagingGroup[];
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UpdatePackagingGroupRequest {
  Authorization?: Authorization;
  Id: string | undefined;
}
export interface UpdatePackagingGroupResponse {
  ApproximateAssetCount?: number;
  Arn?: string;
  Authorization?: Authorization;
  CreatedAt?: string;
  DomainName?: string;
  EgressAccessLogs?: EgressAccessLogs;
  Id?: string;
  Tags?: Record<string, string>;
}
