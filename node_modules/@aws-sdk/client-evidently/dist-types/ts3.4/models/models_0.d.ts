import {
  ExceptionOptionType as __ExceptionOptionType,
  LazyJsonString as __LazyJsonString,
} from "@smithy/smithy-client";
import { EvidentlyServiceException as __BaseException } from "./EvidentlyServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface EvaluationRequest {
  feature: string | undefined;
  entityId: string | undefined;
  evaluationContext?: __LazyJsonString | string;
}
export interface BatchEvaluateFeatureRequest {
  project: string | undefined;
  requests: EvaluationRequest[] | undefined;
}
export type VariableValue =
  | VariableValue.BoolValueMember
  | VariableValue.DoubleValueMember
  | VariableValue.LongValueMember
  | VariableValue.StringValueMember
  | VariableValue.$UnknownMember;
export declare namespace VariableValue {
  interface BoolValueMember {
    boolValue: boolean;
    stringValue?: never;
    longValue?: never;
    doubleValue?: never;
    $unknown?: never;
  }
  interface StringValueMember {
    boolValue?: never;
    stringValue: string;
    longValue?: never;
    doubleValue?: never;
    $unknown?: never;
  }
  interface LongValueMember {
    boolValue?: never;
    stringValue?: never;
    longValue: number;
    doubleValue?: never;
    $unknown?: never;
  }
  interface DoubleValueMember {
    boolValue?: never;
    stringValue?: never;
    longValue?: never;
    doubleValue: number;
    $unknown?: never;
  }
  interface $UnknownMember {
    boolValue?: never;
    stringValue?: never;
    longValue?: never;
    doubleValue?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    boolValue: (value: boolean) => T;
    stringValue: (value: string) => T;
    longValue: (value: number) => T;
    doubleValue: (value: number) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: VariableValue, visitor: Visitor<T>) => T;
}
export interface EvaluationResult {
  project?: string;
  feature: string | undefined;
  variation?: string;
  value?: VariableValue;
  entityId: string | undefined;
  reason?: string;
  details?: __LazyJsonString | string;
}
export interface BatchEvaluateFeatureResponse {
  results?: EvaluationResult[];
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceId?: string;
  resourceType?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  serviceCode?: string;
  quotaCode?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "cannotParse";
  readonly FIELD_VALIDATION_FAILED: "fieldValidationFailed";
  readonly OTHER: "other";
  readonly UNKNOWN_OPERATION: "unknownOperation";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  reason?: ValidationExceptionReason;
  fieldList?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const ChangeDirectionEnum: {
  readonly DECREASE: "DECREASE";
  readonly INCREASE: "INCREASE";
};
export type ChangeDirectionEnum =
  (typeof ChangeDirectionEnum)[keyof typeof ChangeDirectionEnum];
export interface CloudWatchLogsDestination {
  logGroup?: string;
}
export interface CloudWatchLogsDestinationConfig {
  logGroup?: string;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  resourceId?: string;
  resourceType?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface MetricDefinitionConfig {
  name: string | undefined;
  entityIdKey: string | undefined;
  valueKey: string | undefined;
  eventPattern?: __LazyJsonString | string;
  unitLabel?: string;
}
export interface MetricGoalConfig {
  metricDefinition: MetricDefinitionConfig | undefined;
  desiredChange?: ChangeDirectionEnum;
}
export interface OnlineAbConfig {
  controlTreatmentName?: string;
  treatmentWeights?: Record<string, number>;
}
export interface TreatmentConfig {
  name: string | undefined;
  description?: string;
  feature: string | undefined;
  variation: string | undefined;
}
export interface CreateExperimentRequest {
  project: string | undefined;
  name: string | undefined;
  description?: string;
  treatments: TreatmentConfig[] | undefined;
  metricGoals: MetricGoalConfig[] | undefined;
  randomizationSalt?: string;
  samplingRate?: number;
  onlineAbConfig?: OnlineAbConfig;
  segment?: string;
  tags?: Record<string, string>;
}
export interface ExperimentExecution {
  startedTime?: Date;
  endedTime?: Date;
}
export interface MetricDefinition {
  name?: string;
  entityIdKey?: string;
  valueKey?: string;
  eventPattern?: __LazyJsonString | string;
  unitLabel?: string;
}
export interface MetricGoal {
  metricDefinition: MetricDefinition | undefined;
  desiredChange?: ChangeDirectionEnum;
}
export interface OnlineAbDefinition {
  controlTreatmentName?: string;
  treatmentWeights?: Record<string, number>;
}
export interface ExperimentSchedule {
  analysisCompleteTime?: Date;
}
export declare const ExperimentStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly CREATED: "CREATED";
  readonly RUNNING: "RUNNING";
  readonly UPDATING: "UPDATING";
};
export type ExperimentStatus =
  (typeof ExperimentStatus)[keyof typeof ExperimentStatus];
export interface Treatment {
  name: string | undefined;
  description?: string;
  featureVariations?: Record<string, string>;
}
export declare const ExperimentType: {
  readonly ONLINE_AB_EXPERIMENT: "aws.evidently.onlineab";
};
export type ExperimentType =
  (typeof ExperimentType)[keyof typeof ExperimentType];
export interface Experiment {
  arn: string | undefined;
  name: string | undefined;
  project?: string;
  status: ExperimentStatus | undefined;
  statusReason?: string;
  description?: string;
  createdTime: Date | undefined;
  lastUpdatedTime: Date | undefined;
  schedule?: ExperimentSchedule;
  execution?: ExperimentExecution;
  treatments?: Treatment[];
  metricGoals?: MetricGoal[];
  randomizationSalt?: string;
  samplingRate?: number;
  segment?: string;
  type: ExperimentType | undefined;
  onlineAbDefinition?: OnlineAbDefinition;
  tags?: Record<string, string>;
}
export interface CreateExperimentResponse {
  experiment: Experiment | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  resourceId?: string;
  resourceType?: string;
  serviceCode?: string;
  quotaCode?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare const FeatureEvaluationStrategy: {
  readonly ALL_RULES: "ALL_RULES";
  readonly DEFAULT_VARIATION: "DEFAULT_VARIATION";
};
export type FeatureEvaluationStrategy =
  (typeof FeatureEvaluationStrategy)[keyof typeof FeatureEvaluationStrategy];
export interface VariationConfig {
  name: string | undefined;
  value: VariableValue | undefined;
}
export interface CreateFeatureRequest {
  project: string | undefined;
  name: string | undefined;
  evaluationStrategy?: FeatureEvaluationStrategy;
  description?: string;
  variations: VariationConfig[] | undefined;
  defaultVariation?: string;
  tags?: Record<string, string>;
  entityOverrides?: Record<string, string>;
}
export interface EvaluationRule {
  name?: string;
  type: string | undefined;
}
export declare const FeatureStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly UPDATING: "UPDATING";
};
export type FeatureStatus = (typeof FeatureStatus)[keyof typeof FeatureStatus];
export declare const VariationValueType: {
  readonly BOOLEAN: "BOOLEAN";
  readonly DOUBLE: "DOUBLE";
  readonly LONG: "LONG";
  readonly STRING: "STRING";
};
export type VariationValueType =
  (typeof VariationValueType)[keyof typeof VariationValueType];
export interface Variation {
  name?: string;
  value?: VariableValue;
}
export interface Feature {
  arn: string | undefined;
  name: string | undefined;
  project?: string;
  status: FeatureStatus | undefined;
  createdTime: Date | undefined;
  lastUpdatedTime: Date | undefined;
  description?: string;
  evaluationStrategy: FeatureEvaluationStrategy | undefined;
  valueType: VariationValueType | undefined;
  variations: Variation[] | undefined;
  defaultVariation?: string;
  evaluationRules?: EvaluationRule[];
  tags?: Record<string, string>;
  entityOverrides?: Record<string, string>;
}
export interface CreateFeatureResponse {
  feature?: Feature;
}
export interface LaunchGroupConfig {
  name: string | undefined;
  description?: string;
  feature: string | undefined;
  variation: string | undefined;
}
export interface MetricMonitorConfig {
  metricDefinition: MetricDefinitionConfig | undefined;
}
export interface SegmentOverride {
  segment: string | undefined;
  evaluationOrder: number | undefined;
  weights: Record<string, number> | undefined;
}
export interface ScheduledSplitConfig {
  startTime: Date | undefined;
  groupWeights: Record<string, number> | undefined;
  segmentOverrides?: SegmentOverride[];
}
export interface ScheduledSplitsLaunchConfig {
  steps: ScheduledSplitConfig[] | undefined;
}
export interface CreateLaunchRequest {
  project: string | undefined;
  name: string | undefined;
  description?: string;
  scheduledSplitsConfig?: ScheduledSplitsLaunchConfig;
  metricMonitors?: MetricMonitorConfig[];
  groups: LaunchGroupConfig[] | undefined;
  randomizationSalt?: string;
  tags?: Record<string, string>;
}
export interface LaunchExecution {
  startedTime?: Date;
  endedTime?: Date;
}
export interface LaunchGroup {
  name: string | undefined;
  description?: string;
  featureVariations: Record<string, string> | undefined;
}
export interface MetricMonitor {
  metricDefinition: MetricDefinition | undefined;
}
export interface ScheduledSplit {
  startTime: Date | undefined;
  groupWeights?: Record<string, number>;
  segmentOverrides?: SegmentOverride[];
}
export interface ScheduledSplitsLaunchDefinition {
  steps?: ScheduledSplit[];
}
export declare const LaunchStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly CREATED: "CREATED";
  readonly RUNNING: "RUNNING";
  readonly UPDATING: "UPDATING";
};
export type LaunchStatus = (typeof LaunchStatus)[keyof typeof LaunchStatus];
export declare const LaunchType: {
  readonly SCHEDULED_SPLITS_LAUNCH: "aws.evidently.splits";
};
export type LaunchType = (typeof LaunchType)[keyof typeof LaunchType];
export interface Launch {
  arn: string | undefined;
  name: string | undefined;
  project?: string;
  status: LaunchStatus | undefined;
  statusReason?: string;
  description?: string;
  createdTime: Date | undefined;
  lastUpdatedTime: Date | undefined;
  execution?: LaunchExecution;
  groups?: LaunchGroup[];
  metricMonitors?: MetricMonitor[];
  randomizationSalt?: string;
  type: LaunchType | undefined;
  scheduledSplitsDefinition?: ScheduledSplitsLaunchDefinition;
  tags?: Record<string, string>;
}
export interface CreateLaunchResponse {
  launch: Launch | undefined;
}
export interface ProjectAppConfigResourceConfig {
  applicationId?: string;
  environmentId?: string;
}
export interface S3DestinationConfig {
  bucket?: string;
  prefix?: string;
}
export interface ProjectDataDeliveryConfig {
  s3Destination?: S3DestinationConfig;
  cloudWatchLogs?: CloudWatchLogsDestinationConfig;
}
export interface CreateProjectRequest {
  name: string | undefined;
  description?: string;
  dataDelivery?: ProjectDataDeliveryConfig;
  appConfigResource?: ProjectAppConfigResourceConfig;
  tags?: Record<string, string>;
}
export interface ProjectAppConfigResource {
  applicationId: string | undefined;
  environmentId: string | undefined;
  configurationProfileId: string | undefined;
}
export interface S3Destination {
  bucket?: string;
  prefix?: string;
}
export interface ProjectDataDelivery {
  s3Destination?: S3Destination;
  cloudWatchLogs?: CloudWatchLogsDestination;
}
export declare const ProjectStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly UPDATING: "UPDATING";
};
export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus];
export interface Project {
  arn: string | undefined;
  name: string | undefined;
  status: ProjectStatus | undefined;
  description?: string;
  createdTime: Date | undefined;
  lastUpdatedTime: Date | undefined;
  featureCount?: number;
  launchCount?: number;
  activeLaunchCount?: number;
  experimentCount?: number;
  activeExperimentCount?: number;
  dataDelivery?: ProjectDataDelivery;
  appConfigResource?: ProjectAppConfigResource;
  tags?: Record<string, string>;
}
export interface CreateProjectResponse {
  project: Project | undefined;
}
export interface CreateSegmentRequest {
  name: string | undefined;
  pattern: __LazyJsonString | string | undefined;
  description?: string;
  tags?: Record<string, string>;
}
export interface Segment {
  arn: string | undefined;
  name: string | undefined;
  pattern: __LazyJsonString | string | undefined;
  createdTime: Date | undefined;
  lastUpdatedTime: Date | undefined;
  description?: string;
  experimentCount?: number;
  launchCount?: number;
  tags?: Record<string, string>;
}
export interface CreateSegmentResponse {
  segment: Segment | undefined;
}
export interface DeleteExperimentRequest {
  project: string | undefined;
  experiment: string | undefined;
}
export interface DeleteExperimentResponse {}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export interface DeleteFeatureRequest {
  project: string | undefined;
  feature: string | undefined;
}
export interface DeleteFeatureResponse {}
export interface DeleteLaunchRequest {
  project: string | undefined;
  launch: string | undefined;
}
export interface DeleteLaunchResponse {}
export interface DeleteProjectRequest {
  project: string | undefined;
}
export interface DeleteProjectResponse {}
export interface DeleteSegmentRequest {
  segment: string | undefined;
}
export interface DeleteSegmentResponse {}
export interface EvaluateFeatureRequest {
  project: string | undefined;
  feature: string | undefined;
  entityId: string | undefined;
  evaluationContext?: __LazyJsonString | string;
}
export interface EvaluateFeatureResponse {
  variation?: string;
  value?: VariableValue;
  reason?: string;
  details?: __LazyJsonString | string;
}
export declare const EventType: {
  readonly CUSTOM: "aws.evidently.custom";
  readonly EVALUATION: "aws.evidently.evaluation";
};
export type EventType = (typeof EventType)[keyof typeof EventType];
export interface Event {
  timestamp: Date | undefined;
  type: EventType | undefined;
  data: __LazyJsonString | string | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface GetExperimentRequest {
  project: string | undefined;
  experiment: string | undefined;
}
export interface GetExperimentResponse {
  experiment?: Experiment;
}
export declare const ExperimentBaseStat: {
  readonly MEAN: "Mean";
};
export type ExperimentBaseStat =
  (typeof ExperimentBaseStat)[keyof typeof ExperimentBaseStat];
export declare const ExperimentReportName: {
  readonly BAYESIAN_INFERENCE: "BayesianInference";
};
export type ExperimentReportName =
  (typeof ExperimentReportName)[keyof typeof ExperimentReportName];
export declare const ExperimentResultRequestType: {
  readonly BASE_STAT: "BaseStat";
  readonly CONFIDENCE_INTERVAL: "ConfidenceInterval";
  readonly P_VALUE: "PValue";
  readonly TREATMENT_EFFECT: "TreatmentEffect";
};
export type ExperimentResultRequestType =
  (typeof ExperimentResultRequestType)[keyof typeof ExperimentResultRequestType];
export interface GetExperimentResultsRequest {
  project: string | undefined;
  experiment: string | undefined;
  startTime?: Date;
  endTime?: Date;
  metricNames: string[] | undefined;
  treatmentNames: string[] | undefined;
  baseStat?: ExperimentBaseStat;
  resultStats?: ExperimentResultRequestType[];
  reportNames?: ExperimentReportName[];
  period?: number;
}
export interface ExperimentReport {
  metricName?: string;
  treatmentName?: string;
  reportName?: ExperimentReportName;
  content?: __LazyJsonString | string;
}
export declare const ExperimentResultResponseType: {
  readonly CONFIDENCE_INTERVAL_LOWERBOUND: "ConfidenceIntervalLowerBound";
  readonly CONFIDENCE_INTERVAL_UPPERBOUND: "ConfidenceIntervalUpperBound";
  readonly MEAN: "Mean";
  readonly P_VALUE: "PValue";
  readonly TREATMENT_EFFECT: "TreatmentEffect";
};
export type ExperimentResultResponseType =
  (typeof ExperimentResultResponseType)[keyof typeof ExperimentResultResponseType];
export interface ExperimentResultsData {
  metricName?: string;
  treatmentName?: string;
  resultStat?: ExperimentResultResponseType;
  values?: number[];
}
export interface GetExperimentResultsResponse {
  resultsData?: ExperimentResultsData[];
  reports?: ExperimentReport[];
  timestamps?: Date[];
  details?: string;
}
export interface ListExperimentsRequest {
  project: string | undefined;
  maxResults?: number;
  nextToken?: string;
  status?: ExperimentStatus;
}
export interface ListExperimentsResponse {
  experiments?: Experiment[];
  nextToken?: string;
}
export interface StartExperimentRequest {
  project: string | undefined;
  experiment: string | undefined;
  analysisCompleteTime: Date | undefined;
}
export interface StartExperimentResponse {
  startedTime?: Date;
}
export declare const ExperimentStopDesiredState: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
};
export type ExperimentStopDesiredState =
  (typeof ExperimentStopDesiredState)[keyof typeof ExperimentStopDesiredState];
export interface StopExperimentRequest {
  project: string | undefined;
  experiment: string | undefined;
  desiredState?: ExperimentStopDesiredState;
  reason?: string;
}
export interface StopExperimentResponse {
  endedTime?: Date;
}
export interface UpdateExperimentRequest {
  project: string | undefined;
  experiment: string | undefined;
  description?: string;
  treatments?: TreatmentConfig[];
  metricGoals?: MetricGoalConfig[];
  randomizationSalt?: string;
  samplingRate?: number;
  segment?: string;
  removeSegment?: boolean;
  onlineAbConfig?: OnlineAbConfig;
}
export interface UpdateExperimentResponse {
  experiment: Experiment | undefined;
}
export interface GetFeatureRequest {
  project: string | undefined;
  feature: string | undefined;
}
export interface GetFeatureResponse {
  feature: Feature | undefined;
}
export interface ListFeaturesRequest {
  project: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface FeatureSummary {
  arn: string | undefined;
  name: string | undefined;
  project?: string;
  status: FeatureStatus | undefined;
  createdTime: Date | undefined;
  lastUpdatedTime: Date | undefined;
  evaluationStrategy: FeatureEvaluationStrategy | undefined;
  evaluationRules?: EvaluationRule[];
  defaultVariation?: string;
  tags?: Record<string, string>;
}
export interface ListFeaturesResponse {
  features?: FeatureSummary[];
  nextToken?: string;
}
export interface UpdateFeatureRequest {
  project: string | undefined;
  feature: string | undefined;
  evaluationStrategy?: FeatureEvaluationStrategy;
  description?: string;
  addOrUpdateVariations?: VariationConfig[];
  removeVariations?: string[];
  defaultVariation?: string;
  entityOverrides?: Record<string, string>;
}
export interface UpdateFeatureResponse {
  feature: Feature | undefined;
}
export interface GetProjectRequest {
  project: string | undefined;
}
export interface GetProjectResponse {
  project: Project | undefined;
}
export interface GetLaunchRequest {
  project: string | undefined;
  launch: string | undefined;
}
export interface GetLaunchResponse {
  launch?: Launch;
}
export interface ListLaunchesRequest {
  project: string | undefined;
  maxResults?: number;
  nextToken?: string;
  status?: LaunchStatus;
}
export interface ListLaunchesResponse {
  launches?: Launch[];
  nextToken?: string;
}
export interface StartLaunchRequest {
  project: string | undefined;
  launch: string | undefined;
}
export interface StartLaunchResponse {
  launch: Launch | undefined;
}
export declare const LaunchStopDesiredState: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
};
export type LaunchStopDesiredState =
  (typeof LaunchStopDesiredState)[keyof typeof LaunchStopDesiredState];
export interface StopLaunchRequest {
  project: string | undefined;
  launch: string | undefined;
  desiredState?: LaunchStopDesiredState;
  reason?: string;
}
export interface StopLaunchResponse {
  endedTime?: Date;
}
export interface UpdateLaunchRequest {
  project: string | undefined;
  launch: string | undefined;
  description?: string;
  groups?: LaunchGroupConfig[];
  metricMonitors?: MetricMonitorConfig[];
  randomizationSalt?: string;
  scheduledSplitsConfig?: ScheduledSplitsLaunchConfig;
}
export interface UpdateLaunchResponse {
  launch: Launch | undefined;
}
export interface ListProjectsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ProjectSummary {
  arn: string | undefined;
  name: string | undefined;
  status: ProjectStatus | undefined;
  description?: string;
  createdTime: Date | undefined;
  lastUpdatedTime: Date | undefined;
  featureCount?: number;
  launchCount?: number;
  activeLaunchCount?: number;
  experimentCount?: number;
  activeExperimentCount?: number;
  tags?: Record<string, string>;
}
export interface ListProjectsResponse {
  projects?: ProjectSummary[];
  nextToken?: string;
}
export interface PutProjectEventsRequest {
  project: string | undefined;
  events: Event[] | undefined;
}
export interface PutProjectEventsResultEntry {
  eventId?: string;
  errorCode?: string;
  errorMessage?: string;
}
export interface PutProjectEventsResponse {
  failedEventCount?: number;
  eventResults?: PutProjectEventsResultEntry[];
}
export interface UpdateProjectRequest {
  project: string | undefined;
  appConfigResource?: ProjectAppConfigResourceConfig;
  description?: string;
}
export interface UpdateProjectResponse {
  project: Project | undefined;
}
export interface UpdateProjectDataDeliveryRequest {
  project: string | undefined;
  s3Destination?: S3DestinationConfig;
  cloudWatchLogs?: CloudWatchLogsDestinationConfig;
}
export interface UpdateProjectDataDeliveryResponse {
  project: Project | undefined;
}
export interface GetSegmentRequest {
  segment: string | undefined;
}
export interface GetSegmentResponse {
  segment: Segment | undefined;
}
export declare const SegmentReferenceResourceType: {
  readonly EXPERIMENT: "EXPERIMENT";
  readonly LAUNCH: "LAUNCH";
};
export type SegmentReferenceResourceType =
  (typeof SegmentReferenceResourceType)[keyof typeof SegmentReferenceResourceType];
export interface ListSegmentReferencesRequest {
  segment: string | undefined;
  maxResults?: number;
  nextToken?: string;
  type: SegmentReferenceResourceType | undefined;
}
export interface RefResource {
  name: string | undefined;
  type: string | undefined;
  arn?: string;
  status?: string;
  startTime?: string;
  endTime?: string;
  lastUpdatedOn?: string;
}
export interface ListSegmentReferencesResponse {
  referencedBy?: RefResource[];
  nextToken?: string;
}
export interface ListSegmentsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ListSegmentsResponse {
  segments?: Segment[];
  nextToken?: string;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface TestSegmentPatternRequest {
  pattern: __LazyJsonString | string | undefined;
  payload: __LazyJsonString | string | undefined;
}
export interface TestSegmentPatternResponse {
  match: boolean | undefined;
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
