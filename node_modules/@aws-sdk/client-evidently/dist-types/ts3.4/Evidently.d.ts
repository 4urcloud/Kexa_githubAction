import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  BatchEvaluateFeatureCommandInput,
  BatchEvaluateFeatureCommandOutput,
} from "./commands/BatchEvaluateFeatureCommand";
import {
  CreateExperimentCommandInput,
  CreateExperimentCommandOutput,
} from "./commands/CreateExperimentCommand";
import {
  CreateFeatureCommandInput,
  CreateFeatureCommandOutput,
} from "./commands/CreateFeatureCommand";
import {
  CreateLaunchCommandInput,
  CreateLaunchCommandOutput,
} from "./commands/CreateLaunchCommand";
import {
  CreateProjectCommandInput,
  CreateProjectCommandOutput,
} from "./commands/CreateProjectCommand";
import {
  CreateSegmentCommandInput,
  CreateSegmentCommandOutput,
} from "./commands/CreateSegmentCommand";
import {
  DeleteExperimentCommandInput,
  DeleteExperimentCommandOutput,
} from "./commands/DeleteExperimentCommand";
import {
  DeleteFeatureCommandInput,
  DeleteFeatureCommandOutput,
} from "./commands/DeleteFeatureCommand";
import {
  DeleteLaunchCommandInput,
  DeleteLaunchCommandOutput,
} from "./commands/DeleteLaunchCommand";
import {
  DeleteProjectCommandInput,
  DeleteProjectCommandOutput,
} from "./commands/DeleteProjectCommand";
import {
  DeleteSegmentCommandInput,
  DeleteSegmentCommandOutput,
} from "./commands/DeleteSegmentCommand";
import {
  EvaluateFeatureCommandInput,
  EvaluateFeatureCommandOutput,
} from "./commands/EvaluateFeatureCommand";
import {
  GetExperimentCommandInput,
  GetExperimentCommandOutput,
} from "./commands/GetExperimentCommand";
import {
  GetExperimentResultsCommandInput,
  GetExperimentResultsCommandOutput,
} from "./commands/GetExperimentResultsCommand";
import {
  GetFeatureCommandInput,
  GetFeatureCommandOutput,
} from "./commands/GetFeatureCommand";
import {
  GetLaunchCommandInput,
  GetLaunchCommandOutput,
} from "./commands/GetLaunchCommand";
import {
  GetProjectCommandInput,
  GetProjectCommandOutput,
} from "./commands/GetProjectCommand";
import {
  GetSegmentCommandInput,
  GetSegmentCommandOutput,
} from "./commands/GetSegmentCommand";
import {
  ListExperimentsCommandInput,
  ListExperimentsCommandOutput,
} from "./commands/ListExperimentsCommand";
import {
  ListFeaturesCommandInput,
  ListFeaturesCommandOutput,
} from "./commands/ListFeaturesCommand";
import {
  ListLaunchesCommandInput,
  ListLaunchesCommandOutput,
} from "./commands/ListLaunchesCommand";
import {
  ListProjectsCommandInput,
  ListProjectsCommandOutput,
} from "./commands/ListProjectsCommand";
import {
  ListSegmentReferencesCommandInput,
  ListSegmentReferencesCommandOutput,
} from "./commands/ListSegmentReferencesCommand";
import {
  ListSegmentsCommandInput,
  ListSegmentsCommandOutput,
} from "./commands/ListSegmentsCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  PutProjectEventsCommandInput,
  PutProjectEventsCommandOutput,
} from "./commands/PutProjectEventsCommand";
import {
  StartExperimentCommandInput,
  StartExperimentCommandOutput,
} from "./commands/StartExperimentCommand";
import {
  StartLaunchCommandInput,
  StartLaunchCommandOutput,
} from "./commands/StartLaunchCommand";
import {
  StopExperimentCommandInput,
  StopExperimentCommandOutput,
} from "./commands/StopExperimentCommand";
import {
  StopLaunchCommandInput,
  StopLaunchCommandOutput,
} from "./commands/StopLaunchCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  TestSegmentPatternCommandInput,
  TestSegmentPatternCommandOutput,
} from "./commands/TestSegmentPatternCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateExperimentCommandInput,
  UpdateExperimentCommandOutput,
} from "./commands/UpdateExperimentCommand";
import {
  UpdateFeatureCommandInput,
  UpdateFeatureCommandOutput,
} from "./commands/UpdateFeatureCommand";
import {
  UpdateLaunchCommandInput,
  UpdateLaunchCommandOutput,
} from "./commands/UpdateLaunchCommand";
import {
  UpdateProjectCommandInput,
  UpdateProjectCommandOutput,
} from "./commands/UpdateProjectCommand";
import {
  UpdateProjectDataDeliveryCommandInput,
  UpdateProjectDataDeliveryCommandOutput,
} from "./commands/UpdateProjectDataDeliveryCommand";
import { EvidentlyClient } from "./EvidentlyClient";
export interface Evidently {
  batchEvaluateFeature(
    args: BatchEvaluateFeatureCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<BatchEvaluateFeatureCommandOutput>;
  batchEvaluateFeature(
    args: BatchEvaluateFeatureCommandInput,
    cb: (err: any, data?: BatchEvaluateFeatureCommandOutput) => void
  ): void;
  batchEvaluateFeature(
    args: BatchEvaluateFeatureCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: BatchEvaluateFeatureCommandOutput) => void
  ): void;
  createExperiment(
    args: CreateExperimentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateExperimentCommandOutput>;
  createExperiment(
    args: CreateExperimentCommandInput,
    cb: (err: any, data?: CreateExperimentCommandOutput) => void
  ): void;
  createExperiment(
    args: CreateExperimentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateExperimentCommandOutput) => void
  ): void;
  createFeature(
    args: CreateFeatureCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateFeatureCommandOutput>;
  createFeature(
    args: CreateFeatureCommandInput,
    cb: (err: any, data?: CreateFeatureCommandOutput) => void
  ): void;
  createFeature(
    args: CreateFeatureCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateFeatureCommandOutput) => void
  ): void;
  createLaunch(
    args: CreateLaunchCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLaunchCommandOutput>;
  createLaunch(
    args: CreateLaunchCommandInput,
    cb: (err: any, data?: CreateLaunchCommandOutput) => void
  ): void;
  createLaunch(
    args: CreateLaunchCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLaunchCommandOutput) => void
  ): void;
  createProject(
    args: CreateProjectCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateProjectCommandOutput>;
  createProject(
    args: CreateProjectCommandInput,
    cb: (err: any, data?: CreateProjectCommandOutput) => void
  ): void;
  createProject(
    args: CreateProjectCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateProjectCommandOutput) => void
  ): void;
  createSegment(
    args: CreateSegmentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateSegmentCommandOutput>;
  createSegment(
    args: CreateSegmentCommandInput,
    cb: (err: any, data?: CreateSegmentCommandOutput) => void
  ): void;
  createSegment(
    args: CreateSegmentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateSegmentCommandOutput) => void
  ): void;
  deleteExperiment(
    args: DeleteExperimentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteExperimentCommandOutput>;
  deleteExperiment(
    args: DeleteExperimentCommandInput,
    cb: (err: any, data?: DeleteExperimentCommandOutput) => void
  ): void;
  deleteExperiment(
    args: DeleteExperimentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteExperimentCommandOutput) => void
  ): void;
  deleteFeature(
    args: DeleteFeatureCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteFeatureCommandOutput>;
  deleteFeature(
    args: DeleteFeatureCommandInput,
    cb: (err: any, data?: DeleteFeatureCommandOutput) => void
  ): void;
  deleteFeature(
    args: DeleteFeatureCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteFeatureCommandOutput) => void
  ): void;
  deleteLaunch(
    args: DeleteLaunchCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteLaunchCommandOutput>;
  deleteLaunch(
    args: DeleteLaunchCommandInput,
    cb: (err: any, data?: DeleteLaunchCommandOutput) => void
  ): void;
  deleteLaunch(
    args: DeleteLaunchCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteLaunchCommandOutput) => void
  ): void;
  deleteProject(
    args: DeleteProjectCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteProjectCommandOutput>;
  deleteProject(
    args: DeleteProjectCommandInput,
    cb: (err: any, data?: DeleteProjectCommandOutput) => void
  ): void;
  deleteProject(
    args: DeleteProjectCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteProjectCommandOutput) => void
  ): void;
  deleteSegment(
    args: DeleteSegmentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteSegmentCommandOutput>;
  deleteSegment(
    args: DeleteSegmentCommandInput,
    cb: (err: any, data?: DeleteSegmentCommandOutput) => void
  ): void;
  deleteSegment(
    args: DeleteSegmentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteSegmentCommandOutput) => void
  ): void;
  evaluateFeature(
    args: EvaluateFeatureCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<EvaluateFeatureCommandOutput>;
  evaluateFeature(
    args: EvaluateFeatureCommandInput,
    cb: (err: any, data?: EvaluateFeatureCommandOutput) => void
  ): void;
  evaluateFeature(
    args: EvaluateFeatureCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: EvaluateFeatureCommandOutput) => void
  ): void;
  getExperiment(
    args: GetExperimentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetExperimentCommandOutput>;
  getExperiment(
    args: GetExperimentCommandInput,
    cb: (err: any, data?: GetExperimentCommandOutput) => void
  ): void;
  getExperiment(
    args: GetExperimentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetExperimentCommandOutput) => void
  ): void;
  getExperimentResults(
    args: GetExperimentResultsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetExperimentResultsCommandOutput>;
  getExperimentResults(
    args: GetExperimentResultsCommandInput,
    cb: (err: any, data?: GetExperimentResultsCommandOutput) => void
  ): void;
  getExperimentResults(
    args: GetExperimentResultsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetExperimentResultsCommandOutput) => void
  ): void;
  getFeature(
    args: GetFeatureCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetFeatureCommandOutput>;
  getFeature(
    args: GetFeatureCommandInput,
    cb: (err: any, data?: GetFeatureCommandOutput) => void
  ): void;
  getFeature(
    args: GetFeatureCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetFeatureCommandOutput) => void
  ): void;
  getLaunch(
    args: GetLaunchCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetLaunchCommandOutput>;
  getLaunch(
    args: GetLaunchCommandInput,
    cb: (err: any, data?: GetLaunchCommandOutput) => void
  ): void;
  getLaunch(
    args: GetLaunchCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetLaunchCommandOutput) => void
  ): void;
  getProject(
    args: GetProjectCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetProjectCommandOutput>;
  getProject(
    args: GetProjectCommandInput,
    cb: (err: any, data?: GetProjectCommandOutput) => void
  ): void;
  getProject(
    args: GetProjectCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetProjectCommandOutput) => void
  ): void;
  getSegment(
    args: GetSegmentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetSegmentCommandOutput>;
  getSegment(
    args: GetSegmentCommandInput,
    cb: (err: any, data?: GetSegmentCommandOutput) => void
  ): void;
  getSegment(
    args: GetSegmentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetSegmentCommandOutput) => void
  ): void;
  listExperiments(
    args: ListExperimentsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListExperimentsCommandOutput>;
  listExperiments(
    args: ListExperimentsCommandInput,
    cb: (err: any, data?: ListExperimentsCommandOutput) => void
  ): void;
  listExperiments(
    args: ListExperimentsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListExperimentsCommandOutput) => void
  ): void;
  listFeatures(
    args: ListFeaturesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListFeaturesCommandOutput>;
  listFeatures(
    args: ListFeaturesCommandInput,
    cb: (err: any, data?: ListFeaturesCommandOutput) => void
  ): void;
  listFeatures(
    args: ListFeaturesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListFeaturesCommandOutput) => void
  ): void;
  listLaunches(
    args: ListLaunchesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListLaunchesCommandOutput>;
  listLaunches(
    args: ListLaunchesCommandInput,
    cb: (err: any, data?: ListLaunchesCommandOutput) => void
  ): void;
  listLaunches(
    args: ListLaunchesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListLaunchesCommandOutput) => void
  ): void;
  listProjects(): Promise<ListProjectsCommandOutput>;
  listProjects(
    args: ListProjectsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListProjectsCommandOutput>;
  listProjects(
    args: ListProjectsCommandInput,
    cb: (err: any, data?: ListProjectsCommandOutput) => void
  ): void;
  listProjects(
    args: ListProjectsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListProjectsCommandOutput) => void
  ): void;
  listSegmentReferences(
    args: ListSegmentReferencesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListSegmentReferencesCommandOutput>;
  listSegmentReferences(
    args: ListSegmentReferencesCommandInput,
    cb: (err: any, data?: ListSegmentReferencesCommandOutput) => void
  ): void;
  listSegmentReferences(
    args: ListSegmentReferencesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListSegmentReferencesCommandOutput) => void
  ): void;
  listSegments(): Promise<ListSegmentsCommandOutput>;
  listSegments(
    args: ListSegmentsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListSegmentsCommandOutput>;
  listSegments(
    args: ListSegmentsCommandInput,
    cb: (err: any, data?: ListSegmentsCommandOutput) => void
  ): void;
  listSegments(
    args: ListSegmentsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListSegmentsCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  putProjectEvents(
    args: PutProjectEventsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<PutProjectEventsCommandOutput>;
  putProjectEvents(
    args: PutProjectEventsCommandInput,
    cb: (err: any, data?: PutProjectEventsCommandOutput) => void
  ): void;
  putProjectEvents(
    args: PutProjectEventsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: PutProjectEventsCommandOutput) => void
  ): void;
  startExperiment(
    args: StartExperimentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartExperimentCommandOutput>;
  startExperiment(
    args: StartExperimentCommandInput,
    cb: (err: any, data?: StartExperimentCommandOutput) => void
  ): void;
  startExperiment(
    args: StartExperimentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartExperimentCommandOutput) => void
  ): void;
  startLaunch(
    args: StartLaunchCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StartLaunchCommandOutput>;
  startLaunch(
    args: StartLaunchCommandInput,
    cb: (err: any, data?: StartLaunchCommandOutput) => void
  ): void;
  startLaunch(
    args: StartLaunchCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StartLaunchCommandOutput) => void
  ): void;
  stopExperiment(
    args: StopExperimentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StopExperimentCommandOutput>;
  stopExperiment(
    args: StopExperimentCommandInput,
    cb: (err: any, data?: StopExperimentCommandOutput) => void
  ): void;
  stopExperiment(
    args: StopExperimentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StopExperimentCommandOutput) => void
  ): void;
  stopLaunch(
    args: StopLaunchCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<StopLaunchCommandOutput>;
  stopLaunch(
    args: StopLaunchCommandInput,
    cb: (err: any, data?: StopLaunchCommandOutput) => void
  ): void;
  stopLaunch(
    args: StopLaunchCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: StopLaunchCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  testSegmentPattern(
    args: TestSegmentPatternCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TestSegmentPatternCommandOutput>;
  testSegmentPattern(
    args: TestSegmentPatternCommandInput,
    cb: (err: any, data?: TestSegmentPatternCommandOutput) => void
  ): void;
  testSegmentPattern(
    args: TestSegmentPatternCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TestSegmentPatternCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateExperiment(
    args: UpdateExperimentCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateExperimentCommandOutput>;
  updateExperiment(
    args: UpdateExperimentCommandInput,
    cb: (err: any, data?: UpdateExperimentCommandOutput) => void
  ): void;
  updateExperiment(
    args: UpdateExperimentCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateExperimentCommandOutput) => void
  ): void;
  updateFeature(
    args: UpdateFeatureCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateFeatureCommandOutput>;
  updateFeature(
    args: UpdateFeatureCommandInput,
    cb: (err: any, data?: UpdateFeatureCommandOutput) => void
  ): void;
  updateFeature(
    args: UpdateFeatureCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateFeatureCommandOutput) => void
  ): void;
  updateLaunch(
    args: UpdateLaunchCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateLaunchCommandOutput>;
  updateLaunch(
    args: UpdateLaunchCommandInput,
    cb: (err: any, data?: UpdateLaunchCommandOutput) => void
  ): void;
  updateLaunch(
    args: UpdateLaunchCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateLaunchCommandOutput) => void
  ): void;
  updateProject(
    args: UpdateProjectCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateProjectCommandOutput>;
  updateProject(
    args: UpdateProjectCommandInput,
    cb: (err: any, data?: UpdateProjectCommandOutput) => void
  ): void;
  updateProject(
    args: UpdateProjectCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateProjectCommandOutput) => void
  ): void;
  updateProjectDataDelivery(
    args: UpdateProjectDataDeliveryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateProjectDataDeliveryCommandOutput>;
  updateProjectDataDelivery(
    args: UpdateProjectDataDeliveryCommandInput,
    cb: (err: any, data?: UpdateProjectDataDeliveryCommandOutput) => void
  ): void;
  updateProjectDataDelivery(
    args: UpdateProjectDataDeliveryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateProjectDataDeliveryCommandOutput) => void
  ): void;
}
export declare class Evidently extends EvidentlyClient implements Evidently {}
