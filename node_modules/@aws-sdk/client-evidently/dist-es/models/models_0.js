import { EvidentlyServiceException as __BaseException } from "./EvidentlyServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export var VariableValue;
(function (VariableValue) {
    VariableValue.visit = (value, visitor) => {
        if (value.boolValue !== undefined)
            return visitor.boolValue(value.boolValue);
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        if (value.longValue !== undefined)
            return visitor.longValue(value.longValue);
        if (value.doubleValue !== undefined)
            return visitor.doubleValue(value.doubleValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(VariableValue || (VariableValue = {}));
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.serviceCode = opts.serviceCode;
        this.quotaCode = opts.quotaCode;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "cannotParse",
    FIELD_VALIDATION_FAILED: "fieldValidationFailed",
    OTHER: "other",
    UNKNOWN_OPERATION: "unknownOperation",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.reason = opts.reason;
        this.fieldList = opts.fieldList;
    }
}
export const ChangeDirectionEnum = {
    DECREASE: "DECREASE",
    INCREASE: "INCREASE",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export const ExperimentStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    CREATED: "CREATED",
    RUNNING: "RUNNING",
    UPDATING: "UPDATING",
};
export const ExperimentType = {
    ONLINE_AB_EXPERIMENT: "aws.evidently.onlineab",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
        this.serviceCode = opts.serviceCode;
        this.quotaCode = opts.quotaCode;
    }
}
export const FeatureEvaluationStrategy = {
    ALL_RULES: "ALL_RULES",
    DEFAULT_VARIATION: "DEFAULT_VARIATION",
};
export const FeatureStatus = {
    AVAILABLE: "AVAILABLE",
    UPDATING: "UPDATING",
};
export const VariationValueType = {
    BOOLEAN: "BOOLEAN",
    DOUBLE: "DOUBLE",
    LONG: "LONG",
    STRING: "STRING",
};
export const LaunchStatus = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    CREATED: "CREATED",
    RUNNING: "RUNNING",
    UPDATING: "UPDATING",
};
export const LaunchType = {
    SCHEDULED_SPLITS_LAUNCH: "aws.evidently.splits",
};
export const ProjectStatus = {
    AVAILABLE: "AVAILABLE",
    UPDATING: "UPDATING",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
export const EventType = {
    CUSTOM: "aws.evidently.custom",
    EVALUATION: "aws.evidently.evaluation",
};
export const ExperimentBaseStat = {
    MEAN: "Mean",
};
export const ExperimentReportName = {
    BAYESIAN_INFERENCE: "BayesianInference",
};
export const ExperimentResultRequestType = {
    BASE_STAT: "BaseStat",
    CONFIDENCE_INTERVAL: "ConfidenceInterval",
    P_VALUE: "PValue",
    TREATMENT_EFFECT: "TreatmentEffect",
};
export const ExperimentResultResponseType = {
    CONFIDENCE_INTERVAL_LOWERBOUND: "ConfidenceIntervalLowerBound",
    CONFIDENCE_INTERVAL_UPPERBOUND: "ConfidenceIntervalUpperBound",
    MEAN: "Mean",
    P_VALUE: "PValue",
    TREATMENT_EFFECT: "TreatmentEffect",
};
export const ExperimentStopDesiredState = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
};
export const LaunchStopDesiredState = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
};
export const SegmentReferenceResourceType = {
    EXPERIMENT: "EXPERIMENT",
    LAUNCH: "LAUNCH",
};
