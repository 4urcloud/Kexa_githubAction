import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  AcceptGrantCommandInput,
  AcceptGrantCommandOutput,
} from "./commands/AcceptGrantCommand";
import {
  CheckInLicenseCommandInput,
  CheckInLicenseCommandOutput,
} from "./commands/CheckInLicenseCommand";
import {
  CheckoutBorrowLicenseCommandInput,
  CheckoutBorrowLicenseCommandOutput,
} from "./commands/CheckoutBorrowLicenseCommand";
import {
  CheckoutLicenseCommandInput,
  CheckoutLicenseCommandOutput,
} from "./commands/CheckoutLicenseCommand";
import {
  CreateGrantCommandInput,
  CreateGrantCommandOutput,
} from "./commands/CreateGrantCommand";
import {
  CreateGrantVersionCommandInput,
  CreateGrantVersionCommandOutput,
} from "./commands/CreateGrantVersionCommand";
import {
  CreateLicenseCommandInput,
  CreateLicenseCommandOutput,
} from "./commands/CreateLicenseCommand";
import {
  CreateLicenseConfigurationCommandInput,
  CreateLicenseConfigurationCommandOutput,
} from "./commands/CreateLicenseConfigurationCommand";
import {
  CreateLicenseConversionTaskForResourceCommandInput,
  CreateLicenseConversionTaskForResourceCommandOutput,
} from "./commands/CreateLicenseConversionTaskForResourceCommand";
import {
  CreateLicenseManagerReportGeneratorCommandInput,
  CreateLicenseManagerReportGeneratorCommandOutput,
} from "./commands/CreateLicenseManagerReportGeneratorCommand";
import {
  CreateLicenseVersionCommandInput,
  CreateLicenseVersionCommandOutput,
} from "./commands/CreateLicenseVersionCommand";
import {
  CreateTokenCommandInput,
  CreateTokenCommandOutput,
} from "./commands/CreateTokenCommand";
import {
  DeleteGrantCommandInput,
  DeleteGrantCommandOutput,
} from "./commands/DeleteGrantCommand";
import {
  DeleteLicenseCommandInput,
  DeleteLicenseCommandOutput,
} from "./commands/DeleteLicenseCommand";
import {
  DeleteLicenseConfigurationCommandInput,
  DeleteLicenseConfigurationCommandOutput,
} from "./commands/DeleteLicenseConfigurationCommand";
import {
  DeleteLicenseManagerReportGeneratorCommandInput,
  DeleteLicenseManagerReportGeneratorCommandOutput,
} from "./commands/DeleteLicenseManagerReportGeneratorCommand";
import {
  DeleteTokenCommandInput,
  DeleteTokenCommandOutput,
} from "./commands/DeleteTokenCommand";
import {
  ExtendLicenseConsumptionCommandInput,
  ExtendLicenseConsumptionCommandOutput,
} from "./commands/ExtendLicenseConsumptionCommand";
import {
  GetAccessTokenCommandInput,
  GetAccessTokenCommandOutput,
} from "./commands/GetAccessTokenCommand";
import {
  GetGrantCommandInput,
  GetGrantCommandOutput,
} from "./commands/GetGrantCommand";
import {
  GetLicenseCommandInput,
  GetLicenseCommandOutput,
} from "./commands/GetLicenseCommand";
import {
  GetLicenseConfigurationCommandInput,
  GetLicenseConfigurationCommandOutput,
} from "./commands/GetLicenseConfigurationCommand";
import {
  GetLicenseConversionTaskCommandInput,
  GetLicenseConversionTaskCommandOutput,
} from "./commands/GetLicenseConversionTaskCommand";
import {
  GetLicenseManagerReportGeneratorCommandInput,
  GetLicenseManagerReportGeneratorCommandOutput,
} from "./commands/GetLicenseManagerReportGeneratorCommand";
import {
  GetLicenseUsageCommandInput,
  GetLicenseUsageCommandOutput,
} from "./commands/GetLicenseUsageCommand";
import {
  GetServiceSettingsCommandInput,
  GetServiceSettingsCommandOutput,
} from "./commands/GetServiceSettingsCommand";
import {
  ListAssociationsForLicenseConfigurationCommandInput,
  ListAssociationsForLicenseConfigurationCommandOutput,
} from "./commands/ListAssociationsForLicenseConfigurationCommand";
import {
  ListDistributedGrantsCommandInput,
  ListDistributedGrantsCommandOutput,
} from "./commands/ListDistributedGrantsCommand";
import {
  ListFailuresForLicenseConfigurationOperationsCommandInput,
  ListFailuresForLicenseConfigurationOperationsCommandOutput,
} from "./commands/ListFailuresForLicenseConfigurationOperationsCommand";
import {
  ListLicenseConfigurationsCommandInput,
  ListLicenseConfigurationsCommandOutput,
} from "./commands/ListLicenseConfigurationsCommand";
import {
  ListLicenseConversionTasksCommandInput,
  ListLicenseConversionTasksCommandOutput,
} from "./commands/ListLicenseConversionTasksCommand";
import {
  ListLicenseManagerReportGeneratorsCommandInput,
  ListLicenseManagerReportGeneratorsCommandOutput,
} from "./commands/ListLicenseManagerReportGeneratorsCommand";
import {
  ListLicensesCommandInput,
  ListLicensesCommandOutput,
} from "./commands/ListLicensesCommand";
import {
  ListLicenseSpecificationsForResourceCommandInput,
  ListLicenseSpecificationsForResourceCommandOutput,
} from "./commands/ListLicenseSpecificationsForResourceCommand";
import {
  ListLicenseVersionsCommandInput,
  ListLicenseVersionsCommandOutput,
} from "./commands/ListLicenseVersionsCommand";
import {
  ListReceivedGrantsCommandInput,
  ListReceivedGrantsCommandOutput,
} from "./commands/ListReceivedGrantsCommand";
import {
  ListReceivedGrantsForOrganizationCommandInput,
  ListReceivedGrantsForOrganizationCommandOutput,
} from "./commands/ListReceivedGrantsForOrganizationCommand";
import {
  ListReceivedLicensesCommandInput,
  ListReceivedLicensesCommandOutput,
} from "./commands/ListReceivedLicensesCommand";
import {
  ListReceivedLicensesForOrganizationCommandInput,
  ListReceivedLicensesForOrganizationCommandOutput,
} from "./commands/ListReceivedLicensesForOrganizationCommand";
import {
  ListResourceInventoryCommandInput,
  ListResourceInventoryCommandOutput,
} from "./commands/ListResourceInventoryCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  ListTokensCommandInput,
  ListTokensCommandOutput,
} from "./commands/ListTokensCommand";
import {
  ListUsageForLicenseConfigurationCommandInput,
  ListUsageForLicenseConfigurationCommandOutput,
} from "./commands/ListUsageForLicenseConfigurationCommand";
import {
  RejectGrantCommandInput,
  RejectGrantCommandOutput,
} from "./commands/RejectGrantCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateLicenseConfigurationCommandInput,
  UpdateLicenseConfigurationCommandOutput,
} from "./commands/UpdateLicenseConfigurationCommand";
import {
  UpdateLicenseManagerReportGeneratorCommandInput,
  UpdateLicenseManagerReportGeneratorCommandOutput,
} from "./commands/UpdateLicenseManagerReportGeneratorCommand";
import {
  UpdateLicenseSpecificationsForResourceCommandInput,
  UpdateLicenseSpecificationsForResourceCommandOutput,
} from "./commands/UpdateLicenseSpecificationsForResourceCommand";
import {
  UpdateServiceSettingsCommandInput,
  UpdateServiceSettingsCommandOutput,
} from "./commands/UpdateServiceSettingsCommand";
import { LicenseManagerClient } from "./LicenseManagerClient";
export interface LicenseManager {
  acceptGrant(
    args: AcceptGrantCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<AcceptGrantCommandOutput>;
  acceptGrant(
    args: AcceptGrantCommandInput,
    cb: (err: any, data?: AcceptGrantCommandOutput) => void
  ): void;
  acceptGrant(
    args: AcceptGrantCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: AcceptGrantCommandOutput) => void
  ): void;
  checkInLicense(
    args: CheckInLicenseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CheckInLicenseCommandOutput>;
  checkInLicense(
    args: CheckInLicenseCommandInput,
    cb: (err: any, data?: CheckInLicenseCommandOutput) => void
  ): void;
  checkInLicense(
    args: CheckInLicenseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CheckInLicenseCommandOutput) => void
  ): void;
  checkoutBorrowLicense(
    args: CheckoutBorrowLicenseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CheckoutBorrowLicenseCommandOutput>;
  checkoutBorrowLicense(
    args: CheckoutBorrowLicenseCommandInput,
    cb: (err: any, data?: CheckoutBorrowLicenseCommandOutput) => void
  ): void;
  checkoutBorrowLicense(
    args: CheckoutBorrowLicenseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CheckoutBorrowLicenseCommandOutput) => void
  ): void;
  checkoutLicense(
    args: CheckoutLicenseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CheckoutLicenseCommandOutput>;
  checkoutLicense(
    args: CheckoutLicenseCommandInput,
    cb: (err: any, data?: CheckoutLicenseCommandOutput) => void
  ): void;
  checkoutLicense(
    args: CheckoutLicenseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CheckoutLicenseCommandOutput) => void
  ): void;
  createGrant(
    args: CreateGrantCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateGrantCommandOutput>;
  createGrant(
    args: CreateGrantCommandInput,
    cb: (err: any, data?: CreateGrantCommandOutput) => void
  ): void;
  createGrant(
    args: CreateGrantCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateGrantCommandOutput) => void
  ): void;
  createGrantVersion(
    args: CreateGrantVersionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateGrantVersionCommandOutput>;
  createGrantVersion(
    args: CreateGrantVersionCommandInput,
    cb: (err: any, data?: CreateGrantVersionCommandOutput) => void
  ): void;
  createGrantVersion(
    args: CreateGrantVersionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateGrantVersionCommandOutput) => void
  ): void;
  createLicense(
    args: CreateLicenseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLicenseCommandOutput>;
  createLicense(
    args: CreateLicenseCommandInput,
    cb: (err: any, data?: CreateLicenseCommandOutput) => void
  ): void;
  createLicense(
    args: CreateLicenseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLicenseCommandOutput) => void
  ): void;
  createLicenseConfiguration(
    args: CreateLicenseConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLicenseConfigurationCommandOutput>;
  createLicenseConfiguration(
    args: CreateLicenseConfigurationCommandInput,
    cb: (err: any, data?: CreateLicenseConfigurationCommandOutput) => void
  ): void;
  createLicenseConfiguration(
    args: CreateLicenseConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLicenseConfigurationCommandOutput) => void
  ): void;
  createLicenseConversionTaskForResource(
    args: CreateLicenseConversionTaskForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLicenseConversionTaskForResourceCommandOutput>;
  createLicenseConversionTaskForResource(
    args: CreateLicenseConversionTaskForResourceCommandInput,
    cb: (
      err: any,
      data?: CreateLicenseConversionTaskForResourceCommandOutput
    ) => void
  ): void;
  createLicenseConversionTaskForResource(
    args: CreateLicenseConversionTaskForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: CreateLicenseConversionTaskForResourceCommandOutput
    ) => void
  ): void;
  createLicenseManagerReportGenerator(
    args: CreateLicenseManagerReportGeneratorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLicenseManagerReportGeneratorCommandOutput>;
  createLicenseManagerReportGenerator(
    args: CreateLicenseManagerReportGeneratorCommandInput,
    cb: (
      err: any,
      data?: CreateLicenseManagerReportGeneratorCommandOutput
    ) => void
  ): void;
  createLicenseManagerReportGenerator(
    args: CreateLicenseManagerReportGeneratorCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: CreateLicenseManagerReportGeneratorCommandOutput
    ) => void
  ): void;
  createLicenseVersion(
    args: CreateLicenseVersionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLicenseVersionCommandOutput>;
  createLicenseVersion(
    args: CreateLicenseVersionCommandInput,
    cb: (err: any, data?: CreateLicenseVersionCommandOutput) => void
  ): void;
  createLicenseVersion(
    args: CreateLicenseVersionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLicenseVersionCommandOutput) => void
  ): void;
  createToken(
    args: CreateTokenCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateTokenCommandOutput>;
  createToken(
    args: CreateTokenCommandInput,
    cb: (err: any, data?: CreateTokenCommandOutput) => void
  ): void;
  createToken(
    args: CreateTokenCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateTokenCommandOutput) => void
  ): void;
  deleteGrant(
    args: DeleteGrantCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteGrantCommandOutput>;
  deleteGrant(
    args: DeleteGrantCommandInput,
    cb: (err: any, data?: DeleteGrantCommandOutput) => void
  ): void;
  deleteGrant(
    args: DeleteGrantCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteGrantCommandOutput) => void
  ): void;
  deleteLicense(
    args: DeleteLicenseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteLicenseCommandOutput>;
  deleteLicense(
    args: DeleteLicenseCommandInput,
    cb: (err: any, data?: DeleteLicenseCommandOutput) => void
  ): void;
  deleteLicense(
    args: DeleteLicenseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteLicenseCommandOutput) => void
  ): void;
  deleteLicenseConfiguration(
    args: DeleteLicenseConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteLicenseConfigurationCommandOutput>;
  deleteLicenseConfiguration(
    args: DeleteLicenseConfigurationCommandInput,
    cb: (err: any, data?: DeleteLicenseConfigurationCommandOutput) => void
  ): void;
  deleteLicenseConfiguration(
    args: DeleteLicenseConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteLicenseConfigurationCommandOutput) => void
  ): void;
  deleteLicenseManagerReportGenerator(
    args: DeleteLicenseManagerReportGeneratorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteLicenseManagerReportGeneratorCommandOutput>;
  deleteLicenseManagerReportGenerator(
    args: DeleteLicenseManagerReportGeneratorCommandInput,
    cb: (
      err: any,
      data?: DeleteLicenseManagerReportGeneratorCommandOutput
    ) => void
  ): void;
  deleteLicenseManagerReportGenerator(
    args: DeleteLicenseManagerReportGeneratorCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DeleteLicenseManagerReportGeneratorCommandOutput
    ) => void
  ): void;
  deleteToken(
    args: DeleteTokenCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteTokenCommandOutput>;
  deleteToken(
    args: DeleteTokenCommandInput,
    cb: (err: any, data?: DeleteTokenCommandOutput) => void
  ): void;
  deleteToken(
    args: DeleteTokenCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteTokenCommandOutput) => void
  ): void;
  extendLicenseConsumption(
    args: ExtendLicenseConsumptionCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ExtendLicenseConsumptionCommandOutput>;
  extendLicenseConsumption(
    args: ExtendLicenseConsumptionCommandInput,
    cb: (err: any, data?: ExtendLicenseConsumptionCommandOutput) => void
  ): void;
  extendLicenseConsumption(
    args: ExtendLicenseConsumptionCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ExtendLicenseConsumptionCommandOutput) => void
  ): void;
  getAccessToken(
    args: GetAccessTokenCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetAccessTokenCommandOutput>;
  getAccessToken(
    args: GetAccessTokenCommandInput,
    cb: (err: any, data?: GetAccessTokenCommandOutput) => void
  ): void;
  getAccessToken(
    args: GetAccessTokenCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetAccessTokenCommandOutput) => void
  ): void;
  getGrant(
    args: GetGrantCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetGrantCommandOutput>;
  getGrant(
    args: GetGrantCommandInput,
    cb: (err: any, data?: GetGrantCommandOutput) => void
  ): void;
  getGrant(
    args: GetGrantCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetGrantCommandOutput) => void
  ): void;
  getLicense(
    args: GetLicenseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetLicenseCommandOutput>;
  getLicense(
    args: GetLicenseCommandInput,
    cb: (err: any, data?: GetLicenseCommandOutput) => void
  ): void;
  getLicense(
    args: GetLicenseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetLicenseCommandOutput) => void
  ): void;
  getLicenseConfiguration(
    args: GetLicenseConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetLicenseConfigurationCommandOutput>;
  getLicenseConfiguration(
    args: GetLicenseConfigurationCommandInput,
    cb: (err: any, data?: GetLicenseConfigurationCommandOutput) => void
  ): void;
  getLicenseConfiguration(
    args: GetLicenseConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetLicenseConfigurationCommandOutput) => void
  ): void;
  getLicenseConversionTask(
    args: GetLicenseConversionTaskCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetLicenseConversionTaskCommandOutput>;
  getLicenseConversionTask(
    args: GetLicenseConversionTaskCommandInput,
    cb: (err: any, data?: GetLicenseConversionTaskCommandOutput) => void
  ): void;
  getLicenseConversionTask(
    args: GetLicenseConversionTaskCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetLicenseConversionTaskCommandOutput) => void
  ): void;
  getLicenseManagerReportGenerator(
    args: GetLicenseManagerReportGeneratorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetLicenseManagerReportGeneratorCommandOutput>;
  getLicenseManagerReportGenerator(
    args: GetLicenseManagerReportGeneratorCommandInput,
    cb: (err: any, data?: GetLicenseManagerReportGeneratorCommandOutput) => void
  ): void;
  getLicenseManagerReportGenerator(
    args: GetLicenseManagerReportGeneratorCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetLicenseManagerReportGeneratorCommandOutput) => void
  ): void;
  getLicenseUsage(
    args: GetLicenseUsageCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetLicenseUsageCommandOutput>;
  getLicenseUsage(
    args: GetLicenseUsageCommandInput,
    cb: (err: any, data?: GetLicenseUsageCommandOutput) => void
  ): void;
  getLicenseUsage(
    args: GetLicenseUsageCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetLicenseUsageCommandOutput) => void
  ): void;
  getServiceSettings(): Promise<GetServiceSettingsCommandOutput>;
  getServiceSettings(
    args: GetServiceSettingsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetServiceSettingsCommandOutput>;
  getServiceSettings(
    args: GetServiceSettingsCommandInput,
    cb: (err: any, data?: GetServiceSettingsCommandOutput) => void
  ): void;
  getServiceSettings(
    args: GetServiceSettingsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetServiceSettingsCommandOutput) => void
  ): void;
  listAssociationsForLicenseConfiguration(
    args: ListAssociationsForLicenseConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListAssociationsForLicenseConfigurationCommandOutput>;
  listAssociationsForLicenseConfiguration(
    args: ListAssociationsForLicenseConfigurationCommandInput,
    cb: (
      err: any,
      data?: ListAssociationsForLicenseConfigurationCommandOutput
    ) => void
  ): void;
  listAssociationsForLicenseConfiguration(
    args: ListAssociationsForLicenseConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListAssociationsForLicenseConfigurationCommandOutput
    ) => void
  ): void;
  listDistributedGrants(): Promise<ListDistributedGrantsCommandOutput>;
  listDistributedGrants(
    args: ListDistributedGrantsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDistributedGrantsCommandOutput>;
  listDistributedGrants(
    args: ListDistributedGrantsCommandInput,
    cb: (err: any, data?: ListDistributedGrantsCommandOutput) => void
  ): void;
  listDistributedGrants(
    args: ListDistributedGrantsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDistributedGrantsCommandOutput) => void
  ): void;
  listFailuresForLicenseConfigurationOperations(
    args: ListFailuresForLicenseConfigurationOperationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListFailuresForLicenseConfigurationOperationsCommandOutput>;
  listFailuresForLicenseConfigurationOperations(
    args: ListFailuresForLicenseConfigurationOperationsCommandInput,
    cb: (
      err: any,
      data?: ListFailuresForLicenseConfigurationOperationsCommandOutput
    ) => void
  ): void;
  listFailuresForLicenseConfigurationOperations(
    args: ListFailuresForLicenseConfigurationOperationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListFailuresForLicenseConfigurationOperationsCommandOutput
    ) => void
  ): void;
  listLicenseConfigurations(): Promise<ListLicenseConfigurationsCommandOutput>;
  listLicenseConfigurations(
    args: ListLicenseConfigurationsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListLicenseConfigurationsCommandOutput>;
  listLicenseConfigurations(
    args: ListLicenseConfigurationsCommandInput,
    cb: (err: any, data?: ListLicenseConfigurationsCommandOutput) => void
  ): void;
  listLicenseConfigurations(
    args: ListLicenseConfigurationsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListLicenseConfigurationsCommandOutput) => void
  ): void;
  listLicenseConversionTasks(): Promise<ListLicenseConversionTasksCommandOutput>;
  listLicenseConversionTasks(
    args: ListLicenseConversionTasksCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListLicenseConversionTasksCommandOutput>;
  listLicenseConversionTasks(
    args: ListLicenseConversionTasksCommandInput,
    cb: (err: any, data?: ListLicenseConversionTasksCommandOutput) => void
  ): void;
  listLicenseConversionTasks(
    args: ListLicenseConversionTasksCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListLicenseConversionTasksCommandOutput) => void
  ): void;
  listLicenseManagerReportGenerators(): Promise<ListLicenseManagerReportGeneratorsCommandOutput>;
  listLicenseManagerReportGenerators(
    args: ListLicenseManagerReportGeneratorsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListLicenseManagerReportGeneratorsCommandOutput>;
  listLicenseManagerReportGenerators(
    args: ListLicenseManagerReportGeneratorsCommandInput,
    cb: (
      err: any,
      data?: ListLicenseManagerReportGeneratorsCommandOutput
    ) => void
  ): void;
  listLicenseManagerReportGenerators(
    args: ListLicenseManagerReportGeneratorsCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListLicenseManagerReportGeneratorsCommandOutput
    ) => void
  ): void;
  listLicenses(): Promise<ListLicensesCommandOutput>;
  listLicenses(
    args: ListLicensesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListLicensesCommandOutput>;
  listLicenses(
    args: ListLicensesCommandInput,
    cb: (err: any, data?: ListLicensesCommandOutput) => void
  ): void;
  listLicenses(
    args: ListLicensesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListLicensesCommandOutput) => void
  ): void;
  listLicenseSpecificationsForResource(
    args: ListLicenseSpecificationsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListLicenseSpecificationsForResourceCommandOutput>;
  listLicenseSpecificationsForResource(
    args: ListLicenseSpecificationsForResourceCommandInput,
    cb: (
      err: any,
      data?: ListLicenseSpecificationsForResourceCommandOutput
    ) => void
  ): void;
  listLicenseSpecificationsForResource(
    args: ListLicenseSpecificationsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListLicenseSpecificationsForResourceCommandOutput
    ) => void
  ): void;
  listLicenseVersions(
    args: ListLicenseVersionsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListLicenseVersionsCommandOutput>;
  listLicenseVersions(
    args: ListLicenseVersionsCommandInput,
    cb: (err: any, data?: ListLicenseVersionsCommandOutput) => void
  ): void;
  listLicenseVersions(
    args: ListLicenseVersionsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListLicenseVersionsCommandOutput) => void
  ): void;
  listReceivedGrants(): Promise<ListReceivedGrantsCommandOutput>;
  listReceivedGrants(
    args: ListReceivedGrantsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListReceivedGrantsCommandOutput>;
  listReceivedGrants(
    args: ListReceivedGrantsCommandInput,
    cb: (err: any, data?: ListReceivedGrantsCommandOutput) => void
  ): void;
  listReceivedGrants(
    args: ListReceivedGrantsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListReceivedGrantsCommandOutput) => void
  ): void;
  listReceivedGrantsForOrganization(
    args: ListReceivedGrantsForOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListReceivedGrantsForOrganizationCommandOutput>;
  listReceivedGrantsForOrganization(
    args: ListReceivedGrantsForOrganizationCommandInput,
    cb: (
      err: any,
      data?: ListReceivedGrantsForOrganizationCommandOutput
    ) => void
  ): void;
  listReceivedGrantsForOrganization(
    args: ListReceivedGrantsForOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListReceivedGrantsForOrganizationCommandOutput
    ) => void
  ): void;
  listReceivedLicenses(): Promise<ListReceivedLicensesCommandOutput>;
  listReceivedLicenses(
    args: ListReceivedLicensesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListReceivedLicensesCommandOutput>;
  listReceivedLicenses(
    args: ListReceivedLicensesCommandInput,
    cb: (err: any, data?: ListReceivedLicensesCommandOutput) => void
  ): void;
  listReceivedLicenses(
    args: ListReceivedLicensesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListReceivedLicensesCommandOutput) => void
  ): void;
  listReceivedLicensesForOrganization(): Promise<ListReceivedLicensesForOrganizationCommandOutput>;
  listReceivedLicensesForOrganization(
    args: ListReceivedLicensesForOrganizationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListReceivedLicensesForOrganizationCommandOutput>;
  listReceivedLicensesForOrganization(
    args: ListReceivedLicensesForOrganizationCommandInput,
    cb: (
      err: any,
      data?: ListReceivedLicensesForOrganizationCommandOutput
    ) => void
  ): void;
  listReceivedLicensesForOrganization(
    args: ListReceivedLicensesForOrganizationCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ListReceivedLicensesForOrganizationCommandOutput
    ) => void
  ): void;
  listResourceInventory(): Promise<ListResourceInventoryCommandOutput>;
  listResourceInventory(
    args: ListResourceInventoryCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListResourceInventoryCommandOutput>;
  listResourceInventory(
    args: ListResourceInventoryCommandInput,
    cb: (err: any, data?: ListResourceInventoryCommandOutput) => void
  ): void;
  listResourceInventory(
    args: ListResourceInventoryCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListResourceInventoryCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTokens(): Promise<ListTokensCommandOutput>;
  listTokens(
    args: ListTokensCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTokensCommandOutput>;
  listTokens(
    args: ListTokensCommandInput,
    cb: (err: any, data?: ListTokensCommandOutput) => void
  ): void;
  listTokens(
    args: ListTokensCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTokensCommandOutput) => void
  ): void;
  listUsageForLicenseConfiguration(
    args: ListUsageForLicenseConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListUsageForLicenseConfigurationCommandOutput>;
  listUsageForLicenseConfiguration(
    args: ListUsageForLicenseConfigurationCommandInput,
    cb: (err: any, data?: ListUsageForLicenseConfigurationCommandOutput) => void
  ): void;
  listUsageForLicenseConfiguration(
    args: ListUsageForLicenseConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListUsageForLicenseConfigurationCommandOutput) => void
  ): void;
  rejectGrant(
    args: RejectGrantCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RejectGrantCommandOutput>;
  rejectGrant(
    args: RejectGrantCommandInput,
    cb: (err: any, data?: RejectGrantCommandOutput) => void
  ): void;
  rejectGrant(
    args: RejectGrantCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RejectGrantCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateLicenseConfiguration(
    args: UpdateLicenseConfigurationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateLicenseConfigurationCommandOutput>;
  updateLicenseConfiguration(
    args: UpdateLicenseConfigurationCommandInput,
    cb: (err: any, data?: UpdateLicenseConfigurationCommandOutput) => void
  ): void;
  updateLicenseConfiguration(
    args: UpdateLicenseConfigurationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateLicenseConfigurationCommandOutput) => void
  ): void;
  updateLicenseManagerReportGenerator(
    args: UpdateLicenseManagerReportGeneratorCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateLicenseManagerReportGeneratorCommandOutput>;
  updateLicenseManagerReportGenerator(
    args: UpdateLicenseManagerReportGeneratorCommandInput,
    cb: (
      err: any,
      data?: UpdateLicenseManagerReportGeneratorCommandOutput
    ) => void
  ): void;
  updateLicenseManagerReportGenerator(
    args: UpdateLicenseManagerReportGeneratorCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: UpdateLicenseManagerReportGeneratorCommandOutput
    ) => void
  ): void;
  updateLicenseSpecificationsForResource(
    args: UpdateLicenseSpecificationsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateLicenseSpecificationsForResourceCommandOutput>;
  updateLicenseSpecificationsForResource(
    args: UpdateLicenseSpecificationsForResourceCommandInput,
    cb: (
      err: any,
      data?: UpdateLicenseSpecificationsForResourceCommandOutput
    ) => void
  ): void;
  updateLicenseSpecificationsForResource(
    args: UpdateLicenseSpecificationsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: UpdateLicenseSpecificationsForResourceCommandOutput
    ) => void
  ): void;
  updateServiceSettings(): Promise<UpdateServiceSettingsCommandOutput>;
  updateServiceSettings(
    args: UpdateServiceSettingsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateServiceSettingsCommandOutput>;
  updateServiceSettings(
    args: UpdateServiceSettingsCommandInput,
    cb: (err: any, data?: UpdateServiceSettingsCommandOutput) => void
  ): void;
  updateServiceSettings(
    args: UpdateServiceSettingsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateServiceSettingsCommandOutput) => void
  ): void;
}
export declare class LicenseManager
  extends LicenseManagerClient
  implements LicenseManager {}
