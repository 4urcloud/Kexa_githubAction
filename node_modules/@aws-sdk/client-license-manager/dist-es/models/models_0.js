import { LicenseManagerServiceException as __BaseException } from "./LicenseManagerServiceException";
export const GrantStatus = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    DISABLED: "DISABLED",
    FAILED_WORKFLOW: "FAILED_WORKFLOW",
    PENDING_ACCEPT: "PENDING_ACCEPT",
    PENDING_DELETE: "PENDING_DELETE",
    PENDING_WORKFLOW: "PENDING_WORKFLOW",
    REJECTED: "REJECTED",
    WORKFLOW_COMPLETED: "WORKFLOW_COMPLETED",
};
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export class AuthorizationException extends __BaseException {
    constructor(opts) {
        super({
            name: "AuthorizationException",
            $fault: "client",
            ...opts,
        });
        this.name = "AuthorizationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidParameterValueException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
        this.Message = opts.Message;
    }
}
export class RateLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "RateLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "RateLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RateLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ServerInternalException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServerInternalException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServerInternalException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServerInternalException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const ActivationOverrideBehavior = {
    ALL_GRANTS_PERMITTED_BY_ISSUER: "ALL_GRANTS_PERMITTED_BY_ISSUER",
    DISTRIBUTED_GRANTS_ONLY: "DISTRIBUTED_GRANTS_ONLY",
};
export const AllowedOperation = {
    CHECKOUT_BORROW_LICENSE: "CheckoutBorrowLicense",
    CHECKOUT_LICENSE: "CheckoutLicense",
    CHECK_IN_LICENSE: "CheckInLicense",
    CREATE_GRANT: "CreateGrant",
    CREATE_TOKEN: "CreateToken",
    EXTEND_CONSUMPTION_LICENSE: "ExtendConsumptionLicense",
    LIST_PURCHASED_LICENSES: "ListPurchasedLicenses",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const DigitalSignatureMethod = {
    JWT_PS384: "JWT_PS384",
};
export const EntitlementDataUnit = {
    BITS: "Bits",
    BITS_PER_SECOND: "Bits/Second",
    BYTES: "Bytes",
    BYTES_PER_SECOND: "Bytes/Second",
    COUNT: "Count",
    COUNT_PER_SECOND: "Count/Second",
    GIGABITS: "Gigabits",
    GIGABITS_PER_SECOND: "Gigabits/Second",
    GIGABYTES: "Gigabytes",
    GIGABYTES_PER_SECOND: "Gigabytes/Second",
    KILOBITS: "Kilobits",
    KILOBITS_PER_SECOND: "Kilobits/Second",
    KILOBYTES: "Kilobytes",
    KILOBYTES_PER_SECOND: "Kilobytes/Second",
    MEGABITS: "Megabits",
    MEGABITS_PER_SECOND: "Megabits/Second",
    MEGABYTES: "Megabytes",
    MEGABYTES_PER_SECOND: "Megabytes/Second",
    MICROSECONDS: "Microseconds",
    MILLISECONDS: "Milliseconds",
    NONE: "None",
    PERCENT: "Percent",
    SECONDS: "Seconds",
    TERABITS: "Terabits",
    TERABITS_PER_SECOND: "Terabits/Second",
    TERABYTES: "Terabytes",
    TERABYTES_PER_SECOND: "Terabytes/Second",
};
export class EntitlementNotAllowedException extends __BaseException {
    constructor(opts) {
        super({
            name: "EntitlementNotAllowedException",
            $fault: "client",
            ...opts,
        });
        this.name = "EntitlementNotAllowedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EntitlementNotAllowedException.prototype);
        this.Message = opts.Message;
    }
}
export class NoEntitlementsAllowedException extends __BaseException {
    constructor(opts) {
        super({
            name: "NoEntitlementsAllowedException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoEntitlementsAllowedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoEntitlementsAllowedException.prototype);
        this.Message = opts.Message;
    }
}
export class RedirectException extends __BaseException {
    constructor(opts) {
        super({
            name: "RedirectException",
            $fault: "client",
            ...opts,
        });
        this.name = "RedirectException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RedirectException.prototype);
        this.Location = opts.Location;
        this.Message = opts.Message;
    }
}
export class UnsupportedDigitalSignatureMethodException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedDigitalSignatureMethodException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedDigitalSignatureMethodException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedDigitalSignatureMethodException.prototype);
        this.Message = opts.Message;
    }
}
export const CheckoutType = {
    PERPETUAL: "PERPETUAL",
    PROVISIONAL: "PROVISIONAL",
};
export const RenewType = {
    MONTHLY: "Monthly",
    NONE: "None",
    WEEKLY: "Weekly",
};
export const EntitlementUnit = {
    BITS: "Bits",
    BITS_PER_SECOND: "Bits/Second",
    BYTES: "Bytes",
    BYTES_PER_SECOND: "Bytes/Second",
    COUNT: "Count",
    COUNT_PER_SECOND: "Count/Second",
    GIGABITS: "Gigabits",
    GIGABITS_PER_SECOND: "Gigabits/Second",
    GIGABYTES: "Gigabytes",
    GIGABYTES_PER_SECOND: "Gigabytes/Second",
    KILOBITS: "Kilobits",
    KILOBITS_PER_SECOND: "Kilobits/Second",
    KILOBYTES: "Kilobytes",
    KILOBYTES_PER_SECOND: "Kilobytes/Second",
    MEGABITS: "Megabits",
    MEGABITS_PER_SECOND: "Megabits/Second",
    MEGABYTES: "Megabytes",
    MEGABYTES_PER_SECOND: "Megabytes/Second",
    MICROSECONDS: "Microseconds",
    MILLISECONDS: "Milliseconds",
    NONE: "None",
    PERCENT: "Percent",
    SECONDS: "Seconds",
    TERABITS: "Terabits",
    TERABITS_PER_SECOND: "Terabits/Second",
    TERABYTES: "Terabytes",
    TERABYTES_PER_SECOND: "Terabytes/Second",
};
export const LicenseStatus = {
    AVAILABLE: "AVAILABLE",
    DEACTIVATED: "DEACTIVATED",
    DELETED: "DELETED",
    EXPIRED: "EXPIRED",
    PENDING_AVAILABLE: "PENDING_AVAILABLE",
    PENDING_DELETE: "PENDING_DELETE",
    SUSPENDED: "SUSPENDED",
};
export const LicenseCountingType = {
    CORE: "Core",
    INSTANCE: "Instance",
    SOCKET: "Socket",
    VCPU: "vCPU",
};
export const ReportFrequencyType = {
    DAY: "DAY",
    MONTH: "MONTH",
    WEEK: "WEEK",
};
export const ReportType = {
    LICENSE_CONFIGURATION_SUMMARY_REPORT: "LicenseConfigurationSummaryReport",
    LICENSE_CONFIGURATION_USAGE_REPORT: "LicenseConfigurationUsageReport",
};
export const TokenType = {
    REFRESH_TOKEN: "REFRESH_TOKEN",
};
export const LicenseDeletionStatus = {
    DELETED: "DELETED",
    PENDING_DELETE: "PENDING_DELETE",
};
export const ResourceType = {
    EC2_AMI: "EC2_AMI",
    EC2_HOST: "EC2_HOST",
    EC2_INSTANCE: "EC2_INSTANCE",
    RDS: "RDS",
    SYSTEMS_MANAGER_MANAGED_INSTANCE: "SYSTEMS_MANAGER_MANAGED_INSTANCE",
};
export const LicenseConversionTaskStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
export class FilterLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "FilterLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "FilterLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FilterLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const ReceivedStatus = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    DISABLED: "DISABLED",
    FAILED_WORKFLOW: "FAILED_WORKFLOW",
    PENDING_ACCEPT: "PENDING_ACCEPT",
    PENDING_WORKFLOW: "PENDING_WORKFLOW",
    REJECTED: "REJECTED",
    WORKFLOW_COMPLETED: "WORKFLOW_COMPLETED",
};
export class FailedDependencyException extends __BaseException {
    constructor(opts) {
        super({
            name: "FailedDependencyException",
            $fault: "client",
            ...opts,
        });
        this.name = "FailedDependencyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, FailedDependencyException.prototype);
        this.Message = opts.Message;
        this.ErrorCode = opts.ErrorCode;
    }
}
export const InventoryFilterCondition = {
    BEGINS_WITH: "BEGINS_WITH",
    CONTAINS: "CONTAINS",
    EQUALS: "EQUALS",
    NOT_EQUALS: "NOT_EQUALS",
};
export const LicenseConfigurationStatus = {
    AVAILABLE: "AVAILABLE",
    DISABLED: "DISABLED",
};
export class InvalidResourceStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidResourceStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidResourceStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceStateException.prototype);
        this.Message = opts.Message;
    }
}
export class LicenseUsageException extends __BaseException {
    constructor(opts) {
        super({
            name: "LicenseUsageException",
            $fault: "client",
            ...opts,
        });
        this.name = "LicenseUsageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LicenseUsageException.prototype);
        this.Message = opts.Message;
    }
}
