import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../IoTSecureTunnelingClient";
import { DescribeTunnelRequest, DescribeTunnelResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link DescribeTunnelCommand}.
 */
export interface DescribeTunnelCommandInput extends DescribeTunnelRequest {
}
/**
 * @public
 *
 * The output of {@link DescribeTunnelCommand}.
 */
export interface DescribeTunnelCommandOutput extends DescribeTunnelResponse, __MetadataBearer {
}
declare const DescribeTunnelCommand_base: {
    new (input: DescribeTunnelCommandInput): import("@smithy/smithy-client").CommandImpl<DescribeTunnelCommandInput, DescribeTunnelCommandOutput, IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * @public
 * <p>Gets information about a tunnel identified by the unique tunnel id.</p>
 *          <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeTunnel</a> action.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { IoTSecureTunnelingClient, DescribeTunnelCommand } from "@aws-sdk/client-iotsecuretunneling"; // ES Modules import
 * // const { IoTSecureTunnelingClient, DescribeTunnelCommand } = require("@aws-sdk/client-iotsecuretunneling"); // CommonJS import
 * const client = new IoTSecureTunnelingClient(config);
 * const input = { // DescribeTunnelRequest
 *   tunnelId: "STRING_VALUE", // required
 * };
 * const command = new DescribeTunnelCommand(input);
 * const response = await client.send(command);
 * // { // DescribeTunnelResponse
 * //   tunnel: { // Tunnel
 * //     tunnelId: "STRING_VALUE",
 * //     tunnelArn: "STRING_VALUE",
 * //     status: "OPEN" || "CLOSED",
 * //     sourceConnectionState: { // ConnectionState
 * //       status: "CONNECTED" || "DISCONNECTED",
 * //       lastUpdatedAt: new Date("TIMESTAMP"),
 * //     },
 * //     destinationConnectionState: {
 * //       status: "CONNECTED" || "DISCONNECTED",
 * //       lastUpdatedAt: new Date("TIMESTAMP"),
 * //     },
 * //     description: "STRING_VALUE",
 * //     destinationConfig: { // DestinationConfig
 * //       thingName: "STRING_VALUE",
 * //       services: [ // ServiceList // required
 * //         "STRING_VALUE",
 * //       ],
 * //     },
 * //     timeoutConfig: { // TimeoutConfig
 * //       maxLifetimeTimeoutMinutes: Number("int"),
 * //     },
 * //     tags: [ // TagList
 * //       { // Tag
 * //         key: "STRING_VALUE", // required
 * //         value: "STRING_VALUE", // required
 * //       },
 * //     ],
 * //     createdAt: new Date("TIMESTAMP"),
 * //     lastUpdatedAt: new Date("TIMESTAMP"),
 * //   },
 * // };
 *
 * ```
 *
 * @param DescribeTunnelCommandInput - {@link DescribeTunnelCommandInput}
 * @returns {@link DescribeTunnelCommandOutput}
 * @see {@link DescribeTunnelCommandInput} for command's `input` shape.
 * @see {@link DescribeTunnelCommandOutput} for command's `response` shape.
 * @see {@link IoTSecureTunnelingClientResolvedConfig | config} for IoTSecureTunnelingClient's `config` shape.
 *
 * @throws {@link ResourceNotFoundException} (client fault)
 *  <p>Thrown when an operation is attempted on a resource that does not exist.</p>
 *
 * @throws {@link IoTSecureTunnelingServiceException}
 * <p>Base exception class for all service exceptions from IoTSecureTunneling service.</p>
 *
 */
export declare class DescribeTunnelCommand extends DescribeTunnelCommand_base {
}
