import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { CloseTunnelCommandInput, CloseTunnelCommandOutput } from "./commands/CloseTunnelCommand";
import { DescribeTunnelCommandInput, DescribeTunnelCommandOutput } from "./commands/DescribeTunnelCommand";
import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "./commands/ListTagsForResourceCommand";
import { ListTunnelsCommandInput, ListTunnelsCommandOutput } from "./commands/ListTunnelsCommand";
import { OpenTunnelCommandInput, OpenTunnelCommandOutput } from "./commands/OpenTunnelCommand";
import { RotateTunnelAccessTokenCommandInput, RotateTunnelAccessTokenCommandOutput } from "./commands/RotateTunnelAccessTokenCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "./commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "./commands/UntagResourceCommand";
import { IoTSecureTunnelingClient } from "./IoTSecureTunnelingClient";
export interface IoTSecureTunneling {
    /**
     * @see {@link CloseTunnelCommand}
     */
    closeTunnel(args: CloseTunnelCommandInput, options?: __HttpHandlerOptions): Promise<CloseTunnelCommandOutput>;
    closeTunnel(args: CloseTunnelCommandInput, cb: (err: any, data?: CloseTunnelCommandOutput) => void): void;
    closeTunnel(args: CloseTunnelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CloseTunnelCommandOutput) => void): void;
    /**
     * @see {@link DescribeTunnelCommand}
     */
    describeTunnel(args: DescribeTunnelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTunnelCommandOutput>;
    describeTunnel(args: DescribeTunnelCommandInput, cb: (err: any, data?: DescribeTunnelCommandOutput) => void): void;
    describeTunnel(args: DescribeTunnelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTunnelCommandOutput) => void): void;
    /**
     * @see {@link ListTagsForResourceCommand}
     */
    listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
    listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
    /**
     * @see {@link ListTunnelsCommand}
     */
    listTunnels(): Promise<ListTunnelsCommandOutput>;
    listTunnels(args: ListTunnelsCommandInput, options?: __HttpHandlerOptions): Promise<ListTunnelsCommandOutput>;
    listTunnels(args: ListTunnelsCommandInput, cb: (err: any, data?: ListTunnelsCommandOutput) => void): void;
    listTunnels(args: ListTunnelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTunnelsCommandOutput) => void): void;
    /**
     * @see {@link OpenTunnelCommand}
     */
    openTunnel(): Promise<OpenTunnelCommandOutput>;
    openTunnel(args: OpenTunnelCommandInput, options?: __HttpHandlerOptions): Promise<OpenTunnelCommandOutput>;
    openTunnel(args: OpenTunnelCommandInput, cb: (err: any, data?: OpenTunnelCommandOutput) => void): void;
    openTunnel(args: OpenTunnelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: OpenTunnelCommandOutput) => void): void;
    /**
     * @see {@link RotateTunnelAccessTokenCommand}
     */
    rotateTunnelAccessToken(args: RotateTunnelAccessTokenCommandInput, options?: __HttpHandlerOptions): Promise<RotateTunnelAccessTokenCommandOutput>;
    rotateTunnelAccessToken(args: RotateTunnelAccessTokenCommandInput, cb: (err: any, data?: RotateTunnelAccessTokenCommandOutput) => void): void;
    rotateTunnelAccessToken(args: RotateTunnelAccessTokenCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RotateTunnelAccessTokenCommandOutput) => void): void;
    /**
     * @see {@link TagResourceCommand}
     */
    tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
    tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
    /**
     * @see {@link UntagResourceCommand}
     */
    untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
    untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
}
/**
 * <fullname>IoT Secure Tunneling</fullname>
 *          <p>IoT Secure Tunneling creates remote connections to devices deployed in the
 * 			field.</p>
 *          <p>For more information about how IoT Secure Tunneling works, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/secure-tunneling.html">IoT
 * 				Secure Tunneling</a>.</p>
 * @public
 */
export declare class IoTSecureTunneling extends IoTSecureTunnelingClient implements IoTSecureTunneling {
}
