import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, take, withBaseException, } from "@smithy/smithy-client";
import { BadRequestException, ConflictException, ForbiddenException, InternalServerErrorException, NotFoundException, TooManyRequestsException, } from "../models/models_0";
import { ServerlessApplicationRepositoryServiceException as __BaseException } from "../models/ServerlessApplicationRepositoryServiceException";
export const se_CreateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications");
    let body;
    body = JSON.stringify(take(input, {
        author: [, , `Author`],
        description: [, , `Description`],
        homePageUrl: [, , `HomePageUrl`],
        labels: [, (_) => _json(_), `Labels`],
        licenseBody: [, , `LicenseBody`],
        licenseUrl: [, , `LicenseUrl`],
        name: [, , `Name`],
        readmeBody: [, , `ReadmeBody`],
        readmeUrl: [, , `ReadmeUrl`],
        semanticVersion: [, , `SemanticVersion`],
        sourceCodeArchiveUrl: [, , `SourceCodeArchiveUrl`],
        sourceCodeUrl: [, , `SourceCodeUrl`],
        spdxLicenseId: [, , `SpdxLicenseId`],
        templateBody: [, , `TemplateBody`],
        templateUrl: [, , `TemplateUrl`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateApplicationVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/versions/{SemanticVersion}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("SemanticVersion", () => input.SemanticVersion, "{SemanticVersion}", false);
    let body;
    body = JSON.stringify(take(input, {
        sourceCodeArchiveUrl: [, , `SourceCodeArchiveUrl`],
        sourceCodeUrl: [, , `SourceCodeUrl`],
        templateBody: [, , `TemplateBody`],
        templateUrl: [, , `TemplateUrl`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateCloudFormationChangeSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/changesets");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        capabilities: [, (_) => _json(_), `Capabilities`],
        changeSetName: [, , `ChangeSetName`],
        clientToken: [, , `ClientToken`],
        description: [, , `Description`],
        notificationArns: [, (_) => _json(_), `NotificationArns`],
        parameterOverrides: [, (_) => se___listOfParameterValue(_, context), `ParameterOverrides`],
        resourceTypes: [, (_) => _json(_), `ResourceTypes`],
        rollbackConfiguration: [, (_) => se_RollbackConfiguration(_, context), `RollbackConfiguration`],
        semanticVersion: [, , `SemanticVersion`],
        stackName: [, , `StackName`],
        tags: [, (_) => se___listOfTag(_, context), `Tags`],
        templateId: [, , `TemplateId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCloudFormationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/templates");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        semanticVersion: [, , `SemanticVersion`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_sV]: [, input[_SV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetApplicationPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/policy");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCloudFormationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/templates/{TemplateId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    b.p("TemplateId", () => input.TemplateId, "{TemplateId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListApplicationDependenciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/dependencies");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_mI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
        [_nT]: [, input[_NT]],
        [_sV]: [, input[_SV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications");
    const query = map({
        [_mI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListApplicationVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{ApplicationId}/versions");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    const query = map({
        [_mI]: [() => input.MaxItems !== void 0, () => input[_MI].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutApplicationPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/policy");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        statements: [, (_) => se___listOfApplicationPolicyStatement(_, context), `Statements`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UnshareApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}/unshare");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        organizationId: [, , `OrganizationId`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{ApplicationId}");
    b.p("ApplicationId", () => input.ApplicationId, "{ApplicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        author: [, , `Author`],
        description: [, , `Description`],
        homePageUrl: [, , `HomePageUrl`],
        labels: [, (_) => _json(_), `Labels`],
        readmeBody: [, , `ReadmeBody`],
        readmeUrl: [, , `ReadmeUrl`],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: [, __expectString, `applicationId`],
        Author: [, __expectString, `author`],
        CreationTime: [, __expectString, `creationTime`],
        Description: [, __expectString, `description`],
        HomePageUrl: [, __expectString, `homePageUrl`],
        IsVerifiedAuthor: [, __expectBoolean, `isVerifiedAuthor`],
        Labels: [, _json, `labels`],
        LicenseUrl: [, __expectString, `licenseUrl`],
        Name: [, __expectString, `name`],
        ReadmeUrl: [, __expectString, `readmeUrl`],
        SpdxLicenseId: [, __expectString, `spdxLicenseId`],
        VerifiedAuthorUrl: [, __expectString, `verifiedAuthorUrl`],
        Version: [, (_) => de_Version(_, context), `version`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateApplicationVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: [, __expectString, `applicationId`],
        CreationTime: [, __expectString, `creationTime`],
        ParameterDefinitions: [, (_) => de___listOfParameterDefinition(_, context), `parameterDefinitions`],
        RequiredCapabilities: [, _json, `requiredCapabilities`],
        ResourcesSupported: [, __expectBoolean, `resourcesSupported`],
        SemanticVersion: [, __expectString, `semanticVersion`],
        SourceCodeArchiveUrl: [, __expectString, `sourceCodeArchiveUrl`],
        SourceCodeUrl: [, __expectString, `sourceCodeUrl`],
        TemplateUrl: [, __expectString, `templateUrl`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCloudFormationChangeSetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: [, __expectString, `applicationId`],
        ChangeSetId: [, __expectString, `changeSetId`],
        SemanticVersion: [, __expectString, `semanticVersion`],
        StackId: [, __expectString, `stackId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCloudFormationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: [, __expectString, `applicationId`],
        CreationTime: [, __expectString, `creationTime`],
        ExpirationTime: [, __expectString, `expirationTime`],
        SemanticVersion: [, __expectString, `semanticVersion`],
        Status: [, __expectString, `status`],
        TemplateId: [, __expectString, `templateId`],
        TemplateUrl: [, __expectString, `templateUrl`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: [, __expectString, `applicationId`],
        Author: [, __expectString, `author`],
        CreationTime: [, __expectString, `creationTime`],
        Description: [, __expectString, `description`],
        HomePageUrl: [, __expectString, `homePageUrl`],
        IsVerifiedAuthor: [, __expectBoolean, `isVerifiedAuthor`],
        Labels: [, _json, `labels`],
        LicenseUrl: [, __expectString, `licenseUrl`],
        Name: [, __expectString, `name`],
        ReadmeUrl: [, __expectString, `readmeUrl`],
        SpdxLicenseId: [, __expectString, `spdxLicenseId`],
        VerifiedAuthorUrl: [, __expectString, `verifiedAuthorUrl`],
        Version: [, (_) => de_Version(_, context), `version`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetApplicationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Statements: [, (_) => de___listOfApplicationPolicyStatement(_, context), `statements`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCloudFormationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: [, __expectString, `applicationId`],
        CreationTime: [, __expectString, `creationTime`],
        ExpirationTime: [, __expectString, `expirationTime`],
        SemanticVersion: [, __expectString, `semanticVersion`],
        Status: [, __expectString, `status`],
        TemplateId: [, __expectString, `templateId`],
        TemplateUrl: [, __expectString, `templateUrl`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationDependenciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Dependencies: [, (_) => de___listOfApplicationDependencySummary(_, context), `dependencies`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Applications: [, (_) => de___listOfApplicationSummary(_, context), `applications`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        Versions: [, (_) => de___listOfVersionSummary(_, context), `versions`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutApplicationPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Statements: [, (_) => de___listOfApplicationPolicyStatement(_, context), `statements`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UnshareApplicationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: [, __expectString, `applicationId`],
        Author: [, __expectString, `author`],
        CreationTime: [, __expectString, `creationTime`],
        Description: [, __expectString, `description`],
        HomePageUrl: [, __expectString, `homePageUrl`],
        IsVerifiedAuthor: [, __expectBoolean, `isVerifiedAuthor`],
        Labels: [, _json, `labels`],
        LicenseUrl: [, __expectString, `licenseUrl`],
        Name: [, __expectString, `name`],
        ReadmeUrl: [, __expectString, `readmeUrl`],
        SpdxLicenseId: [, __expectString, `spdxLicenseId`],
        VerifiedAuthorUrl: [, __expectString, `verifiedAuthorUrl`],
        Version: [, (_) => de_Version(_, context), `version`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.serverlessapplicationrepository#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.serverlessapplicationrepository#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.serverlessapplicationrepository#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.serverlessapplicationrepository#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.serverlessapplicationrepository#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.serverlessapplicationrepository#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorCode: [, __expectString, `errorCode`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorCode: [, __expectString, `errorCode`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorCode: [, __expectString, `errorCode`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorCode: [, __expectString, `errorCode`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorCode: [, __expectString, `errorCode`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorCode: [, __expectString, `errorCode`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se___listOfApplicationPolicyStatement = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ApplicationPolicyStatement(entry, context);
    });
};
const se___listOfParameterValue = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ParameterValue(entry, context);
    });
};
const se___listOfRollbackTrigger = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RollbackTrigger(entry, context);
    });
};
const se___listOfTag = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Tag(entry, context);
    });
};
const se_ApplicationPolicyStatement = (input, context) => {
    return take(input, {
        actions: [, _json, `Actions`],
        principalOrgIDs: [, _json, `PrincipalOrgIDs`],
        principals: [, _json, `Principals`],
        statementId: [, , `StatementId`],
    });
};
const se_ParameterValue = (input, context) => {
    return take(input, {
        name: [, , `Name`],
        value: [, , `Value`],
    });
};
const se_RollbackConfiguration = (input, context) => {
    return take(input, {
        monitoringTimeInMinutes: [, , `MonitoringTimeInMinutes`],
        rollbackTriggers: [, (_) => se___listOfRollbackTrigger(_, context), `RollbackTriggers`],
    });
};
const se_RollbackTrigger = (input, context) => {
    return take(input, {
        arn: [, , `Arn`],
        type: [, , `Type`],
    });
};
const se_Tag = (input, context) => {
    return take(input, {
        key: [, , `Key`],
        value: [, , `Value`],
    });
};
const de___listOfApplicationDependencySummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationDependencySummary(entry, context);
    });
    return retVal;
};
const de___listOfApplicationPolicyStatement = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationPolicyStatement(entry, context);
    });
    return retVal;
};
const de___listOfApplicationSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationSummary(entry, context);
    });
    return retVal;
};
const de___listOfParameterDefinition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParameterDefinition(entry, context);
    });
    return retVal;
};
const de___listOfVersionSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VersionSummary(entry, context);
    });
    return retVal;
};
const de_ApplicationDependencySummary = (output, context) => {
    return take(output, {
        ApplicationId: [, __expectString, `applicationId`],
        SemanticVersion: [, __expectString, `semanticVersion`],
    });
};
const de_ApplicationPolicyStatement = (output, context) => {
    return take(output, {
        Actions: [, _json, `actions`],
        PrincipalOrgIDs: [, _json, `principalOrgIDs`],
        Principals: [, _json, `principals`],
        StatementId: [, __expectString, `statementId`],
    });
};
const de_ApplicationSummary = (output, context) => {
    return take(output, {
        ApplicationId: [, __expectString, `applicationId`],
        Author: [, __expectString, `author`],
        CreationTime: [, __expectString, `creationTime`],
        Description: [, __expectString, `description`],
        HomePageUrl: [, __expectString, `homePageUrl`],
        Labels: [, _json, `labels`],
        Name: [, __expectString, `name`],
        SpdxLicenseId: [, __expectString, `spdxLicenseId`],
    });
};
const de_ParameterDefinition = (output, context) => {
    return take(output, {
        AllowedPattern: [, __expectString, `allowedPattern`],
        AllowedValues: [, _json, `allowedValues`],
        ConstraintDescription: [, __expectString, `constraintDescription`],
        DefaultValue: [, __expectString, `defaultValue`],
        Description: [, __expectString, `description`],
        MaxLength: [, __expectInt32, `maxLength`],
        MaxValue: [, __expectInt32, `maxValue`],
        MinLength: [, __expectInt32, `minLength`],
        MinValue: [, __expectInt32, `minValue`],
        Name: [, __expectString, `name`],
        NoEcho: [, __expectBoolean, `noEcho`],
        ReferencedByResources: [, _json, `referencedByResources`],
        Type: [, __expectString, `type`],
    });
};
const de_Version = (output, context) => {
    return take(output, {
        ApplicationId: [, __expectString, `applicationId`],
        CreationTime: [, __expectString, `creationTime`],
        ParameterDefinitions: [, (_) => de___listOfParameterDefinition(_, context), `parameterDefinitions`],
        RequiredCapabilities: [, _json, `requiredCapabilities`],
        ResourcesSupported: [, __expectBoolean, `resourcesSupported`],
        SemanticVersion: [, __expectString, `semanticVersion`],
        SourceCodeArchiveUrl: [, __expectString, `sourceCodeArchiveUrl`],
        SourceCodeUrl: [, __expectString, `sourceCodeUrl`],
        TemplateUrl: [, __expectString, `templateUrl`],
    });
};
const de_VersionSummary = (output, context) => {
    return take(output, {
        ApplicationId: [, __expectString, `applicationId`],
        CreationTime: [, __expectString, `creationTime`],
        SemanticVersion: [, __expectString, `semanticVersion`],
        SourceCodeUrl: [, __expectString, `sourceCodeUrl`],
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _MI = "MaxItems";
const _NT = "NextToken";
const _SV = "SemanticVersion";
const _mI = "maxItems";
const _nT = "nextToken";
const _sV = "semanticVersion";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
