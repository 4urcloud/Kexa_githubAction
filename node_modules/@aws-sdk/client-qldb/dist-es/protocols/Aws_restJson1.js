import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { InvalidParameterException, LimitExceededException, ResourceAlreadyExistsException, ResourceInUseException, ResourceNotFoundException, ResourcePreconditionNotMetException, } from "../models/models_0";
import { QLDBServiceException as __BaseException } from "../models/QLDBServiceException";
export const se_CancelJournalKinesisStreamCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ledgers/{LedgerName}/journal-kinesis-streams/{StreamId}");
    b.p("LedgerName", () => input.LedgerName, "{LedgerName}", false);
    b.p("StreamId", () => input.StreamId, "{StreamId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_CreateLedgerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ledgers");
    let body;
    body = JSON.stringify(take(input, {
        DeletionProtection: [],
        KmsKey: [],
        Name: [],
        PermissionsMode: [],
        Tags: (_) => se_Tags(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteLedgerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ledgers/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeJournalKinesisStreamCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ledgers/{LedgerName}/journal-kinesis-streams/{StreamId}");
    b.p("LedgerName", () => input.LedgerName, "{LedgerName}", false);
    b.p("StreamId", () => input.StreamId, "{StreamId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeJournalS3ExportCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ledgers/{Name}/journal-s3-exports/{ExportId}");
    b.p("Name", () => input.Name, "{Name}", false);
    b.p("ExportId", () => input.ExportId, "{ExportId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeLedgerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ledgers/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ExportJournalToS3Command = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ledgers/{Name}/journal-s3-exports");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        ExclusiveEndTime: (_) => Math.round(_.getTime() / 1000),
        InclusiveStartTime: (_) => Math.round(_.getTime() / 1000),
        OutputFormat: [],
        RoleArn: [],
        S3ExportConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetBlockCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ledgers/{Name}/block");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        BlockAddress: (_) => _json(_),
        DigestTipAddress: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetDigestCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ledgers/{Name}/digest");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetRevisionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ledgers/{Name}/revision");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        BlockAddress: (_) => _json(_),
        DigestTipAddress: (_) => _json(_),
        DocumentId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListJournalKinesisStreamsForLedgerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ledgers/{LedgerName}/journal-kinesis-streams");
    b.p("LedgerName", () => input.LedgerName, "{LedgerName}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJournalS3ExportsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/journal-s3-exports");
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJournalS3ExportsForLedgerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ledgers/{Name}/journal-s3-exports");
    b.p("Name", () => input.Name, "{Name}", false);
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLedgersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/ledgers");
    const query = map({
        [_mr]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nt]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_StreamJournalToKinesisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ledgers/{LedgerName}/journal-kinesis-streams");
    b.p("LedgerName", () => input.LedgerName, "{LedgerName}", false);
    let body;
    body = JSON.stringify(take(input, {
        ExclusiveEndTime: (_) => Math.round(_.getTime() / 1000),
        InclusiveStartTime: (_) => Math.round(_.getTime() / 1000),
        KinesisConfiguration: (_) => _json(_),
        RoleArn: [],
        StreamName: [],
        Tags: (_) => se_Tags(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => se_Tags(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateLedgerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ledgers/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        DeletionProtection: [],
        KmsKey: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateLedgerPermissionsModeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ledgers/{Name}/permissions-mode");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        PermissionsMode: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_CancelJournalKinesisStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        StreamId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLedgerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtection: __expectBoolean,
        KmsKeyArn: __expectString,
        Name: __expectString,
        PermissionsMode: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteLedgerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeJournalKinesisStreamCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Stream: (_) => de_JournalKinesisStreamDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeJournalS3ExportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ExportDescription: (_) => de_JournalS3ExportDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeLedgerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtection: __expectBoolean,
        EncryptionDescription: (_) => de_LedgerEncryptionDescription(_, context),
        Name: __expectString,
        PermissionsMode: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ExportJournalToS3Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ExportId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBlockCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Block: _json,
        Proof: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDigestCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Digest: context.base64Decoder,
        DigestTipAddress: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRevisionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Proof: _json,
        Revision: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJournalKinesisStreamsForLedgerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Streams: (_) => de_JournalKinesisStreamDescriptionList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJournalS3ExportsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JournalS3Exports: (_) => de_JournalS3ExportList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJournalS3ExportsForLedgerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JournalS3Exports: (_) => de_JournalS3ExportList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLedgersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Ledgers: (_) => de_LedgerList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: (_) => de_Tags(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StreamJournalToKinesisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        StreamId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateLedgerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtection: __expectBoolean,
        EncryptionDescription: (_) => de_LedgerEncryptionDescription(_, context),
        Name: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateLedgerPermissionsModeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        Name: __expectString,
        PermissionsMode: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.qldb#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.qldb#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourcePreconditionNotMetException":
        case "com.amazonaws.qldb#ResourcePreconditionNotMetException":
            throw await de_ResourcePreconditionNotMetExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.qldb#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.qldb#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.qldb#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ParameterName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourcePreconditionNotMetExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourcePreconditionNotMetException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_Tags = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            acc[key] = null;
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const de_JournalKinesisStreamDescription = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorCause: __expectString,
        ExclusiveEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InclusiveStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        KinesisConfiguration: _json,
        LedgerName: __expectString,
        RoleArn: __expectString,
        Status: __expectString,
        StreamId: __expectString,
        StreamName: __expectString,
    });
};
const de_JournalKinesisStreamDescriptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JournalKinesisStreamDescription(entry, context);
    });
    return retVal;
};
const de_JournalS3ExportDescription = (output, context) => {
    return take(output, {
        ExclusiveEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExportCreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExportId: __expectString,
        InclusiveStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LedgerName: __expectString,
        OutputFormat: __expectString,
        RoleArn: __expectString,
        S3ExportConfiguration: _json,
        Status: __expectString,
    });
};
const de_JournalS3ExportList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JournalS3ExportDescription(entry, context);
    });
    return retVal;
};
const de_LedgerEncryptionDescription = (output, context) => {
    return take(output, {
        EncryptionStatus: __expectString,
        InaccessibleKmsKeyDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        KmsKeyArn: __expectString,
    });
};
const de_LedgerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LedgerSummary(entry, context);
    });
    return retVal;
};
const de_LedgerSummary = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        State: __expectString,
    });
};
const de_Tags = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            acc[key] = null;
            return acc;
        }
        acc[key] = __expectString(value);
        return acc;
    }, {});
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _MR = "MaxResults";
const _NT = "NextToken";
const _TK = "TagKeys";
const _mr = "max_results";
const _nt = "next_token";
const _tK = "tagKeys";
