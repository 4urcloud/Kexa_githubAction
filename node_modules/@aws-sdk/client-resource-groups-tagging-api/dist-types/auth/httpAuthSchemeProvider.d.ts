import { AwsSdkSigV4AuthInputConfig, AwsSdkSigV4AuthResolvedConfig, AwsSdkSigV4PreviouslyResolved } from "@aws-sdk/core";
import { HandlerExecutionContext, HttpAuthScheme, HttpAuthSchemeParameters, HttpAuthSchemeParametersProvider, HttpAuthSchemeProvider } from "@smithy/types";
import { ResourceGroupsTaggingAPIClientResolvedConfig } from "../ResourceGroupsTaggingAPIClient";
/**
 * @internal
 */
export interface ResourceGroupsTaggingAPIHttpAuthSchemeParameters extends HttpAuthSchemeParameters {
    region?: string;
}
/**
 * @internal
 */
export interface ResourceGroupsTaggingAPIHttpAuthSchemeParametersProvider extends HttpAuthSchemeParametersProvider<ResourceGroupsTaggingAPIClientResolvedConfig, HandlerExecutionContext, ResourceGroupsTaggingAPIHttpAuthSchemeParameters, object> {
}
/**
 * @internal
 */
export declare const defaultResourceGroupsTaggingAPIHttpAuthSchemeParametersProvider: (config: ResourceGroupsTaggingAPIClientResolvedConfig, context: HandlerExecutionContext, input: object) => Promise<ResourceGroupsTaggingAPIHttpAuthSchemeParameters>;
/**
 * @internal
 */
export interface ResourceGroupsTaggingAPIHttpAuthSchemeProvider extends HttpAuthSchemeProvider<ResourceGroupsTaggingAPIHttpAuthSchemeParameters> {
}
/**
 * @internal
 */
export declare const defaultResourceGroupsTaggingAPIHttpAuthSchemeProvider: ResourceGroupsTaggingAPIHttpAuthSchemeProvider;
/**
 * @internal
 */
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
    /**
     * experimentalIdentityAndAuth: Configuration of HttpAuthSchemes for a client which provides default identity providers and signers per auth scheme.
     * @internal
     */
    httpAuthSchemes?: HttpAuthScheme[];
    /**
     * experimentalIdentityAndAuth: Configuration of an HttpAuthSchemeProvider for a client which resolves which HttpAuthScheme to use.
     * @internal
     */
    httpAuthSchemeProvider?: ResourceGroupsTaggingAPIHttpAuthSchemeProvider;
}
/**
 * @internal
 */
export interface HttpAuthSchemeResolvedConfig extends AwsSdkSigV4AuthResolvedConfig {
    /**
     * experimentalIdentityAndAuth: Configuration of HttpAuthSchemes for a client which provides default identity providers and signers per auth scheme.
     * @internal
     */
    readonly httpAuthSchemes: HttpAuthScheme[];
    /**
     * experimentalIdentityAndAuth: Configuration of an HttpAuthSchemeProvider for a client which resolves which HttpAuthScheme to use.
     * @internal
     */
    readonly httpAuthSchemeProvider: ResourceGroupsTaggingAPIHttpAuthSchemeProvider;
}
/**
 * @internal
 */
export declare const resolveHttpAuthSchemeConfig: <T>(config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved) => T & HttpAuthSchemeResolvedConfig;
