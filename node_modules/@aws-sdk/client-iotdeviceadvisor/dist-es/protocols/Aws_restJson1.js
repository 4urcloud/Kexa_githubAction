import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { IotDeviceAdvisorServiceException as __BaseException } from "../models/IotDeviceAdvisorServiceException";
import { ConflictException, InternalServerException, ResourceNotFoundException, ValidationException, } from "../models/models_0";
export const se_CreateSuiteDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/suiteDefinitions");
    let body;
    body = JSON.stringify(take(input, {
        suiteDefinitionConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteSuiteDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/suiteDefinitions/{suiteDefinitionId}");
    b.p("suiteDefinitionId", () => input.suiteDefinitionId, "{suiteDefinitionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetEndpointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/endpoint");
    const query = map({
        [_tA]: [, input[_tA]],
        [_cA]: [, input[_cA]],
        [_dRA]: [, input[_dRA]],
        [_aM]: [, input[_aM]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSuiteDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/suiteDefinitions/{suiteDefinitionId}");
    b.p("suiteDefinitionId", () => input.suiteDefinitionId, "{suiteDefinitionId}", false);
    const query = map({
        [_sDV]: [, input[_sDV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSuiteRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}");
    b.p("suiteDefinitionId", () => input.suiteDefinitionId, "{suiteDefinitionId}", false);
    b.p("suiteRunId", () => input.suiteRunId, "{suiteRunId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSuiteRunReportCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/report");
    b.p("suiteDefinitionId", () => input.suiteDefinitionId, "{suiteDefinitionId}", false);
    b.p("suiteRunId", () => input.suiteRunId, "{suiteRunId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListSuiteDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/suiteDefinitions");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSuiteRunsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/suiteRuns");
    const query = map({
        [_sDI]: [, input[_sDI]],
        [_sDV]: [, input[_sDV]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_StartSuiteRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/suiteDefinitions/{suiteDefinitionId}/suiteRuns");
    b.p("suiteDefinitionId", () => input.suiteDefinitionId, "{suiteDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        suiteDefinitionVersion: [],
        suiteRunConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopSuiteRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/stop");
    b.p("suiteDefinitionId", () => input.suiteDefinitionId, "{suiteDefinitionId}", false);
    b.p("suiteRunId", () => input.suiteRunId, "{suiteRunId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateSuiteDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/suiteDefinitions/{suiteDefinitionId}");
    b.p("suiteDefinitionId", () => input.suiteDefinitionId, "{suiteDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        suiteDefinitionConfiguration: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_CreateSuiteDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        suiteDefinitionArn: __expectString,
        suiteDefinitionId: __expectString,
        suiteDefinitionName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteSuiteDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetEndpointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        endpoint: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSuiteDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        latestVersion: __expectString,
        suiteDefinitionArn: __expectString,
        suiteDefinitionConfiguration: _json,
        suiteDefinitionId: __expectString,
        suiteDefinitionVersion: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSuiteRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        errorReason: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        suiteDefinitionId: __expectString,
        suiteDefinitionVersion: __expectString,
        suiteRunArn: __expectString,
        suiteRunConfiguration: _json,
        suiteRunId: __expectString,
        tags: _json,
        testResult: (_) => de_TestResult(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSuiteRunReportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        qualificationReportDownloadUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSuiteDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        suiteDefinitionInformationList: (_) => de_SuiteDefinitionInformationList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSuiteRunsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        suiteRunsList: (_) => de_SuiteRunsList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartSuiteRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        endpoint: __expectString,
        suiteRunArn: __expectString,
        suiteRunId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopSuiteRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateSuiteDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        suiteDefinitionArn: __expectString,
        suiteDefinitionId: __expectString,
        suiteDefinitionName: __expectString,
        suiteDefinitionVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.iotdeviceadvisor#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.iotdeviceadvisor#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.iotdeviceadvisor#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.iotdeviceadvisor#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_GroupResult = (output, context) => {
    return take(output, {
        groupId: __expectString,
        groupName: __expectString,
        tests: (_) => de_TestCaseRuns(_, context),
    });
};
const de_GroupResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GroupResult(entry, context);
    });
    return retVal;
};
const de_SuiteDefinitionInformation = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        defaultDevices: _json,
        intendedForQualification: __expectBoolean,
        isLongDurationTest: __expectBoolean,
        protocol: __expectString,
        suiteDefinitionId: __expectString,
        suiteDefinitionName: __expectString,
    });
};
const de_SuiteDefinitionInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SuiteDefinitionInformation(entry, context);
    });
    return retVal;
};
const de_SuiteRunInformation = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        endAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failed: __expectInt32,
        passed: __expectInt32,
        startedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        suiteDefinitionId: __expectString,
        suiteDefinitionName: __expectString,
        suiteDefinitionVersion: __expectString,
        suiteRunId: __expectString,
    });
};
const de_SuiteRunsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SuiteRunInformation(entry, context);
    });
    return retVal;
};
const de_TestCaseRun = (output, context) => {
    return take(output, {
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failure: __expectString,
        logUrl: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        testCaseDefinitionId: __expectString,
        testCaseDefinitionName: __expectString,
        testCaseRunId: __expectString,
        testScenarios: _json,
        warnings: __expectString,
    });
};
const de_TestCaseRuns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TestCaseRun(entry, context);
    });
    return retVal;
};
const de_TestResult = (output, context) => {
    return take(output, {
        groups: (_) => de_GroupResultList(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _aM = "authenticationMethod";
const _cA = "certificateArn";
const _dRA = "deviceRoleArn";
const _mR = "maxResults";
const _nT = "nextToken";
const _sDI = "suiteDefinitionId";
const _sDV = "suiteDefinitionVersion";
const _tA = "thingArn";
const _tK = "tagKeys";
