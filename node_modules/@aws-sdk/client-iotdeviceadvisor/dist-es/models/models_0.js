import { IotDeviceAdvisorServiceException as __BaseException } from "./IotDeviceAdvisorServiceException";
export const AuthenticationMethod = {
    SignatureVersion4: "SignatureVersion4",
    X509ClientCertificate: "X509ClientCertificate",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export const Protocol = {
    MqttV3_1_1: "MqttV3_1_1",
    MqttV3_1_1_OverWebSocket: "MqttV3_1_1_OverWebSocket",
    MqttV5: "MqttV5",
    MqttV5_OverWebSocket: "MqttV5_OverWebSocket",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const SuiteRunStatus = {
    CANCELED: "CANCELED",
    ERROR: "ERROR",
    FAIL: "FAIL",
    PASS: "PASS",
    PASS_WITH_WARNINGS: "PASS_WITH_WARNINGS",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const Status = {
    CANCELED: "CANCELED",
    ERROR: "ERROR",
    FAIL: "FAIL",
    PASS: "PASS",
    PASS_WITH_WARNINGS: "PASS_WITH_WARNINGS",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const TestCaseScenarioStatus = {
    CANCELED: "CANCELED",
    ERROR: "ERROR",
    FAIL: "FAIL",
    PASS: "PASS",
    PASS_WITH_WARNINGS: "PASS_WITH_WARNINGS",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const TestCaseScenarioType = {
    Advanced: "Advanced",
    Basic: "Basic",
};
