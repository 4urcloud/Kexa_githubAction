import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { IotDeviceAdvisorServiceException as __BaseException } from "./IotDeviceAdvisorServiceException";
export declare const AuthenticationMethod: {
  readonly SignatureVersion4: "SignatureVersion4";
  readonly X509ClientCertificate: "X509ClientCertificate";
};
export type AuthenticationMethod =
  (typeof AuthenticationMethod)[keyof typeof AuthenticationMethod];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DeviceUnderTest {
  thingArn?: string;
  certificateArn?: string;
  deviceRoleArn?: string;
}
export declare const Protocol: {
  readonly MqttV3_1_1: "MqttV3_1_1";
  readonly MqttV3_1_1_OverWebSocket: "MqttV3_1_1_OverWebSocket";
  readonly MqttV5: "MqttV5";
  readonly MqttV5_OverWebSocket: "MqttV5_OverWebSocket";
};
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export interface SuiteDefinitionConfiguration {
  suiteDefinitionName: string | undefined;
  devices?: DeviceUnderTest[];
  intendedForQualification?: boolean;
  isLongDurationTest?: boolean;
  rootGroup: string | undefined;
  devicePermissionRoleArn: string | undefined;
  protocol?: Protocol;
}
export interface CreateSuiteDefinitionRequest {
  suiteDefinitionConfiguration: SuiteDefinitionConfiguration | undefined;
  tags?: Record<string, string>;
}
export interface CreateSuiteDefinitionResponse {
  suiteDefinitionId?: string;
  suiteDefinitionArn?: string;
  suiteDefinitionName?: string;
  createdAt?: Date;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteSuiteDefinitionRequest {
  suiteDefinitionId: string | undefined;
}
export interface DeleteSuiteDefinitionResponse {}
export interface GetEndpointRequest {
  thingArn?: string;
  certificateArn?: string;
  deviceRoleArn?: string;
  authenticationMethod?: AuthenticationMethod;
}
export interface GetEndpointResponse {
  endpoint?: string;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface GetSuiteDefinitionRequest {
  suiteDefinitionId: string | undefined;
  suiteDefinitionVersion?: string;
}
export interface GetSuiteDefinitionResponse {
  suiteDefinitionId?: string;
  suiteDefinitionArn?: string;
  suiteDefinitionVersion?: string;
  latestVersion?: string;
  suiteDefinitionConfiguration?: SuiteDefinitionConfiguration;
  createdAt?: Date;
  lastModifiedAt?: Date;
  tags?: Record<string, string>;
}
export interface GetSuiteRunRequest {
  suiteDefinitionId: string | undefined;
  suiteRunId: string | undefined;
}
export declare const SuiteRunStatus: {
  readonly CANCELED: "CANCELED";
  readonly ERROR: "ERROR";
  readonly FAIL: "FAIL";
  readonly PASS: "PASS";
  readonly PASS_WITH_WARNINGS: "PASS_WITH_WARNINGS";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type SuiteRunStatus =
  (typeof SuiteRunStatus)[keyof typeof SuiteRunStatus];
export interface SuiteRunConfiguration {
  primaryDevice: DeviceUnderTest | undefined;
  selectedTestList?: string[];
  parallelRun?: boolean;
}
export declare const Status: {
  readonly CANCELED: "CANCELED";
  readonly ERROR: "ERROR";
  readonly FAIL: "FAIL";
  readonly PASS: "PASS";
  readonly PASS_WITH_WARNINGS: "PASS_WITH_WARNINGS";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type Status = (typeof Status)[keyof typeof Status];
export declare const TestCaseScenarioStatus: {
  readonly CANCELED: "CANCELED";
  readonly ERROR: "ERROR";
  readonly FAIL: "FAIL";
  readonly PASS: "PASS";
  readonly PASS_WITH_WARNINGS: "PASS_WITH_WARNINGS";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type TestCaseScenarioStatus =
  (typeof TestCaseScenarioStatus)[keyof typeof TestCaseScenarioStatus];
export declare const TestCaseScenarioType: {
  readonly Advanced: "Advanced";
  readonly Basic: "Basic";
};
export type TestCaseScenarioType =
  (typeof TestCaseScenarioType)[keyof typeof TestCaseScenarioType];
export interface TestCaseScenario {
  testCaseScenarioId?: string;
  testCaseScenarioType?: TestCaseScenarioType;
  status?: TestCaseScenarioStatus;
  failure?: string;
  systemMessage?: string;
}
export interface TestCaseRun {
  testCaseRunId?: string;
  testCaseDefinitionId?: string;
  testCaseDefinitionName?: string;
  status?: Status;
  startTime?: Date;
  endTime?: Date;
  logUrl?: string;
  warnings?: string;
  failure?: string;
  testScenarios?: TestCaseScenario[];
}
export interface GroupResult {
  groupId?: string;
  groupName?: string;
  tests?: TestCaseRun[];
}
export interface TestResult {
  groups?: GroupResult[];
}
export interface GetSuiteRunResponse {
  suiteDefinitionId?: string;
  suiteDefinitionVersion?: string;
  suiteRunId?: string;
  suiteRunArn?: string;
  suiteRunConfiguration?: SuiteRunConfiguration;
  testResult?: TestResult;
  startTime?: Date;
  endTime?: Date;
  status?: SuiteRunStatus;
  errorReason?: string;
  tags?: Record<string, string>;
}
export interface GetSuiteRunReportRequest {
  suiteDefinitionId: string | undefined;
  suiteRunId: string | undefined;
}
export interface GetSuiteRunReportResponse {
  qualificationReportDownloadUrl?: string;
}
export interface ListSuiteDefinitionsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface SuiteDefinitionInformation {
  suiteDefinitionId?: string;
  suiteDefinitionName?: string;
  defaultDevices?: DeviceUnderTest[];
  intendedForQualification?: boolean;
  isLongDurationTest?: boolean;
  protocol?: Protocol;
  createdAt?: Date;
}
export interface ListSuiteDefinitionsResponse {
  suiteDefinitionInformationList?: SuiteDefinitionInformation[];
  nextToken?: string;
}
export interface ListSuiteRunsRequest {
  suiteDefinitionId?: string;
  suiteDefinitionVersion?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface SuiteRunInformation {
  suiteDefinitionId?: string;
  suiteDefinitionVersion?: string;
  suiteDefinitionName?: string;
  suiteRunId?: string;
  createdAt?: Date;
  startedAt?: Date;
  endAt?: Date;
  status?: SuiteRunStatus;
  passed?: number;
  failed?: number;
}
export interface ListSuiteRunsResponse {
  suiteRunsList?: SuiteRunInformation[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface StartSuiteRunRequest {
  suiteDefinitionId: string | undefined;
  suiteDefinitionVersion?: string;
  suiteRunConfiguration: SuiteRunConfiguration | undefined;
  tags?: Record<string, string>;
}
export interface StartSuiteRunResponse {
  suiteRunId?: string;
  suiteRunArn?: string;
  createdAt?: Date;
  endpoint?: string;
}
export interface StopSuiteRunRequest {
  suiteDefinitionId: string | undefined;
  suiteRunId: string | undefined;
}
export interface StopSuiteRunResponse {}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateSuiteDefinitionRequest {
  suiteDefinitionId: string | undefined;
  suiteDefinitionConfiguration: SuiteDefinitionConfiguration | undefined;
}
export interface UpdateSuiteDefinitionResponse {
  suiteDefinitionId?: string;
  suiteDefinitionArn?: string;
  suiteDefinitionName?: string;
  suiteDefinitionVersion?: string;
  createdAt?: Date;
  lastUpdatedAt?: Date;
}
