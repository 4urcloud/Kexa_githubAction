import { AppMeshServiceException as __BaseException } from "./AppMeshServiceException";
export var LoggingFormat;
(function (LoggingFormat) {
    LoggingFormat.visit = (value, visitor) => {
        if (value.text !== undefined)
            return visitor.text(value.text);
        if (value.json !== undefined)
            return visitor.json(value.json);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(LoggingFormat || (LoggingFormat = {}));
export var AccessLog;
(function (AccessLog) {
    AccessLog.visit = (value, visitor) => {
        if (value.file !== undefined)
            return visitor.file(value.file);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AccessLog || (AccessLog = {}));
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
    }
}
export class ForbiddenException extends __BaseException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
    }
}
export class InternalServerErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        this.$retryable = {};
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        this.$retryable = {};
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        this.$retryable = {
            throttling: true,
        };
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export const EgressFilterType = {
    ALLOW_ALL: "ALLOW_ALL",
    DROP_ALL: "DROP_ALL",
};
export const IpPreference = {
    IPv4_ONLY: "IPv4_ONLY",
    IPv4_PREFERRED: "IPv4_PREFERRED",
    IPv6_ONLY: "IPv6_ONLY",
    IPv6_PREFERRED: "IPv6_PREFERRED",
};
export const MeshStatusCode = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    INACTIVE: "INACTIVE",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
export var VirtualGatewayClientTlsCertificate;
(function (VirtualGatewayClientTlsCertificate) {
    VirtualGatewayClientTlsCertificate.visit = (value, visitor) => {
        if (value.file !== undefined)
            return visitor.file(value.file);
        if (value.sds !== undefined)
            return visitor.sds(value.sds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(VirtualGatewayClientTlsCertificate || (VirtualGatewayClientTlsCertificate = {}));
export var VirtualGatewayTlsValidationContextTrust;
(function (VirtualGatewayTlsValidationContextTrust) {
    VirtualGatewayTlsValidationContextTrust.visit = (value, visitor) => {
        if (value.acm !== undefined)
            return visitor.acm(value.acm);
        if (value.file !== undefined)
            return visitor.file(value.file);
        if (value.sds !== undefined)
            return visitor.sds(value.sds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(VirtualGatewayTlsValidationContextTrust || (VirtualGatewayTlsValidationContextTrust = {}));
export var VirtualGatewayConnectionPool;
(function (VirtualGatewayConnectionPool) {
    VirtualGatewayConnectionPool.visit = (value, visitor) => {
        if (value.http !== undefined)
            return visitor.http(value.http);
        if (value.http2 !== undefined)
            return visitor.http2(value.http2);
        if (value.grpc !== undefined)
            return visitor.grpc(value.grpc);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(VirtualGatewayConnectionPool || (VirtualGatewayConnectionPool = {}));
export const VirtualGatewayPortProtocol = {
    GRPC: "grpc",
    HTTP: "http",
    HTTP2: "http2",
};
export var VirtualGatewayListenerTlsCertificate;
(function (VirtualGatewayListenerTlsCertificate) {
    VirtualGatewayListenerTlsCertificate.visit = (value, visitor) => {
        if (value.acm !== undefined)
            return visitor.acm(value.acm);
        if (value.file !== undefined)
            return visitor.file(value.file);
        if (value.sds !== undefined)
            return visitor.sds(value.sds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(VirtualGatewayListenerTlsCertificate || (VirtualGatewayListenerTlsCertificate = {}));
export const VirtualGatewayListenerTlsMode = {
    DISABLED: "DISABLED",
    PERMISSIVE: "PERMISSIVE",
    STRICT: "STRICT",
};
export var VirtualGatewayListenerTlsValidationContextTrust;
(function (VirtualGatewayListenerTlsValidationContextTrust) {
    VirtualGatewayListenerTlsValidationContextTrust.visit = (value, visitor) => {
        if (value.file !== undefined)
            return visitor.file(value.file);
        if (value.sds !== undefined)
            return visitor.sds(value.sds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(VirtualGatewayListenerTlsValidationContextTrust || (VirtualGatewayListenerTlsValidationContextTrust = {}));
export var VirtualGatewayAccessLog;
(function (VirtualGatewayAccessLog) {
    VirtualGatewayAccessLog.visit = (value, visitor) => {
        if (value.file !== undefined)
            return visitor.file(value.file);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(VirtualGatewayAccessLog || (VirtualGatewayAccessLog = {}));
export const VirtualGatewayStatusCode = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    INACTIVE: "INACTIVE",
};
export const DefaultGatewayRouteRewrite = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export var GrpcMetadataMatchMethod;
(function (GrpcMetadataMatchMethod) {
    GrpcMetadataMatchMethod.visit = (value, visitor) => {
        if (value.exact !== undefined)
            return visitor.exact(value.exact);
        if (value.regex !== undefined)
            return visitor.regex(value.regex);
        if (value.range !== undefined)
            return visitor.range(value.range);
        if (value.prefix !== undefined)
            return visitor.prefix(value.prefix);
        if (value.suffix !== undefined)
            return visitor.suffix(value.suffix);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(GrpcMetadataMatchMethod || (GrpcMetadataMatchMethod = {}));
export var HeaderMatchMethod;
(function (HeaderMatchMethod) {
    HeaderMatchMethod.visit = (value, visitor) => {
        if (value.exact !== undefined)
            return visitor.exact(value.exact);
        if (value.regex !== undefined)
            return visitor.regex(value.regex);
        if (value.range !== undefined)
            return visitor.range(value.range);
        if (value.prefix !== undefined)
            return visitor.prefix(value.prefix);
        if (value.suffix !== undefined)
            return visitor.suffix(value.suffix);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(HeaderMatchMethod || (HeaderMatchMethod = {}));
export const HttpMethod = {
    CONNECT: "CONNECT",
    DELETE: "DELETE",
    GET: "GET",
    HEAD: "HEAD",
    OPTIONS: "OPTIONS",
    PATCH: "PATCH",
    POST: "POST",
    PUT: "PUT",
    TRACE: "TRACE",
};
export const GatewayRouteStatusCode = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    INACTIVE: "INACTIVE",
};
export var ClientTlsCertificate;
(function (ClientTlsCertificate) {
    ClientTlsCertificate.visit = (value, visitor) => {
        if (value.file !== undefined)
            return visitor.file(value.file);
        if (value.sds !== undefined)
            return visitor.sds(value.sds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ClientTlsCertificate || (ClientTlsCertificate = {}));
export var TlsValidationContextTrust;
(function (TlsValidationContextTrust) {
    TlsValidationContextTrust.visit = (value, visitor) => {
        if (value.acm !== undefined)
            return visitor.acm(value.acm);
        if (value.file !== undefined)
            return visitor.file(value.file);
        if (value.sds !== undefined)
            return visitor.sds(value.sds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(TlsValidationContextTrust || (TlsValidationContextTrust = {}));
export var Backend;
(function (Backend) {
    Backend.visit = (value, visitor) => {
        if (value.virtualService !== undefined)
            return visitor.virtualService(value.virtualService);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Backend || (Backend = {}));
export var VirtualNodeConnectionPool;
(function (VirtualNodeConnectionPool) {
    VirtualNodeConnectionPool.visit = (value, visitor) => {
        if (value.tcp !== undefined)
            return visitor.tcp(value.tcp);
        if (value.http !== undefined)
            return visitor.http(value.http);
        if (value.http2 !== undefined)
            return visitor.http2(value.http2);
        if (value.grpc !== undefined)
            return visitor.grpc(value.grpc);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(VirtualNodeConnectionPool || (VirtualNodeConnectionPool = {}));
export const PortProtocol = {
    GRPC: "grpc",
    HTTP: "http",
    HTTP2: "http2",
    TCP: "tcp",
};
export const DurationUnit = {
    MS: "ms",
    S: "s",
};
export var ListenerTimeout;
(function (ListenerTimeout) {
    ListenerTimeout.visit = (value, visitor) => {
        if (value.tcp !== undefined)
            return visitor.tcp(value.tcp);
        if (value.http !== undefined)
            return visitor.http(value.http);
        if (value.http2 !== undefined)
            return visitor.http2(value.http2);
        if (value.grpc !== undefined)
            return visitor.grpc(value.grpc);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ListenerTimeout || (ListenerTimeout = {}));
export var ListenerTlsCertificate;
(function (ListenerTlsCertificate) {
    ListenerTlsCertificate.visit = (value, visitor) => {
        if (value.acm !== undefined)
            return visitor.acm(value.acm);
        if (value.file !== undefined)
            return visitor.file(value.file);
        if (value.sds !== undefined)
            return visitor.sds(value.sds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ListenerTlsCertificate || (ListenerTlsCertificate = {}));
export const ListenerTlsMode = {
    DISABLED: "DISABLED",
    PERMISSIVE: "PERMISSIVE",
    STRICT: "STRICT",
};
export var ListenerTlsValidationContextTrust;
(function (ListenerTlsValidationContextTrust) {
    ListenerTlsValidationContextTrust.visit = (value, visitor) => {
        if (value.file !== undefined)
            return visitor.file(value.file);
        if (value.sds !== undefined)
            return visitor.sds(value.sds);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ListenerTlsValidationContextTrust || (ListenerTlsValidationContextTrust = {}));
export const DnsResponseType = {
    ENDPOINTS: "ENDPOINTS",
    LOADBALANCER: "LOADBALANCER",
};
export var ServiceDiscovery;
(function (ServiceDiscovery) {
    ServiceDiscovery.visit = (value, visitor) => {
        if (value.dns !== undefined)
            return visitor.dns(value.dns);
        if (value.awsCloudMap !== undefined)
            return visitor.awsCloudMap(value.awsCloudMap);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ServiceDiscovery || (ServiceDiscovery = {}));
export const VirtualNodeStatusCode = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    INACTIVE: "INACTIVE",
};
export const VirtualRouterStatusCode = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    INACTIVE: "INACTIVE",
};
export var GrpcRouteMetadataMatchMethod;
(function (GrpcRouteMetadataMatchMethod) {
    GrpcRouteMetadataMatchMethod.visit = (value, visitor) => {
        if (value.exact !== undefined)
            return visitor.exact(value.exact);
        if (value.regex !== undefined)
            return visitor.regex(value.regex);
        if (value.range !== undefined)
            return visitor.range(value.range);
        if (value.prefix !== undefined)
            return visitor.prefix(value.prefix);
        if (value.suffix !== undefined)
            return visitor.suffix(value.suffix);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(GrpcRouteMetadataMatchMethod || (GrpcRouteMetadataMatchMethod = {}));
export const GrpcRetryPolicyEvent = {
    CANCELLED: "cancelled",
    DEADLINE_EXCEEDED: "deadline-exceeded",
    INTERNAL: "internal",
    RESOURCE_EXHAUSTED: "resource-exhausted",
    UNAVAILABLE: "unavailable",
};
export const TcpRetryPolicyEvent = {
    CONNECTION_ERROR: "connection-error",
};
export const HttpScheme = {
    HTTP: "http",
    HTTPS: "https",
};
export const RouteStatusCode = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    INACTIVE: "INACTIVE",
};
export var VirtualServiceProvider;
(function (VirtualServiceProvider) {
    VirtualServiceProvider.visit = (value, visitor) => {
        if (value.virtualNode !== undefined)
            return visitor.virtualNode(value.virtualNode);
        if (value.virtualRouter !== undefined)
            return visitor.virtualRouter(value.virtualRouter);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(VirtualServiceProvider || (VirtualServiceProvider = {}));
export const VirtualServiceStatusCode = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    INACTIVE: "INACTIVE",
};
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
