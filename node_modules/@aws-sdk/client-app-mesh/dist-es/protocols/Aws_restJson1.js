import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AppMeshServiceException as __BaseException } from "../models/AppMeshServiceException";
import { BadRequestException, ConflictException, ForbiddenException, InternalServerErrorException, LimitExceededException, NotFoundException, ResourceInUseException, ServiceUnavailableException, TooManyRequestsException, TooManyTagsException, } from "../models/models_0";
export const se_CreateGatewayRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualGatewayName", () => input.virtualGatewayName, "{virtualGatewayName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        gatewayRouteName: [],
        spec: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateMeshCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        meshName: [],
        spec: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualRouterName", () => input.virtualRouterName, "{virtualRouterName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        routeName: [],
        spec: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateVirtualGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualGateways");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
        tags: (_) => _json(_),
        virtualGatewayName: [],
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateVirtualNodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualNodes");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
        tags: (_) => _json(_),
        virtualNodeName: [],
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateVirtualRouterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualRouters");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
        tags: (_) => _json(_),
        virtualRouterName: [],
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateVirtualServiceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualServices");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
        tags: (_) => _json(_),
        virtualServiceName: [],
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteGatewayRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}");
    b.p("gatewayRouteName", () => input.gatewayRouteName, "{gatewayRouteName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualGatewayName", () => input.virtualGatewayName, "{virtualGatewayName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteMeshCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}");
    b.p("routeName", () => input.routeName, "{routeName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualRouterName", () => input.virtualRouterName, "{virtualRouterName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteVirtualGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}");
    b.p("virtualGatewayName", () => input.virtualGatewayName, "{virtualGatewayName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteVirtualNodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}");
    b.p("virtualNodeName", () => input.virtualNodeName, "{virtualNodeName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteVirtualRouterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}");
    b.p("virtualRouterName", () => input.virtualRouterName, "{virtualRouterName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteVirtualServiceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}");
    b.p("virtualServiceName", () => input.virtualServiceName, "{virtualServiceName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeGatewayRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}");
    b.p("gatewayRouteName", () => input.gatewayRouteName, "{gatewayRouteName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualGatewayName", () => input.virtualGatewayName, "{virtualGatewayName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeMeshCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}");
    b.p("routeName", () => input.routeName, "{routeName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualRouterName", () => input.virtualRouterName, "{virtualRouterName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeVirtualGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}");
    b.p("virtualGatewayName", () => input.virtualGatewayName, "{virtualGatewayName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeVirtualNodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}");
    b.p("virtualNodeName", () => input.virtualNodeName, "{virtualNodeName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeVirtualRouterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}");
    b.p("virtualRouterName", () => input.virtualRouterName, "{virtualRouterName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeVirtualServiceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}");
    b.p("virtualServiceName", () => input.virtualServiceName, "{virtualServiceName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListGatewayRoutesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualGatewayName", () => input.virtualGatewayName, "{virtualGatewayName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListMeshesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes");
    const query = map({
        [_nT]: [, input[_nT]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRoutesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualRouterName", () => input.virtualRouterName, "{virtualRouterName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/tags");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
        [_nT]: [, input[_nT]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListVirtualGatewaysCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualGateways");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListVirtualNodesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualNodes");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListVirtualRoutersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualRouters");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListVirtualServicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v20190125/meshes/{meshName}/virtualServices");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_l]: [() => input.limit !== void 0, () => input[_l].toString()],
        [_mO]: [, input[_mO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/tag");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/untag");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        tagKeys: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateGatewayRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}");
    b.p("gatewayRouteName", () => input.gatewayRouteName, "{gatewayRouteName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualGatewayName", () => input.virtualGatewayName, "{virtualGatewayName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateMeshCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}");
    b.p("meshName", () => input.meshName, "{meshName}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}");
    b.p("routeName", () => input.routeName, "{routeName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    b.p("virtualRouterName", () => input.virtualRouterName, "{virtualRouterName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateVirtualGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}");
    b.p("virtualGatewayName", () => input.virtualGatewayName, "{virtualGatewayName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateVirtualNodeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}");
    b.p("virtualNodeName", () => input.virtualNodeName, "{virtualNodeName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateVirtualRouterCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}");
    b.p("virtualRouterName", () => input.virtualRouterName, "{virtualRouterName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateVirtualServiceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}");
    b.p("virtualServiceName", () => input.virtualServiceName, "{virtualServiceName}", false);
    b.p("meshName", () => input.meshName, "{meshName}", false);
    const query = map({
        [_mO]: [, input[_mO]],
    });
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        spec: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const de_CreateGatewayRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.gatewayRoute = de_GatewayRouteData(data, context);
    return contents;
};
export const de_CreateMeshCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.mesh = de_MeshData(data, context);
    return contents;
};
export const de_CreateRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.route = de_RouteData(data, context);
    return contents;
};
export const de_CreateVirtualGatewayCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualGateway = de_VirtualGatewayData(data, context);
    return contents;
};
export const de_CreateVirtualNodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualNode = de_VirtualNodeData(data, context);
    return contents;
};
export const de_CreateVirtualRouterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualRouter = de_VirtualRouterData(data, context);
    return contents;
};
export const de_CreateVirtualServiceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualService = de_VirtualServiceData(data, context);
    return contents;
};
export const de_DeleteGatewayRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.gatewayRoute = de_GatewayRouteData(data, context);
    return contents;
};
export const de_DeleteMeshCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.mesh = de_MeshData(data, context);
    return contents;
};
export const de_DeleteRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.route = de_RouteData(data, context);
    return contents;
};
export const de_DeleteVirtualGatewayCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualGateway = de_VirtualGatewayData(data, context);
    return contents;
};
export const de_DeleteVirtualNodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualNode = de_VirtualNodeData(data, context);
    return contents;
};
export const de_DeleteVirtualRouterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualRouter = de_VirtualRouterData(data, context);
    return contents;
};
export const de_DeleteVirtualServiceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualService = de_VirtualServiceData(data, context);
    return contents;
};
export const de_DescribeGatewayRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.gatewayRoute = de_GatewayRouteData(data, context);
    return contents;
};
export const de_DescribeMeshCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.mesh = de_MeshData(data, context);
    return contents;
};
export const de_DescribeRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.route = de_RouteData(data, context);
    return contents;
};
export const de_DescribeVirtualGatewayCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualGateway = de_VirtualGatewayData(data, context);
    return contents;
};
export const de_DescribeVirtualNodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualNode = de_VirtualNodeData(data, context);
    return contents;
};
export const de_DescribeVirtualRouterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualRouter = de_VirtualRouterData(data, context);
    return contents;
};
export const de_DescribeVirtualServiceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualService = de_VirtualServiceData(data, context);
    return contents;
};
export const de_ListGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        gatewayRoutes: (_) => de_GatewayRouteList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMeshesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        meshes: (_) => de_MeshList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRoutesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        routes: (_) => de_RouteList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVirtualGatewaysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        virtualGateways: (_) => de_VirtualGatewayList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVirtualNodesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        virtualNodes: (_) => de_VirtualNodeList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVirtualRoutersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        virtualRouters: (_) => de_VirtualRouterList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVirtualServicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        virtualServices: (_) => de_VirtualServiceList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateGatewayRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.gatewayRoute = de_GatewayRouteData(data, context);
    return contents;
};
export const de_UpdateMeshCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.mesh = de_MeshData(data, context);
    return contents;
};
export const de_UpdateRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.route = de_RouteData(data, context);
    return contents;
};
export const de_UpdateVirtualGatewayCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualGateway = de_VirtualGatewayData(data, context);
    return contents;
};
export const de_UpdateVirtualNodeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualNode = de_VirtualNodeData(data, context);
    return contents;
};
export const de_UpdateVirtualRouterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualRouter = de_VirtualRouterData(data, context);
    return contents;
};
export const de_UpdateVirtualServiceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.virtualService = de_VirtualServiceData(data, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appmesh#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.appmesh#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.appmesh#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.appmesh#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.appmesh#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.appmesh#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.appmesh#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.appmesh#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.appmesh#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.appmesh#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_GatewayRouteData = (output, context) => {
    return take(output, {
        gatewayRouteName: __expectString,
        meshName: __expectString,
        metadata: (_) => de_ResourceMetadata(_, context),
        spec: _json,
        status: _json,
        virtualGatewayName: __expectString,
    });
};
const de_GatewayRouteList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GatewayRouteRef(entry, context);
    });
    return retVal;
};
const de_GatewayRouteRef = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        gatewayRouteName: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        meshName: __expectString,
        meshOwner: __expectString,
        resourceOwner: __expectString,
        version: __expectLong,
        virtualGatewayName: __expectString,
    });
};
const de_MeshData = (output, context) => {
    return take(output, {
        meshName: __expectString,
        metadata: (_) => de_ResourceMetadata(_, context),
        spec: _json,
        status: _json,
    });
};
const de_MeshList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MeshRef(entry, context);
    });
    return retVal;
};
const de_MeshRef = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        meshName: __expectString,
        meshOwner: __expectString,
        resourceOwner: __expectString,
        version: __expectLong,
    });
};
const de_ResourceMetadata = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        meshOwner: __expectString,
        resourceOwner: __expectString,
        uid: __expectString,
        version: __expectLong,
    });
};
const de_RouteData = (output, context) => {
    return take(output, {
        meshName: __expectString,
        metadata: (_) => de_ResourceMetadata(_, context),
        routeName: __expectString,
        spec: _json,
        status: _json,
        virtualRouterName: __expectString,
    });
};
const de_RouteList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteRef(entry, context);
    });
    return retVal;
};
const de_RouteRef = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        meshName: __expectString,
        meshOwner: __expectString,
        resourceOwner: __expectString,
        routeName: __expectString,
        version: __expectLong,
        virtualRouterName: __expectString,
    });
};
const de_VirtualGatewayData = (output, context) => {
    return take(output, {
        meshName: __expectString,
        metadata: (_) => de_ResourceMetadata(_, context),
        spec: _json,
        status: _json,
        virtualGatewayName: __expectString,
    });
};
const de_VirtualGatewayList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VirtualGatewayRef(entry, context);
    });
    return retVal;
};
const de_VirtualGatewayRef = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        meshName: __expectString,
        meshOwner: __expectString,
        resourceOwner: __expectString,
        version: __expectLong,
        virtualGatewayName: __expectString,
    });
};
const de_VirtualNodeData = (output, context) => {
    return take(output, {
        meshName: __expectString,
        metadata: (_) => de_ResourceMetadata(_, context),
        spec: _json,
        status: _json,
        virtualNodeName: __expectString,
    });
};
const de_VirtualNodeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VirtualNodeRef(entry, context);
    });
    return retVal;
};
const de_VirtualNodeRef = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        meshName: __expectString,
        meshOwner: __expectString,
        resourceOwner: __expectString,
        version: __expectLong,
        virtualNodeName: __expectString,
    });
};
const de_VirtualRouterData = (output, context) => {
    return take(output, {
        meshName: __expectString,
        metadata: (_) => de_ResourceMetadata(_, context),
        spec: _json,
        status: _json,
        virtualRouterName: __expectString,
    });
};
const de_VirtualRouterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VirtualRouterRef(entry, context);
    });
    return retVal;
};
const de_VirtualRouterRef = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        meshName: __expectString,
        meshOwner: __expectString,
        resourceOwner: __expectString,
        version: __expectLong,
        virtualRouterName: __expectString,
    });
};
const de_VirtualServiceData = (output, context) => {
    return take(output, {
        meshName: __expectString,
        metadata: (_) => de_ResourceMetadata(_, context),
        spec: _json,
        status: _json,
        virtualServiceName: __expectString,
    });
};
const de_VirtualServiceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VirtualServiceRef(entry, context);
    });
    return retVal;
};
const de_VirtualServiceRef = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        meshName: __expectString,
        meshOwner: __expectString,
        resourceOwner: __expectString,
        version: __expectLong,
        virtualServiceName: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _l = "limit";
const _mO = "meshOwner";
const _nT = "nextToken";
const _rA = "resourceArn";
