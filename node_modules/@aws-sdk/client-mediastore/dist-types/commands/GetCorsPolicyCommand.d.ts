import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../MediaStoreClient";
import { GetCorsPolicyInput, GetCorsPolicyOutput } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link GetCorsPolicyCommand}.
 */
export interface GetCorsPolicyCommandInput extends GetCorsPolicyInput {
}
/**
 * @public
 *
 * The output of {@link GetCorsPolicyCommand}.
 */
export interface GetCorsPolicyCommandOutput extends GetCorsPolicyOutput, __MetadataBearer {
}
declare const GetCorsPolicyCommand_base: {
    new (input: GetCorsPolicyCommandInput): import("@smithy/smithy-client").CommandImpl<GetCorsPolicyCommandInput, GetCorsPolicyCommandOutput, MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: GetCorsPolicyCommandInput): import("@smithy/smithy-client").CommandImpl<GetCorsPolicyCommandInput, GetCorsPolicyCommandOutput, MediaStoreClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Returns the cross-origin resource sharing (CORS) configuration information that is
 *          set for the container.</p>
 *          <p>To use this operation, you must have permission to perform the
 *             <code>MediaStore:GetCorsPolicy</code> action. By default, the container owner has this
 *          permission and can grant it to others.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { MediaStoreClient, GetCorsPolicyCommand } from "@aws-sdk/client-mediastore"; // ES Modules import
 * // const { MediaStoreClient, GetCorsPolicyCommand } = require("@aws-sdk/client-mediastore"); // CommonJS import
 * const client = new MediaStoreClient(config);
 * const input = { // GetCorsPolicyInput
 *   ContainerName: "STRING_VALUE", // required
 * };
 * const command = new GetCorsPolicyCommand(input);
 * const response = await client.send(command);
 * // { // GetCorsPolicyOutput
 * //   CorsPolicy: [ // CorsPolicy // required
 * //     { // CorsRule
 * //       AllowedOrigins: [ // AllowedOrigins // required
 * //         "STRING_VALUE",
 * //       ],
 * //       AllowedMethods: [ // AllowedMethods
 * //         "PUT" || "GET" || "DELETE" || "HEAD",
 * //       ],
 * //       AllowedHeaders: [ // AllowedHeaders // required
 * //         "STRING_VALUE",
 * //       ],
 * //       MaxAgeSeconds: Number("int"),
 * //       ExposeHeaders: [ // ExposeHeaders
 * //         "STRING_VALUE",
 * //       ],
 * //     },
 * //   ],
 * // };
 *
 * ```
 *
 * @param GetCorsPolicyCommandInput - {@link GetCorsPolicyCommandInput}
 * @returns {@link GetCorsPolicyCommandOutput}
 * @see {@link GetCorsPolicyCommandInput} for command's `input` shape.
 * @see {@link GetCorsPolicyCommandOutput} for command's `response` shape.
 * @see {@link MediaStoreClientResolvedConfig | config} for MediaStoreClient's `config` shape.
 *
 * @throws {@link ContainerInUseException} (client fault)
 *  <p>The container that you specified in the request already exists or is being
 *          updated.</p>
 *
 * @throws {@link ContainerNotFoundException} (client fault)
 *  <p>The container that you specified in the request does not exist.</p>
 *
 * @throws {@link CorsPolicyNotFoundException} (client fault)
 *  <p>The CORS policy that you specified in the request does not exist.</p>
 *
 * @throws {@link InternalServerError} (server fault)
 *  <p>The service is temporarily unavailable.</p>
 *
 * @throws {@link MediaStoreServiceException}
 * <p>Base exception class for all service exceptions from MediaStore service.</p>
 *
 * @public
 */
export declare class GetCorsPolicyCommand extends GetCorsPolicyCommand_base {
}
