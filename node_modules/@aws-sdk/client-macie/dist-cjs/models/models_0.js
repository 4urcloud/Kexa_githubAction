"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3OneTimeClassificationType = exports.S3ContinuousClassificationType = exports.LimitExceededException = exports.InvalidInputException = exports.InternalException = exports.AccessDeniedException = void 0;
const MacieServiceException_1 = require("./MacieServiceException");
class AccessDeniedException extends MacieServiceException_1.MacieServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.resourceType = opts.resourceType;
    }
}
exports.AccessDeniedException = AccessDeniedException;
class InternalException extends MacieServiceException_1.MacieServiceException {
    constructor(opts) {
        super({
            name: "InternalException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalException.prototype);
        this.errorCode = opts.errorCode;
    }
}
exports.InternalException = InternalException;
class InvalidInputException extends MacieServiceException_1.MacieServiceException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.errorCode = opts.errorCode;
        this.fieldName = opts.fieldName;
    }
}
exports.InvalidInputException = InvalidInputException;
class LimitExceededException extends MacieServiceException_1.MacieServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.errorCode = opts.errorCode;
        this.resourceType = opts.resourceType;
    }
}
exports.LimitExceededException = LimitExceededException;
exports.S3ContinuousClassificationType = {
    FULL: "FULL",
};
exports.S3OneTimeClassificationType = {
    FULL: "FULL",
    NONE: "NONE",
};
