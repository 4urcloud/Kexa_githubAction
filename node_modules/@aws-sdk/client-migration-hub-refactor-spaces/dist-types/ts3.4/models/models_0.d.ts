import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { MigrationHubRefactorSpacesServiceException as __BaseException } from "./MigrationHubRefactorSpacesServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const ApiGatewayEndpointType: {
  readonly PRIVATE: "PRIVATE";
  readonly REGIONAL: "REGIONAL";
};
export type ApiGatewayEndpointType =
  (typeof ApiGatewayEndpointType)[keyof typeof ApiGatewayEndpointType];
export interface ApiGatewayProxyConfig {
  ProxyUrl?: string;
  ApiGatewayId?: string;
  VpcLinkId?: string;
  NlbArn?: string;
  NlbName?: string;
  EndpointType?: ApiGatewayEndpointType;
  StageName?: string;
}
export interface ApiGatewayProxyInput {
  EndpointType?: ApiGatewayEndpointType;
  StageName?: string;
}
export interface ApiGatewayProxySummary {
  ProxyUrl?: string;
  ApiGatewayId?: string;
  VpcLinkId?: string;
  NlbArn?: string;
  NlbName?: string;
  EndpointType?: ApiGatewayEndpointType;
  StageName?: string;
}
export declare const ApplicationState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly UPDATING: "UPDATING";
};
export type ApplicationState =
  (typeof ApplicationState)[keyof typeof ApplicationState];
export declare const ErrorCode: {
  readonly INVALID_RESOURCE_STATE: "INVALID_RESOURCE_STATE";
  readonly NOT_AUTHORIZED: "NOT_AUTHORIZED";
  readonly REQUEST_LIMIT_EXCEEDED: "REQUEST_LIMIT_EXCEEDED";
  readonly RESOURCE_CREATION_FAILURE: "RESOURCE_CREATION_FAILURE";
  readonly RESOURCE_DELETION_FAILURE: "RESOURCE_DELETION_FAILURE";
  readonly RESOURCE_IN_USE: "RESOURCE_IN_USE";
  readonly RESOURCE_LIMIT_EXCEEDED: "RESOURCE_LIMIT_EXCEEDED";
  readonly RESOURCE_NOT_FOUND: "RESOURCE_NOT_FOUND";
  readonly RESOURCE_RETRIEVAL_FAILURE: "RESOURCE_RETRIEVAL_FAILURE";
  readonly RESOURCE_UPDATE_FAILURE: "RESOURCE_UPDATE_FAILURE";
  readonly SERVICE_ENDPOINT_HEALTH_CHECK_FAILURE: "SERVICE_ENDPOINT_HEALTH_CHECK_FAILURE";
  readonly STATE_TRANSITION_FAILURE: "STATE_TRANSITION_FAILURE";
};
export type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];
export declare const ErrorResourceType: {
  readonly API_GATEWAY: "API_GATEWAY";
  readonly APPLICATION: "APPLICATION";
  readonly ENVIRONMENT: "ENVIRONMENT";
  readonly IAM_ROLE: "IAM_ROLE";
  readonly LAMBDA: "LAMBDA";
  readonly LOAD_BALANCER_LISTENER: "LOAD_BALANCER_LISTENER";
  readonly NLB: "NLB";
  readonly RESOURCE_SHARE: "RESOURCE_SHARE";
  readonly ROUTE: "ROUTE";
  readonly ROUTE_TABLE: "ROUTE_TABLE";
  readonly SECURITY_GROUP: "SECURITY_GROUP";
  readonly SERVICE: "SERVICE";
  readonly SUBNET: "SUBNET";
  readonly TARGET_GROUP: "TARGET_GROUP";
  readonly TRANSIT_GATEWAY: "TRANSIT_GATEWAY";
  readonly TRANSIT_GATEWAY_ATTACHMENT: "TRANSIT_GATEWAY_ATTACHMENT";
  readonly VPC: "VPC";
  readonly VPC_ENDPOINT_SERVICE_CONFIGURATION: "VPC_ENDPOINT_SERVICE_CONFIGURATION";
  readonly VPC_LINK: "VPC_LINK";
};
export type ErrorResourceType =
  (typeof ErrorResourceType)[keyof typeof ErrorResourceType];
export interface ErrorResponse {
  Code?: ErrorCode;
  Message?: string;
  AccountId?: string;
  ResourceIdentifier?: string;
  ResourceType?: ErrorResourceType;
  AdditionalDetails?: Record<string, string>;
}
export declare const ProxyType: {
  readonly API_GATEWAY: "API_GATEWAY";
};
export type ProxyType = (typeof ProxyType)[keyof typeof ProxyType];
export interface ApplicationSummary {
  Name?: string;
  Arn?: string;
  OwnerAccountId?: string;
  CreatedByAccountId?: string;
  ApplicationId?: string;
  EnvironmentId?: string;
  VpcId?: string;
  ProxyType?: ProxyType;
  ApiGatewayProxy?: ApiGatewayProxySummary;
  State?: ApplicationState;
  Tags?: Record<string, string>;
  Error?: ErrorResponse;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CreateApplicationRequest {
  Name: string | undefined;
  EnvironmentIdentifier: string | undefined;
  VpcId: string | undefined;
  ProxyType: ProxyType | undefined;
  ApiGatewayProxy?: ApiGatewayProxyInput;
  Tags?: Record<string, string>;
  ClientToken?: string;
}
export interface CreateApplicationResponse {
  Name?: string;
  Arn?: string;
  OwnerAccountId?: string;
  CreatedByAccountId?: string;
  ApplicationId?: string;
  EnvironmentId?: string;
  VpcId?: string;
  ProxyType?: ProxyType;
  ApiGatewayProxy?: ApiGatewayProxyInput;
  State?: ApplicationState;
  Tags?: Record<string, string>;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  QuotaCode?: string;
  ServiceCode: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message: string | undefined;
  QuotaCode?: string;
  ServiceCode?: string;
  RetryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const NetworkFabricType: {
  readonly NONE: "NONE";
  readonly TRANSIT_GATEWAY: "TRANSIT_GATEWAY";
};
export type NetworkFabricType =
  (typeof NetworkFabricType)[keyof typeof NetworkFabricType];
export interface CreateEnvironmentRequest {
  Name: string | undefined;
  Description?: string;
  NetworkFabricType: NetworkFabricType | undefined;
  Tags?: Record<string, string>;
  ClientToken?: string;
}
export declare const EnvironmentState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
};
export type EnvironmentState =
  (typeof EnvironmentState)[keyof typeof EnvironmentState];
export interface CreateEnvironmentResponse {
  Name?: string;
  Arn?: string;
  Description?: string;
  EnvironmentId?: string;
  NetworkFabricType?: NetworkFabricType;
  OwnerAccountId?: string;
  State?: EnvironmentState;
  Tags?: Record<string, string>;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export declare const RouteActivationState: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
};
export type RouteActivationState =
  (typeof RouteActivationState)[keyof typeof RouteActivationState];
export interface DefaultRouteInput {
  ActivationState?: RouteActivationState;
}
export declare const RouteType: {
  readonly DEFAULT: "DEFAULT";
  readonly URI_PATH: "URI_PATH";
};
export type RouteType = (typeof RouteType)[keyof typeof RouteType];
export declare const HttpMethod: {
  readonly DELETE: "DELETE";
  readonly GET: "GET";
  readonly HEAD: "HEAD";
  readonly OPTIONS: "OPTIONS";
  readonly PATCH: "PATCH";
  readonly POST: "POST";
  readonly PUT: "PUT";
};
export type HttpMethod = (typeof HttpMethod)[keyof typeof HttpMethod];
export interface UriPathRouteInput {
  SourcePath: string | undefined;
  ActivationState: RouteActivationState | undefined;
  Methods?: HttpMethod[];
  IncludeChildPaths?: boolean;
  AppendSourcePath?: boolean;
}
export interface CreateRouteRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
  ServiceIdentifier: string | undefined;
  RouteType: RouteType | undefined;
  DefaultRoute?: DefaultRouteInput;
  UriPathRoute?: UriPathRouteInput;
  Tags?: Record<string, string>;
  ClientToken?: string;
}
export declare const RouteState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly INACTIVE: "INACTIVE";
  readonly UPDATING: "UPDATING";
};
export type RouteState = (typeof RouteState)[keyof typeof RouteState];
export interface CreateRouteResponse {
  RouteId?: string;
  Arn?: string;
  OwnerAccountId?: string;
  CreatedByAccountId?: string;
  RouteType?: RouteType;
  ServiceId?: string;
  ApplicationId?: string;
  UriPathRoute?: UriPathRouteInput;
  State?: RouteState;
  Tags?: Record<string, string>;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export declare const ServiceEndpointType: {
  readonly LAMBDA: "LAMBDA";
  readonly URL: "URL";
};
export type ServiceEndpointType =
  (typeof ServiceEndpointType)[keyof typeof ServiceEndpointType];
export interface LambdaEndpointInput {
  Arn: string | undefined;
}
export interface UrlEndpointInput {
  Url: string | undefined;
  HealthUrl?: string;
}
export interface CreateServiceRequest {
  Name: string | undefined;
  Description?: string;
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
  VpcId?: string;
  EndpointType: ServiceEndpointType | undefined;
  UrlEndpoint?: UrlEndpointInput;
  LambdaEndpoint?: LambdaEndpointInput;
  Tags?: Record<string, string>;
  ClientToken?: string;
}
export declare const ServiceState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
};
export type ServiceState = (typeof ServiceState)[keyof typeof ServiceState];
export interface CreateServiceResponse {
  ServiceId?: string;
  Name?: string;
  Arn?: string;
  OwnerAccountId?: string;
  CreatedByAccountId?: string;
  Description?: string;
  EnvironmentId?: string;
  ApplicationId?: string;
  VpcId?: string;
  EndpointType?: ServiceEndpointType;
  UrlEndpoint?: UrlEndpointInput;
  LambdaEndpoint?: LambdaEndpointInput;
  State?: ServiceState;
  Tags?: Record<string, string>;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export interface DeleteApplicationRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
}
export interface DeleteApplicationResponse {
  Name?: string;
  Arn?: string;
  ApplicationId?: string;
  EnvironmentId?: string;
  State?: ApplicationState;
  LastUpdatedTime?: Date;
}
export interface DeleteEnvironmentRequest {
  EnvironmentIdentifier: string | undefined;
}
export interface DeleteEnvironmentResponse {
  Name?: string;
  Arn?: string;
  EnvironmentId?: string;
  State?: EnvironmentState;
  LastUpdatedTime?: Date;
}
export interface DeleteResourcePolicyRequest {
  Identifier: string | undefined;
}
export interface DeleteResourcePolicyResponse {}
export interface DeleteRouteRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
  RouteIdentifier: string | undefined;
}
export interface DeleteRouteResponse {
  RouteId?: string;
  Arn?: string;
  ServiceId?: string;
  ApplicationId?: string;
  State?: RouteState;
  LastUpdatedTime?: Date;
}
export interface DeleteServiceRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
  ServiceIdentifier: string | undefined;
}
export interface DeleteServiceResponse {
  ServiceId?: string;
  Name?: string;
  Arn?: string;
  EnvironmentId?: string;
  ApplicationId?: string;
  State?: ServiceState;
  LastUpdatedTime?: Date;
}
export interface EnvironmentSummary {
  Name?: string;
  Arn?: string;
  Description?: string;
  EnvironmentId?: string;
  NetworkFabricType?: NetworkFabricType;
  OwnerAccountId?: string;
  TransitGatewayId?: string;
  State?: EnvironmentState;
  Tags?: Record<string, string>;
  Error?: ErrorResponse;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export interface EnvironmentVpc {
  EnvironmentId?: string;
  VpcId?: string;
  AccountId?: string;
  CidrBlocks?: string[];
  VpcName?: string;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export interface GetApplicationRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
}
export interface GetApplicationResponse {
  Name?: string;
  Arn?: string;
  OwnerAccountId?: string;
  CreatedByAccountId?: string;
  ApplicationId?: string;
  EnvironmentId?: string;
  VpcId?: string;
  ProxyType?: ProxyType;
  ApiGatewayProxy?: ApiGatewayProxyConfig;
  State?: ApplicationState;
  Tags?: Record<string, string>;
  Error?: ErrorResponse;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export interface GetEnvironmentRequest {
  EnvironmentIdentifier: string | undefined;
}
export interface GetEnvironmentResponse {
  Name?: string;
  Arn?: string;
  Description?: string;
  EnvironmentId?: string;
  NetworkFabricType?: NetworkFabricType;
  OwnerAccountId?: string;
  TransitGatewayId?: string;
  State?: EnvironmentState;
  Tags?: Record<string, string>;
  Error?: ErrorResponse;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export interface GetResourcePolicyRequest {
  Identifier: string | undefined;
}
export interface GetResourcePolicyResponse {
  Policy?: string;
}
export interface GetRouteRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
  RouteIdentifier: string | undefined;
}
export interface GetRouteResponse {
  RouteId?: string;
  Arn?: string;
  OwnerAccountId?: string;
  CreatedByAccountId?: string;
  RouteType?: RouteType;
  ServiceId?: string;
  ApplicationId?: string;
  EnvironmentId?: string;
  SourcePath?: string;
  Methods?: HttpMethod[];
  IncludeChildPaths?: boolean;
  PathResourceToId?: Record<string, string>;
  State?: RouteState;
  Tags?: Record<string, string>;
  Error?: ErrorResponse;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
  AppendSourcePath?: boolean;
}
export interface GetServiceRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
  ServiceIdentifier: string | undefined;
}
export interface LambdaEndpointConfig {
  Arn?: string;
}
export interface UrlEndpointConfig {
  Url?: string;
  HealthUrl?: string;
}
export interface GetServiceResponse {
  ServiceId?: string;
  Name?: string;
  Arn?: string;
  OwnerAccountId?: string;
  CreatedByAccountId?: string;
  Description?: string;
  EnvironmentId?: string;
  ApplicationId?: string;
  VpcId?: string;
  EndpointType?: ServiceEndpointType;
  UrlEndpoint?: UrlEndpointConfig;
  LambdaEndpoint?: LambdaEndpointConfig;
  State?: ServiceState;
  Tags?: Record<string, string>;
  Error?: ErrorResponse;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export declare class InvalidResourcePolicyException extends __BaseException {
  readonly name: "InvalidResourcePolicyException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InvalidResourcePolicyException, __BaseException>
  );
}
export interface LambdaEndpointSummary {
  Arn?: string;
}
export interface ListApplicationsRequest {
  EnvironmentIdentifier: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListApplicationsResponse {
  ApplicationSummaryList?: ApplicationSummary[];
  NextToken?: string;
}
export interface ListEnvironmentsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListEnvironmentsResponse {
  EnvironmentSummaryList?: EnvironmentSummary[];
  NextToken?: string;
}
export interface ListEnvironmentVpcsRequest {
  EnvironmentIdentifier: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListEnvironmentVpcsResponse {
  EnvironmentVpcList?: EnvironmentVpc[];
  NextToken?: string;
}
export interface ListRoutesRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface RouteSummary {
  RouteId?: string;
  Arn?: string;
  OwnerAccountId?: string;
  CreatedByAccountId?: string;
  RouteType?: RouteType;
  ServiceId?: string;
  ApplicationId?: string;
  EnvironmentId?: string;
  SourcePath?: string;
  Methods?: HttpMethod[];
  IncludeChildPaths?: boolean;
  PathResourceToId?: Record<string, string>;
  State?: RouteState;
  Tags?: Record<string, string>;
  Error?: ErrorResponse;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
  AppendSourcePath?: boolean;
}
export interface ListRoutesResponse {
  RouteSummaryList?: RouteSummary[];
  NextToken?: string;
}
export interface ListServicesRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface UrlEndpointSummary {
  Url?: string;
  HealthUrl?: string;
}
export interface ServiceSummary {
  ServiceId?: string;
  Name?: string;
  Arn?: string;
  OwnerAccountId?: string;
  CreatedByAccountId?: string;
  Description?: string;
  EnvironmentId?: string;
  ApplicationId?: string;
  VpcId?: string;
  EndpointType?: ServiceEndpointType;
  UrlEndpoint?: UrlEndpointSummary;
  LambdaEndpoint?: LambdaEndpointSummary;
  State?: ServiceState;
  Tags?: Record<string, string>;
  Error?: ErrorResponse;
  LastUpdatedTime?: Date;
  CreatedTime?: Date;
}
export interface ListServicesResponse {
  ServiceSummaryList?: ServiceSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface PutResourcePolicyRequest {
  ResourceArn: string | undefined;
  Policy: string | undefined;
}
export interface PutResourcePolicyResponse {}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateRouteRequest {
  EnvironmentIdentifier: string | undefined;
  ApplicationIdentifier: string | undefined;
  RouteIdentifier: string | undefined;
  ActivationState: RouteActivationState | undefined;
}
export interface UpdateRouteResponse {
  RouteId?: string;
  Arn?: string;
  ServiceId?: string;
  ApplicationId?: string;
  State?: RouteState;
  LastUpdatedTime?: Date;
}
export declare const ApplicationSummaryFilterSensitiveLog: (
  obj: ApplicationSummary
) => any;
export declare const CreateApplicationRequestFilterSensitiveLog: (
  obj: CreateApplicationRequest
) => any;
export declare const CreateApplicationResponseFilterSensitiveLog: (
  obj: CreateApplicationResponse
) => any;
export declare const CreateEnvironmentRequestFilterSensitiveLog: (
  obj: CreateEnvironmentRequest
) => any;
export declare const CreateEnvironmentResponseFilterSensitiveLog: (
  obj: CreateEnvironmentResponse
) => any;
export declare const CreateRouteRequestFilterSensitiveLog: (
  obj: CreateRouteRequest
) => any;
export declare const CreateRouteResponseFilterSensitiveLog: (
  obj: CreateRouteResponse
) => any;
export declare const CreateServiceRequestFilterSensitiveLog: (
  obj: CreateServiceRequest
) => any;
export declare const CreateServiceResponseFilterSensitiveLog: (
  obj: CreateServiceResponse
) => any;
export declare const EnvironmentSummaryFilterSensitiveLog: (
  obj: EnvironmentSummary
) => any;
export declare const GetApplicationResponseFilterSensitiveLog: (
  obj: GetApplicationResponse
) => any;
export declare const GetEnvironmentResponseFilterSensitiveLog: (
  obj: GetEnvironmentResponse
) => any;
export declare const GetRouteResponseFilterSensitiveLog: (
  obj: GetRouteResponse
) => any;
export declare const GetServiceResponseFilterSensitiveLog: (
  obj: GetServiceResponse
) => any;
export declare const ListApplicationsResponseFilterSensitiveLog: (
  obj: ListApplicationsResponse
) => any;
export declare const ListEnvironmentsResponseFilterSensitiveLog: (
  obj: ListEnvironmentsResponse
) => any;
export declare const RouteSummaryFilterSensitiveLog: (obj: RouteSummary) => any;
export declare const ListRoutesResponseFilterSensitiveLog: (
  obj: ListRoutesResponse
) => any;
export declare const ServiceSummaryFilterSensitiveLog: (
  obj: ServiceSummary
) => any;
export declare const ListServicesResponseFilterSensitiveLog: (
  obj: ListServicesResponse
) => any;
export declare const ListTagsForResourceResponseFilterSensitiveLog: (
  obj: ListTagsForResourceResponse
) => any;
export declare const TagResourceRequestFilterSensitiveLog: (
  obj: TagResourceRequest
) => any;
export declare const UntagResourceRequestFilterSensitiveLog: (
  obj: UntagResourceRequest
) => any;
