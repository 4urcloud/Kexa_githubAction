import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { MigrationHubRefactorSpacesServiceException as __BaseException } from "../models/MigrationHubRefactorSpacesServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, InvalidResourcePolicyException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_CreateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/environments/{EnvironmentIdentifier}/applications");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        ApiGatewayProxy: (_) => _json(_),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Name: [],
        ProxyType: [],
        Tags: (_) => _json(_),
        VpcId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/environments");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Name: [],
        NetworkFabricType: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DefaultRoute: (_) => _json(_),
        RouteType: [],
        ServiceIdentifier: [],
        Tags: (_) => _json(_),
        UriPathRoute: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateServiceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        EndpointType: [],
        LambdaEndpoint: (_) => _json(_),
        Name: [],
        Tags: (_) => _json(_),
        UrlEndpoint: (_) => _json(_),
        VpcId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resourcepolicy/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes/{RouteIdentifier}");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    b.p("RouteIdentifier", () => input.RouteIdentifier, "{RouteIdentifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteServiceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services/{ServiceIdentifier}");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    b.p("ServiceIdentifier", () => input.ServiceIdentifier, "{ServiceIdentifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEnvironmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resourcepolicy/{Identifier}");
    b.p("Identifier", () => input.Identifier, "{Identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes/{RouteIdentifier}");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    b.p("RouteIdentifier", () => input.RouteIdentifier, "{RouteIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetServiceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services/{ServiceIdentifier}");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    b.p("ServiceIdentifier", () => input.ServiceIdentifier, "{ServiceIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/applications");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEnvironmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEnvironmentVpcsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/vpcs");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRoutesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListServicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/resourcepolicy");
    let body;
    body = JSON.stringify(take(input, {
        Policy: [],
        ResourceArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateRouteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes/{RouteIdentifier}");
    b.p("EnvironmentIdentifier", () => input.EnvironmentIdentifier, "{EnvironmentIdentifier}", false);
    b.p("ApplicationIdentifier", () => input.ApplicationIdentifier, "{ApplicationIdentifier}", false);
    b.p("RouteIdentifier", () => input.RouteIdentifier, "{RouteIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        ActivationState: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApiGatewayProxy: _json,
        ApplicationId: __expectString,
        Arn: __expectString,
        CreatedByAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnvironmentId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OwnerAccountId: __expectString,
        ProxyType: __expectString,
        State: __expectString,
        Tags: _json,
        VpcId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EnvironmentId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        NetworkFabricType: __expectString,
        OwnerAccountId: __expectString,
        State: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Arn: __expectString,
        CreatedByAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OwnerAccountId: __expectString,
        RouteId: __expectString,
        RouteType: __expectString,
        ServiceId: __expectString,
        State: __expectString,
        Tags: _json,
        UriPathRoute: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateServiceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Arn: __expectString,
        CreatedByAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EndpointType: __expectString,
        EnvironmentId: __expectString,
        LambdaEndpoint: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OwnerAccountId: __expectString,
        ServiceId: __expectString,
        State: __expectString,
        Tags: _json,
        UrlEndpoint: _json,
        VpcId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Arn: __expectString,
        EnvironmentId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        EnvironmentId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Arn: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RouteId: __expectString,
        ServiceId: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteServiceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Arn: __expectString,
        EnvironmentId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ServiceId: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApiGatewayProxy: _json,
        ApplicationId: __expectString,
        Arn: __expectString,
        CreatedByAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnvironmentId: __expectString,
        Error: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OwnerAccountId: __expectString,
        ProxyType: __expectString,
        State: __expectString,
        Tags: _json,
        VpcId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EnvironmentId: __expectString,
        Error: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        NetworkFabricType: __expectString,
        OwnerAccountId: __expectString,
        State: __expectString,
        Tags: _json,
        TransitGatewayId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Policy: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AppendSourcePath: __expectBoolean,
        ApplicationId: __expectString,
        Arn: __expectString,
        CreatedByAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnvironmentId: __expectString,
        Error: _json,
        IncludeChildPaths: __expectBoolean,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Methods: _json,
        OwnerAccountId: __expectString,
        PathResourceToId: _json,
        RouteId: __expectString,
        RouteType: __expectString,
        ServiceId: __expectString,
        SourcePath: __expectString,
        State: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetServiceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Arn: __expectString,
        CreatedByAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EndpointType: __expectString,
        EnvironmentId: __expectString,
        Error: _json,
        LambdaEndpoint: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OwnerAccountId: __expectString,
        ServiceId: __expectString,
        State: __expectString,
        Tags: _json,
        UrlEndpoint: _json,
        VpcId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationSummaryList: (_) => de_ApplicationSummaries(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEnvironmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EnvironmentSummaryList: (_) => de_EnvironmentSummaries(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEnvironmentVpcsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EnvironmentVpcList: (_) => de_EnvironmentVpcs(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRoutesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RouteSummaryList: (_) => de_RouteSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListServicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ServiceSummaryList: (_) => de_ServiceSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRouteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ApplicationId: __expectString,
        Arn: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RouteId: __expectString,
        ServiceId: __expectString,
        State: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.migrationhubrefactorspaces#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.migrationhubrefactorspaces#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.migrationhubrefactorspaces#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.migrationhubrefactorspaces#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.migrationhubrefactorspaces#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.migrationhubrefactorspaces#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.migrationhubrefactorspaces#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "InvalidResourcePolicyException":
        case "com.amazonaws.migrationhubrefactorspaces#InvalidResourcePolicyException":
            throw await de_InvalidResourcePolicyExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidResourcePolicyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidResourcePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        QuotaCode: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        QuotaCode: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ApplicationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationSummary(entry, context);
    });
    return retVal;
};
const de_ApplicationSummary = (output, context) => {
    return take(output, {
        ApiGatewayProxy: _json,
        ApplicationId: __expectString,
        Arn: __expectString,
        CreatedByAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnvironmentId: __expectString,
        Error: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OwnerAccountId: __expectString,
        ProxyType: __expectString,
        State: __expectString,
        Tags: _json,
        VpcId: __expectString,
    });
};
const de_EnvironmentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentSummary(entry, context);
    });
    return retVal;
};
const de_EnvironmentSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EnvironmentId: __expectString,
        Error: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        NetworkFabricType: __expectString,
        OwnerAccountId: __expectString,
        State: __expectString,
        Tags: _json,
        TransitGatewayId: __expectString,
    });
};
const de_EnvironmentVpc = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        CidrBlocks: _json,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnvironmentId: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VpcId: __expectString,
        VpcName: __expectString,
    });
};
const de_EnvironmentVpcs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentVpc(entry, context);
    });
    return retVal;
};
const de_RouteSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteSummary(entry, context);
    });
    return retVal;
};
const de_RouteSummary = (output, context) => {
    return take(output, {
        AppendSourcePath: __expectBoolean,
        ApplicationId: __expectString,
        Arn: __expectString,
        CreatedByAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnvironmentId: __expectString,
        Error: _json,
        IncludeChildPaths: __expectBoolean,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Methods: _json,
        OwnerAccountId: __expectString,
        PathResourceToId: _json,
        RouteId: __expectString,
        RouteType: __expectString,
        ServiceId: __expectString,
        SourcePath: __expectString,
        State: __expectString,
        Tags: _json,
    });
};
const de_ServiceSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceSummary(entry, context);
    });
    return retVal;
};
const de_ServiceSummary = (output, context) => {
    return take(output, {
        ApplicationId: __expectString,
        Arn: __expectString,
        CreatedByAccountId: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        EndpointType: __expectString,
        EnvironmentId: __expectString,
        Error: _json,
        LambdaEndpoint: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        OwnerAccountId: __expectString,
        ServiceId: __expectString,
        State: __expectString,
        Tags: _json,
        UrlEndpoint: _json,
        VpcId: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _MR = "MaxResults";
const _NT = "NextToken";
const _RAS = "RetryAfterSeconds";
const _TK = "TagKeys";
const _mR = "maxResults";
const _nT = "nextToken";
const _ra = "retry-after";
const _tK = "tagKeys";
