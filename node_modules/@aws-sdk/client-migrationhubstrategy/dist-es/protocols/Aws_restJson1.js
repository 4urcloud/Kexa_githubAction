import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { MigrationHubStrategyServiceException as __BaseException } from "../models/MigrationHubStrategyServiceException";
import { AccessDeniedException, ConflictException, DependencyException, InternalServerException, ResourceNotFoundException, ServiceLinkedRoleLockClientException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_GetApplicationComponentDetailsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/get-applicationcomponent-details/{applicationComponentId}");
    b.p("applicationComponentId", () => input.applicationComponentId, "{applicationComponentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetApplicationComponentStrategiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/get-applicationcomponent-strategies/{applicationComponentId}");
    b.p("applicationComponentId", () => input.applicationComponentId, "{applicationComponentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/get-assessment/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetImportFileTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/get-import-file-task/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetLatestAssessmentIdCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/get-latest-assessment-id");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPortfolioPreferencesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/get-portfolio-preferences");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPortfolioSummaryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/get-portfolio-summary");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRecommendationReportDetailsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/get-recommendation-report-details/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetServerDetailsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/get-server-details/{serverId}");
    b.p("serverId", () => input.serverId, "{serverId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetServerStrategiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/get-server-strategies/{serverId}");
    b.p("serverId", () => input.serverId, "{serverId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListAnalyzableServersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-analyzable-servers");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        sort: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListApplicationComponentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-applicationcomponents");
    let body;
    body = JSON.stringify(take(input, {
        applicationComponentCriteria: [],
        filterValue: [],
        groupIdFilter: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        sort: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListCollectorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/list-collectors");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListImportFileTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/list-import-file-task");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListServersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-servers");
    let body;
    body = JSON.stringify(take(input, {
        filterValue: [],
        groupIdFilter: (_) => _json(_),
        maxResults: [],
        nextToken: [],
        serverCriteria: [],
        sort: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutPortfolioPreferencesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/put-portfolio-preferences");
    let body;
    body = JSON.stringify(take(input, {
        applicationMode: [],
        applicationPreferences: (_) => _json(_),
        databasePreferences: (_) => _json(_),
        prioritizeBusinessGoals: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/start-assessment");
    let body;
    body = JSON.stringify(take(input, {
        assessmentDataSourceType: [],
        assessmentTargets: (_) => _json(_),
        s3bucketForAnalysisData: [],
        s3bucketForReportData: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartImportFileTaskCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/start-import-file-task");
    let body;
    body = JSON.stringify(take(input, {
        S3Bucket: [],
        dataSourceType: [],
        groupId: (_) => _json(_),
        name: [],
        s3bucketForReportData: [],
        s3key: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartRecommendationReportGenerationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/start-recommendation-report-generation");
    let body;
    body = JSON.stringify(take(input, {
        groupIdFilter: (_) => _json(_),
        outputFormat: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/stop-assessment");
    let body;
    body = JSON.stringify(take(input, {
        assessmentId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateApplicationComponentConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-applicationcomponent-config");
    let body;
    body = JSON.stringify(take(input, {
        appType: [],
        applicationComponentId: [],
        configureOnly: [],
        inclusionStatus: [],
        secretsManagerKey: [],
        sourceCodeList: (_) => _json(_),
        strategyOption: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateServerConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-server-config");
    let body;
    body = JSON.stringify(take(input, {
        serverId: [],
        strategyOption: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_GetApplicationComponentDetailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationComponentDetail: (_) => de_ApplicationComponentDetail(_, context),
        associatedApplications: _json,
        associatedServerIds: _json,
        moreApplicationResource: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetApplicationComponentStrategiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationComponentStrategies: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentTargets: _json,
        dataCollectionDetails: (_) => de_DataCollectionDetails(_, context),
        id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetImportFileTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        completionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        id: __expectString,
        importName: __expectString,
        inputS3Bucket: __expectString,
        inputS3Key: __expectString,
        numberOfRecordsFailed: __expectInt32,
        numberOfRecordsSuccess: __expectInt32,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        statusReportS3Bucket: __expectString,
        statusReportS3Key: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLatestAssessmentIdCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPortfolioPreferencesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationMode: __expectString,
        applicationPreferences: _json,
        databasePreferences: _json,
        prioritizeBusinessGoals: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPortfolioSummaryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentSummary: (_) => de_AssessmentSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRecommendationReportDetailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
        recommendationReportDetails: (_) => de_RecommendationReportDetails(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetServerDetailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        associatedApplications: _json,
        nextToken: __expectString,
        serverDetail: (_) => de_ServerDetail(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetServerStrategiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        serverStrategies: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnalyzableServersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        analyzableServers: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationComponentInfos: (_) => de_ApplicationComponentDetails(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCollectorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Collectors: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImportFileTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        taskInfos: (_) => de_ListImportFileTaskInformation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListServersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        serverInfos: (_) => de_ServerDetails(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutPortfolioPreferencesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartImportFileTaskCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartRecommendationReportGenerationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateApplicationComponentConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateServerConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.migrationhubstrategy#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.migrationhubstrategy#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.migrationhubstrategy#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.migrationhubstrategy#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.migrationhubstrategy#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "DependencyException":
        case "com.amazonaws.migrationhubstrategy#DependencyException":
            throw await de_DependencyExceptionRes(parsedOutput, context);
        case "ServiceLinkedRoleLockClientException":
        case "com.amazonaws.migrationhubstrategy#ServiceLinkedRoleLockClientException":
            throw await de_ServiceLinkedRoleLockClientExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.migrationhubstrategy#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.migrationhubstrategy#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DependencyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new DependencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceLinkedRoleLockClientExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceLinkedRoleLockClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ApplicationComponentDetail = (output, context) => {
    return take(output, {
        analysisStatus: __expectString,
        antipatternReportS3Object: _json,
        antipatternReportStatus: __expectString,
        antipatternReportStatusMessage: __expectString,
        appType: __expectString,
        appUnitError: _json,
        associatedServerId: __expectString,
        databaseConfigDetail: _json,
        id: __expectString,
        inclusionStatus: __expectString,
        lastAnalyzedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        listAntipatternSeveritySummary: _json,
        moreServerAssociationExists: __expectBoolean,
        name: __expectString,
        osDriver: __expectString,
        osVersion: __expectString,
        recommendationSet: _json,
        resourceSubType: __expectString,
        resultList: _json,
        runtimeStatus: __expectString,
        runtimeStatusMessage: __expectString,
        sourceCodeRepositories: _json,
        statusMessage: __expectString,
    });
};
const de_ApplicationComponentDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationComponentDetail(entry, context);
    });
    return retVal;
};
const de_AssessmentSummary = (output, context) => {
    return take(output, {
        antipatternReportS3Object: _json,
        antipatternReportStatus: __expectString,
        antipatternReportStatusMessage: __expectString,
        lastAnalyzedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        listAntipatternSeveritySummary: _json,
        listApplicationComponentStatusSummary: _json,
        listApplicationComponentStrategySummary: _json,
        listApplicationComponentSummary: _json,
        listServerStatusSummary: _json,
        listServerStrategySummary: _json,
        listServerSummary: _json,
    });
};
const de_DataCollectionDetails = (output, context) => {
    return take(output, {
        completionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        failed: __expectInt32,
        inProgress: __expectInt32,
        servers: __expectInt32,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        statusMessage: __expectString,
        success: __expectInt32,
    });
};
const de_ImportFileTaskInformation = (output, context) => {
    return take(output, {
        completionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        id: __expectString,
        importName: __expectString,
        inputS3Bucket: __expectString,
        inputS3Key: __expectString,
        numberOfRecordsFailed: __expectInt32,
        numberOfRecordsSuccess: __expectInt32,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        statusReportS3Bucket: __expectString,
        statusReportS3Key: __expectString,
    });
};
const de_ListImportFileTaskInformation = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportFileTaskInformation(entry, context);
    });
    return retVal;
};
const de_RecommendationReportDetails = (output, context) => {
    return take(output, {
        completionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        s3Bucket: __expectString,
        s3Keys: _json,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        statusMessage: __expectString,
    });
};
const de_ServerDetail = (output, context) => {
    return take(output, {
        antipatternReportS3Object: _json,
        antipatternReportStatus: __expectString,
        antipatternReportStatusMessage: __expectString,
        applicationComponentStrategySummary: _json,
        dataCollectionStatus: __expectString,
        id: __expectString,
        lastAnalyzedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        listAntipatternSeveritySummary: _json,
        name: __expectString,
        recommendationSet: _json,
        serverError: _json,
        serverType: __expectString,
        statusMessage: __expectString,
        systemInfo: _json,
    });
};
const de_ServerDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServerDetail(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _mR = "maxResults";
const _nT = "nextToken";
