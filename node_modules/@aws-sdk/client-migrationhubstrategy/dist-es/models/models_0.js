import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { MigrationHubStrategyServiceException as __BaseException } from "./MigrationHubStrategyServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export const RuntimeAnalysisStatus = {
    ANALYSIS_FAILED: "ANALYSIS_FAILED",
    ANALYSIS_STARTED: "ANALYSIS_STARTED",
    ANALYSIS_SUCCESS: "ANALYSIS_SUCCESS",
    ANALYSIS_TO_BE_SCHEDULED: "ANALYSIS_TO_BE_SCHEDULED",
};
export const SrcCodeOrDbAnalysisStatus = {
    ANALYSIS_FAILED: "ANALYSIS_FAILED",
    ANALYSIS_PARTIAL_SUCCESS: "ANALYSIS_PARTIAL_SUCCESS",
    ANALYSIS_STARTED: "ANALYSIS_STARTED",
    ANALYSIS_SUCCESS: "ANALYSIS_SUCCESS",
    ANALYSIS_TO_BE_SCHEDULED: "ANALYSIS_TO_BE_SCHEDULED",
    CONFIGURED: "CONFIGURED",
    UNCONFIGURED: "UNCONFIGURED",
};
export var AnalysisStatusUnion;
(function (AnalysisStatusUnion) {
    AnalysisStatusUnion.visit = (value, visitor) => {
        if (value.runtimeAnalysisStatus !== undefined)
            return visitor.runtimeAnalysisStatus(value.runtimeAnalysisStatus);
        if (value.srcCodeOrDbAnalysisStatus !== undefined)
            return visitor.srcCodeOrDbAnalysisStatus(value.srcCodeOrDbAnalysisStatus);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AnalysisStatusUnion || (AnalysisStatusUnion = {}));
export const AnalysisType = {
    BINARY_ANALYSIS: "BINARY_ANALYSIS",
    DATABASE_ANALYSIS: "DATABASE_ANALYSIS",
    RUNTIME_ANALYSIS: "RUNTIME_ANALYSIS",
    SOURCE_CODE_ANALYSIS: "SOURCE_CODE_ANALYSIS",
};
export const BinaryAnalyzerName = {
    BYTECODE_ANALYZER: "BYTECODE_ANALYZER",
    DLL_ANALYZER: "DLL_ANALYZER",
};
export const RunTimeAnalyzerName = {
    A2C_ANALYZER: "A2C_ANALYZER",
    DATABASE_ANALYZER: "DATABASE_ANALYZER",
    EMP_PA_ANALYZER: "EMP_PA_ANALYZER",
    REHOST_ANALYZER: "REHOST_ANALYZER",
    SCT_ANALYZER: "SCT_ANALYZER",
};
export const SourceCodeAnalyzerName = {
    BYTECODE_ANALYZER: "BYTECODE_ANALYZER",
    CSHARP_ANALYZER: "CSHARP_ANALYZER",
    JAVA_ANALYZER: "JAVA_ANALYZER",
    PORTING_ASSISTANT: "PORTING_ASSISTANT",
};
export var AnalyzerNameUnion;
(function (AnalyzerNameUnion) {
    AnalyzerNameUnion.visit = (value, visitor) => {
        if (value.binaryAnalyzerName !== undefined)
            return visitor.binaryAnalyzerName(value.binaryAnalyzerName);
        if (value.runTimeAnalyzerName !== undefined)
            return visitor.runTimeAnalyzerName(value.runTimeAnalyzerName);
        if (value.sourceCodeAnalyzerName !== undefined)
            return visitor.sourceCodeAnalyzerName(value.sourceCodeAnalyzerName);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AnalyzerNameUnion || (AnalyzerNameUnion = {}));
export const AntipatternReportStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCESS: "SUCCESS",
};
export const Severity = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
export const ApplicationComponentCriteria = {
    ANALYSIS_STATUS: "ANALYSIS_STATUS",
    APP_NAME: "APP_NAME",
    APP_TYPE: "APP_TYPE",
    DESTINATION: "DESTINATION",
    ERROR_CATEGORY: "ERROR_CATEGORY",
    NOT_DEFINED: "NOT_DEFINED",
    SERVER_ID: "SERVER_ID",
    STRATEGY: "STRATEGY",
};
export const AppType = {
    IIS: "IIS",
    cassandra: "Cassandra",
    db2: "DB2",
    dotNetFramework: "DotNetFramework",
    dotnet: "Dotnet",
    dotnetcore: "DotnetCore",
    java: "Java",
    jboss: "JBoss",
    mariadb: "Maria DB",
    mongodb: "Mongo DB",
    mysql: "MySQL",
    oracle: "Oracle",
    other: "Other",
    postgresqlserver: "PostgreSQLServer",
    spring: "Spring",
    sqlServer: "SQLServer",
    sybase: "Sybase",
    tomcat: "Tomcat",
    unknown: "Unknown",
    visualbasic: "Visual Basic",
    weblogic: "Oracle WebLogic",
    websphere: "IBM WebSphere",
};
export const AppUnitErrorCategory = {
    CONNECTIVITY_ERROR: "CONNECTIVITY_ERROR",
    CREDENTIAL_ERROR: "CREDENTIAL_ERROR",
    OTHER_ERROR: "OTHER_ERROR",
    PERMISSION_ERROR: "PERMISSION_ERROR",
    UNSUPPORTED_ERROR: "UNSUPPORTED_ERROR",
};
export const InclusionStatus = {
    EXCLUDE_FROM_RECOMMENDATION: "excludeFromAssessment",
    INCLUDE_IN_RECOMMENDATION: "includeInAssessment",
};
export const Strategy = {
    REFACTOR: "Refactor",
    REHOST: "Rehost",
    RELOCATE: "Relocate",
    REPLATFORM: "Replatform",
    REPURCHASE: "Repurchase",
    RETAIN: "Retain",
    RETIREMENT: "Retirement",
};
export const TargetDestination = {
    AMAZON_DOCUMENTDB: "Amazon DocumentDB",
    AMAZON_DYNAMODB: "Amazon DynamoDB",
    AMAZON_ELASTIC_CLOUD_COMPUTE: "Amazon Elastic Cloud Compute (EC2)",
    AMAZON_ELASTIC_CONTAINER_SERVICE: "Amazon Elastic Container Service (ECS)",
    AMAZON_ELASTIC_KUBERNETES_SERVICE: "Amazon Elastic Kubernetes Service (EKS)",
    AMAZON_RDS: "Amazon Relational Database Service",
    AMAZON_RDS_MYSQL: "Amazon Relational Database Service on MySQL",
    AMAZON_RDS_POSTGRESQL: "Amazon Relational Database Service on PostgreSQL",
    AURORA_MYSQL: "Aurora MySQL",
    AURORA_POSTGRESQL: "Aurora PostgreSQL",
    AWS_ELASTIC_BEANSTALK: "AWS Elastic BeanStalk",
    AWS_FARGATE: "AWS Fargate",
    BABELFISH_AURORA_POSTGRESQL: "Babelfish for Aurora PostgreSQL",
    NONE_SPECIFIED: "None specified",
};
export const TransformationToolName = {
    APP2CONTAINER: "App2Container",
    DMS: "Database Migration Service",
    EMP: "End of Support Migration",
    IN_PLACE_OS_UPGRADE: "In Place Operating System Upgrade",
    MGN: "Application Migration Service",
    NATIVE_SQL: "Native SQL Server Backup/Restore",
    PORTING_ASSISTANT: "Porting Assistant For .NET",
    SCT: "Schema Conversion Tool",
    STRATEGY_RECOMMENDATION_SUPPORT: "Strategy Recommendation Support",
    WWAMA: "Windows Web Application Migration Assistant",
};
export const ResourceSubType = {
    DATABASE: "Database",
    DATABASE_PROCESS: "DatabaseProcess",
    PROCESS: "Process",
};
export const StrategyRecommendation = {
    NOT_RECOMMENDED: "notRecommended",
    POTENTIAL: "potential",
    RECOMMENDED: "recommended",
    VIABLE_OPTION: "viableOption",
};
export const ApplicationMode = {
    ALL: "ALL",
    KNOWN: "KNOWN",
    UNKNOWN: "UNKNOWN",
};
export const AwsManagedTargetDestination = {
    AWS_ELASTIC_BEANSTALK: "AWS Elastic BeanStalk",
    AWS_FARGATE: "AWS Fargate",
    NONE_SPECIFIED: "None specified",
};
export const NoPreferenceTargetDestination = {
    AMAZON_ELASTIC_CLOUD_COMPUTE: "Amazon Elastic Cloud Compute (EC2)",
    AMAZON_ELASTIC_CONTAINER_SERVICE: "Amazon Elastic Container Service (ECS)",
    AMAZON_ELASTIC_KUBERNETES_SERVICE: "Amazon Elastic Kubernetes Service (EKS)",
    AWS_ELASTIC_BEANSTALK: "AWS Elastic BeanStalk",
    AWS_FARGATE: "AWS Fargate",
    NONE_SPECIFIED: "None specified",
};
export const SelfManageTargetDestination = {
    AMAZON_ELASTIC_CLOUD_COMPUTE: "Amazon Elastic Cloud Compute (EC2)",
    AMAZON_ELASTIC_CONTAINER_SERVICE: "Amazon Elastic Container Service (ECS)",
    AMAZON_ELASTIC_KUBERNETES_SERVICE: "Amazon Elastic Kubernetes Service (EKS)",
    NONE_SPECIFIED: "None specified",
};
export var ManagementPreference;
(function (ManagementPreference) {
    ManagementPreference.visit = (value, visitor) => {
        if (value.awsManagedResources !== undefined)
            return visitor.awsManagedResources(value.awsManagedResources);
        if (value.selfManageResources !== undefined)
            return visitor.selfManageResources(value.selfManageResources);
        if (value.noPreference !== undefined)
            return visitor.noPreference(value.noPreference);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ManagementPreference || (ManagementPreference = {}));
export const AssessmentDataSourceType = {
    ADS: "ApplicationDiscoveryService",
    MANUAL_IMPORT: "ManualImport",
    SR_COLLECTOR: "StrategyRecommendationsApplicationDataCollector",
};
export const AssessmentStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
};
export const RunTimeAssessmentStatus = {
    DC_FAILED: "dataCollectionTaskFailed",
    DC_PARTIAL_SUCCESS: "dataCollectionTaskPartialSuccess",
    DC_REQ_SENT: "dataCollectionTaskScheduled",
    DC_STARTED: "dataCollectionTaskStarted",
    DC_STOPPED: "dataCollectionTaskStopped",
    DC_SUCCESS: "dataCollectionTaskSuccess",
    DC_TO_BE_SCHEDULED: "dataCollectionTaskToBeScheduled",
};
export const ServerOsType = {
    amazonLinux: "AmazonLinux",
    endOfSupportWindowsServer: "EndOfSupportWindowsServer",
    other: "Other",
    redhat: "Redhat",
    windowsServer: "WindowsServer",
};
export const Condition = {
    CONTAINS: "CONTAINS",
    EQUALS: "EQUALS",
    NOT_CONTAINS: "NOT_CONTAINS",
    NOT_EQUALS: "NOT_EQUALS",
};
export const AuthType = {
    CERT: "CERT",
    NTLM: "NTLM",
    SSH: "SSH",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export const ImportFileTaskStatus = {
    DELETE_FAILED: "DeleteFailed",
    DELETE_IN_PROGRESS: "DeleteInProgress",
    DELETE_PARTIAL_SUCCESS: "DeletePartialSuccess",
    DELETE_SUCCESS: "DeleteSuccess",
    IMPORT_FAILED: "ImportFailed",
    IMPORT_IN_PROGRESS: "ImportInProgress",
    IMPORT_PARTIAL_SUCCESS: "ImportPartialSuccess",
    IMPORT_SUCCESS: "ImportSuccess",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export class DependencyException extends __BaseException {
    constructor(opts) {
        super({
            name: "DependencyException",
            $fault: "server",
            ...opts,
        });
        this.name = "DependencyException";
        this.$fault = "server";
        Object.setPrototypeOf(this, DependencyException.prototype);
    }
}
export const DatabaseManagementPreference = {
    AWS_MANAGED: "AWS-managed",
    NO_PREFERENCE: "No preference",
    SELF_MANAGE: "Self-manage",
};
export const HeterogeneousTargetDatabaseEngine = {
    AMAZON_AURORA: "Amazon Aurora",
    AWS_POSTGRESQL: "AWS PostgreSQL",
    DB2_LUW: "Db2 LUW",
    MARIA_DB: "MariaDB",
    MICROSOFT_SQL_SERVER: "Microsoft SQL Server",
    MONGO_DB: "MongoDB",
    MYSQL: "MySQL",
    NONE_SPECIFIED: "None specified",
    ORACLE_DATABASE: "Oracle Database",
    SAP: "SAP",
};
export const HomogeneousTargetDatabaseEngine = {
    NONE_SPECIFIED: "None specified",
};
export const TargetDatabaseEngine = {
    AMAZON_AURORA: "Amazon Aurora",
    AWS_POSTGRESQL: "AWS PostgreSQL",
    DB2_LUW: "Db2 LUW",
    MARIA_DB: "MariaDB",
    MICROSOFT_SQL_SERVER: "Microsoft SQL Server",
    MONGO_DB: "MongoDB",
    MYSQL: "MySQL",
    NONE_SPECIFIED: "None specified",
    ORACLE_DATABASE: "Oracle Database",
    SAP: "SAP",
};
export var DatabaseMigrationPreference;
(function (DatabaseMigrationPreference) {
    DatabaseMigrationPreference.visit = (value, visitor) => {
        if (value.heterogeneous !== undefined)
            return visitor.heterogeneous(value.heterogeneous);
        if (value.homogeneous !== undefined)
            return visitor.homogeneous(value.homogeneous);
        if (value.noPreference !== undefined)
            return visitor.noPreference(value.noPreference);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(DatabaseMigrationPreference || (DatabaseMigrationPreference = {}));
export const RecommendationReportStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCESS: "SUCCESS",
};
export const ServerErrorCategory = {
    ARCHITECTURE_ERROR: "ARCHITECTURE_ERROR",
    CONNECTIVITY_ERROR: "CONNECTIVITY_ERROR",
    CREDENTIAL_ERROR: "CREDENTIAL_ERROR",
    OTHER_ERROR: "OTHER_ERROR",
    PERMISSION_ERROR: "PERMISSION_ERROR",
};
export const OSType = {
    LINUX: "LINUX",
    WINDOWS: "WINDOWS",
};
export const SortOrder = {
    ASC: "ASC",
    DESC: "DESC",
};
export const GroupName = {
    EXTERNAL_ID: "ExternalId",
    EXTERNAL_SOURCE_TYPE: "ExternalSourceType",
};
export class ServiceLinkedRoleLockClientException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceLinkedRoleLockClientException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceLinkedRoleLockClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceLinkedRoleLockClientException.prototype);
    }
}
export const CollectorHealth = {
    COLLECTOR_HEALTHY: "COLLECTOR_HEALTHY",
    COLLECTOR_UNHEALTHY: "COLLECTOR_UNHEALTHY",
};
export const PipelineType = {
    AZURE_DEVOPS: "AZURE_DEVOPS",
};
export const VersionControlType = {
    AZURE_DEVOPS_GIT: "AZURE_DEVOPS_GIT",
    GITHUB: "GITHUB",
    GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE",
};
export const ServerCriteria = {
    ANALYSIS_STATUS: "ANALYSIS_STATUS",
    DESTINATION: "DESTINATION",
    ERROR_CATEGORY: "ERROR_CATEGORY",
    NOT_DEFINED: "NOT_DEFINED",
    OS_NAME: "OS_NAME",
    SERVER_ID: "SERVER_ID",
    STRATEGY: "STRATEGY",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export const DataSourceType = {
    ADS: "ApplicationDiscoveryService",
    IMPORT: "Import",
    MHSR_COLLECTOR: "StrategyRecommendationsApplicationDataCollector",
    MPA: "MPA",
};
export const OutputFormat = {
    Excel: "Excel",
    Json: "Json",
};
export const VersionControl = {
    AZURE_DEVOPS_GIT: "AZURE_DEVOPS_GIT",
    GITHUB: "GITHUB",
    GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE",
};
export const UpdateApplicationComponentConfigRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.secretsManagerKey && { secretsManagerKey: SENSITIVE_STRING }),
});
