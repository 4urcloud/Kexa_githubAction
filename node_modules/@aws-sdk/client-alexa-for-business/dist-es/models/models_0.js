import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { AlexaForBusinessServiceException as __BaseException } from "./AlexaForBusinessServiceException";
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class DeviceNotRegisteredException extends __BaseException {
    constructor(opts) {
        super({
            name: "DeviceNotRegisteredException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeviceNotRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeviceNotRegisteredException.prototype);
        this.Message = opts.Message;
    }
}
export class SkillNotLinkedException extends __BaseException {
    constructor(opts) {
        super({
            name: "SkillNotLinkedException",
            $fault: "client",
            ...opts,
        });
        this.name = "SkillNotLinkedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SkillNotLinkedException.prototype);
        this.Message = opts.Message;
    }
}
export class AlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export const BusinessReportInterval = {
    ONE_DAY: "ONE_DAY",
    ONE_WEEK: "ONE_WEEK",
    THIRTY_DAYS: "THIRTY_DAYS",
};
export const BusinessReportFormat = {
    CSV: "CSV",
    CSV_ZIP: "CSV_ZIP",
};
export const ConferenceProviderType = {
    BLUEJEANS: "BLUEJEANS",
    CHIME: "CHIME",
    CUSTOM: "CUSTOM",
    FUZE: "FUZE",
    GOOGLE_HANGOUTS: "GOOGLE_HANGOUTS",
    POLYCOM: "POLYCOM",
    RINGCENTRAL: "RINGCENTRAL",
    SKYPE_FOR_BUSINESS: "SKYPE_FOR_BUSINESS",
    WEBEX: "WEBEX",
    ZOOM: "ZOOM",
};
export const CommsProtocol = {
    H323: "H323",
    SIP: "SIP",
    SIPS: "SIPS",
};
export const RequirePin = {
    NO: "NO",
    OPTIONAL: "OPTIONAL",
    YES: "YES",
};
export const PhoneNumberType = {
    HOME: "HOME",
    MOBILE: "MOBILE",
    WORK: "WORK",
};
export const SipType = {
    WORK: "WORK",
};
export const NetworkEapMethod = {
    EAP_TLS: "EAP_TLS",
};
export const NetworkSecurityType = {
    OPEN: "OPEN",
    WEP: "WEP",
    WPA2_ENTERPRISE: "WPA2_ENTERPRISE",
    WPA2_PSK: "WPA2_PSK",
    WPA_PSK: "WPA_PSK",
};
export class InvalidCertificateAuthorityException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidCertificateAuthorityException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidCertificateAuthorityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidCertificateAuthorityException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidServiceLinkedRoleStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidServiceLinkedRoleStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidServiceLinkedRoleStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidServiceLinkedRoleStateException.prototype);
        this.Message = opts.Message;
    }
}
export const DistanceUnit = {
    IMPERIAL: "IMPERIAL",
    METRIC: "METRIC",
};
export const EndOfMeetingReminderType = {
    ANNOUNCEMENT_TIME_CHECK: "ANNOUNCEMENT_TIME_CHECK",
    ANNOUNCEMENT_VARIABLE_TIME_LEFT: "ANNOUNCEMENT_VARIABLE_TIME_LEFT",
    CHIME: "CHIME",
    KNOCK: "KNOCK",
};
export const TemperatureUnit = {
    CELSIUS: "CELSIUS",
    FAHRENHEIT: "FAHRENHEIT",
};
export const WakeWord = {
    ALEXA: "ALEXA",
    AMAZON: "AMAZON",
    COMPUTER: "COMPUTER",
    ECHO: "ECHO",
};
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
        this.ClientRequestToken = opts.ClientRequestToken;
    }
}
export const DeviceUsageType = {
    VOICE: "VOICE",
};
export class ResourceAssociatedException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAssociatedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAssociatedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAssociatedException.prototype);
        this.Message = opts.Message;
    }
}
export const DeviceStatus = {
    DEREGISTERED: "DEREGISTERED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    READY: "READY",
    WAS_OFFLINE: "WAS_OFFLINE",
};
export const ConnectionStatus = {
    OFFLINE: "OFFLINE",
    ONLINE: "ONLINE",
};
export const DeviceStatusDetailCode = {
    ASSOCIATION_REJECTION: "ASSOCIATION_REJECTION",
    AUTHENTICATION_FAILURE: "AUTHENTICATION_FAILURE",
    CERTIFICATE_AUTHORITY_ACCESS_DENIED: "CERTIFICATE_AUTHORITY_ACCESS_DENIED",
    CERTIFICATE_ISSUING_LIMIT_EXCEEDED: "CERTIFICATE_ISSUING_LIMIT_EXCEEDED",
    CREDENTIALS_ACCESS_FAILURE: "CREDENTIALS_ACCESS_FAILURE",
    DEVICE_SOFTWARE_UPDATE_NEEDED: "DEVICE_SOFTWARE_UPDATE_NEEDED",
    DEVICE_WAS_OFFLINE: "DEVICE_WAS_OFFLINE",
    DHCP_FAILURE: "DHCP_FAILURE",
    DNS_FAILURE: "DNS_FAILURE",
    INTERNET_UNAVAILABLE: "INTERNET_UNAVAILABLE",
    INVALID_CERTIFICATE_AUTHORITY: "INVALID_CERTIFICATE_AUTHORITY",
    INVALID_PASSWORD_STATE: "INVALID_PASSWORD_STATE",
    NETWORK_PROFILE_NOT_FOUND: "NETWORK_PROFILE_NOT_FOUND",
    PASSWORD_MANAGER_ACCESS_DENIED: "PASSWORD_MANAGER_ACCESS_DENIED",
    PASSWORD_NOT_FOUND: "PASSWORD_NOT_FOUND",
    TLS_VERSION_MISMATCH: "TLS_VERSION_MISMATCH",
    UNKNOWN_FAILURE: "UNKNOWN_FAILURE",
};
export const Feature = {
    ALL: "ALL",
    BLUETOOTH: "BLUETOOTH",
    LISTS: "LISTS",
    NETWORK_PROFILE: "NETWORK_PROFILE",
    NOTIFICATIONS: "NOTIFICATIONS",
    SETTINGS: "SETTINGS",
    SKILLS: "SKILLS",
    VOLUME: "VOLUME",
};
export class InvalidSecretsManagerResourceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidSecretsManagerResourceException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSecretsManagerResourceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSecretsManagerResourceException.prototype);
        this.Message = opts.Message;
    }
}
export const BusinessReportFailureCode = {
    ACCESS_DENIED: "ACCESS_DENIED",
    INTERNAL_FAILURE: "INTERNAL_FAILURE",
    NO_SUCH_BUCKET: "NO_SUCH_BUCKET",
};
export const BusinessReportStatus = {
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    SUCCEEDED: "SUCCEEDED",
};
export const DeviceEventType = {
    CONNECTION_STATUS: "CONNECTION_STATUS",
    DEVICE_STATUS: "DEVICE_STATUS",
};
export const EnablementTypeFilter = {
    ENABLED: "ENABLED",
    PENDING: "PENDING",
};
export const SkillTypeFilter = {
    ALL: "ALL",
    PRIVATE: "PRIVATE",
    PUBLIC: "PUBLIC",
};
export const EnablementType = {
    ENABLED: "ENABLED",
    PENDING: "PENDING",
};
export const SkillType = {
    PRIVATE: "PRIVATE",
    PUBLIC: "PUBLIC",
};
export class UnauthorizedException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidDeviceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidDeviceException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeviceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeviceException.prototype);
        this.Message = opts.Message;
    }
}
export const SortValue = {
    ASC: "ASC",
    DESC: "DESC",
};
export const EnrollmentStatus = {
    DEREGISTERING: "DEREGISTERING",
    DISASSOCIATING: "DISASSOCIATING",
    INITIALIZED: "INITIALIZED",
    PENDING: "PENDING",
    REGISTERED: "REGISTERED",
};
export const Locale = {
    en_US: "en-US",
};
export class InvalidUserStatusException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidUserStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidUserStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidUserStatusException.prototype);
        this.Message = opts.Message;
    }
}
export class NameInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "NameInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "NameInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NameInUseException.prototype);
        this.Message = opts.Message;
    }
}
export const PhoneNumberFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Number && { Number: SENSITIVE_STRING }),
    ...(obj.Type && { Type: SENSITIVE_STRING }),
});
export const SipAddressFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Uri && { Uri: SENSITIVE_STRING }),
    ...(obj.Type && { Type: SENSITIVE_STRING }),
});
export const CreateContactRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: SENSITIVE_STRING }),
    ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
    ...(obj.SipAddresses && { SipAddresses: obj.SipAddresses.map((item) => SipAddressFilterSensitiveLog(item)) }),
});
export const CreateNetworkProfileRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CurrentPassword && { CurrentPassword: SENSITIVE_STRING }),
    ...(obj.NextPassword && { NextPassword: SENSITIVE_STRING }),
});
export const ContactFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: SENSITIVE_STRING }),
    ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
    ...(obj.SipAddresses && { SipAddresses: obj.SipAddresses.map((item) => SipAddressFilterSensitiveLog(item)) }),
});
export const GetContactResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Contact && { Contact: ContactFilterSensitiveLog(obj.Contact) }),
});
export const NetworkProfileFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CurrentPassword && { CurrentPassword: SENSITIVE_STRING }),
    ...(obj.NextPassword && { NextPassword: SENSITIVE_STRING }),
});
export const GetNetworkProfileResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.NetworkProfile && { NetworkProfile: NetworkProfileFilterSensitiveLog(obj.NetworkProfile) }),
});
export const PutSkillAuthorizationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AuthorizationResult && { AuthorizationResult: SENSITIVE_STRING }),
});
export const ContactDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: SENSITIVE_STRING }),
    ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
    ...(obj.SipAddresses && { SipAddresses: obj.SipAddresses.map((item) => SipAddressFilterSensitiveLog(item)) }),
});
export const SearchContactsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Contacts && { Contacts: obj.Contacts.map((item) => ContactDataFilterSensitiveLog(item)) }),
});
export const UpdateContactRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PhoneNumber && { PhoneNumber: SENSITIVE_STRING }),
    ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
    ...(obj.SipAddresses && { SipAddresses: obj.SipAddresses.map((item) => SipAddressFilterSensitiveLog(item)) }),
});
export const UpdateNetworkProfileRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CurrentPassword && { CurrentPassword: SENSITIVE_STRING }),
    ...(obj.NextPassword && { NextPassword: SENSITIVE_STRING }),
});
