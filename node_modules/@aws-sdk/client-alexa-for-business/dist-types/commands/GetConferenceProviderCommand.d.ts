import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { AlexaForBusinessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AlexaForBusinessClient";
import { GetConferenceProviderRequest, GetConferenceProviderResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link GetConferenceProviderCommand}.
 */
export interface GetConferenceProviderCommandInput extends GetConferenceProviderRequest {
}
/**
 * @public
 *
 * The output of {@link GetConferenceProviderCommand}.
 */
export interface GetConferenceProviderCommandOutput extends GetConferenceProviderResponse, __MetadataBearer {
}
declare const GetConferenceProviderCommand_base: {
    new (input: GetConferenceProviderCommandInput): import("@smithy/smithy-client").CommandImpl<GetConferenceProviderCommandInput, GetConferenceProviderCommandOutput, AlexaForBusinessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: GetConferenceProviderCommandInput): import("@smithy/smithy-client").CommandImpl<GetConferenceProviderCommandInput, GetConferenceProviderCommandOutput, AlexaForBusinessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Gets details about a specific conference provider.</p>
 *
 * @deprecated Alexa For Business is no longer supported
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AlexaForBusinessClient, GetConferenceProviderCommand } from "@aws-sdk/client-alexa-for-business"; // ES Modules import
 * // const { AlexaForBusinessClient, GetConferenceProviderCommand } = require("@aws-sdk/client-alexa-for-business"); // CommonJS import
 * const client = new AlexaForBusinessClient(config);
 * const input = { // GetConferenceProviderRequest
 *   ConferenceProviderArn: "STRING_VALUE", // required
 * };
 * const command = new GetConferenceProviderCommand(input);
 * const response = await client.send(command);
 * // { // GetConferenceProviderResponse
 * //   ConferenceProvider: { // ConferenceProvider
 * //     Arn: "STRING_VALUE",
 * //     Name: "STRING_VALUE",
 * //     Type: "CHIME" || "BLUEJEANS" || "FUZE" || "GOOGLE_HANGOUTS" || "POLYCOM" || "RINGCENTRAL" || "SKYPE_FOR_BUSINESS" || "WEBEX" || "ZOOM" || "CUSTOM",
 * //     IPDialIn: { // IPDialIn
 * //       Endpoint: "STRING_VALUE", // required
 * //       CommsProtocol: "SIP" || "SIPS" || "H323", // required
 * //     },
 * //     PSTNDialIn: { // PSTNDialIn
 * //       CountryCode: "STRING_VALUE", // required
 * //       PhoneNumber: "STRING_VALUE", // required
 * //       OneClickIdDelay: "STRING_VALUE", // required
 * //       OneClickPinDelay: "STRING_VALUE", // required
 * //     },
 * //     MeetingSetting: { // MeetingSetting
 * //       RequirePin: "YES" || "NO" || "OPTIONAL", // required
 * //     },
 * //   },
 * // };
 *
 * ```
 *
 * @param GetConferenceProviderCommandInput - {@link GetConferenceProviderCommandInput}
 * @returns {@link GetConferenceProviderCommandOutput}
 * @see {@link GetConferenceProviderCommandInput} for command's `input` shape.
 * @see {@link GetConferenceProviderCommandOutput} for command's `response` shape.
 * @see {@link AlexaForBusinessClientResolvedConfig | config} for AlexaForBusinessClient's `config` shape.
 *
 * @throws {@link NotFoundException} (client fault)
 *  <p>The resource is not found.</p>
 *
 * @throws {@link AlexaForBusinessServiceException}
 * <p>Base exception class for all service exceptions from AlexaForBusiness service.</p>
 *
 * @public
 */
export declare class GetConferenceProviderCommand extends GetConferenceProviderCommand_base {
}
