import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { AlexaForBusinessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AlexaForBusinessClient";
import { ListConferenceProvidersRequest, ListConferenceProvidersResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link ListConferenceProvidersCommand}.
 */
export interface ListConferenceProvidersCommandInput extends ListConferenceProvidersRequest {
}
/**
 * @public
 *
 * The output of {@link ListConferenceProvidersCommand}.
 */
export interface ListConferenceProvidersCommandOutput extends ListConferenceProvidersResponse, __MetadataBearer {
}
declare const ListConferenceProvidersCommand_base: {
    new (input: ListConferenceProvidersCommandInput): import("@smithy/smithy-client").CommandImpl<ListConferenceProvidersCommandInput, ListConferenceProvidersCommandOutput, AlexaForBusinessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * @public
 * @deprecated
 *
 * <p>Lists conference providers under a specific AWS account.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AlexaForBusinessClient, ListConferenceProvidersCommand } from "@aws-sdk/client-alexa-for-business"; // ES Modules import
 * // const { AlexaForBusinessClient, ListConferenceProvidersCommand } = require("@aws-sdk/client-alexa-for-business"); // CommonJS import
 * const client = new AlexaForBusinessClient(config);
 * const input = { // ListConferenceProvidersRequest
 *   NextToken: "STRING_VALUE",
 *   MaxResults: Number("int"),
 * };
 * const command = new ListConferenceProvidersCommand(input);
 * const response = await client.send(command);
 * // { // ListConferenceProvidersResponse
 * //   ConferenceProviders: [ // ConferenceProvidersList
 * //     { // ConferenceProvider
 * //       Arn: "STRING_VALUE",
 * //       Name: "STRING_VALUE",
 * //       Type: "CHIME" || "BLUEJEANS" || "FUZE" || "GOOGLE_HANGOUTS" || "POLYCOM" || "RINGCENTRAL" || "SKYPE_FOR_BUSINESS" || "WEBEX" || "ZOOM" || "CUSTOM",
 * //       IPDialIn: { // IPDialIn
 * //         Endpoint: "STRING_VALUE", // required
 * //         CommsProtocol: "SIP" || "SIPS" || "H323", // required
 * //       },
 * //       PSTNDialIn: { // PSTNDialIn
 * //         CountryCode: "STRING_VALUE", // required
 * //         PhoneNumber: "STRING_VALUE", // required
 * //         OneClickIdDelay: "STRING_VALUE", // required
 * //         OneClickPinDelay: "STRING_VALUE", // required
 * //       },
 * //       MeetingSetting: { // MeetingSetting
 * //         RequirePin: "YES" || "NO" || "OPTIONAL", // required
 * //       },
 * //     },
 * //   ],
 * //   NextToken: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param ListConferenceProvidersCommandInput - {@link ListConferenceProvidersCommandInput}
 * @returns {@link ListConferenceProvidersCommandOutput}
 * @see {@link ListConferenceProvidersCommandInput} for command's `input` shape.
 * @see {@link ListConferenceProvidersCommandOutput} for command's `response` shape.
 * @see {@link AlexaForBusinessClientResolvedConfig | config} for AlexaForBusinessClient's `config` shape.
 *
 * @throws {@link AlexaForBusinessServiceException}
 * <p>Base exception class for all service exceptions from AlexaForBusiness service.</p>
 *
 */
export declare class ListConferenceProvidersCommand extends ListConferenceProvidersCommand_base {
}
