import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { AlexaForBusinessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AlexaForBusinessClient";
import { ListDeviceEventsRequest, ListDeviceEventsResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link ListDeviceEventsCommand}.
 */
export interface ListDeviceEventsCommandInput extends ListDeviceEventsRequest {
}
/**
 * @public
 *
 * The output of {@link ListDeviceEventsCommand}.
 */
export interface ListDeviceEventsCommandOutput extends ListDeviceEventsResponse, __MetadataBearer {
}
declare const ListDeviceEventsCommand_base: {
    new (input: ListDeviceEventsCommandInput): import("@smithy/smithy-client").CommandImpl<ListDeviceEventsCommandInput, ListDeviceEventsCommandOutput, AlexaForBusinessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: ListDeviceEventsCommandInput): import("@smithy/smithy-client").CommandImpl<ListDeviceEventsCommandInput, ListDeviceEventsCommandOutput, AlexaForBusinessClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Lists the device event history, including device connection status, for up to 30
 *          days.</p>
 *
 * @deprecated Alexa For Business is no longer supported
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AlexaForBusinessClient, ListDeviceEventsCommand } from "@aws-sdk/client-alexa-for-business"; // ES Modules import
 * // const { AlexaForBusinessClient, ListDeviceEventsCommand } = require("@aws-sdk/client-alexa-for-business"); // CommonJS import
 * const client = new AlexaForBusinessClient(config);
 * const input = { // ListDeviceEventsRequest
 *   DeviceArn: "STRING_VALUE", // required
 *   EventType: "CONNECTION_STATUS" || "DEVICE_STATUS",
 *   NextToken: "STRING_VALUE",
 *   MaxResults: Number("int"),
 * };
 * const command = new ListDeviceEventsCommand(input);
 * const response = await client.send(command);
 * // { // ListDeviceEventsResponse
 * //   DeviceEvents: [ // DeviceEventList
 * //     { // DeviceEvent
 * //       Type: "CONNECTION_STATUS" || "DEVICE_STATUS",
 * //       Value: "STRING_VALUE",
 * //       Timestamp: new Date("TIMESTAMP"),
 * //     },
 * //   ],
 * //   NextToken: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param ListDeviceEventsCommandInput - {@link ListDeviceEventsCommandInput}
 * @returns {@link ListDeviceEventsCommandOutput}
 * @see {@link ListDeviceEventsCommandInput} for command's `input` shape.
 * @see {@link ListDeviceEventsCommandOutput} for command's `response` shape.
 * @see {@link AlexaForBusinessClientResolvedConfig | config} for AlexaForBusinessClient's `config` shape.
 *
 * @throws {@link NotFoundException} (client fault)
 *  <p>The resource is not found.</p>
 *
 * @throws {@link AlexaForBusinessServiceException}
 * <p>Base exception class for all service exceptions from AlexaForBusiness service.</p>
 *
 * @public
 */
export declare class ListDeviceEventsCommand extends ListDeviceEventsCommand_base {
}
