import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { IoTThingsGraphServiceException as __BaseException } from "./IoTThingsGraphServiceException";
export interface AssociateEntityToThingRequest {
  thingName: string | undefined;
  entityId: string | undefined;
  namespaceVersion?: number;
}
export interface AssociateEntityToThingResponse {}
export declare class InternalFailureException extends __BaseException {
  readonly name: "InternalFailureException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalFailureException, __BaseException>
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare const DefinitionLanguage: {
  readonly GRAPHQL: "GRAPHQL";
};
export type DefinitionLanguage =
  (typeof DefinitionLanguage)[keyof typeof DefinitionLanguage];
export interface DefinitionDocument {
  language: DefinitionLanguage | undefined;
  text: string | undefined;
}
export interface CreateFlowTemplateRequest {
  definition: DefinitionDocument | undefined;
  compatibleNamespaceVersion?: number;
}
export interface FlowTemplateSummary {
  id?: string;
  arn?: string;
  revisionNumber?: number;
  createdAt?: Date;
}
export interface CreateFlowTemplateResponse {
  summary?: FlowTemplateSummary;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export interface MetricsConfiguration {
  cloudMetricEnabled?: boolean;
  metricRuleRoleArn?: string;
}
export interface Tag {
  key: string | undefined;
  value: string | undefined;
}
export declare const DeploymentTarget: {
  readonly CLOUD: "CLOUD";
  readonly GREENGRASS: "GREENGRASS";
};
export type DeploymentTarget =
  (typeof DeploymentTarget)[keyof typeof DeploymentTarget];
export interface CreateSystemInstanceRequest {
  tags?: Tag[];
  definition: DefinitionDocument | undefined;
  target: DeploymentTarget | undefined;
  greengrassGroupName?: string;
  s3BucketName?: string;
  metricsConfiguration?: MetricsConfiguration;
  flowActionsRoleArn?: string;
}
export declare const SystemInstanceDeploymentStatus: {
  readonly BOOTSTRAP: "BOOTSTRAP";
  readonly DELETED_IN_TARGET: "DELETED_IN_TARGET";
  readonly DEPLOYED_IN_TARGET: "DEPLOYED_IN_TARGET";
  readonly DEPLOY_IN_PROGRESS: "DEPLOY_IN_PROGRESS";
  readonly FAILED: "FAILED";
  readonly NOT_DEPLOYED: "NOT_DEPLOYED";
  readonly PENDING_DELETE: "PENDING_DELETE";
  readonly UNDEPLOY_IN_PROGRESS: "UNDEPLOY_IN_PROGRESS";
};
export type SystemInstanceDeploymentStatus =
  (typeof SystemInstanceDeploymentStatus)[keyof typeof SystemInstanceDeploymentStatus];
export interface SystemInstanceSummary {
  id?: string;
  arn?: string;
  status?: SystemInstanceDeploymentStatus;
  target?: DeploymentTarget;
  greengrassGroupName?: string;
  createdAt?: Date;
  updatedAt?: Date;
  greengrassGroupId?: string;
  greengrassGroupVersionId?: string;
}
export interface CreateSystemInstanceResponse {
  summary?: SystemInstanceSummary;
}
export interface CreateSystemTemplateRequest {
  definition: DefinitionDocument | undefined;
  compatibleNamespaceVersion?: number;
}
export interface SystemTemplateSummary {
  id?: string;
  arn?: string;
  revisionNumber?: number;
  createdAt?: Date;
}
export interface CreateSystemTemplateResponse {
  summary?: SystemTemplateSummary;
}
export interface DeleteFlowTemplateRequest {
  id: string | undefined;
}
export interface DeleteFlowTemplateResponse {}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export interface DeleteNamespaceRequest {}
export interface DeleteNamespaceResponse {
  namespaceArn?: string;
  namespaceName?: string;
}
export interface DeleteSystemInstanceRequest {
  id?: string;
}
export interface DeleteSystemInstanceResponse {}
export interface DeleteSystemTemplateRequest {
  id: string | undefined;
}
export interface DeleteSystemTemplateResponse {}
export interface DependencyRevision {
  id?: string;
  revisionNumber?: number;
}
export interface DeploySystemInstanceRequest {
  id?: string;
}
export interface DeploySystemInstanceResponse {
  summary: SystemInstanceSummary | undefined;
  greengrassDeploymentId?: string;
}
export interface DeprecateFlowTemplateRequest {
  id: string | undefined;
}
export interface DeprecateFlowTemplateResponse {}
export interface DeprecateSystemTemplateRequest {
  id: string | undefined;
}
export interface DeprecateSystemTemplateResponse {}
export interface DescribeNamespaceRequest {
  namespaceName?: string;
}
export interface DescribeNamespaceResponse {
  namespaceArn?: string;
  namespaceName?: string;
  trackingNamespaceName?: string;
  trackingNamespaceVersion?: number;
  namespaceVersion?: number;
}
export declare const EntityType: {
  readonly ACTION: "ACTION";
  readonly CAPABILITY: "CAPABILITY";
  readonly DEVICE: "DEVICE";
  readonly DEVICE_MODEL: "DEVICE_MODEL";
  readonly ENUM: "ENUM";
  readonly EVENT: "EVENT";
  readonly MAPPING: "MAPPING";
  readonly PROPERTY: "PROPERTY";
  readonly SERVICE: "SERVICE";
  readonly STATE: "STATE";
};
export type EntityType = (typeof EntityType)[keyof typeof EntityType];
export interface DissociateEntityFromThingRequest {
  thingName: string | undefined;
  entityType: EntityType | undefined;
}
export interface DissociateEntityFromThingResponse {}
export interface EntityDescription {
  id?: string;
  arn?: string;
  type?: EntityType;
  createdAt?: Date;
  definition?: DefinitionDocument;
}
export declare const EntityFilterName: {
  readonly NAME: "NAME";
  readonly NAMESPACE: "NAMESPACE";
  readonly REFERENCED_ENTITY_ID: "REFERENCED_ENTITY_ID";
  readonly SEMANTIC_TYPE_PATH: "SEMANTIC_TYPE_PATH";
};
export type EntityFilterName =
  (typeof EntityFilterName)[keyof typeof EntityFilterName];
export interface EntityFilter {
  name?: EntityFilterName;
  value?: string[];
}
export declare const FlowExecutionEventType: {
  readonly ACKNOWLEDGE_TASK_MESSAGE: "ACKNOWLEDGE_TASK_MESSAGE";
  readonly ACTIVITY_FAILED: "ACTIVITY_FAILED";
  readonly ACTIVITY_SCHEDULED: "ACTIVITY_SCHEDULED";
  readonly ACTIVITY_STARTED: "ACTIVITY_STARTED";
  readonly ACTIVITY_SUCCEEDED: "ACTIVITY_SUCCEEDED";
  readonly EXECUTION_ABORTED: "EXECUTION_ABORTED";
  readonly EXECUTION_FAILED: "EXECUTION_FAILED";
  readonly EXECUTION_STARTED: "EXECUTION_STARTED";
  readonly EXECUTION_SUCCEEDED: "EXECUTION_SUCCEEDED";
  readonly SCHEDULE_NEXT_READY_STEPS_TASK: "SCHEDULE_NEXT_READY_STEPS_TASK";
  readonly START_FLOW_EXECUTION_TASK: "START_FLOW_EXECUTION_TASK";
  readonly STEP_FAILED: "STEP_FAILED";
  readonly STEP_STARTED: "STEP_STARTED";
  readonly STEP_SUCCEEDED: "STEP_SUCCEEDED";
  readonly THING_ACTION_TASK: "THING_ACTION_TASK";
  readonly THING_ACTION_TASK_FAILED: "THING_ACTION_TASK_FAILED";
  readonly THING_ACTION_TASK_SUCCEEDED: "THING_ACTION_TASK_SUCCEEDED";
};
export type FlowExecutionEventType =
  (typeof FlowExecutionEventType)[keyof typeof FlowExecutionEventType];
export interface FlowExecutionMessage {
  messageId?: string;
  eventType?: FlowExecutionEventType;
  timestamp?: Date;
  payload?: string;
}
export declare const FlowExecutionStatus: {
  readonly ABORTED: "ABORTED";
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type FlowExecutionStatus =
  (typeof FlowExecutionStatus)[keyof typeof FlowExecutionStatus];
export interface FlowExecutionSummary {
  flowExecutionId?: string;
  status?: FlowExecutionStatus;
  systemInstanceId?: string;
  flowTemplateId?: string;
  createdAt?: Date;
  updatedAt?: Date;
}
export interface FlowTemplateDescription {
  summary?: FlowTemplateSummary;
  definition?: DefinitionDocument;
  validatedNamespaceVersion?: number;
}
export declare const FlowTemplateFilterName: {
  readonly DEVICE_MODEL_ID: "DEVICE_MODEL_ID";
};
export type FlowTemplateFilterName =
  (typeof FlowTemplateFilterName)[keyof typeof FlowTemplateFilterName];
export interface FlowTemplateFilter {
  name: FlowTemplateFilterName | undefined;
  value: string[] | undefined;
}
export interface GetEntitiesRequest {
  ids: string[] | undefined;
  namespaceVersion?: number;
}
export interface GetEntitiesResponse {
  descriptions?: EntityDescription[];
}
export interface GetFlowTemplateRequest {
  id: string | undefined;
  revisionNumber?: number;
}
export interface GetFlowTemplateResponse {
  description?: FlowTemplateDescription;
}
export interface GetFlowTemplateRevisionsRequest {
  id: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface GetFlowTemplateRevisionsResponse {
  summaries?: FlowTemplateSummary[];
  nextToken?: string;
}
export interface GetNamespaceDeletionStatusRequest {}
export declare const NamespaceDeletionStatusErrorCodes: {
  readonly VALIDATION_FAILED: "VALIDATION_FAILED";
};
export type NamespaceDeletionStatusErrorCodes =
  (typeof NamespaceDeletionStatusErrorCodes)[keyof typeof NamespaceDeletionStatusErrorCodes];
export declare const NamespaceDeletionStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type NamespaceDeletionStatus =
  (typeof NamespaceDeletionStatus)[keyof typeof NamespaceDeletionStatus];
export interface GetNamespaceDeletionStatusResponse {
  namespaceArn?: string;
  namespaceName?: string;
  status?: NamespaceDeletionStatus;
  errorCode?: NamespaceDeletionStatusErrorCodes;
  errorMessage?: string;
}
export interface GetSystemInstanceRequest {
  id: string | undefined;
}
export interface SystemInstanceDescription {
  summary?: SystemInstanceSummary;
  definition?: DefinitionDocument;
  s3BucketName?: string;
  metricsConfiguration?: MetricsConfiguration;
  validatedNamespaceVersion?: number;
  validatedDependencyRevisions?: DependencyRevision[];
  flowActionsRoleArn?: string;
}
export interface GetSystemInstanceResponse {
  description?: SystemInstanceDescription;
}
export interface GetSystemTemplateRequest {
  id: string | undefined;
  revisionNumber?: number;
}
export interface SystemTemplateDescription {
  summary?: SystemTemplateSummary;
  definition?: DefinitionDocument;
  validatedNamespaceVersion?: number;
}
export interface GetSystemTemplateResponse {
  description?: SystemTemplateDescription;
}
export interface GetSystemTemplateRevisionsRequest {
  id: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface GetSystemTemplateRevisionsResponse {
  summaries?: SystemTemplateSummary[];
  nextToken?: string;
}
export interface GetUploadStatusRequest {
  uploadId: string | undefined;
}
export declare const UploadStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type UploadStatus = (typeof UploadStatus)[keyof typeof UploadStatus];
export interface GetUploadStatusResponse {
  uploadId: string | undefined;
  uploadStatus: UploadStatus | undefined;
  namespaceArn?: string;
  namespaceName?: string;
  namespaceVersion?: number;
  failureReason?: string[];
  createdDate: Date | undefined;
}
export interface ListFlowExecutionMessagesRequest {
  flowExecutionId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListFlowExecutionMessagesResponse {
  messages?: FlowExecutionMessage[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  maxResults?: number;
  resourceArn: string | undefined;
  nextToken?: string;
}
export interface ListTagsForResourceResponse {
  tags?: Tag[];
  nextToken?: string;
}
export interface SearchEntitiesRequest {
  entityTypes: EntityType[] | undefined;
  filters?: EntityFilter[];
  nextToken?: string;
  maxResults?: number;
  namespaceVersion?: number;
}
export interface SearchEntitiesResponse {
  descriptions?: EntityDescription[];
  nextToken?: string;
}
export interface SearchFlowExecutionsRequest {
  systemInstanceId: string | undefined;
  flowExecutionId?: string;
  startTime?: Date;
  endTime?: Date;
  nextToken?: string;
  maxResults?: number;
}
export interface SearchFlowExecutionsResponse {
  summaries?: FlowExecutionSummary[];
  nextToken?: string;
}
export interface SearchFlowTemplatesRequest {
  filters?: FlowTemplateFilter[];
  nextToken?: string;
  maxResults?: number;
}
export interface SearchFlowTemplatesResponse {
  summaries?: FlowTemplateSummary[];
  nextToken?: string;
}
export declare const SystemInstanceFilterName: {
  readonly GREENGRASS_GROUP_NAME: "GREENGRASS_GROUP_NAME";
  readonly STATUS: "STATUS";
  readonly SYSTEM_TEMPLATE_ID: "SYSTEM_TEMPLATE_ID";
};
export type SystemInstanceFilterName =
  (typeof SystemInstanceFilterName)[keyof typeof SystemInstanceFilterName];
export interface SystemInstanceFilter {
  name?: SystemInstanceFilterName;
  value?: string[];
}
export interface SearchSystemInstancesRequest {
  filters?: SystemInstanceFilter[];
  nextToken?: string;
  maxResults?: number;
}
export interface SearchSystemInstancesResponse {
  summaries?: SystemInstanceSummary[];
  nextToken?: string;
}
export declare const SystemTemplateFilterName: {
  readonly FLOW_TEMPLATE_ID: "FLOW_TEMPLATE_ID";
};
export type SystemTemplateFilterName =
  (typeof SystemTemplateFilterName)[keyof typeof SystemTemplateFilterName];
export interface SystemTemplateFilter {
  name: SystemTemplateFilterName | undefined;
  value: string[] | undefined;
}
export interface SearchSystemTemplatesRequest {
  filters?: SystemTemplateFilter[];
  nextToken?: string;
  maxResults?: number;
}
export interface SearchSystemTemplatesResponse {
  summaries?: SystemTemplateSummary[];
  nextToken?: string;
}
export interface SearchThingsRequest {
  entityId: string | undefined;
  nextToken?: string;
  maxResults?: number;
  namespaceVersion?: number;
}
export interface Thing {
  thingArn?: string;
  thingName?: string;
}
export interface SearchThingsResponse {
  things?: Thing[];
  nextToken?: string;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UndeploySystemInstanceRequest {
  id?: string;
}
export interface UndeploySystemInstanceResponse {
  summary?: SystemInstanceSummary;
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateFlowTemplateRequest {
  id: string | undefined;
  definition: DefinitionDocument | undefined;
  compatibleNamespaceVersion?: number;
}
export interface UpdateFlowTemplateResponse {
  summary?: FlowTemplateSummary;
}
export interface UpdateSystemTemplateRequest {
  id: string | undefined;
  definition: DefinitionDocument | undefined;
  compatibleNamespaceVersion?: number;
}
export interface UpdateSystemTemplateResponse {
  summary?: SystemTemplateSummary;
}
export interface UploadEntityDefinitionsRequest {
  document?: DefinitionDocument;
  syncWithPublicNamespace?: boolean;
  deprecateExistingEntities?: boolean;
}
export interface UploadEntityDefinitionsResponse {
  uploadId: string | undefined;
}
