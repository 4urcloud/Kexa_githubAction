import { IoTThingsGraphServiceException as __BaseException } from "./IoTThingsGraphServiceException";
export class InternalFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export const DefinitionLanguage = {
    GRAPHQL: "GRAPHQL",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
export const DeploymentTarget = {
    CLOUD: "CLOUD",
    GREENGRASS: "GREENGRASS",
};
export const SystemInstanceDeploymentStatus = {
    BOOTSTRAP: "BOOTSTRAP",
    DELETED_IN_TARGET: "DELETED_IN_TARGET",
    DEPLOYED_IN_TARGET: "DEPLOYED_IN_TARGET",
    DEPLOY_IN_PROGRESS: "DEPLOY_IN_PROGRESS",
    FAILED: "FAILED",
    NOT_DEPLOYED: "NOT_DEPLOYED",
    PENDING_DELETE: "PENDING_DELETE",
    UNDEPLOY_IN_PROGRESS: "UNDEPLOY_IN_PROGRESS",
};
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
export const EntityType = {
    ACTION: "ACTION",
    CAPABILITY: "CAPABILITY",
    DEVICE: "DEVICE",
    DEVICE_MODEL: "DEVICE_MODEL",
    ENUM: "ENUM",
    EVENT: "EVENT",
    MAPPING: "MAPPING",
    PROPERTY: "PROPERTY",
    SERVICE: "SERVICE",
    STATE: "STATE",
};
export const EntityFilterName = {
    NAME: "NAME",
    NAMESPACE: "NAMESPACE",
    REFERENCED_ENTITY_ID: "REFERENCED_ENTITY_ID",
    SEMANTIC_TYPE_PATH: "SEMANTIC_TYPE_PATH",
};
export const FlowExecutionEventType = {
    ACKNOWLEDGE_TASK_MESSAGE: "ACKNOWLEDGE_TASK_MESSAGE",
    ACTIVITY_FAILED: "ACTIVITY_FAILED",
    ACTIVITY_SCHEDULED: "ACTIVITY_SCHEDULED",
    ACTIVITY_STARTED: "ACTIVITY_STARTED",
    ACTIVITY_SUCCEEDED: "ACTIVITY_SUCCEEDED",
    EXECUTION_ABORTED: "EXECUTION_ABORTED",
    EXECUTION_FAILED: "EXECUTION_FAILED",
    EXECUTION_STARTED: "EXECUTION_STARTED",
    EXECUTION_SUCCEEDED: "EXECUTION_SUCCEEDED",
    SCHEDULE_NEXT_READY_STEPS_TASK: "SCHEDULE_NEXT_READY_STEPS_TASK",
    START_FLOW_EXECUTION_TASK: "START_FLOW_EXECUTION_TASK",
    STEP_FAILED: "STEP_FAILED",
    STEP_STARTED: "STEP_STARTED",
    STEP_SUCCEEDED: "STEP_SUCCEEDED",
    THING_ACTION_TASK: "THING_ACTION_TASK",
    THING_ACTION_TASK_FAILED: "THING_ACTION_TASK_FAILED",
    THING_ACTION_TASK_SUCCEEDED: "THING_ACTION_TASK_SUCCEEDED",
};
export const FlowExecutionStatus = {
    ABORTED: "ABORTED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    SUCCEEDED: "SUCCEEDED",
};
export const FlowTemplateFilterName = {
    DEVICE_MODEL_ID: "DEVICE_MODEL_ID",
};
export const NamespaceDeletionStatusErrorCodes = {
    VALIDATION_FAILED: "VALIDATION_FAILED",
};
export const NamespaceDeletionStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
export const UploadStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCEEDED: "SUCCEEDED",
};
export const SystemInstanceFilterName = {
    GREENGRASS_GROUP_NAME: "GREENGRASS_GROUP_NAME",
    STATUS: "STATUS",
    SYSTEM_TEMPLATE_ID: "SYSTEM_TEMPLATE_ID",
};
export const SystemTemplateFilterName = {
    FLOW_TEMPLATE_ID: "FLOW_TEMPLATE_ID",
};
