import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { HealthServiceException as __BaseException } from "./HealthServiceException";
export declare const EntityStatusCode: {
  readonly IMPAIRED: "IMPAIRED";
  readonly PENDING: "PENDING";
  readonly RESOLVED: "RESOLVED";
  readonly UNIMPAIRED: "UNIMPAIRED";
  readonly UNKNOWN: "UNKNOWN";
};
export type EntityStatusCode =
  (typeof EntityStatusCode)[keyof typeof EntityStatusCode];
export interface AccountEntityAggregate {
  accountId?: string;
  count?: number;
  statuses?: Partial<Record<EntityStatusCode, number>>;
}
export interface AffectedEntity {
  entityArn?: string;
  eventArn?: string;
  entityValue?: string;
  entityUrl?: string;
  awsAccountId?: string;
  lastUpdatedTime?: Date;
  statusCode?: EntityStatusCode;
  tags?: Record<string, string>;
}
export interface DescribeAffectedAccountsForOrganizationRequest {
  eventArn: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export declare const EventScopeCode: {
  readonly ACCOUNT_SPECIFIC: "ACCOUNT_SPECIFIC";
  readonly NONE: "NONE";
  readonly PUBLIC: "PUBLIC";
};
export type EventScopeCode =
  (typeof EventScopeCode)[keyof typeof EventScopeCode];
export interface DescribeAffectedAccountsForOrganizationResponse {
  affectedAccounts?: string[];
  eventScopeCode?: EventScopeCode;
  nextToken?: string;
}
export declare class InvalidPaginationToken extends __BaseException {
  readonly name: "InvalidPaginationToken";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidPaginationToken, __BaseException>
  );
}
export interface DateTimeRange {
  from?: Date;
  to?: Date;
}
export interface EntityFilter {
  eventArns: string[] | undefined;
  entityArns?: string[];
  entityValues?: string[];
  lastUpdatedTimes?: DateTimeRange[];
  tags?: Record<string, string>[];
  statusCodes?: EntityStatusCode[];
}
export interface DescribeAffectedEntitiesRequest {
  filter: EntityFilter | undefined;
  locale?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface DescribeAffectedEntitiesResponse {
  entities?: AffectedEntity[];
  nextToken?: string;
}
export declare class UnsupportedLocale extends __BaseException {
  readonly name: "UnsupportedLocale";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<UnsupportedLocale, __BaseException>);
}
export interface EntityAccountFilter {
  eventArn: string | undefined;
  awsAccountId?: string;
  statusCodes?: EntityStatusCode[];
}
export interface EventAccountFilter {
  eventArn: string | undefined;
  awsAccountId?: string;
}
export interface DescribeAffectedEntitiesForOrganizationRequest {
  organizationEntityFilters?: EventAccountFilter[];
  locale?: string;
  nextToken?: string;
  maxResults?: number;
  organizationEntityAccountFilters?: EntityAccountFilter[];
}
export interface OrganizationAffectedEntitiesErrorItem {
  awsAccountId?: string;
  eventArn?: string;
  errorName?: string;
  errorMessage?: string;
}
export interface DescribeAffectedEntitiesForOrganizationResponse {
  entities?: AffectedEntity[];
  failedSet?: OrganizationAffectedEntitiesErrorItem[];
  nextToken?: string;
}
export interface DescribeEntityAggregatesRequest {
  eventArns?: string[];
}
export interface EntityAggregate {
  eventArn?: string;
  count?: number;
  statuses?: Partial<Record<EntityStatusCode, number>>;
}
export interface DescribeEntityAggregatesResponse {
  entityAggregates?: EntityAggregate[];
}
export interface DescribeEntityAggregatesForOrganizationRequest {
  eventArns: string[] | undefined;
  awsAccountIds?: string[];
}
export interface OrganizationEntityAggregate {
  eventArn?: string;
  count?: number;
  statuses?: Partial<Record<EntityStatusCode, number>>;
  accounts?: AccountEntityAggregate[];
}
export interface DescribeEntityAggregatesForOrganizationResponse {
  organizationEntityAggregates?: OrganizationEntityAggregate[];
}
export declare const EventAggregateField: {
  readonly EventTypeCategory: "eventTypeCategory";
};
export type EventAggregateField =
  (typeof EventAggregateField)[keyof typeof EventAggregateField];
export declare const EventStatusCode: {
  readonly CLOSED: "closed";
  readonly OPEN: "open";
  readonly UPCOMING: "upcoming";
};
export type EventStatusCode =
  (typeof EventStatusCode)[keyof typeof EventStatusCode];
export declare const EventTypeCategory: {
  readonly ACCOUNT_NOTIFICATION: "accountNotification";
  readonly INVESTIGATION: "investigation";
  readonly ISSUE: "issue";
  readonly SCHEDULED_CHANGE: "scheduledChange";
};
export type EventTypeCategory =
  (typeof EventTypeCategory)[keyof typeof EventTypeCategory];
export interface EventFilter {
  eventArns?: string[];
  eventTypeCodes?: string[];
  services?: string[];
  regions?: string[];
  availabilityZones?: string[];
  startTimes?: DateTimeRange[];
  endTimes?: DateTimeRange[];
  lastUpdatedTimes?: DateTimeRange[];
  entityArns?: string[];
  entityValues?: string[];
  eventTypeCategories?: EventTypeCategory[];
  tags?: Record<string, string>[];
  eventStatusCodes?: EventStatusCode[];
}
export interface DescribeEventAggregatesRequest {
  filter?: EventFilter;
  aggregateField: EventAggregateField | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface EventAggregate {
  aggregateValue?: string;
  count?: number;
}
export interface DescribeEventAggregatesResponse {
  eventAggregates?: EventAggregate[];
  nextToken?: string;
}
export interface DescribeEventDetailsRequest {
  eventArns: string[] | undefined;
  locale?: string;
}
export interface EventDetailsErrorItem {
  eventArn?: string;
  errorName?: string;
  errorMessage?: string;
}
export interface Event {
  arn?: string;
  service?: string;
  eventTypeCode?: string;
  eventTypeCategory?: EventTypeCategory;
  region?: string;
  availabilityZone?: string;
  startTime?: Date;
  endTime?: Date;
  lastUpdatedTime?: Date;
  statusCode?: EventStatusCode;
  eventScopeCode?: EventScopeCode;
}
export interface EventDescription {
  latestDescription?: string;
}
export interface EventDetails {
  event?: Event;
  eventDescription?: EventDescription;
  eventMetadata?: Record<string, string>;
}
export interface DescribeEventDetailsResponse {
  successfulSet?: EventDetails[];
  failedSet?: EventDetailsErrorItem[];
}
export interface DescribeEventDetailsForOrganizationRequest {
  organizationEventDetailFilters: EventAccountFilter[] | undefined;
  locale?: string;
}
export interface OrganizationEventDetailsErrorItem {
  awsAccountId?: string;
  eventArn?: string;
  errorName?: string;
  errorMessage?: string;
}
export interface OrganizationEventDetails {
  awsAccountId?: string;
  event?: Event;
  eventDescription?: EventDescription;
  eventMetadata?: Record<string, string>;
}
export interface DescribeEventDetailsForOrganizationResponse {
  successfulSet?: OrganizationEventDetails[];
  failedSet?: OrganizationEventDetailsErrorItem[];
}
export interface DescribeEventsRequest {
  filter?: EventFilter;
  nextToken?: string;
  maxResults?: number;
  locale?: string;
}
export interface DescribeEventsResponse {
  events?: Event[];
  nextToken?: string;
}
export interface OrganizationEventFilter {
  eventTypeCodes?: string[];
  awsAccountIds?: string[];
  services?: string[];
  regions?: string[];
  startTime?: DateTimeRange;
  endTime?: DateTimeRange;
  lastUpdatedTime?: DateTimeRange;
  entityArns?: string[];
  entityValues?: string[];
  eventTypeCategories?: EventTypeCategory[];
  eventStatusCodes?: EventStatusCode[];
}
export interface DescribeEventsForOrganizationRequest {
  filter?: OrganizationEventFilter;
  nextToken?: string;
  maxResults?: number;
  locale?: string;
}
export interface OrganizationEvent {
  arn?: string;
  service?: string;
  eventTypeCode?: string;
  eventTypeCategory?: EventTypeCategory;
  eventScopeCode?: EventScopeCode;
  region?: string;
  startTime?: Date;
  endTime?: Date;
  lastUpdatedTime?: Date;
  statusCode?: EventStatusCode;
}
export interface DescribeEventsForOrganizationResponse {
  events?: OrganizationEvent[];
  nextToken?: string;
}
export interface EventTypeFilter {
  eventTypeCodes?: string[];
  services?: string[];
  eventTypeCategories?: EventTypeCategory[];
}
export interface DescribeEventTypesRequest {
  filter?: EventTypeFilter;
  locale?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface EventType {
  service?: string;
  code?: string;
  category?: EventTypeCategory;
}
export interface DescribeEventTypesResponse {
  eventTypes?: EventType[];
  nextToken?: string;
}
export interface DescribeHealthServiceStatusForOrganizationResponse {
  healthServiceAccessStatusForOrganization?: string;
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
