import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { VoiceIDServiceException as __BaseException } from "../models/VoiceIDServiceException";
export const se_AssociateFraudsterCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateFraudster");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDomain");
    let body;
    body = JSON.stringify(se_CreateDomainRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWatchlistCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWatchlist");
    let body;
    body = JSON.stringify(se_CreateWatchlistRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFraudsterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFraudster");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSpeakerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSpeaker");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWatchlistCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWatchlist");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFraudsterCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFraudster");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFraudsterRegistrationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFraudsterRegistrationJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpeakerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSpeaker");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpeakerEnrollmentJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSpeakerEnrollmentJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWatchlistCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWatchlist");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateFraudsterCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateFraudster");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EvaluateSessionCommand = async (input, context) => {
    const headers = sharedHeaders("EvaluateSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDomainsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDomains");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFraudsterRegistrationJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFraudsterRegistrationJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFraudstersCommand = async (input, context) => {
    const headers = sharedHeaders("ListFraudsters");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSpeakerEnrollmentJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSpeakerEnrollmentJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSpeakersCommand = async (input, context) => {
    const headers = sharedHeaders("ListSpeakers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWatchlistsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWatchlists");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_OptOutSpeakerCommand = async (input, context) => {
    const headers = sharedHeaders("OptOutSpeaker");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartFraudsterRegistrationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartFraudsterRegistrationJob");
    let body;
    body = JSON.stringify(se_StartFraudsterRegistrationJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartSpeakerEnrollmentJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartSpeakerEnrollmentJob");
    let body;
    body = JSON.stringify(se_StartSpeakerEnrollmentJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateWatchlistCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWatchlist");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateFraudsterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateFraudsterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDomainResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWatchlistCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateWatchlistResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteFraudsterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteSpeakerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteWatchlistCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDomainResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFraudsterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFraudsterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFraudsterRegistrationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFraudsterRegistrationJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSpeakerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpeakerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSpeakerEnrollmentJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpeakerEnrollmentJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWatchlistCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWatchlistResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateFraudsterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisassociateFraudsterResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_EvaluateSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EvaluateSessionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDomainsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFraudsterRegistrationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFraudsterRegistrationJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFraudstersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFraudstersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSpeakerEnrollmentJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSpeakerEnrollmentJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSpeakersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSpeakersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListWatchlistsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListWatchlistsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_OptOutSpeakerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_OptOutSpeakerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartFraudsterRegistrationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartFraudsterRegistrationJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartSpeakerEnrollmentJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartSpeakerEnrollmentJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDomainResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateWatchlistCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateWatchlistResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.voiceid#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.voiceid#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.voiceid#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.voiceid#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.voiceid#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.voiceid#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.voiceid#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateDomainRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Name: [],
        ServerSideEncryptionConfiguration: _json,
        Tags: _json,
    });
};
const se_CreateWatchlistRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        DomainId: [],
        Name: [],
    });
};
const se_StartFraudsterRegistrationJobRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        DomainId: [],
        InputDataConfig: _json,
        JobName: [],
        OutputDataConfig: _json,
        RegistrationConfig: _json,
    });
};
const se_StartSpeakerEnrollmentJobRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataAccessRoleArn: [],
        DomainId: [],
        EnrollmentConfig: _json,
        InputDataConfig: _json,
        JobName: [],
        OutputDataConfig: _json,
    });
};
const de_AssociateFraudsterResponse = (output, context) => {
    return take(output, {
        Fraudster: (_) => de_Fraudster(_, context),
    });
};
const de_AuthenticationResult = (output, context) => {
    return take(output, {
        AudioAggregationEndedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        AudioAggregationStartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        AuthenticationResultId: __expectString,
        Configuration: _json,
        CustomerSpeakerId: __expectString,
        Decision: __expectString,
        GeneratedSpeakerId: __expectString,
        Score: __expectInt32,
    });
};
const de_CreateDomainResponse = (output, context) => {
    return take(output, {
        Domain: (_) => de_Domain(_, context),
    });
};
const de_CreateWatchlistResponse = (output, context) => {
    return take(output, {
        Watchlist: (_) => de_Watchlist(_, context),
    });
};
const de_DescribeDomainResponse = (output, context) => {
    return take(output, {
        Domain: (_) => de_Domain(_, context),
    });
};
const de_DescribeFraudsterRegistrationJobResponse = (output, context) => {
    return take(output, {
        Job: (_) => de_FraudsterRegistrationJob(_, context),
    });
};
const de_DescribeFraudsterResponse = (output, context) => {
    return take(output, {
        Fraudster: (_) => de_Fraudster(_, context),
    });
};
const de_DescribeSpeakerEnrollmentJobResponse = (output, context) => {
    return take(output, {
        Job: (_) => de_SpeakerEnrollmentJob(_, context),
    });
};
const de_DescribeSpeakerResponse = (output, context) => {
    return take(output, {
        Speaker: (_) => de_Speaker(_, context),
    });
};
const de_DescribeWatchlistResponse = (output, context) => {
    return take(output, {
        Watchlist: (_) => de_Watchlist(_, context),
    });
};
const de_DisassociateFraudsterResponse = (output, context) => {
    return take(output, {
        Fraudster: (_) => de_Fraudster(_, context),
    });
};
const de_Domain = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DomainId: __expectString,
        DomainStatus: __expectString,
        Name: __expectString,
        ServerSideEncryptionConfiguration: _json,
        ServerSideEncryptionUpdateDetails: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WatchlistDetails: _json,
    });
};
const de_DomainSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DomainSummary(entry, context);
    });
    return retVal;
};
const de_DomainSummary = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DomainId: __expectString,
        DomainStatus: __expectString,
        Name: __expectString,
        ServerSideEncryptionConfiguration: _json,
        ServerSideEncryptionUpdateDetails: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WatchlistDetails: _json,
    });
};
const de_EvaluateSessionResponse = (output, context) => {
    return take(output, {
        AuthenticationResult: (_) => de_AuthenticationResult(_, context),
        DomainId: __expectString,
        FraudDetectionResult: (_) => de_FraudDetectionResult(_, context),
        SessionId: __expectString,
        SessionName: __expectString,
        StreamingStatus: __expectString,
    });
};
const de_FraudDetectionResult = (output, context) => {
    return take(output, {
        AudioAggregationEndedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        AudioAggregationStartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Configuration: _json,
        Decision: __expectString,
        FraudDetectionResultId: __expectString,
        Reasons: _json,
        RiskDetails: _json,
    });
};
const de_Fraudster = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        GeneratedFraudsterId: __expectString,
        WatchlistIds: _json,
    });
};
const de_FraudsterRegistrationJob = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataAccessRoleArn: __expectString,
        DomainId: __expectString,
        EndedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureDetails: _json,
        InputDataConfig: _json,
        JobId: __expectString,
        JobName: __expectString,
        JobProgress: _json,
        JobStatus: __expectString,
        OutputDataConfig: _json,
        RegistrationConfig: _json,
    });
};
const de_FraudsterRegistrationJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FraudsterRegistrationJobSummary(entry, context);
    });
    return retVal;
};
const de_FraudsterRegistrationJobSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        EndedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureDetails: _json,
        JobId: __expectString,
        JobName: __expectString,
        JobProgress: _json,
        JobStatus: __expectString,
    });
};
const de_FraudsterSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FraudsterSummary(entry, context);
    });
    return retVal;
};
const de_FraudsterSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        GeneratedFraudsterId: __expectString,
        WatchlistIds: _json,
    });
};
const de_ListDomainsResponse = (output, context) => {
    return take(output, {
        DomainSummaries: (_) => de_DomainSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListFraudsterRegistrationJobsResponse = (output, context) => {
    return take(output, {
        JobSummaries: (_) => de_FraudsterRegistrationJobSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListFraudstersResponse = (output, context) => {
    return take(output, {
        FraudsterSummaries: (_) => de_FraudsterSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListSpeakerEnrollmentJobsResponse = (output, context) => {
    return take(output, {
        JobSummaries: (_) => de_SpeakerEnrollmentJobSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListSpeakersResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        SpeakerSummaries: (_) => de_SpeakerSummaries(_, context),
    });
};
const de_ListWatchlistsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        WatchlistSummaries: (_) => de_WatchlistSummaries(_, context),
    });
};
const de_OptOutSpeakerResponse = (output, context) => {
    return take(output, {
        Speaker: (_) => de_Speaker(_, context),
    });
};
const de_Speaker = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CustomerSpeakerId: __expectString,
        DomainId: __expectString,
        GeneratedSpeakerId: __expectString,
        LastAccessedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_SpeakerEnrollmentJob = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataAccessRoleArn: __expectString,
        DomainId: __expectString,
        EndedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnrollmentConfig: _json,
        FailureDetails: _json,
        InputDataConfig: _json,
        JobId: __expectString,
        JobName: __expectString,
        JobProgress: _json,
        JobStatus: __expectString,
        OutputDataConfig: _json,
    });
};
const de_SpeakerEnrollmentJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpeakerEnrollmentJobSummary(entry, context);
    });
    return retVal;
};
const de_SpeakerEnrollmentJobSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainId: __expectString,
        EndedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureDetails: _json,
        JobId: __expectString,
        JobName: __expectString,
        JobProgress: _json,
        JobStatus: __expectString,
    });
};
const de_SpeakerSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpeakerSummary(entry, context);
    });
    return retVal;
};
const de_SpeakerSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CustomerSpeakerId: __expectString,
        DomainId: __expectString,
        GeneratedSpeakerId: __expectString,
        LastAccessedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_StartFraudsterRegistrationJobResponse = (output, context) => {
    return take(output, {
        Job: (_) => de_FraudsterRegistrationJob(_, context),
    });
};
const de_StartSpeakerEnrollmentJobResponse = (output, context) => {
    return take(output, {
        Job: (_) => de_SpeakerEnrollmentJob(_, context),
    });
};
const de_UpdateDomainResponse = (output, context) => {
    return take(output, {
        Domain: (_) => de_Domain(_, context),
    });
};
const de_UpdateWatchlistResponse = (output, context) => {
    return take(output, {
        Watchlist: (_) => de_Watchlist(_, context),
    });
};
const de_Watchlist = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultWatchlist: __expectBoolean,
        Description: __expectString,
        DomainId: __expectString,
        Name: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WatchlistId: __expectString,
    });
};
const de_WatchlistSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WatchlistSummary(entry, context);
    });
    return retVal;
};
const de_WatchlistSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultWatchlist: __expectBoolean,
        Description: __expectString,
        DomainId: __expectString,
        Name: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WatchlistId: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `VoiceID.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
