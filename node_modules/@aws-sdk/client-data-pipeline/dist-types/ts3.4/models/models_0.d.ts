import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DataPipelineServiceException as __BaseException } from "./DataPipelineServiceException";
export interface ParameterValue {
  id: string | undefined;
  stringValue: string | undefined;
}
export interface ActivatePipelineInput {
  pipelineId: string | undefined;
  parameterValues?: ParameterValue[];
  startTimestamp?: Date;
}
export interface ActivatePipelineOutput {}
export declare class InternalServiceError extends __BaseException {
  readonly name: "InternalServiceError";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServiceError, __BaseException>
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export declare class PipelineDeletedException extends __BaseException {
  readonly name: "PipelineDeletedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PipelineDeletedException, __BaseException>
  );
}
export declare class PipelineNotFoundException extends __BaseException {
  readonly name: "PipelineNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PipelineNotFoundException, __BaseException>
  );
}
export interface Tag {
  key: string | undefined;
  value: string | undefined;
}
export interface AddTagsInput {
  pipelineId: string | undefined;
  tags: Tag[] | undefined;
}
export interface AddTagsOutput {}
export interface CreatePipelineInput {
  name: string | undefined;
  uniqueId: string | undefined;
  description?: string;
  tags?: Tag[];
}
export interface CreatePipelineOutput {
  pipelineId: string | undefined;
}
export interface DeactivatePipelineInput {
  pipelineId: string | undefined;
  cancelActive?: boolean;
}
export interface DeactivatePipelineOutput {}
export interface DeletePipelineInput {
  pipelineId: string | undefined;
}
export interface DescribeObjectsInput {
  pipelineId: string | undefined;
  objectIds: string[] | undefined;
  evaluateExpressions?: boolean;
  marker?: string;
}
export interface Field {
  key: string | undefined;
  stringValue?: string;
  refValue?: string;
}
export interface PipelineObject {
  id: string | undefined;
  name: string | undefined;
  fields: Field[] | undefined;
}
export interface DescribeObjectsOutput {
  pipelineObjects: PipelineObject[] | undefined;
  marker?: string;
  hasMoreResults?: boolean;
}
export interface DescribePipelinesInput {
  pipelineIds: string[] | undefined;
}
export interface PipelineDescription {
  pipelineId: string | undefined;
  name: string | undefined;
  fields: Field[] | undefined;
  description?: string;
  tags?: Tag[];
}
export interface DescribePipelinesOutput {
  pipelineDescriptionList: PipelineDescription[] | undefined;
}
export interface EvaluateExpressionInput {
  pipelineId: string | undefined;
  objectId: string | undefined;
  expression: string | undefined;
}
export interface EvaluateExpressionOutput {
  evaluatedExpression: string | undefined;
}
export declare class TaskNotFoundException extends __BaseException {
  readonly name: "TaskNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TaskNotFoundException, __BaseException>
  );
}
export interface GetPipelineDefinitionInput {
  pipelineId: string | undefined;
  version?: string;
}
export interface ParameterAttribute {
  key: string | undefined;
  stringValue: string | undefined;
}
export interface ParameterObject {
  id: string | undefined;
  attributes: ParameterAttribute[] | undefined;
}
export interface GetPipelineDefinitionOutput {
  pipelineObjects?: PipelineObject[];
  parameterObjects?: ParameterObject[];
  parameterValues?: ParameterValue[];
}
export interface ListPipelinesInput {
  marker?: string;
}
export interface PipelineIdName {
  id?: string;
  name?: string;
}
export interface ListPipelinesOutput {
  pipelineIdList: PipelineIdName[] | undefined;
  marker?: string;
  hasMoreResults?: boolean;
}
export interface InstanceIdentity {
  document?: string;
  signature?: string;
}
export interface PollForTaskInput {
  workerGroup: string | undefined;
  hostname?: string;
  instanceIdentity?: InstanceIdentity;
}
export interface TaskObject {
  taskId?: string;
  pipelineId?: string;
  attemptId?: string;
  objects?: Record<string, PipelineObject>;
}
export interface PollForTaskOutput {
  taskObject?: TaskObject;
}
export interface PutPipelineDefinitionInput {
  pipelineId: string | undefined;
  pipelineObjects: PipelineObject[] | undefined;
  parameterObjects?: ParameterObject[];
  parameterValues?: ParameterValue[];
}
export interface ValidationError {
  id?: string;
  errors?: string[];
}
export interface ValidationWarning {
  id?: string;
  warnings?: string[];
}
export interface PutPipelineDefinitionOutput {
  validationErrors?: ValidationError[];
  validationWarnings?: ValidationWarning[];
  errored: boolean | undefined;
}
export declare const OperatorType: {
  readonly Between: "BETWEEN";
  readonly Equal: "EQ";
  readonly GreaterThanOrEqual: "GE";
  readonly LessThanOrEqual: "LE";
  readonly ReferenceEqual: "REF_EQ";
};
export type OperatorType = (typeof OperatorType)[keyof typeof OperatorType];
export interface Operator {
  type?: OperatorType;
  values?: string[];
}
export interface Selector {
  fieldName?: string;
  operator?: Operator;
}
export interface Query {
  selectors?: Selector[];
}
export interface QueryObjectsInput {
  pipelineId: string | undefined;
  query?: Query;
  sphere: string | undefined;
  marker?: string;
  limit?: number;
}
export interface QueryObjectsOutput {
  ids?: string[];
  marker?: string;
  hasMoreResults?: boolean;
}
export interface RemoveTagsInput {
  pipelineId: string | undefined;
  tagKeys: string[] | undefined;
}
export interface RemoveTagsOutput {}
export interface ReportTaskProgressInput {
  taskId: string | undefined;
  fields?: Field[];
}
export interface ReportTaskProgressOutput {
  canceled: boolean | undefined;
}
export interface ReportTaskRunnerHeartbeatInput {
  taskrunnerId: string | undefined;
  workerGroup?: string;
  hostname?: string;
}
export interface ReportTaskRunnerHeartbeatOutput {
  terminate: boolean | undefined;
}
export interface SetStatusInput {
  pipelineId: string | undefined;
  objectIds: string[] | undefined;
  status: string | undefined;
}
export declare const TaskStatus: {
  readonly FAILED: "FAILED";
  readonly FALSE: "FALSE";
  readonly FINISHED: "FINISHED";
};
export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus];
export interface SetTaskStatusInput {
  taskId: string | undefined;
  taskStatus: TaskStatus | undefined;
  errorId?: string;
  errorMessage?: string;
  errorStackTrace?: string;
}
export interface SetTaskStatusOutput {}
export interface ValidatePipelineDefinitionInput {
  pipelineId: string | undefined;
  pipelineObjects: PipelineObject[] | undefined;
  parameterObjects?: ParameterObject[];
  parameterValues?: ParameterValue[];
}
export interface ValidatePipelineDefinitionOutput {
  validationErrors?: ValidationError[];
  validationWarnings?: ValidationWarning[];
  errored: boolean | undefined;
}
