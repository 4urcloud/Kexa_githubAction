import { DataPipelineServiceException as __BaseException } from "./DataPipelineServiceException";
export class InternalServiceError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceError.prototype);
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export class PipelineDeletedException extends __BaseException {
    constructor(opts) {
        super({
            name: "PipelineDeletedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PipelineDeletedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PipelineDeletedException.prototype);
    }
}
export class PipelineNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "PipelineNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "PipelineNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PipelineNotFoundException.prototype);
    }
}
export class TaskNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "TaskNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "TaskNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TaskNotFoundException.prototype);
    }
}
export const OperatorType = {
    Between: "BETWEEN",
    Equal: "EQ",
    GreaterThanOrEqual: "GE",
    LessThanOrEqual: "LE",
    ReferenceEqual: "REF_EQ",
};
export const TaskStatus = {
    FAILED: "FAILED",
    FALSE: "FALSE",
    FINISHED: "FINISHED",
};
