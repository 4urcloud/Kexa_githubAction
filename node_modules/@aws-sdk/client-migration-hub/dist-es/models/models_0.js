import { MigrationHubServiceException as __BaseException } from "./MigrationHubServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const ApplicationStatus = {
    COMPLETED: "COMPLETED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
};
export class DryRunOperation extends __BaseException {
    constructor(opts) {
        super({
            name: "DryRunOperation",
            $fault: "client",
            ...opts,
        });
        this.name = "DryRunOperation";
        this.$fault = "client";
        Object.setPrototypeOf(this, DryRunOperation.prototype);
        this.Message = opts.Message;
    }
}
export class HomeRegionNotSetException extends __BaseException {
    constructor(opts) {
        super({
            name: "HomeRegionNotSetException",
            $fault: "client",
            ...opts,
        });
        this.name = "HomeRegionNotSetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, HomeRegionNotSetException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidInputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export class UnauthorizedOperation extends __BaseException {
    constructor(opts) {
        super({
            name: "UnauthorizedOperation",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedOperation";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedOperation.prototype);
        this.Message = opts.Message;
    }
}
export class PolicyErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "PolicyErrorException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyErrorException.prototype);
        this.Message = opts.Message;
    }
}
export const ResourceAttributeType = {
    BIOS_ID: "BIOS_ID",
    FQDN: "FQDN",
    IPV4_ADDRESS: "IPV4_ADDRESS",
    IPV6_ADDRESS: "IPV6_ADDRESS",
    MAC_ADDRESS: "MAC_ADDRESS",
    MOTHERBOARD_SERIAL_NUMBER: "MOTHERBOARD_SERIAL_NUMBER",
    VM_MANAGED_OBJECT_REFERENCE: "VM_MANAGED_OBJECT_REFERENCE",
    VM_MANAGER_ID: "VM_MANAGER_ID",
    VM_NAME: "VM_NAME",
    VM_PATH: "VM_PATH",
};
export const Status = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
};
