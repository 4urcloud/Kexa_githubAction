import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { DevOpsGuruServiceException as __BaseException } from "../models/DevOpsGuruServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_AddNotificationChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/channels");
    let body;
    body = JSON.stringify(take(input, {
        Config: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_DeleteInsightCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/insights/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeAccountHealthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/health");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeAccountOverviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/accounts/overview");
    let body;
    body = JSON.stringify(take(input, {
        FromTime: (_) => Math.round(_.getTime() / 1000),
        ToTime: (_) => Math.round(_.getTime() / 1000),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAnomalyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/anomalies/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    const query = map({
        [_AI]: [, input[_AI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeEventSourcesConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/event-sources");
    let body;
    body = "";
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/feedback");
    let body;
    body = JSON.stringify(take(input, {
        InsightId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeInsightCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/insights/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    const query = map({
        [_AI]: [, input[_AI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeOrganizationHealthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/health");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
        OrganizationalUnitIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeOrganizationOverviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/overview");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
        FromTime: (_) => Math.round(_.getTime() / 1000),
        OrganizationalUnitIds: (_) => _json(_),
        ToTime: (_) => Math.round(_.getTime() / 1000),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeOrganizationResourceCollectionHealthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/health/resource-collection");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
        OrganizationResourceCollectionType: [],
        OrganizationalUnitIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeResourceCollectionHealthCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/accounts/health/resource-collection/{ResourceCollectionType}");
    b.p("ResourceCollectionType", () => input.ResourceCollectionType, "{ResourceCollectionType}", false);
    const query = map({
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeServiceIntegrationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/service-integrations");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCostEstimationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/cost-estimation");
    const query = map({
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetResourceCollectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resource-collections/{ResourceCollectionType}");
    b.p("ResourceCollectionType", () => input.ResourceCollectionType, "{ResourceCollectionType}", false);
    const query = map({
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAnomaliesForInsightCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/anomalies/insight/{InsightId}");
    b.p("InsightId", () => input.InsightId, "{InsightId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AccountId: [],
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
        StartTimeRange: (_) => se_StartTimeRange(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAnomalousLogGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-log-anomalies");
    let body;
    body = JSON.stringify(take(input, {
        InsightId: [],
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListEventsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/events");
    let body;
    body = JSON.stringify(take(input, {
        AccountId: [],
        Filters: (_) => se_ListEventsFilters(_, context),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListInsightsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/insights");
    let body;
    body = JSON.stringify(take(input, {
        MaxResults: [],
        NextToken: [],
        StatusFilter: (_) => se_ListInsightsStatusFilter(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListMonitoredResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/monitoredResources");
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListNotificationChannelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/channels");
    let body;
    body = JSON.stringify(take(input, {
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListOrganizationInsightsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/insights");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
        OrganizationalUnitIds: (_) => _json(_),
        StatusFilter: (_) => se_ListInsightsStatusFilter(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListRecommendationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/recommendations");
    let body;
    body = JSON.stringify(take(input, {
        AccountId: [],
        InsightId: [],
        Locale: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/feedback");
    let body;
    body = JSON.stringify(take(input, {
        InsightFeedback: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_RemoveNotificationChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/channels/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_SearchInsightsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/insights/search");
    let body;
    body = JSON.stringify(take(input, {
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
        StartTimeRange: (_) => se_StartTimeRange(_, context),
        Type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SearchOrganizationInsightsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organization/insights/search");
    let body;
    body = JSON.stringify(take(input, {
        AccountIds: (_) => _json(_),
        Filters: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
        StartTimeRange: (_) => se_StartTimeRange(_, context),
        Type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartCostEstimationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/cost-estimation");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ResourceCollection: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateEventSourcesConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/event-sources");
    let body;
    body = JSON.stringify(take(input, {
        EventSources: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateResourceCollectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/resource-collections");
    let body;
    body = JSON.stringify(take(input, {
        Action: [],
        ResourceCollection: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateServiceIntegrationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/service-integrations");
    let body;
    body = JSON.stringify(take(input, {
        ServiceIntegration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AddNotificationChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Id: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteInsightCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeAccountHealthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnalyzedResourceCount: __expectLong,
        MetricsAnalyzed: __expectInt32,
        OpenProactiveInsights: __expectInt32,
        OpenReactiveInsights: __expectInt32,
        ResourceHours: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAccountOverviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MeanTimeToRecoverInMilliseconds: __expectLong,
        ProactiveInsights: __expectInt32,
        ReactiveInsights: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAnomalyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProactiveAnomaly: (_) => de_ProactiveAnomaly(_, context),
        ReactiveAnomaly: (_) => de_ReactiveAnomaly(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeEventSourcesConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        EventSources: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InsightFeedback: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeInsightCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProactiveInsight: (_) => de_ProactiveInsight(_, context),
        ReactiveInsight: (_) => de_ReactiveInsight(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeOrganizationHealthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MetricsAnalyzed: __expectInt32,
        OpenProactiveInsights: __expectInt32,
        OpenReactiveInsights: __expectInt32,
        ResourceHours: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeOrganizationOverviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProactiveInsights: __expectInt32,
        ReactiveInsights: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeOrganizationResourceCollectionHealthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Account: _json,
        CloudFormation: _json,
        NextToken: __expectString,
        Service: _json,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeResourceCollectionHealthCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CloudFormation: _json,
        NextToken: __expectString,
        Service: _json,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeServiceIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ServiceIntegration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCostEstimationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Costs: (_) => de_ServiceResourceCosts(_, context),
        NextToken: __expectString,
        ResourceCollection: _json,
        Status: __expectString,
        TimeRange: (_) => de_CostEstimationTimeRange(_, context),
        TotalCost: __limitedParseDouble,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourceCollectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ResourceCollection: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnomaliesForInsightCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProactiveAnomalies: (_) => de_ProactiveAnomalies(_, context),
        ReactiveAnomalies: (_) => de_ReactiveAnomalies(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnomalousLogGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalousLogGroups: (_) => de_AnomalousLogGroups(_, context),
        InsightId: __expectString,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEventsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Events: (_) => de_Events(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInsightsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProactiveInsights: (_) => de_ProactiveInsights(_, context),
        ReactiveInsights: (_) => de_ReactiveInsights(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMonitoredResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MonitoredResourceIdentifiers: (_) => de_MonitoredResourceIdentifiers(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListNotificationChannelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Channels: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListOrganizationInsightsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProactiveInsights: (_) => de_ProactiveOrganizationInsights(_, context),
        ReactiveInsights: (_) => de_ReactiveOrganizationInsights(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Recommendations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RemoveNotificationChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SearchInsightsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProactiveInsights: (_) => de_ProactiveInsights(_, context),
        ReactiveInsights: (_) => de_ReactiveInsights(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchOrganizationInsightsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ProactiveInsights: (_) => de_ProactiveInsights(_, context),
        ReactiveInsights: (_) => de_ReactiveInsights(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartCostEstimationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateEventSourcesConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateResourceCollectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateServiceIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.devopsguru#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.devopsguru#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.devopsguru#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.devopsguru#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.devopsguru#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.devopsguru#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.devopsguru#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        QuotaCode: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Fields: _json,
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_EndTimeRange = (input, context) => {
    return take(input, {
        FromTime: (_) => Math.round(_.getTime() / 1000),
        ToTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_EventTimeRange = (input, context) => {
    return take(input, {
        FromTime: (_) => Math.round(_.getTime() / 1000),
        ToTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ListEventsFilters = (input, context) => {
    return take(input, {
        DataSource: [],
        EventClass: [],
        EventSource: [],
        EventTimeRange: (_) => se_EventTimeRange(_, context),
        InsightId: [],
        ResourceCollection: _json,
    });
};
const se_ListInsightsAnyStatusFilter = (input, context) => {
    return take(input, {
        StartTimeRange: (_) => se_StartTimeRange(_, context),
        Type: [],
    });
};
const se_ListInsightsClosedStatusFilter = (input, context) => {
    return take(input, {
        EndTimeRange: (_) => se_EndTimeRange(_, context),
        Type: [],
    });
};
const se_ListInsightsStatusFilter = (input, context) => {
    return take(input, {
        Any: (_) => se_ListInsightsAnyStatusFilter(_, context),
        Closed: (_) => se_ListInsightsClosedStatusFilter(_, context),
        Ongoing: _json,
    });
};
const se_StartTimeRange = (input, context) => {
    return take(input, {
        FromTime: (_) => Math.round(_.getTime() / 1000),
        ToTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const de_AnomalousLogGroup = (output, context) => {
    return take(output, {
        ImpactEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImpactStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogAnomalyShowcases: (_) => de_LogAnomalyShowcases(_, context),
        LogGroupName: __expectString,
        NumberOfLogLinesScanned: __expectInt32,
    });
};
const de_AnomalousLogGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnomalousLogGroup(entry, context);
    });
    return retVal;
};
const de_AnomalyReportedTimeRange = (output, context) => {
    return take(output, {
        CloseTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OpenTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AnomalySourceDetails = (output, context) => {
    return take(output, {
        CloudWatchMetrics: (_) => de_CloudWatchMetricsDetails(_, context),
        PerformanceInsightsMetrics: (_) => de_PerformanceInsightsMetricsDetails(_, context),
    });
};
const de_AnomalyTimeRange = (output, context) => {
    return take(output, {
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_CloudWatchMetricsDataSummary = (output, context) => {
    return take(output, {
        StatusCode: __expectString,
        TimestampMetricValuePairList: (_) => de_TimestampMetricValuePairList(_, context),
    });
};
const de_CloudWatchMetricsDetail = (output, context) => {
    return take(output, {
        Dimensions: _json,
        MetricDataSummary: (_) => de_CloudWatchMetricsDataSummary(_, context),
        MetricName: __expectString,
        Namespace: __expectString,
        Period: __expectInt32,
        Stat: __expectString,
        Unit: __expectString,
    });
};
const de_CloudWatchMetricsDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CloudWatchMetricsDetail(entry, context);
    });
    return retVal;
};
const de_CostEstimationTimeRange = (output, context) => {
    return take(output, {
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Event = (output, context) => {
    return take(output, {
        DataSource: __expectString,
        EventClass: __expectString,
        EventSource: __expectString,
        Id: __expectString,
        Name: __expectString,
        ResourceCollection: _json,
        Resources: _json,
        Time: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Events = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Event(entry, context);
    });
    return retVal;
};
const de_InsightTimeRange = (output, context) => {
    return take(output, {
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_LogAnomalyClass = (output, context) => {
    return take(output, {
        Explanation: __expectString,
        LogAnomalyToken: __expectString,
        LogAnomalyType: __expectString,
        LogEventId: __expectString,
        LogEventTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogStreamName: __expectString,
        NumberOfLogLinesOccurrences: __expectInt32,
    });
};
const de_LogAnomalyClasses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LogAnomalyClass(entry, context);
    });
    return retVal;
};
const de_LogAnomalyShowcase = (output, context) => {
    return take(output, {
        LogAnomalyClasses: (_) => de_LogAnomalyClasses(_, context),
    });
};
const de_LogAnomalyShowcases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LogAnomalyShowcase(entry, context);
    });
    return retVal;
};
const de_MonitoredResourceIdentifier = (output, context) => {
    return take(output, {
        LastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MonitoredResourceName: __expectString,
        ResourceCollection: _json,
        ResourcePermission: __expectString,
        Type: __expectString,
    });
};
const de_MonitoredResourceIdentifiers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoredResourceIdentifier(entry, context);
    });
    return retVal;
};
const de_PerformanceInsightsMetricsDetail = (output, context) => {
    return take(output, {
        MetricDisplayName: __expectString,
        MetricQuery: _json,
        ReferenceData: (_) => de_PerformanceInsightsReferenceDataList(_, context),
        StatsAtAnomaly: (_) => de_PerformanceInsightsStats(_, context),
        StatsAtBaseline: (_) => de_PerformanceInsightsStats(_, context),
        Unit: __expectString,
    });
};
const de_PerformanceInsightsMetricsDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PerformanceInsightsMetricsDetail(entry, context);
    });
    return retVal;
};
const de_PerformanceInsightsReferenceComparisonValues = (output, context) => {
    return take(output, {
        ReferenceMetric: _json,
        ReferenceScalar: (_) => de_PerformanceInsightsReferenceScalar(_, context),
    });
};
const de_PerformanceInsightsReferenceData = (output, context) => {
    return take(output, {
        ComparisonValues: (_) => de_PerformanceInsightsReferenceComparisonValues(_, context),
        Name: __expectString,
    });
};
const de_PerformanceInsightsReferenceDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PerformanceInsightsReferenceData(entry, context);
    });
    return retVal;
};
const de_PerformanceInsightsReferenceScalar = (output, context) => {
    return take(output, {
        Value: __limitedParseDouble,
    });
};
const de_PerformanceInsightsStat = (output, context) => {
    return take(output, {
        Type: __expectString,
        Value: __limitedParseDouble,
    });
};
const de_PerformanceInsightsStats = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PerformanceInsightsStat(entry, context);
    });
    return retVal;
};
const de_PredictionTimeRange = (output, context) => {
    return take(output, {
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ProactiveAnomalies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProactiveAnomalySummary(entry, context);
    });
    return retVal;
};
const de_ProactiveAnomaly = (output, context) => {
    return take(output, {
        AnomalyReportedTimeRange: (_) => de_AnomalyReportedTimeRange(_, context),
        AnomalyResources: _json,
        AnomalyTimeRange: (_) => de_AnomalyTimeRange(_, context),
        AssociatedInsightId: __expectString,
        Description: __expectString,
        Id: __expectString,
        Limit: __limitedParseDouble,
        PredictionTimeRange: (_) => de_PredictionTimeRange(_, context),
        ResourceCollection: _json,
        Severity: __expectString,
        SourceDetails: (_) => de_AnomalySourceDetails(_, context),
        SourceMetadata: _json,
        Status: __expectString,
        UpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ProactiveAnomalySummary = (output, context) => {
    return take(output, {
        AnomalyReportedTimeRange: (_) => de_AnomalyReportedTimeRange(_, context),
        AnomalyResources: _json,
        AnomalyTimeRange: (_) => de_AnomalyTimeRange(_, context),
        AssociatedInsightId: __expectString,
        Description: __expectString,
        Id: __expectString,
        Limit: __limitedParseDouble,
        PredictionTimeRange: (_) => de_PredictionTimeRange(_, context),
        ResourceCollection: _json,
        Severity: __expectString,
        SourceDetails: (_) => de_AnomalySourceDetails(_, context),
        SourceMetadata: _json,
        Status: __expectString,
        UpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ProactiveInsight = (output, context) => {
    return take(output, {
        Description: __expectString,
        Id: __expectString,
        InsightTimeRange: (_) => de_InsightTimeRange(_, context),
        Name: __expectString,
        PredictionTimeRange: (_) => de_PredictionTimeRange(_, context),
        ResourceCollection: _json,
        Severity: __expectString,
        SsmOpsItemId: __expectString,
        Status: __expectString,
    });
};
const de_ProactiveInsights = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProactiveInsightSummary(entry, context);
    });
    return retVal;
};
const de_ProactiveInsightSummary = (output, context) => {
    return take(output, {
        AssociatedResourceArns: _json,
        Id: __expectString,
        InsightTimeRange: (_) => de_InsightTimeRange(_, context),
        Name: __expectString,
        PredictionTimeRange: (_) => de_PredictionTimeRange(_, context),
        ResourceCollection: _json,
        ServiceCollection: _json,
        Severity: __expectString,
        Status: __expectString,
    });
};
const de_ProactiveOrganizationInsights = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProactiveOrganizationInsightSummary(entry, context);
    });
    return retVal;
};
const de_ProactiveOrganizationInsightSummary = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Id: __expectString,
        InsightTimeRange: (_) => de_InsightTimeRange(_, context),
        Name: __expectString,
        OrganizationalUnitId: __expectString,
        PredictionTimeRange: (_) => de_PredictionTimeRange(_, context),
        ResourceCollection: _json,
        ServiceCollection: _json,
        Severity: __expectString,
        Status: __expectString,
    });
};
const de_ReactiveAnomalies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReactiveAnomalySummary(entry, context);
    });
    return retVal;
};
const de_ReactiveAnomaly = (output, context) => {
    return take(output, {
        AnomalyReportedTimeRange: (_) => de_AnomalyReportedTimeRange(_, context),
        AnomalyResources: _json,
        AnomalyTimeRange: (_) => de_AnomalyTimeRange(_, context),
        AssociatedInsightId: __expectString,
        CausalAnomalyId: __expectString,
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        ResourceCollection: _json,
        Severity: __expectString,
        SourceDetails: (_) => de_AnomalySourceDetails(_, context),
        Status: __expectString,
        Type: __expectString,
    });
};
const de_ReactiveAnomalySummary = (output, context) => {
    return take(output, {
        AnomalyReportedTimeRange: (_) => de_AnomalyReportedTimeRange(_, context),
        AnomalyResources: _json,
        AnomalyTimeRange: (_) => de_AnomalyTimeRange(_, context),
        AssociatedInsightId: __expectString,
        CausalAnomalyId: __expectString,
        Description: __expectString,
        Id: __expectString,
        Name: __expectString,
        ResourceCollection: _json,
        Severity: __expectString,
        SourceDetails: (_) => de_AnomalySourceDetails(_, context),
        Status: __expectString,
        Type: __expectString,
    });
};
const de_ReactiveInsight = (output, context) => {
    return take(output, {
        Description: __expectString,
        Id: __expectString,
        InsightTimeRange: (_) => de_InsightTimeRange(_, context),
        Name: __expectString,
        ResourceCollection: _json,
        Severity: __expectString,
        SsmOpsItemId: __expectString,
        Status: __expectString,
    });
};
const de_ReactiveInsights = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReactiveInsightSummary(entry, context);
    });
    return retVal;
};
const de_ReactiveInsightSummary = (output, context) => {
    return take(output, {
        AssociatedResourceArns: _json,
        Id: __expectString,
        InsightTimeRange: (_) => de_InsightTimeRange(_, context),
        Name: __expectString,
        ResourceCollection: _json,
        ServiceCollection: _json,
        Severity: __expectString,
        Status: __expectString,
    });
};
const de_ReactiveOrganizationInsights = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReactiveOrganizationInsightSummary(entry, context);
    });
    return retVal;
};
const de_ReactiveOrganizationInsightSummary = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Id: __expectString,
        InsightTimeRange: (_) => de_InsightTimeRange(_, context),
        Name: __expectString,
        OrganizationalUnitId: __expectString,
        ResourceCollection: _json,
        ServiceCollection: _json,
        Severity: __expectString,
        Status: __expectString,
    });
};
const de_ServiceResourceCost = (output, context) => {
    return take(output, {
        Cost: __limitedParseDouble,
        Count: __expectInt32,
        State: __expectString,
        Type: __expectString,
        UnitCost: __limitedParseDouble,
    });
};
const de_ServiceResourceCosts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceResourceCost(entry, context);
    });
    return retVal;
};
const de_TimestampMetricValuePair = (output, context) => {
    return take(output, {
        MetricValue: __limitedParseDouble,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_TimestampMetricValuePairList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TimestampMetricValuePair(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _AI = "AccountId";
const _NT = "NextToken";
const _RAS = "RetryAfterSeconds";
const _ra = "retry-after";
