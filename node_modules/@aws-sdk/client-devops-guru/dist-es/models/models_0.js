import { DevOpsGuruServiceException as __BaseException } from "./DevOpsGuruServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const NotificationMessageType = {
    CLOSED_INSIGHT: "CLOSED_INSIGHT",
    NEW_ASSOCIATION: "NEW_ASSOCIATION",
    NEW_INSIGHT: "NEW_INSIGHT",
    NEW_RECOMMENDATION: "NEW_RECOMMENDATION",
    SEVERITY_UPGRADED: "SEVERITY_UPGRADED",
};
export const InsightSeverity = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "CANNOT_PARSE",
    FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED",
    INVALID_PARAMETER_COMBINATION: "INVALID_PARAMETER_COMBINATION",
    OTHER: "OTHER",
    PARAMETER_INCONSISTENT_WITH_SERVICE_STATE: "PARAMETER_INCONSISTENT_WITH_SERVICE_STATE",
    UNKNOWN_OPERATION: "UNKNOWN_OPERATION",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Fields = opts.Fields;
    }
}
export const EventSourceOptInStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const LogAnomalyType = {
    BLOCK_FORMAT: "BLOCK_FORMAT",
    FORMAT: "FORMAT",
    HTTP_CODE: "HTTP_CODE",
    KEYWORD: "KEYWORD",
    KEYWORD_TOKEN: "KEYWORD_TOKEN",
    NEW_FIELD_NAME: "NEW_FIELD_NAME",
    NUMERICAL_NAN: "NUMERICAL_NAN",
    NUMERICAL_POINT: "NUMERICAL_POINT",
};
export const AnomalySeverity = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
export const CloudWatchMetricDataStatusCode = {
    COMPLETE: "Complete",
    INTERNAL_ERROR: "InternalError",
    PARTIAL_DATA: "PartialData",
};
export const CloudWatchMetricsStat = {
    AVERAGE: "Average",
    MAXIMUM: "Maximum",
    MINIMUM: "Minimum",
    P50: "p50",
    P90: "p90",
    P99: "p99",
    SAMPLE_COUNT: "SampleCount",
    SUM: "Sum",
};
export const AnomalyStatus = {
    CLOSED: "CLOSED",
    ONGOING: "ONGOING",
};
export const AnomalyType = {
    CAUSAL: "CAUSAL",
    CONTEXTUAL: "CONTEXTUAL",
};
export const InsightFeedbackOption = {
    ALERT_TOO_SENSITIVE: "ALERT_TOO_SENSITIVE",
    DATA_INCORRECT: "DATA_INCORRECT",
    DATA_NOISY_ANOMALY: "DATA_NOISY_ANOMALY",
    RECOMMENDATION_USEFUL: "RECOMMENDATION_USEFUL",
    VALID_COLLECTION: "VALID_COLLECTION",
};
export const InsightStatus = {
    CLOSED: "CLOSED",
    ONGOING: "ONGOING",
};
export const OrganizationResourceCollectionType = {
    AWS_ACCOUNT: "AWS_ACCOUNT",
    AWS_CLOUD_FORMATION: "AWS_CLOUD_FORMATION",
    AWS_SERVICE: "AWS_SERVICE",
    AWS_TAGS: "AWS_TAGS",
};
export const ServiceName = {
    API_GATEWAY: "API_GATEWAY",
    APPLICATION_ELB: "APPLICATION_ELB",
    AUTO_SCALING_GROUP: "AUTO_SCALING_GROUP",
    CLOUD_FRONT: "CLOUD_FRONT",
    DYNAMO_DB: "DYNAMO_DB",
    EC2: "EC2",
    ECS: "ECS",
    EKS: "EKS",
    ELASTIC_BEANSTALK: "ELASTIC_BEANSTALK",
    ELASTI_CACHE: "ELASTI_CACHE",
    ELB: "ELB",
    ES: "ES",
    KINESIS: "KINESIS",
    LAMBDA: "LAMBDA",
    NAT_GATEWAY: "NAT_GATEWAY",
    NETWORK_ELB: "NETWORK_ELB",
    RDS: "RDS",
    REDSHIFT: "REDSHIFT",
    ROUTE_53: "ROUTE_53",
    S3: "S3",
    SAGE_MAKER: "SAGE_MAKER",
    SNS: "SNS",
    SQS: "SQS",
    STEP_FUNCTIONS: "STEP_FUNCTIONS",
    SWF: "SWF",
};
export const ResourceCollectionType = {
    AWS_CLOUD_FORMATION: "AWS_CLOUD_FORMATION",
    AWS_SERVICE: "AWS_SERVICE",
    AWS_TAGS: "AWS_TAGS",
};
export const OptInStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const ServerSideEncryptionType = {
    AWS_OWNED_KMS_KEY: "AWS_OWNED_KMS_KEY",
    CUSTOMER_MANAGED_KEY: "CUSTOMER_MANAGED_KEY",
};
export const CostEstimationServiceResourceState = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
export const CostEstimationStatus = {
    COMPLETED: "COMPLETED",
    ONGOING: "ONGOING",
};
export const EventDataSource = {
    AWS_CLOUD_TRAIL: "AWS_CLOUD_TRAIL",
    AWS_CODE_DEPLOY: "AWS_CODE_DEPLOY",
};
export const EventClass = {
    CONFIG_CHANGE: "CONFIG_CHANGE",
    DEPLOYMENT: "DEPLOYMENT",
    INFRASTRUCTURE: "INFRASTRUCTURE",
    SCHEMA_CHANGE: "SCHEMA_CHANGE",
    SECURITY_CHANGE: "SECURITY_CHANGE",
};
export const InsightType = {
    PROACTIVE: "PROACTIVE",
    REACTIVE: "REACTIVE",
};
export const ResourcePermission = {
    FULL_PERMISSION: "FULL_PERMISSION",
    MISSING_PERMISSION: "MISSING_PERMISSION",
};
export const ResourceTypeFilter = {
    CLOUDFRONT_DISTRIBUTION: "CLOUDFRONT_DISTRIBUTION",
    DYNAMODB_TABLE: "DYNAMODB_TABLE",
    EC2_NAT_GATEWAY: "EC2_NAT_GATEWAY",
    ECS_CLUSTER: "ECS_CLUSTER",
    ECS_SERVICE: "ECS_SERVICE",
    EKS_CLUSTER: "EKS_CLUSTER",
    ELASTICACHE_CACHE_CLUSTER: "ELASTICACHE_CACHE_CLUSTER",
    ELASTICSEARCH_DOMAIN: "ELASTICSEARCH_DOMAIN",
    ELASTIC_BEANSTALK_ENVIRONMENT: "ELASTIC_BEANSTALK_ENVIRONMENT",
    ELASTIC_LOAD_BALANCER_LOAD_BALANCER: "ELASTIC_LOAD_BALANCER_LOAD_BALANCER",
    ELASTIC_LOAD_BALANCING_V2_LOAD_BALANCER: "ELASTIC_LOAD_BALANCING_V2_LOAD_BALANCER",
    ELASTIC_LOAD_BALANCING_V2_TARGET_GROUP: "ELASTIC_LOAD_BALANCING_V2_TARGET_GROUP",
    KINESIS_STREAM: "KINESIS_STREAM",
    LAMBDA_FUNCTION: "LAMBDA_FUNCTION",
    LOG_GROUPS: "LOG_GROUPS",
    OPEN_SEARCH_SERVICE_DOMAIN: "OPEN_SEARCH_SERVICE_DOMAIN",
    RDS_DB_CLUSTER: "RDS_DB_CLUSTER",
    RDS_DB_INSTANCE: "RDS_DB_INSTANCE",
    REDSHIFT_CLUSTER: "REDSHIFT_CLUSTER",
    ROUTE53_HEALTH_CHECK: "ROUTE53_HEALTH_CHECK",
    ROUTE53_HOSTED_ZONE: "ROUTE53_HOSTED_ZONE",
    S3_BUCKET: "S3_BUCKET",
    SAGEMAKER_ENDPOINT: "SAGEMAKER_ENDPOINT",
    SNS_TOPIC: "SNS_TOPIC",
    SQS_QUEUE: "SQS_QUEUE",
    STEP_FUNCTIONS_ACTIVITY: "STEP_FUNCTIONS_ACTIVITY",
    STEP_FUNCTIONS_STATE_MACHINE: "STEP_FUNCTIONS_STATE_MACHINE",
};
export const Locale = {
    DE_DE: "DE_DE",
    EN_GB: "EN_GB",
    EN_US: "EN_US",
    ES_ES: "ES_ES",
    FR_FR: "FR_FR",
    IT_IT: "IT_IT",
    JA_JP: "JA_JP",
    KO_KR: "KO_KR",
    PT_BR: "PT_BR",
    ZH_CN: "ZH_CN",
    ZH_TW: "ZH_TW",
};
export const UpdateResourceCollectionAction = {
    ADD: "ADD",
    REMOVE: "REMOVE",
};
