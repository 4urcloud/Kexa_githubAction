import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DevOpsGuruServiceException as __BaseException } from "./DevOpsGuruServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AccountInsightHealth {
  OpenProactiveInsights?: number;
  OpenReactiveInsights?: number;
}
export interface AccountHealth {
  AccountId?: string;
  Insight?: AccountInsightHealth;
}
export declare const NotificationMessageType: {
  readonly CLOSED_INSIGHT: "CLOSED_INSIGHT";
  readonly NEW_ASSOCIATION: "NEW_ASSOCIATION";
  readonly NEW_INSIGHT: "NEW_INSIGHT";
  readonly NEW_RECOMMENDATION: "NEW_RECOMMENDATION";
  readonly SEVERITY_UPGRADED: "SEVERITY_UPGRADED";
};
export type NotificationMessageType =
  (typeof NotificationMessageType)[keyof typeof NotificationMessageType];
export declare const InsightSeverity: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
};
export type InsightSeverity =
  (typeof InsightSeverity)[keyof typeof InsightSeverity];
export interface NotificationFilterConfig {
  Severities?: InsightSeverity[];
  MessageTypes?: NotificationMessageType[];
}
export interface SnsChannelConfig {
  TopicArn?: string;
}
export interface NotificationChannelConfig {
  Sns: SnsChannelConfig | undefined;
  Filters?: NotificationFilterConfig;
}
export interface AddNotificationChannelRequest {
  Config: NotificationChannelConfig | undefined;
}
export interface AddNotificationChannelResponse {
  Id: string | undefined;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message: string | undefined;
  RetryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message: string | undefined;
  QuotaCode?: string;
  ServiceCode?: string;
  RetryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  Name: string | undefined;
  Message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "CANNOT_PARSE";
  readonly FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED";
  readonly INVALID_PARAMETER_COMBINATION: "INVALID_PARAMETER_COMBINATION";
  readonly OTHER: "OTHER";
  readonly PARAMETER_INCONSISTENT_WITH_SERVICE_STATE: "PARAMETER_INCONSISTENT_WITH_SERVICE_STATE";
  readonly UNKNOWN_OPERATION: "UNKNOWN_OPERATION";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  Reason?: ValidationExceptionReason;
  Fields?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const EventSourceOptInStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type EventSourceOptInStatus =
  (typeof EventSourceOptInStatus)[keyof typeof EventSourceOptInStatus];
export interface AmazonCodeGuruProfilerIntegration {
  Status?: EventSourceOptInStatus;
}
export declare const LogAnomalyType: {
  readonly BLOCK_FORMAT: "BLOCK_FORMAT";
  readonly FORMAT: "FORMAT";
  readonly HTTP_CODE: "HTTP_CODE";
  readonly KEYWORD: "KEYWORD";
  readonly KEYWORD_TOKEN: "KEYWORD_TOKEN";
  readonly NEW_FIELD_NAME: "NEW_FIELD_NAME";
  readonly NUMERICAL_NAN: "NUMERICAL_NAN";
  readonly NUMERICAL_POINT: "NUMERICAL_POINT";
};
export type LogAnomalyType =
  (typeof LogAnomalyType)[keyof typeof LogAnomalyType];
export interface LogAnomalyClass {
  LogStreamName?: string;
  LogAnomalyType?: LogAnomalyType;
  LogAnomalyToken?: string;
  LogEventId?: string;
  Explanation?: string;
  NumberOfLogLinesOccurrences?: number;
  LogEventTimestamp?: Date;
}
export interface LogAnomalyShowcase {
  LogAnomalyClasses?: LogAnomalyClass[];
}
export interface AnomalousLogGroup {
  LogGroupName?: string;
  ImpactStartTime?: Date;
  ImpactEndTime?: Date;
  NumberOfLogLinesScanned?: number;
  LogAnomalyShowcases?: LogAnomalyShowcase[];
}
export interface AnomalyReportedTimeRange {
  OpenTime: Date | undefined;
  CloseTime?: Date;
}
export interface AnomalyResource {
  Name?: string;
  Type?: string;
}
export declare const AnomalySeverity: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
};
export type AnomalySeverity =
  (typeof AnomalySeverity)[keyof typeof AnomalySeverity];
export interface CloudWatchMetricsDimension {
  Name?: string;
  Value?: string;
}
export declare const CloudWatchMetricDataStatusCode: {
  readonly COMPLETE: "Complete";
  readonly INTERNAL_ERROR: "InternalError";
  readonly PARTIAL_DATA: "PartialData";
};
export type CloudWatchMetricDataStatusCode =
  (typeof CloudWatchMetricDataStatusCode)[keyof typeof CloudWatchMetricDataStatusCode];
export interface TimestampMetricValuePair {
  Timestamp?: Date;
  MetricValue?: number;
}
export interface CloudWatchMetricsDataSummary {
  TimestampMetricValuePairList?: TimestampMetricValuePair[];
  StatusCode?: CloudWatchMetricDataStatusCode;
}
export declare const CloudWatchMetricsStat: {
  readonly AVERAGE: "Average";
  readonly MAXIMUM: "Maximum";
  readonly MINIMUM: "Minimum";
  readonly P50: "p50";
  readonly P90: "p90";
  readonly P99: "p99";
  readonly SAMPLE_COUNT: "SampleCount";
  readonly SUM: "Sum";
};
export type CloudWatchMetricsStat =
  (typeof CloudWatchMetricsStat)[keyof typeof CloudWatchMetricsStat];
export interface CloudWatchMetricsDetail {
  MetricName?: string;
  Namespace?: string;
  Dimensions?: CloudWatchMetricsDimension[];
  Stat?: CloudWatchMetricsStat;
  Unit?: string;
  Period?: number;
  MetricDataSummary?: CloudWatchMetricsDataSummary;
}
export interface PerformanceInsightsMetricDimensionGroup {
  Group?: string;
  Dimensions?: string[];
  Limit?: number;
}
export interface PerformanceInsightsMetricQuery {
  Metric?: string;
  GroupBy?: PerformanceInsightsMetricDimensionGroup;
  Filter?: Record<string, string>;
}
export interface PerformanceInsightsReferenceMetric {
  MetricQuery?: PerformanceInsightsMetricQuery;
}
export interface PerformanceInsightsReferenceScalar {
  Value?: number;
}
export interface PerformanceInsightsReferenceComparisonValues {
  ReferenceScalar?: PerformanceInsightsReferenceScalar;
  ReferenceMetric?: PerformanceInsightsReferenceMetric;
}
export interface PerformanceInsightsReferenceData {
  Name?: string;
  ComparisonValues?: PerformanceInsightsReferenceComparisonValues;
}
export interface PerformanceInsightsStat {
  Type?: string;
  Value?: number;
}
export interface PerformanceInsightsMetricsDetail {
  MetricDisplayName?: string;
  Unit?: string;
  MetricQuery?: PerformanceInsightsMetricQuery;
  ReferenceData?: PerformanceInsightsReferenceData[];
  StatsAtAnomaly?: PerformanceInsightsStat[];
  StatsAtBaseline?: PerformanceInsightsStat[];
}
export interface AnomalySourceDetails {
  CloudWatchMetrics?: CloudWatchMetricsDetail[];
  PerformanceInsightsMetrics?: PerformanceInsightsMetricsDetail[];
}
export interface AnomalySourceMetadata {
  Source?: string;
  SourceResourceName?: string;
  SourceResourceType?: string;
}
export declare const AnomalyStatus: {
  readonly CLOSED: "CLOSED";
  readonly ONGOING: "ONGOING";
};
export type AnomalyStatus = (typeof AnomalyStatus)[keyof typeof AnomalyStatus];
export interface AnomalyTimeRange {
  StartTime: Date | undefined;
  EndTime?: Date;
}
export declare const AnomalyType: {
  readonly CAUSAL: "CAUSAL";
  readonly CONTEXTUAL: "CONTEXTUAL";
};
export type AnomalyType = (typeof AnomalyType)[keyof typeof AnomalyType];
export interface DeleteInsightRequest {
  Id: string | undefined;
}
export interface DeleteInsightResponse {}
export interface DescribeAccountHealthRequest {}
export interface DescribeAccountHealthResponse {
  OpenReactiveInsights: number | undefined;
  OpenProactiveInsights: number | undefined;
  MetricsAnalyzed: number | undefined;
  ResourceHours: number | undefined;
  AnalyzedResourceCount?: number;
}
export interface DescribeAccountOverviewRequest {
  FromTime: Date | undefined;
  ToTime?: Date;
}
export interface DescribeAccountOverviewResponse {
  ReactiveInsights: number | undefined;
  ProactiveInsights: number | undefined;
  MeanTimeToRecoverInMilliseconds: number | undefined;
}
export interface DescribeAnomalyRequest {
  Id: string | undefined;
  AccountId?: string;
}
export interface PredictionTimeRange {
  StartTime: Date | undefined;
  EndTime?: Date;
}
export interface CloudFormationCollection {
  StackNames?: string[];
}
export interface TagCollection {
  AppBoundaryKey: string | undefined;
  TagValues: string[] | undefined;
}
export interface ResourceCollection {
  CloudFormation?: CloudFormationCollection;
  Tags?: TagCollection[];
}
export interface ProactiveAnomaly {
  Id?: string;
  Severity?: AnomalySeverity;
  Status?: AnomalyStatus;
  UpdateTime?: Date;
  AnomalyTimeRange?: AnomalyTimeRange;
  AnomalyReportedTimeRange?: AnomalyReportedTimeRange;
  PredictionTimeRange?: PredictionTimeRange;
  SourceDetails?: AnomalySourceDetails;
  AssociatedInsightId?: string;
  ResourceCollection?: ResourceCollection;
  Limit?: number;
  SourceMetadata?: AnomalySourceMetadata;
  AnomalyResources?: AnomalyResource[];
  Description?: string;
}
export interface ReactiveAnomaly {
  Id?: string;
  Severity?: AnomalySeverity;
  Status?: AnomalyStatus;
  AnomalyTimeRange?: AnomalyTimeRange;
  AnomalyReportedTimeRange?: AnomalyReportedTimeRange;
  SourceDetails?: AnomalySourceDetails;
  AssociatedInsightId?: string;
  ResourceCollection?: ResourceCollection;
  Type?: AnomalyType;
  Name?: string;
  Description?: string;
  CausalAnomalyId?: string;
  AnomalyResources?: AnomalyResource[];
}
export interface DescribeAnomalyResponse {
  ProactiveAnomaly?: ProactiveAnomaly;
  ReactiveAnomaly?: ReactiveAnomaly;
}
export interface DescribeEventSourcesConfigRequest {}
export interface EventSourcesConfig {
  AmazonCodeGuruProfiler?: AmazonCodeGuruProfilerIntegration;
}
export interface DescribeEventSourcesConfigResponse {
  EventSources?: EventSourcesConfig;
}
export interface DescribeFeedbackRequest {
  InsightId?: string;
}
export declare const InsightFeedbackOption: {
  readonly ALERT_TOO_SENSITIVE: "ALERT_TOO_SENSITIVE";
  readonly DATA_INCORRECT: "DATA_INCORRECT";
  readonly DATA_NOISY_ANOMALY: "DATA_NOISY_ANOMALY";
  readonly RECOMMENDATION_USEFUL: "RECOMMENDATION_USEFUL";
  readonly VALID_COLLECTION: "VALID_COLLECTION";
};
export type InsightFeedbackOption =
  (typeof InsightFeedbackOption)[keyof typeof InsightFeedbackOption];
export interface InsightFeedback {
  Id?: string;
  Feedback?: InsightFeedbackOption;
}
export interface DescribeFeedbackResponse {
  InsightFeedback?: InsightFeedback;
}
export interface DescribeInsightRequest {
  Id: string | undefined;
  AccountId?: string;
}
export interface InsightTimeRange {
  StartTime: Date | undefined;
  EndTime?: Date;
}
export declare const InsightStatus: {
  readonly CLOSED: "CLOSED";
  readonly ONGOING: "ONGOING";
};
export type InsightStatus = (typeof InsightStatus)[keyof typeof InsightStatus];
export interface ProactiveInsight {
  Id?: string;
  Name?: string;
  Severity?: InsightSeverity;
  Status?: InsightStatus;
  InsightTimeRange?: InsightTimeRange;
  PredictionTimeRange?: PredictionTimeRange;
  ResourceCollection?: ResourceCollection;
  SsmOpsItemId?: string;
  Description?: string;
}
export interface ReactiveInsight {
  Id?: string;
  Name?: string;
  Severity?: InsightSeverity;
  Status?: InsightStatus;
  InsightTimeRange?: InsightTimeRange;
  ResourceCollection?: ResourceCollection;
  SsmOpsItemId?: string;
  Description?: string;
}
export interface DescribeInsightResponse {
  ProactiveInsight?: ProactiveInsight;
  ReactiveInsight?: ReactiveInsight;
}
export interface DescribeOrganizationHealthRequest {
  AccountIds?: string[];
  OrganizationalUnitIds?: string[];
}
export interface DescribeOrganizationHealthResponse {
  OpenReactiveInsights: number | undefined;
  OpenProactiveInsights: number | undefined;
  MetricsAnalyzed: number | undefined;
  ResourceHours: number | undefined;
}
export interface DescribeOrganizationOverviewRequest {
  FromTime: Date | undefined;
  ToTime?: Date;
  AccountIds?: string[];
  OrganizationalUnitIds?: string[];
}
export interface DescribeOrganizationOverviewResponse {
  ReactiveInsights: number | undefined;
  ProactiveInsights: number | undefined;
}
export declare const OrganizationResourceCollectionType: {
  readonly AWS_ACCOUNT: "AWS_ACCOUNT";
  readonly AWS_CLOUD_FORMATION: "AWS_CLOUD_FORMATION";
  readonly AWS_SERVICE: "AWS_SERVICE";
  readonly AWS_TAGS: "AWS_TAGS";
};
export type OrganizationResourceCollectionType =
  (typeof OrganizationResourceCollectionType)[keyof typeof OrganizationResourceCollectionType];
export interface DescribeOrganizationResourceCollectionHealthRequest {
  OrganizationResourceCollectionType:
    | OrganizationResourceCollectionType
    | undefined;
  AccountIds?: string[];
  OrganizationalUnitIds?: string[];
  NextToken?: string;
  MaxResults?: number;
}
export interface InsightHealth {
  OpenProactiveInsights?: number;
  OpenReactiveInsights?: number;
  MeanTimeToRecoverInMilliseconds?: number;
}
export interface CloudFormationHealth {
  StackName?: string;
  Insight?: InsightHealth;
  AnalyzedResourceCount?: number;
}
export interface ServiceInsightHealth {
  OpenProactiveInsights?: number;
  OpenReactiveInsights?: number;
}
export declare const ServiceName: {
  readonly API_GATEWAY: "API_GATEWAY";
  readonly APPLICATION_ELB: "APPLICATION_ELB";
  readonly AUTO_SCALING_GROUP: "AUTO_SCALING_GROUP";
  readonly CLOUD_FRONT: "CLOUD_FRONT";
  readonly DYNAMO_DB: "DYNAMO_DB";
  readonly EC2: "EC2";
  readonly ECS: "ECS";
  readonly EKS: "EKS";
  readonly ELASTIC_BEANSTALK: "ELASTIC_BEANSTALK";
  readonly ELASTI_CACHE: "ELASTI_CACHE";
  readonly ELB: "ELB";
  readonly ES: "ES";
  readonly KINESIS: "KINESIS";
  readonly LAMBDA: "LAMBDA";
  readonly NAT_GATEWAY: "NAT_GATEWAY";
  readonly NETWORK_ELB: "NETWORK_ELB";
  readonly RDS: "RDS";
  readonly REDSHIFT: "REDSHIFT";
  readonly ROUTE_53: "ROUTE_53";
  readonly S3: "S3";
  readonly SAGE_MAKER: "SAGE_MAKER";
  readonly SNS: "SNS";
  readonly SQS: "SQS";
  readonly STEP_FUNCTIONS: "STEP_FUNCTIONS";
  readonly SWF: "SWF";
};
export type ServiceName = (typeof ServiceName)[keyof typeof ServiceName];
export interface ServiceHealth {
  ServiceName?: ServiceName;
  Insight?: ServiceInsightHealth;
  AnalyzedResourceCount?: number;
}
export interface TagHealth {
  AppBoundaryKey?: string;
  TagValue?: string;
  Insight?: InsightHealth;
  AnalyzedResourceCount?: number;
}
export interface DescribeOrganizationResourceCollectionHealthResponse {
  CloudFormation?: CloudFormationHealth[];
  Service?: ServiceHealth[];
  Account?: AccountHealth[];
  NextToken?: string;
  Tags?: TagHealth[];
}
export declare const ResourceCollectionType: {
  readonly AWS_CLOUD_FORMATION: "AWS_CLOUD_FORMATION";
  readonly AWS_SERVICE: "AWS_SERVICE";
  readonly AWS_TAGS: "AWS_TAGS";
};
export type ResourceCollectionType =
  (typeof ResourceCollectionType)[keyof typeof ResourceCollectionType];
export interface DescribeResourceCollectionHealthRequest {
  ResourceCollectionType: ResourceCollectionType | undefined;
  NextToken?: string;
}
export interface DescribeResourceCollectionHealthResponse {
  CloudFormation?: CloudFormationHealth[];
  Service?: ServiceHealth[];
  NextToken?: string;
  Tags?: TagHealth[];
}
export interface DescribeServiceIntegrationRequest {}
export declare const OptInStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type OptInStatus = (typeof OptInStatus)[keyof typeof OptInStatus];
export declare const ServerSideEncryptionType: {
  readonly AWS_OWNED_KMS_KEY: "AWS_OWNED_KMS_KEY";
  readonly CUSTOMER_MANAGED_KEY: "CUSTOMER_MANAGED_KEY";
};
export type ServerSideEncryptionType =
  (typeof ServerSideEncryptionType)[keyof typeof ServerSideEncryptionType];
export interface KMSServerSideEncryptionIntegration {
  KMSKeyId?: string;
  OptInStatus?: OptInStatus;
  Type?: ServerSideEncryptionType;
}
export interface LogsAnomalyDetectionIntegration {
  OptInStatus?: OptInStatus;
}
export interface OpsCenterIntegration {
  OptInStatus?: OptInStatus;
}
export interface ServiceIntegrationConfig {
  OpsCenter?: OpsCenterIntegration;
  LogsAnomalyDetection?: LogsAnomalyDetectionIntegration;
  KMSServerSideEncryption?: KMSServerSideEncryptionIntegration;
}
export interface DescribeServiceIntegrationResponse {
  ServiceIntegration?: ServiceIntegrationConfig;
}
export interface GetCostEstimationRequest {
  NextToken?: string;
}
export declare const CostEstimationServiceResourceState: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
};
export type CostEstimationServiceResourceState =
  (typeof CostEstimationServiceResourceState)[keyof typeof CostEstimationServiceResourceState];
export interface ServiceResourceCost {
  Type?: string;
  State?: CostEstimationServiceResourceState;
  Count?: number;
  UnitCost?: number;
  Cost?: number;
}
export interface CloudFormationCostEstimationResourceCollectionFilter {
  StackNames?: string[];
}
export interface TagCostEstimationResourceCollectionFilter {
  AppBoundaryKey: string | undefined;
  TagValues: string[] | undefined;
}
export interface CostEstimationResourceCollectionFilter {
  CloudFormation?: CloudFormationCostEstimationResourceCollectionFilter;
  Tags?: TagCostEstimationResourceCollectionFilter[];
}
export declare const CostEstimationStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly ONGOING: "ONGOING";
};
export type CostEstimationStatus =
  (typeof CostEstimationStatus)[keyof typeof CostEstimationStatus];
export interface CostEstimationTimeRange {
  StartTime?: Date;
  EndTime?: Date;
}
export interface GetCostEstimationResponse {
  ResourceCollection?: CostEstimationResourceCollectionFilter;
  Status?: CostEstimationStatus;
  Costs?: ServiceResourceCost[];
  TimeRange?: CostEstimationTimeRange;
  TotalCost?: number;
  NextToken?: string;
}
export interface GetResourceCollectionRequest {
  ResourceCollectionType: ResourceCollectionType | undefined;
  NextToken?: string;
}
export interface CloudFormationCollectionFilter {
  StackNames?: string[];
}
export interface TagCollectionFilter {
  AppBoundaryKey: string | undefined;
  TagValues: string[] | undefined;
}
export interface ResourceCollectionFilter {
  CloudFormation?: CloudFormationCollectionFilter;
  Tags?: TagCollectionFilter[];
}
export interface GetResourceCollectionResponse {
  ResourceCollection?: ResourceCollectionFilter;
  NextToken?: string;
}
export interface ServiceCollection {
  ServiceNames?: ServiceName[];
}
export interface ListAnomaliesForInsightFilters {
  ServiceCollection?: ServiceCollection;
}
export interface StartTimeRange {
  FromTime?: Date;
  ToTime?: Date;
}
export interface ListAnomaliesForInsightRequest {
  InsightId: string | undefined;
  StartTimeRange?: StartTimeRange;
  MaxResults?: number;
  NextToken?: string;
  AccountId?: string;
  Filters?: ListAnomaliesForInsightFilters;
}
export interface ProactiveAnomalySummary {
  Id?: string;
  Severity?: AnomalySeverity;
  Status?: AnomalyStatus;
  UpdateTime?: Date;
  AnomalyTimeRange?: AnomalyTimeRange;
  AnomalyReportedTimeRange?: AnomalyReportedTimeRange;
  PredictionTimeRange?: PredictionTimeRange;
  SourceDetails?: AnomalySourceDetails;
  AssociatedInsightId?: string;
  ResourceCollection?: ResourceCollection;
  Limit?: number;
  SourceMetadata?: AnomalySourceMetadata;
  AnomalyResources?: AnomalyResource[];
  Description?: string;
}
export interface ReactiveAnomalySummary {
  Id?: string;
  Severity?: AnomalySeverity;
  Status?: AnomalyStatus;
  AnomalyTimeRange?: AnomalyTimeRange;
  AnomalyReportedTimeRange?: AnomalyReportedTimeRange;
  SourceDetails?: AnomalySourceDetails;
  AssociatedInsightId?: string;
  ResourceCollection?: ResourceCollection;
  Type?: AnomalyType;
  Name?: string;
  Description?: string;
  CausalAnomalyId?: string;
  AnomalyResources?: AnomalyResource[];
}
export interface ListAnomaliesForInsightResponse {
  ProactiveAnomalies?: ProactiveAnomalySummary[];
  ReactiveAnomalies?: ReactiveAnomalySummary[];
  NextToken?: string;
}
export interface ListAnomalousLogGroupsRequest {
  InsightId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListAnomalousLogGroupsResponse {
  InsightId: string | undefined;
  AnomalousLogGroups: AnomalousLogGroup[] | undefined;
  NextToken?: string;
}
export declare const EventDataSource: {
  readonly AWS_CLOUD_TRAIL: "AWS_CLOUD_TRAIL";
  readonly AWS_CODE_DEPLOY: "AWS_CODE_DEPLOY";
};
export type EventDataSource =
  (typeof EventDataSource)[keyof typeof EventDataSource];
export declare const EventClass: {
  readonly CONFIG_CHANGE: "CONFIG_CHANGE";
  readonly DEPLOYMENT: "DEPLOYMENT";
  readonly INFRASTRUCTURE: "INFRASTRUCTURE";
  readonly SCHEMA_CHANGE: "SCHEMA_CHANGE";
  readonly SECURITY_CHANGE: "SECURITY_CHANGE";
};
export type EventClass = (typeof EventClass)[keyof typeof EventClass];
export interface EventTimeRange {
  FromTime: Date | undefined;
  ToTime: Date | undefined;
}
export interface ListEventsFilters {
  InsightId?: string;
  EventTimeRange?: EventTimeRange;
  EventClass?: EventClass;
  EventSource?: string;
  DataSource?: EventDataSource;
  ResourceCollection?: ResourceCollection;
}
export interface ListEventsRequest {
  Filters: ListEventsFilters | undefined;
  MaxResults?: number;
  NextToken?: string;
  AccountId?: string;
}
export interface EventResource {
  Type?: string;
  Name?: string;
  Arn?: string;
}
export interface Event {
  ResourceCollection?: ResourceCollection;
  Id?: string;
  Time?: Date;
  EventSource?: string;
  Name?: string;
  DataSource?: EventDataSource;
  EventClass?: EventClass;
  Resources?: EventResource[];
}
export interface ListEventsResponse {
  Events: Event[] | undefined;
  NextToken?: string;
}
export declare const InsightType: {
  readonly PROACTIVE: "PROACTIVE";
  readonly REACTIVE: "REACTIVE";
};
export type InsightType = (typeof InsightType)[keyof typeof InsightType];
export interface ListInsightsAnyStatusFilter {
  Type: InsightType | undefined;
  StartTimeRange: StartTimeRange | undefined;
}
export interface EndTimeRange {
  FromTime?: Date;
  ToTime?: Date;
}
export interface ListInsightsClosedStatusFilter {
  Type: InsightType | undefined;
  EndTimeRange: EndTimeRange | undefined;
}
export interface ListInsightsOngoingStatusFilter {
  Type: InsightType | undefined;
}
export interface ListInsightsStatusFilter {
  Ongoing?: ListInsightsOngoingStatusFilter;
  Closed?: ListInsightsClosedStatusFilter;
  Any?: ListInsightsAnyStatusFilter;
}
export interface ListInsightsRequest {
  StatusFilter: ListInsightsStatusFilter | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ProactiveInsightSummary {
  Id?: string;
  Name?: string;
  Severity?: InsightSeverity;
  Status?: InsightStatus;
  InsightTimeRange?: InsightTimeRange;
  PredictionTimeRange?: PredictionTimeRange;
  ResourceCollection?: ResourceCollection;
  ServiceCollection?: ServiceCollection;
  AssociatedResourceArns?: string[];
}
export interface ReactiveInsightSummary {
  Id?: string;
  Name?: string;
  Severity?: InsightSeverity;
  Status?: InsightStatus;
  InsightTimeRange?: InsightTimeRange;
  ResourceCollection?: ResourceCollection;
  ServiceCollection?: ServiceCollection;
  AssociatedResourceArns?: string[];
}
export interface ListInsightsResponse {
  ProactiveInsights?: ProactiveInsightSummary[];
  ReactiveInsights?: ReactiveInsightSummary[];
  NextToken?: string;
}
export declare const ResourcePermission: {
  readonly FULL_PERMISSION: "FULL_PERMISSION";
  readonly MISSING_PERMISSION: "MISSING_PERMISSION";
};
export type ResourcePermission =
  (typeof ResourcePermission)[keyof typeof ResourcePermission];
export declare const ResourceTypeFilter: {
  readonly CLOUDFRONT_DISTRIBUTION: "CLOUDFRONT_DISTRIBUTION";
  readonly DYNAMODB_TABLE: "DYNAMODB_TABLE";
  readonly EC2_NAT_GATEWAY: "EC2_NAT_GATEWAY";
  readonly ECS_CLUSTER: "ECS_CLUSTER";
  readonly ECS_SERVICE: "ECS_SERVICE";
  readonly EKS_CLUSTER: "EKS_CLUSTER";
  readonly ELASTICACHE_CACHE_CLUSTER: "ELASTICACHE_CACHE_CLUSTER";
  readonly ELASTICSEARCH_DOMAIN: "ELASTICSEARCH_DOMAIN";
  readonly ELASTIC_BEANSTALK_ENVIRONMENT: "ELASTIC_BEANSTALK_ENVIRONMENT";
  readonly ELASTIC_LOAD_BALANCER_LOAD_BALANCER: "ELASTIC_LOAD_BALANCER_LOAD_BALANCER";
  readonly ELASTIC_LOAD_BALANCING_V2_LOAD_BALANCER: "ELASTIC_LOAD_BALANCING_V2_LOAD_BALANCER";
  readonly ELASTIC_LOAD_BALANCING_V2_TARGET_GROUP: "ELASTIC_LOAD_BALANCING_V2_TARGET_GROUP";
  readonly KINESIS_STREAM: "KINESIS_STREAM";
  readonly LAMBDA_FUNCTION: "LAMBDA_FUNCTION";
  readonly LOG_GROUPS: "LOG_GROUPS";
  readonly OPEN_SEARCH_SERVICE_DOMAIN: "OPEN_SEARCH_SERVICE_DOMAIN";
  readonly RDS_DB_CLUSTER: "RDS_DB_CLUSTER";
  readonly RDS_DB_INSTANCE: "RDS_DB_INSTANCE";
  readonly REDSHIFT_CLUSTER: "REDSHIFT_CLUSTER";
  readonly ROUTE53_HEALTH_CHECK: "ROUTE53_HEALTH_CHECK";
  readonly ROUTE53_HOSTED_ZONE: "ROUTE53_HOSTED_ZONE";
  readonly S3_BUCKET: "S3_BUCKET";
  readonly SAGEMAKER_ENDPOINT: "SAGEMAKER_ENDPOINT";
  readonly SNS_TOPIC: "SNS_TOPIC";
  readonly SQS_QUEUE: "SQS_QUEUE";
  readonly STEP_FUNCTIONS_ACTIVITY: "STEP_FUNCTIONS_ACTIVITY";
  readonly STEP_FUNCTIONS_STATE_MACHINE: "STEP_FUNCTIONS_STATE_MACHINE";
};
export type ResourceTypeFilter =
  (typeof ResourceTypeFilter)[keyof typeof ResourceTypeFilter];
export interface ListMonitoredResourcesFilters {
  ResourcePermission: ResourcePermission | undefined;
  ResourceTypeFilters: ResourceTypeFilter[] | undefined;
}
export interface ListMonitoredResourcesRequest {
  Filters?: ListMonitoredResourcesFilters;
  MaxResults?: number;
  NextToken?: string;
}
export interface MonitoredResourceIdentifier {
  MonitoredResourceName?: string;
  Type?: string;
  ResourcePermission?: ResourcePermission;
  LastUpdated?: Date;
  ResourceCollection?: ResourceCollection;
}
export interface ListMonitoredResourcesResponse {
  MonitoredResourceIdentifiers: MonitoredResourceIdentifier[] | undefined;
  NextToken?: string;
}
export interface ListNotificationChannelsRequest {
  NextToken?: string;
}
export interface NotificationChannel {
  Id?: string;
  Config?: NotificationChannelConfig;
}
export interface ListNotificationChannelsResponse {
  Channels?: NotificationChannel[];
  NextToken?: string;
}
export interface ListOrganizationInsightsRequest {
  StatusFilter: ListInsightsStatusFilter | undefined;
  MaxResults?: number;
  AccountIds?: string[];
  OrganizationalUnitIds?: string[];
  NextToken?: string;
}
export interface ProactiveOrganizationInsightSummary {
  Id?: string;
  AccountId?: string;
  OrganizationalUnitId?: string;
  Name?: string;
  Severity?: InsightSeverity;
  Status?: InsightStatus;
  InsightTimeRange?: InsightTimeRange;
  PredictionTimeRange?: PredictionTimeRange;
  ResourceCollection?: ResourceCollection;
  ServiceCollection?: ServiceCollection;
}
export interface ReactiveOrganizationInsightSummary {
  Id?: string;
  AccountId?: string;
  OrganizationalUnitId?: string;
  Name?: string;
  Severity?: InsightSeverity;
  Status?: InsightStatus;
  InsightTimeRange?: InsightTimeRange;
  ResourceCollection?: ResourceCollection;
  ServiceCollection?: ServiceCollection;
}
export interface ListOrganizationInsightsResponse {
  ProactiveInsights?: ProactiveOrganizationInsightSummary[];
  ReactiveInsights?: ReactiveOrganizationInsightSummary[];
  NextToken?: string;
}
export declare const Locale: {
  readonly DE_DE: "DE_DE";
  readonly EN_GB: "EN_GB";
  readonly EN_US: "EN_US";
  readonly ES_ES: "ES_ES";
  readonly FR_FR: "FR_FR";
  readonly IT_IT: "IT_IT";
  readonly JA_JP: "JA_JP";
  readonly KO_KR: "KO_KR";
  readonly PT_BR: "PT_BR";
  readonly ZH_CN: "ZH_CN";
  readonly ZH_TW: "ZH_TW";
};
export type Locale = (typeof Locale)[keyof typeof Locale];
export interface ListRecommendationsRequest {
  InsightId: string | undefined;
  NextToken?: string;
  Locale?: Locale;
  AccountId?: string;
}
export interface RecommendationRelatedAnomalyResource {
  Name?: string;
  Type?: string;
}
export interface RecommendationRelatedCloudWatchMetricsSourceDetail {
  MetricName?: string;
  Namespace?: string;
}
export interface RecommendationRelatedAnomalySourceDetail {
  CloudWatchMetrics?: RecommendationRelatedCloudWatchMetricsSourceDetail[];
}
export interface RecommendationRelatedAnomaly {
  Resources?: RecommendationRelatedAnomalyResource[];
  SourceDetails?: RecommendationRelatedAnomalySourceDetail[];
  AnomalyId?: string;
}
export interface RecommendationRelatedEventResource {
  Name?: string;
  Type?: string;
}
export interface RecommendationRelatedEvent {
  Name?: string;
  Resources?: RecommendationRelatedEventResource[];
}
export interface Recommendation {
  Description?: string;
  Link?: string;
  Name?: string;
  Reason?: string;
  RelatedEvents?: RecommendationRelatedEvent[];
  RelatedAnomalies?: RecommendationRelatedAnomaly[];
  Category?: string;
}
export interface ListRecommendationsResponse {
  Recommendations?: Recommendation[];
  NextToken?: string;
}
export interface PutFeedbackRequest {
  InsightFeedback?: InsightFeedback;
}
export interface PutFeedbackResponse {}
export interface RemoveNotificationChannelRequest {
  Id: string | undefined;
}
export interface RemoveNotificationChannelResponse {}
export interface SearchInsightsFilters {
  Severities?: InsightSeverity[];
  Statuses?: InsightStatus[];
  ResourceCollection?: ResourceCollection;
  ServiceCollection?: ServiceCollection;
}
export interface SearchInsightsRequest {
  StartTimeRange: StartTimeRange | undefined;
  Filters?: SearchInsightsFilters;
  MaxResults?: number;
  NextToken?: string;
  Type: InsightType | undefined;
}
export interface SearchInsightsResponse {
  ProactiveInsights?: ProactiveInsightSummary[];
  ReactiveInsights?: ReactiveInsightSummary[];
  NextToken?: string;
}
export interface SearchOrganizationInsightsFilters {
  Severities?: InsightSeverity[];
  Statuses?: InsightStatus[];
  ResourceCollection?: ResourceCollection;
  ServiceCollection?: ServiceCollection;
}
export interface SearchOrganizationInsightsRequest {
  AccountIds: string[] | undefined;
  StartTimeRange: StartTimeRange | undefined;
  Filters?: SearchOrganizationInsightsFilters;
  MaxResults?: number;
  NextToken?: string;
  Type: InsightType | undefined;
}
export interface SearchOrganizationInsightsResponse {
  ProactiveInsights?: ProactiveInsightSummary[];
  ReactiveInsights?: ReactiveInsightSummary[];
  NextToken?: string;
}
export interface StartCostEstimationRequest {
  ResourceCollection: CostEstimationResourceCollectionFilter | undefined;
  ClientToken?: string;
}
export interface StartCostEstimationResponse {}
export interface UpdateEventSourcesConfigRequest {
  EventSources?: EventSourcesConfig;
}
export interface UpdateEventSourcesConfigResponse {}
export declare const UpdateResourceCollectionAction: {
  readonly ADD: "ADD";
  readonly REMOVE: "REMOVE";
};
export type UpdateResourceCollectionAction =
  (typeof UpdateResourceCollectionAction)[keyof typeof UpdateResourceCollectionAction];
export interface UpdateCloudFormationCollectionFilter {
  StackNames?: string[];
}
export interface UpdateTagCollectionFilter {
  AppBoundaryKey: string | undefined;
  TagValues: string[] | undefined;
}
export interface UpdateResourceCollectionFilter {
  CloudFormation?: UpdateCloudFormationCollectionFilter;
  Tags?: UpdateTagCollectionFilter[];
}
export interface UpdateResourceCollectionRequest {
  Action: UpdateResourceCollectionAction | undefined;
  ResourceCollection: UpdateResourceCollectionFilter | undefined;
}
export interface UpdateResourceCollectionResponse {}
export interface KMSServerSideEncryptionIntegrationConfig {
  KMSKeyId?: string;
  OptInStatus?: OptInStatus;
  Type?: ServerSideEncryptionType;
}
export interface LogsAnomalyDetectionIntegrationConfig {
  OptInStatus?: OptInStatus;
}
export interface OpsCenterIntegrationConfig {
  OptInStatus?: OptInStatus;
}
export interface UpdateServiceIntegrationConfig {
  OpsCenter?: OpsCenterIntegrationConfig;
  LogsAnomalyDetection?: LogsAnomalyDetectionIntegrationConfig;
  KMSServerSideEncryption?: KMSServerSideEncryptionIntegrationConfig;
}
export interface UpdateServiceIntegrationRequest {
  ServiceIntegration: UpdateServiceIntegrationConfig | undefined;
}
export interface UpdateServiceIntegrationResponse {}
