import { DLMServiceException as __BaseException } from "./DLMServiceException";
export const RetentionIntervalUnitValues = {
    DAYS: "DAYS",
    MONTHS: "MONTHS",
    WEEKS: "WEEKS",
    YEARS: "YEARS",
};
export const DefaultPolicyTypeValues = {
    INSTANCE: "INSTANCE",
    VOLUME: "VOLUME",
};
export const EventTypeValues = {
    SHARE_SNAPSHOT: "shareSnapshot",
};
export const EventSourceValues = {
    MANAGED_CWE: "MANAGED_CWE",
};
export const PolicyLanguageValues = {
    SIMPLIFIED: "SIMPLIFIED",
    STANDARD: "STANDARD",
};
export const PolicyTypeValues = {
    EBS_SNAPSHOT_MANAGEMENT: "EBS_SNAPSHOT_MANAGEMENT",
    EVENT_BASED_POLICY: "EVENT_BASED_POLICY",
    IMAGE_MANAGEMENT: "IMAGE_MANAGEMENT",
};
export const ResourceLocationValues = {
    CLOUD: "CLOUD",
    OUTPOST: "OUTPOST",
};
export const ResourceTypeValues = {
    INSTANCE: "INSTANCE",
    VOLUME: "VOLUME",
};
export const IntervalUnitValues = {
    HOURS: "HOURS",
};
export const LocationValues = {
    CLOUD: "CLOUD",
    OUTPOST_LOCAL: "OUTPOST_LOCAL",
};
export const ExecutionHandlerServiceValues = {
    AWS_SYSTEMS_MANAGER: "AWS_SYSTEMS_MANAGER",
};
export const StageValues = {
    POST: "POST",
    PRE: "PRE",
};
export const SettablePolicyStateValues = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.RequiredParameters = opts.RequiredParameters;
        this.MutuallyExclusiveParameters = opts.MutuallyExclusiveParameters;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.ResourceType = opts.ResourceType;
    }
}
export const DefaultPoliciesTypeValues = {
    ALL: "ALL",
    INSTANCE: "INSTANCE",
    VOLUME: "VOLUME",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.Code = opts.Code;
        this.ResourceType = opts.ResourceType;
        this.ResourceIds = opts.ResourceIds;
    }
}
export const GettablePolicyStateValues = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    ERROR: "ERROR",
};
