import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { InternalServiceException } from "../models/models_0";
import { SagemakerEdgeServiceException as __BaseException } from "../models/SagemakerEdgeServiceException";
export const se_GetDeploymentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/GetDeployments");
    let body;
    body = JSON.stringify(take(input, {
        DeviceFleetName: [],
        DeviceName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetDeviceRegistrationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/GetDeviceRegistration");
    let body;
    body = JSON.stringify(take(input, {
        DeviceFleetName: [],
        DeviceName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SendHeartbeatCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/SendHeartbeat");
    let body;
    body = JSON.stringify(take(input, {
        AgentMetrics: (_) => se_EdgeMetrics(_, context),
        AgentVersion: [],
        DeploymentResult: (_) => se_DeploymentResult(_, context),
        DeviceFleetName: [],
        DeviceName: [],
        Models: (_) => se_Models(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_GetDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Deployments: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDeviceRegistrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CacheTTL: __expectString,
        DeviceRegistration: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SendHeartbeatCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.sagemakeredge#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_InternalServiceExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_DeploymentResult = (input, context) => {
    return take(input, {
        DeploymentEndTime: (_) => Math.round(_.getTime() / 1000),
        DeploymentModels: _json,
        DeploymentName: [],
        DeploymentStartTime: (_) => Math.round(_.getTime() / 1000),
        DeploymentStatus: [],
        DeploymentStatusMessage: [],
    });
};
const se_EdgeMetric = (input, context) => {
    return take(input, {
        Dimension: [],
        MetricName: [],
        Timestamp: (_) => Math.round(_.getTime() / 1000),
        Value: __serializeFloat,
    });
};
const se_EdgeMetrics = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_EdgeMetric(entry, context);
    });
};
const se_Model = (input, context) => {
    return take(input, {
        LatestInference: (_) => Math.round(_.getTime() / 1000),
        LatestSampleTime: (_) => Math.round(_.getTime() / 1000),
        ModelMetrics: (_) => se_EdgeMetrics(_, context),
        ModelName: [],
        ModelVersion: [],
    });
};
const se_Models = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Model(entry, context);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
