"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ChecksumType: () => ChecksumType,
  DeploymentStatus: () => DeploymentStatus,
  DeploymentType: () => DeploymentType,
  FailureHandlingPolicy: () => FailureHandlingPolicy,
  GetDeploymentsCommand: () => GetDeploymentsCommand,
  GetDeviceRegistrationCommand: () => GetDeviceRegistrationCommand,
  InternalServiceException: () => InternalServiceException,
  ModelState: () => ModelState,
  SagemakerEdge: () => SagemakerEdge,
  SagemakerEdgeClient: () => SagemakerEdgeClient,
  SagemakerEdgeServiceException: () => SagemakerEdgeServiceException,
  SendHeartbeatCommand: () => SendHeartbeatCommand,
  __Client: () => import_smithy_client.Client
});
module.exports = __toCommonJS(src_exports);

// src/SagemakerEdgeClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "sagemaker"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/SagemakerEdgeClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/SagemakerEdgeClient.ts
var _SagemakerEdgeClient = class _SagemakerEdgeClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultSagemakerEdgeHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_SagemakerEdgeClient, "SagemakerEdgeClient");
var SagemakerEdgeClient = _SagemakerEdgeClient;

// src/SagemakerEdge.ts


// src/commands/GetDeploymentsCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts



// src/models/SagemakerEdgeServiceException.ts

var _SagemakerEdgeServiceException = class _SagemakerEdgeServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _SagemakerEdgeServiceException.prototype);
  }
};
__name(_SagemakerEdgeServiceException, "SagemakerEdgeServiceException");
var SagemakerEdgeServiceException = _SagemakerEdgeServiceException;

// src/models/models_0.ts
var ChecksumType = {
  Sha1: "SHA1"
};
var ModelState = {
  Deploy: "DEPLOY",
  Undeploy: "UNDEPLOY"
};
var FailureHandlingPolicy = {
  DoNothing: "DO_NOTHING",
  RollbackOnFailure: "ROLLBACK_ON_FAILURE"
};
var DeploymentType = {
  Model: "Model"
};
var _InternalServiceException = class _InternalServiceException extends SagemakerEdgeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServiceException",
      $fault: "client",
      ...opts
    });
    this.name = "InternalServiceException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InternalServiceException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InternalServiceException, "InternalServiceException");
var InternalServiceException = _InternalServiceException;
var DeploymentStatus = {
  Fail: "FAIL",
  Success: "SUCCESS"
};

// src/protocols/Aws_restJson1.ts
var se_GetDeploymentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/GetDeployments");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DeviceFleetName: [],
      DeviceName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetDeploymentsCommand");
var se_GetDeviceRegistrationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/GetDeviceRegistration");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DeviceFleetName: [],
      DeviceName: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetDeviceRegistrationCommand");
var se_SendHeartbeatCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/SendHeartbeat");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AgentMetrics: (_) => se_EdgeMetrics(_, context),
      AgentVersion: [],
      DeploymentResult: (_) => se_DeploymentResult(_, context),
      DeviceFleetName: [],
      DeviceName: [],
      Models: (_) => se_Models(_, context)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_SendHeartbeatCommand");
var de_GetDeploymentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Deployments: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetDeploymentsCommand");
var de_GetDeviceRegistrationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CacheTTL: import_smithy_client.expectString,
    DeviceRegistration: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetDeviceRegistrationCommand");
var de_SendHeartbeatCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_SendHeartbeatCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServiceException":
    case "com.amazonaws.sagemakeredge#InternalServiceException":
      throw await de_InternalServiceExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(SagemakerEdgeServiceException);
var de_InternalServiceExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServiceException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServiceExceptionRes");
var se_DeploymentResult = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    DeploymentEndTime: (_) => Math.round(_.getTime() / 1e3),
    DeploymentModels: import_smithy_client._json,
    DeploymentName: [],
    DeploymentStartTime: (_) => Math.round(_.getTime() / 1e3),
    DeploymentStatus: [],
    DeploymentStatusMessage: []
  });
}, "se_DeploymentResult");
var se_EdgeMetric = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    Dimension: [],
    MetricName: [],
    Timestamp: (_) => Math.round(_.getTime() / 1e3),
    Value: import_smithy_client.serializeFloat
  });
}, "se_EdgeMetric");
var se_EdgeMetrics = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_EdgeMetric(entry, context);
  });
}, "se_EdgeMetrics");
var se_Model = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    LatestInference: (_) => Math.round(_.getTime() / 1e3),
    LatestSampleTime: (_) => Math.round(_.getTime() / 1e3),
    ModelMetrics: (_) => se_EdgeMetrics(_, context),
    ModelName: [],
    ModelVersion: []
  });
}, "se_Model");
var se_Models = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Model(entry, context);
  });
}, "se_Models");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
}), "parseBody");
var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
}, "parseErrorBody");
var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
  const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
  const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  }, "sanitizeErrorCode");
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
}, "loadRestJsonErrorCode");

// src/commands/GetDeploymentsCommand.ts
var _GetDeploymentsCommand = class _GetDeploymentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerEdge", "GetDeployments", {}).n("SagemakerEdgeClient", "GetDeploymentsCommand").f(void 0, void 0).ser(se_GetDeploymentsCommand).de(de_GetDeploymentsCommand).build() {
};
__name(_GetDeploymentsCommand, "GetDeploymentsCommand");
var GetDeploymentsCommand = _GetDeploymentsCommand;

// src/commands/GetDeviceRegistrationCommand.ts




var _GetDeviceRegistrationCommand = class _GetDeviceRegistrationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerEdge", "GetDeviceRegistration", {}).n("SagemakerEdgeClient", "GetDeviceRegistrationCommand").f(void 0, void 0).ser(se_GetDeviceRegistrationCommand).de(de_GetDeviceRegistrationCommand).build() {
};
__name(_GetDeviceRegistrationCommand, "GetDeviceRegistrationCommand");
var GetDeviceRegistrationCommand = _GetDeviceRegistrationCommand;

// src/commands/SendHeartbeatCommand.ts




var _SendHeartbeatCommand = class _SendHeartbeatCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerEdge", "SendHeartbeat", {}).n("SagemakerEdgeClient", "SendHeartbeatCommand").f(void 0, void 0).ser(se_SendHeartbeatCommand).de(de_SendHeartbeatCommand).build() {
};
__name(_SendHeartbeatCommand, "SendHeartbeatCommand");
var SendHeartbeatCommand = _SendHeartbeatCommand;

// src/SagemakerEdge.ts
var commands = {
  GetDeploymentsCommand,
  GetDeviceRegistrationCommand,
  SendHeartbeatCommand
};
var _SagemakerEdge = class _SagemakerEdge extends SagemakerEdgeClient {
};
__name(_SagemakerEdge, "SagemakerEdge");
var SagemakerEdge = _SagemakerEdge;
(0, import_smithy_client.createAggregatedClient)(commands, SagemakerEdge);

// src/index.ts
var import_util_endpoints = require("@aws-sdk/util-endpoints");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  SagemakerEdgeServiceException,
  __Client,
  SagemakerEdgeClient,
  SagemakerEdge,
  $Command,
  GetDeploymentsCommand,
  GetDeviceRegistrationCommand,
  SendHeartbeatCommand,
  ChecksumType,
  ModelState,
  FailureHandlingPolicy,
  DeploymentType,
  InternalServiceException,
  DeploymentStatus
});

