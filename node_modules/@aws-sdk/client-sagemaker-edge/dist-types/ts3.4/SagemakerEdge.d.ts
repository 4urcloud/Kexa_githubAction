import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  GetDeploymentsCommandInput,
  GetDeploymentsCommandOutput,
} from "./commands/GetDeploymentsCommand";
import {
  GetDeviceRegistrationCommandInput,
  GetDeviceRegistrationCommandOutput,
} from "./commands/GetDeviceRegistrationCommand";
import {
  SendHeartbeatCommandInput,
  SendHeartbeatCommandOutput,
} from "./commands/SendHeartbeatCommand";
import { SagemakerEdgeClient } from "./SagemakerEdgeClient";
export interface SagemakerEdge {
  getDeployments(
    args: GetDeploymentsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetDeploymentsCommandOutput>;
  getDeployments(
    args: GetDeploymentsCommandInput,
    cb: (err: any, data?: GetDeploymentsCommandOutput) => void
  ): void;
  getDeployments(
    args: GetDeploymentsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetDeploymentsCommandOutput) => void
  ): void;
  getDeviceRegistration(
    args: GetDeviceRegistrationCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetDeviceRegistrationCommandOutput>;
  getDeviceRegistration(
    args: GetDeviceRegistrationCommandInput,
    cb: (err: any, data?: GetDeviceRegistrationCommandOutput) => void
  ): void;
  getDeviceRegistration(
    args: GetDeviceRegistrationCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetDeviceRegistrationCommandOutput) => void
  ): void;
  sendHeartbeat(
    args: SendHeartbeatCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SendHeartbeatCommandOutput>;
  sendHeartbeat(
    args: SendHeartbeatCommandInput,
    cb: (err: any, data?: SendHeartbeatCommandOutput) => void
  ): void;
  sendHeartbeat(
    args: SendHeartbeatCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: SendHeartbeatCommandOutput) => void
  ): void;
}
export declare class SagemakerEdge
  extends SagemakerEdgeClient
  implements SagemakerEdge {}
