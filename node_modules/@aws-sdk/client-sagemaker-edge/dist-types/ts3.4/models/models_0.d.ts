import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { SagemakerEdgeServiceException as __BaseException } from "./SagemakerEdgeServiceException";
export interface GetDeploymentsRequest {
  DeviceName: string | undefined;
  DeviceFleetName: string | undefined;
}
export declare const ChecksumType: {
  readonly Sha1: "SHA1";
};
export type ChecksumType = (typeof ChecksumType)[keyof typeof ChecksumType];
export interface Checksum {
  Type?: ChecksumType;
  Sum?: string;
}
export declare const ModelState: {
  readonly Deploy: "DEPLOY";
  readonly Undeploy: "UNDEPLOY";
};
export type ModelState = (typeof ModelState)[keyof typeof ModelState];
export interface Definition {
  ModelHandle?: string;
  S3Url?: string;
  Checksum?: Checksum;
  State?: ModelState;
}
export declare const FailureHandlingPolicy: {
  readonly DoNothing: "DO_NOTHING";
  readonly RollbackOnFailure: "ROLLBACK_ON_FAILURE";
};
export type FailureHandlingPolicy =
  (typeof FailureHandlingPolicy)[keyof typeof FailureHandlingPolicy];
export declare const DeploymentType: {
  readonly Model: "Model";
};
export type DeploymentType =
  (typeof DeploymentType)[keyof typeof DeploymentType];
export interface EdgeDeployment {
  DeploymentName?: string;
  Type?: DeploymentType;
  FailureHandlingPolicy?: FailureHandlingPolicy;
  Definitions?: Definition[];
}
export interface GetDeploymentsResult {
  Deployments?: EdgeDeployment[];
}
export declare class InternalServiceException extends __BaseException {
  readonly name: "InternalServiceException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServiceException, __BaseException>
  );
}
export interface GetDeviceRegistrationRequest {
  DeviceName: string | undefined;
  DeviceFleetName: string | undefined;
}
export interface GetDeviceRegistrationResult {
  DeviceRegistration?: string;
  CacheTTL?: string;
}
export interface EdgeMetric {
  Dimension?: string;
  MetricName?: string;
  Value?: number;
  Timestamp?: Date;
}
export declare const DeploymentStatus: {
  readonly Fail: "FAIL";
  readonly Success: "SUCCESS";
};
export type DeploymentStatus =
  (typeof DeploymentStatus)[keyof typeof DeploymentStatus];
export interface DeploymentModel {
  ModelHandle?: string;
  ModelName?: string;
  ModelVersion?: string;
  DesiredState?: ModelState;
  State?: ModelState;
  Status?: DeploymentStatus;
  StatusReason?: string;
  RollbackFailureReason?: string;
}
export interface DeploymentResult {
  DeploymentName?: string;
  DeploymentStatus?: string;
  DeploymentStatusMessage?: string;
  DeploymentStartTime?: Date;
  DeploymentEndTime?: Date;
  DeploymentModels?: DeploymentModel[];
}
export interface Model {
  ModelName?: string;
  ModelVersion?: string;
  LatestSampleTime?: Date;
  LatestInference?: Date;
  ModelMetrics?: EdgeMetric[];
}
export interface SendHeartbeatRequest {
  AgentMetrics?: EdgeMetric[];
  Models?: Model[];
  AgentVersion: string | undefined;
  DeviceName: string | undefined;
  DeviceFleetName: string | undefined;
  DeploymentResult?: DeploymentResult;
}
