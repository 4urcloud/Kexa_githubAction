import { CloudSearchServiceException as __BaseException } from "./CloudSearchServiceException";
export class BaseException extends __BaseException {
    constructor(opts) {
        super({
            name: "BaseException",
            $fault: "client",
            ...opts,
        });
        this.name = "BaseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BaseException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
export class InternalException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
export const AlgorithmicStemming = {
    full: "full",
    light: "light",
    minimal: "minimal",
    none: "none",
};
export const AnalysisSchemeLanguage = {
    ar: "ar",
    bg: "bg",
    ca: "ca",
    cs: "cs",
    da: "da",
    de: "de",
    el: "el",
    en: "en",
    es: "es",
    eu: "eu",
    fa: "fa",
    fi: "fi",
    fr: "fr",
    ga: "ga",
    gl: "gl",
    he: "he",
    hi: "hi",
    hu: "hu",
    hy: "hy",
    id: "id",
    it: "it",
    ja: "ja",
    ko: "ko",
    lv: "lv",
    mul: "mul",
    nl: "nl",
    no: "no",
    pt: "pt",
    ro: "ro",
    ru: "ru",
    sv: "sv",
    th: "th",
    tr: "tr",
    zh_Hans: "zh-Hans",
    zh_Hant: "zh-Hant",
};
export const OptionState = {
    Active: "Active",
    FailedToValidate: "FailedToValidate",
    Processing: "Processing",
    RequiresIndexDocuments: "RequiresIndexDocuments",
};
export class InvalidTypeException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTypeException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
export const IndexFieldType = {
    date: "date",
    date_array: "date-array",
    double: "double",
    double_array: "double-array",
    int: "int",
    int_array: "int-array",
    latlon: "latlon",
    literal: "literal",
    literal_array: "literal-array",
    text: "text",
    text_array: "text-array",
};
export const SuggesterFuzzyMatching = {
    high: "high",
    low: "low",
    none: "none",
};
export class DisabledOperationException extends __BaseException {
    constructor(opts) {
        super({
            name: "DisabledOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "DisabledOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DisabledOperationException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
    }
}
export const TLSSecurityPolicy = {
    POLICY_MIN_TLS_1_0_2019_07: "Policy-Min-TLS-1-0-2019-07",
    POLICY_MIN_TLS_1_2_2019_07: "Policy-Min-TLS-1-2-2019-07",
};
export const PartitionInstanceType = {
    search_2xlarge: "search.2xlarge",
    search_large: "search.large",
    search_m1_large: "search.m1.large",
    search_m1_small: "search.m1.small",
    search_m2_2xlarge: "search.m2.2xlarge",
    search_m2_xlarge: "search.m2.xlarge",
    search_m3_2xlarge: "search.m3.2xlarge",
    search_m3_large: "search.m3.large",
    search_m3_medium: "search.m3.medium",
    search_m3_xlarge: "search.m3.xlarge",
    search_medium: "search.medium",
    search_previousgeneration_2xlarge: "search.previousgeneration.2xlarge",
    search_previousgeneration_large: "search.previousgeneration.large",
    search_previousgeneration_small: "search.previousgeneration.small",
    search_previousgeneration_xlarge: "search.previousgeneration.xlarge",
    search_small: "search.small",
    search_xlarge: "search.xlarge",
};
