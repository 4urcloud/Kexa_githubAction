import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { FSxServiceException as __BaseException } from "./FSxServiceException";
export const ActiveDirectoryErrorType = {
    DOMAIN_NOT_FOUND: "DOMAIN_NOT_FOUND",
    INCOMPATIBLE_DOMAIN_MODE: "INCOMPATIBLE_DOMAIN_MODE",
    INVALID_DOMAIN_STAGE: "INVALID_DOMAIN_STAGE",
    WRONG_VPC: "WRONG_VPC",
};
export class ActiveDirectoryError extends __BaseException {
    constructor(opts) {
        super({
            name: "ActiveDirectoryError",
            $fault: "client",
            ...opts,
        });
        this.name = "ActiveDirectoryError";
        this.$fault = "client";
        Object.setPrototypeOf(this, ActiveDirectoryError.prototype);
        this.ActiveDirectoryId = opts.ActiveDirectoryId;
        this.Type = opts.Type;
        this.Message = opts.Message;
    }
}
export const AdministrativeActionType = {
    FILE_SYSTEM_ALIAS_ASSOCIATION: "FILE_SYSTEM_ALIAS_ASSOCIATION",
    FILE_SYSTEM_ALIAS_DISASSOCIATION: "FILE_SYSTEM_ALIAS_DISASSOCIATION",
    FILE_SYSTEM_UPDATE: "FILE_SYSTEM_UPDATE",
    IOPS_OPTIMIZATION: "IOPS_OPTIMIZATION",
    MISCONFIGURED_STATE_RECOVERY: "MISCONFIGURED_STATE_RECOVERY",
    RELEASE_NFS_V3_LOCKS: "RELEASE_NFS_V3_LOCKS",
    SNAPSHOT_UPDATE: "SNAPSHOT_UPDATE",
    STORAGE_OPTIMIZATION: "STORAGE_OPTIMIZATION",
    STORAGE_TYPE_OPTIMIZATION: "STORAGE_TYPE_OPTIMIZATION",
    THROUGHPUT_OPTIMIZATION: "THROUGHPUT_OPTIMIZATION",
    VOLUME_INITIALIZE_WITH_SNAPSHOT: "VOLUME_INITIALIZE_WITH_SNAPSHOT",
    VOLUME_RESTORE: "VOLUME_RESTORE",
    VOLUME_UPDATE: "VOLUME_UPDATE",
    VOLUME_UPDATE_WITH_SNAPSHOT: "VOLUME_UPDATE_WITH_SNAPSHOT",
};
export const Status = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
    UPDATED_OPTIMIZING: "UPDATED_OPTIMIZING",
};
export const FileSystemType = {
    LUSTRE: "LUSTRE",
    ONTAP: "ONTAP",
    OPENZFS: "OPENZFS",
    WINDOWS: "WINDOWS",
};
export const FileSystemLifecycle = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    MISCONFIGURED: "MISCONFIGURED",
    MISCONFIGURED_UNAVAILABLE: "MISCONFIGURED_UNAVAILABLE",
    UPDATING: "UPDATING",
};
export const DataCompressionType = {
    LZ4: "LZ4",
    NONE: "NONE",
};
export const AutoImportPolicyType = {
    NEW: "NEW",
    NEW_CHANGED: "NEW_CHANGED",
    NEW_CHANGED_DELETED: "NEW_CHANGED_DELETED",
    NONE: "NONE",
};
export const DataRepositoryLifecycle = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    MISCONFIGURED: "MISCONFIGURED",
    UPDATING: "UPDATING",
};
export const LustreDeploymentType = {
    PERSISTENT_1: "PERSISTENT_1",
    PERSISTENT_2: "PERSISTENT_2",
    SCRATCH_1: "SCRATCH_1",
    SCRATCH_2: "SCRATCH_2",
};
export const DriveCacheType = {
    NONE: "NONE",
    READ: "READ",
};
export const LustreAccessAuditLogLevel = {
    DISABLED: "DISABLED",
    ERROR_ONLY: "ERROR_ONLY",
    WARN_ERROR: "WARN_ERROR",
    WARN_ONLY: "WARN_ONLY",
};
export const OntapDeploymentType = {
    MULTI_AZ_1: "MULTI_AZ_1",
    SINGLE_AZ_1: "SINGLE_AZ_1",
    SINGLE_AZ_2: "SINGLE_AZ_2",
};
export const DiskIopsConfigurationMode = {
    AUTOMATIC: "AUTOMATIC",
    USER_PROVISIONED: "USER_PROVISIONED",
};
export const OpenZFSDeploymentType = {
    MULTI_AZ_1: "MULTI_AZ_1",
    SINGLE_AZ_1: "SINGLE_AZ_1",
    SINGLE_AZ_2: "SINGLE_AZ_2",
};
export const StorageType = {
    HDD: "HDD",
    SSD: "SSD",
};
export const AliasLifecycle = {
    AVAILABLE: "AVAILABLE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
};
export const WindowsAccessAuditLogLevel = {
    DISABLED: "DISABLED",
    FAILURE_ONLY: "FAILURE_ONLY",
    SUCCESS_AND_FAILURE: "SUCCESS_AND_FAILURE",
    SUCCESS_ONLY: "SUCCESS_ONLY",
};
export const WindowsDeploymentType = {
    MULTI_AZ_1: "MULTI_AZ_1",
    SINGLE_AZ_1: "SINGLE_AZ_1",
    SINGLE_AZ_2: "SINGLE_AZ_2",
};
export const FileSystemMaintenanceOperation = {
    BACKING_UP: "BACKING_UP",
    PATCHING: "PATCHING",
};
export const SnapshotLifecycle = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    PENDING: "PENDING",
};
export const VolumeLifecycle = {
    AVAILABLE: "AVAILABLE",
    CREATED: "CREATED",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    MISCONFIGURED: "MISCONFIGURED",
    PENDING: "PENDING",
};
export const FlexCacheEndpointType = {
    CACHE: "CACHE",
    NONE: "NONE",
    ORIGIN: "ORIGIN",
};
export const OntapVolumeType = {
    DP: "DP",
    LS: "LS",
    RW: "RW",
};
export const SecurityStyle = {
    MIXED: "MIXED",
    NTFS: "NTFS",
    UNIX: "UNIX",
};
export const AutocommitPeriodType = {
    DAYS: "DAYS",
    HOURS: "HOURS",
    MINUTES: "MINUTES",
    MONTHS: "MONTHS",
    NONE: "NONE",
    YEARS: "YEARS",
};
export const PrivilegedDelete = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
    PERMANENTLY_DISABLED: "PERMANENTLY_DISABLED",
};
export const RetentionPeriodType = {
    DAYS: "DAYS",
    HOURS: "HOURS",
    INFINITE: "INFINITE",
    MINUTES: "MINUTES",
    MONTHS: "MONTHS",
    SECONDS: "SECONDS",
    UNSPECIFIED: "UNSPECIFIED",
    YEARS: "YEARS",
};
export const SnaplockType = {
    COMPLIANCE: "COMPLIANCE",
    ENTERPRISE: "ENTERPRISE",
};
export const TieringPolicyName = {
    ALL: "ALL",
    AUTO: "AUTO",
    NONE: "NONE",
    SNAPSHOT_ONLY: "SNAPSHOT_ONLY",
};
export const VolumeStyle = {
    FLEXGROUP: "FLEXGROUP",
    FLEXVOL: "FLEXVOL",
};
export const OpenZFSCopyStrategy = {
    CLONE: "CLONE",
    FULL_COPY: "FULL_COPY",
    INCREMENTAL_COPY: "INCREMENTAL_COPY",
};
export const OpenZFSDataCompressionType = {
    LZ4: "LZ4",
    NONE: "NONE",
    ZSTD: "ZSTD",
};
export const OpenZFSQuotaType = {
    GROUP: "GROUP",
    USER: "USER",
};
export const VolumeType = {
    ONTAP: "ONTAP",
    OPENZFS: "OPENZFS",
};
export class BadRequest extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequest",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequest";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequest.prototype);
        this.Message = opts.Message;
    }
}
export class FileSystemNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "FileSystemNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "FileSystemNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileSystemNotFound.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
    }
}
export const EventType = {
    CHANGED: "CHANGED",
    DELETED: "DELETED",
    NEW: "NEW",
};
export const DataRepositoryTaskLifecycle = {
    CANCELED: "CANCELED",
    CANCELING: "CANCELING",
    EXECUTING: "EXECUTING",
    FAILED: "FAILED",
    PENDING: "PENDING",
    SUCCEEDED: "SUCCEEDED",
};
export class DataRepositoryTaskEnded extends __BaseException {
    constructor(opts) {
        super({
            name: "DataRepositoryTaskEnded",
            $fault: "client",
            ...opts,
        });
        this.name = "DataRepositoryTaskEnded";
        this.$fault = "client";
        Object.setPrototypeOf(this, DataRepositoryTaskEnded.prototype);
        this.Message = opts.Message;
    }
}
export class DataRepositoryTaskNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "DataRepositoryTaskNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "DataRepositoryTaskNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, DataRepositoryTaskNotFound.prototype);
        this.Message = opts.Message;
    }
}
export class UnsupportedOperation extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedOperation",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedOperation";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedOperation.prototype);
        this.Message = opts.Message;
    }
}
export class BackupNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "BackupNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "BackupNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupNotFound.prototype);
        this.Message = opts.Message;
    }
}
export const BackupLifecycle = {
    AVAILABLE: "AVAILABLE",
    COPYING: "COPYING",
    CREATING: "CREATING",
    DELETED: "DELETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    TRANSFERRING: "TRANSFERRING",
};
export const ResourceType = {
    FILE_SYSTEM: "FILE_SYSTEM",
    VOLUME: "VOLUME",
};
export const BackupType = {
    AUTOMATIC: "AUTOMATIC",
    AWS_BACKUP: "AWS_BACKUP",
    USER_INITIATED: "USER_INITIATED",
};
export class IncompatibleParameterError extends __BaseException {
    constructor(opts) {
        super({
            name: "IncompatibleParameterError",
            $fault: "client",
            ...opts,
        });
        this.name = "IncompatibleParameterError";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatibleParameterError.prototype);
        this.Parameter = opts.Parameter;
        this.Message = opts.Message;
    }
}
export class IncompatibleRegionForMultiAZ extends __BaseException {
    constructor(opts) {
        super({
            name: "IncompatibleRegionForMultiAZ",
            $fault: "client",
            ...opts,
        });
        this.name = "IncompatibleRegionForMultiAZ";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncompatibleRegionForMultiAZ.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidDestinationKmsKey extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidDestinationKmsKey",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDestinationKmsKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDestinationKmsKey.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRegion extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRegion",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRegion";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRegion.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidSourceKmsKey extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidSourceKmsKey",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidSourceKmsKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidSourceKmsKey.prototype);
        this.Message = opts.Message;
    }
}
export const ServiceLimit = {
    FILE_CACHE_COUNT: "FILE_CACHE_COUNT",
    FILE_SYSTEM_COUNT: "FILE_SYSTEM_COUNT",
    STORAGE_VIRTUAL_MACHINES_PER_FILE_SYSTEM: "STORAGE_VIRTUAL_MACHINES_PER_FILE_SYSTEM",
    TOTAL_IN_PROGRESS_COPY_BACKUPS: "TOTAL_IN_PROGRESS_COPY_BACKUPS",
    TOTAL_SSD_IOPS: "TOTAL_SSD_IOPS",
    TOTAL_STORAGE: "TOTAL_STORAGE",
    TOTAL_THROUGHPUT_CAPACITY: "TOTAL_THROUGHPUT_CAPACITY",
    TOTAL_USER_INITIATED_BACKUPS: "TOTAL_USER_INITIATED_BACKUPS",
    TOTAL_USER_TAGS: "TOTAL_USER_TAGS",
    VOLUMES_PER_FILE_SYSTEM: "VOLUMES_PER_FILE_SYSTEM",
};
export class ServiceLimitExceeded extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceLimitExceeded",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceLimitExceeded.prototype);
        this.Limit = opts.Limit;
        this.Message = opts.Message;
    }
}
export class SourceBackupUnavailable extends __BaseException {
    constructor(opts) {
        super({
            name: "SourceBackupUnavailable",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceBackupUnavailable";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceBackupUnavailable.prototype);
        this.Message = opts.Message;
        this.BackupId = opts.BackupId;
    }
}
export const UpdateOpenZFSVolumeOption = {
    DELETE_CLONED_VOLUMES: "DELETE_CLONED_VOLUMES",
    DELETE_INTERMEDIATE_DATA: "DELETE_INTERMEDIATE_DATA",
    DELETE_INTERMEDIATE_SNAPSHOTS: "DELETE_INTERMEDIATE_SNAPSHOTS",
};
export class BackupInProgress extends __BaseException {
    constructor(opts) {
        super({
            name: "BackupInProgress",
            $fault: "client",
            ...opts,
        });
        this.name = "BackupInProgress";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupInProgress.prototype);
        this.Message = opts.Message;
    }
}
export class VolumeNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "VolumeNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "VolumeNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, VolumeNotFound.prototype);
        this.Message = opts.Message;
    }
}
export const NfsVersion = {
    NFS3: "NFS3",
};
export const Unit = {
    DAYS: "DAYS",
};
export const ReportFormat = {
    REPORT_CSV_20191124: "REPORT_CSV_20191124",
};
export const ReportScope = {
    FAILED_FILES_ONLY: "FAILED_FILES_ONLY",
};
export const DataRepositoryTaskType = {
    AUTO_TRIGGERED_EVICTION: "AUTO_RELEASE_DATA",
    EVICTION: "RELEASE_DATA_FROM_FILESYSTEM",
    EXPORT: "EXPORT_TO_REPOSITORY",
    IMPORT: "IMPORT_METADATA_FROM_REPOSITORY",
};
export class DataRepositoryTaskExecuting extends __BaseException {
    constructor(opts) {
        super({
            name: "DataRepositoryTaskExecuting",
            $fault: "client",
            ...opts,
        });
        this.name = "DataRepositoryTaskExecuting";
        this.$fault = "client";
        Object.setPrototypeOf(this, DataRepositoryTaskExecuting.prototype);
        this.Message = opts.Message;
    }
}
export const FileCacheType = {
    LUSTRE: "LUSTRE",
};
export const FileCacheLustreDeploymentType = {
    CACHE_1: "CACHE_1",
};
export const FileCacheLifecycle = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
export class InvalidNetworkSettings extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNetworkSettings",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNetworkSettings";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNetworkSettings.prototype);
        this.Message = opts.Message;
        this.InvalidSubnetId = opts.InvalidSubnetId;
        this.InvalidSecurityGroupId = opts.InvalidSecurityGroupId;
        this.InvalidRouteTableId = opts.InvalidRouteTableId;
    }
}
export class InvalidPerUnitStorageThroughput extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidPerUnitStorageThroughput",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPerUnitStorageThroughput";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPerUnitStorageThroughput.prototype);
        this.Message = opts.Message;
    }
}
export class MissingFileCacheConfiguration extends __BaseException {
    constructor(opts) {
        super({
            name: "MissingFileCacheConfiguration",
            $fault: "client",
            ...opts,
        });
        this.name = "MissingFileCacheConfiguration";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingFileCacheConfiguration.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidExportPath extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidExportPath",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidExportPath";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportPath.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidImportPath extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidImportPath",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidImportPath";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidImportPath.prototype);
        this.Message = opts.Message;
    }
}
export class MissingFileSystemConfiguration extends __BaseException {
    constructor(opts) {
        super({
            name: "MissingFileSystemConfiguration",
            $fault: "client",
            ...opts,
        });
        this.name = "MissingFileSystemConfiguration";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingFileSystemConfiguration.prototype);
        this.Message = opts.Message;
    }
}
export const StorageVirtualMachineRootVolumeSecurityStyle = {
    MIXED: "MIXED",
    NTFS: "NTFS",
    UNIX: "UNIX",
};
export const StorageVirtualMachineLifecycle = {
    CREATED: "CREATED",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    MISCONFIGURED: "MISCONFIGURED",
    PENDING: "PENDING",
};
export const StorageVirtualMachineSubtype = {
    DEFAULT: "DEFAULT",
    DP_DESTINATION: "DP_DESTINATION",
    SYNC_DESTINATION: "SYNC_DESTINATION",
    SYNC_SOURCE: "SYNC_SOURCE",
};
export const InputOntapVolumeType = {
    DP: "DP",
    RW: "RW",
};
export class MissingVolumeConfiguration extends __BaseException {
    constructor(opts) {
        super({
            name: "MissingVolumeConfiguration",
            $fault: "client",
            ...opts,
        });
        this.name = "MissingVolumeConfiguration";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingVolumeConfiguration.prototype);
        this.Message = opts.Message;
    }
}
export class StorageVirtualMachineNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "StorageVirtualMachineNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "StorageVirtualMachineNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, StorageVirtualMachineNotFound.prototype);
        this.Message = opts.Message;
    }
}
export class BackupBeingCopied extends __BaseException {
    constructor(opts) {
        super({
            name: "BackupBeingCopied",
            $fault: "client",
            ...opts,
        });
        this.name = "BackupBeingCopied";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupBeingCopied.prototype);
        this.Message = opts.Message;
        this.BackupId = opts.BackupId;
    }
}
export class BackupRestoring extends __BaseException {
    constructor(opts) {
        super({
            name: "BackupRestoring",
            $fault: "client",
            ...opts,
        });
        this.name = "BackupRestoring";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupRestoring.prototype);
        this.Message = opts.Message;
        this.FileSystemId = opts.FileSystemId;
    }
}
export class DataRepositoryAssociationNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "DataRepositoryAssociationNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "DataRepositoryAssociationNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, DataRepositoryAssociationNotFound.prototype);
        this.Message = opts.Message;
    }
}
export class FileCacheNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "FileCacheNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "FileCacheNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, FileCacheNotFound.prototype);
        this.Message = opts.Message;
    }
}
export const DeleteFileSystemOpenZFSOption = {
    DELETE_CHILD_VOLUMES_AND_SNAPSHOTS: "DELETE_CHILD_VOLUMES_AND_SNAPSHOTS",
};
export class SnapshotNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "SnapshotNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "SnapshotNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, SnapshotNotFound.prototype);
        this.Message = opts.Message;
    }
}
export const DeleteOpenZFSVolumeOption = {
    DELETE_CHILD_VOLUMES_AND_SNAPSHOTS: "DELETE_CHILD_VOLUMES_AND_SNAPSHOTS",
};
export const FilterName = {
    BACKUP_TYPE: "backup-type",
    DATA_REPOSITORY_TYPE: "data-repository-type",
    FILE_CACHE_ID: "file-cache-id",
    FILE_CACHE_TYPE: "file-cache-type",
    FILE_SYSTEM_ID: "file-system-id",
    FILE_SYSTEM_TYPE: "file-system-type",
    VOLUME_ID: "volume-id",
};
export class InvalidDataRepositoryType extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidDataRepositoryType",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDataRepositoryType";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDataRepositoryType.prototype);
        this.Message = opts.Message;
    }
}
export const DataRepositoryTaskFilterName = {
    DATA_REPO_ASSOCIATION_ID: "data-repository-association-id",
    FILE_CACHE_ID: "file-cache-id",
    FILE_SYSTEM_ID: "file-system-id",
    TASK_LIFECYCLE: "task-lifecycle",
};
export const SnapshotFilterName = {
    FILE_SYSTEM_ID: "file-system-id",
    VOLUME_ID: "volume-id",
};
export const StorageVirtualMachineFilterName = {
    FILE_SYSTEM_ID: "file-system-id",
};
export const VolumeFilterName = {
    FILE_SYSTEM_ID: "file-system-id",
    STORAGE_VIRTUAL_MACHINE_ID: "storage-virtual-machine-id",
};
export class NotServiceResourceError extends __BaseException {
    constructor(opts) {
        super({
            name: "NotServiceResourceError",
            $fault: "client",
            ...opts,
        });
        this.name = "NotServiceResourceError";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotServiceResourceError.prototype);
        this.ResourceARN = opts.ResourceARN;
        this.Message = opts.Message;
    }
}
export class ResourceDoesNotSupportTagging extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceDoesNotSupportTagging",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceDoesNotSupportTagging";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceDoesNotSupportTagging.prototype);
        this.ResourceARN = opts.ResourceARN;
        this.Message = opts.Message;
    }
}
export class ResourceNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFound.prototype);
        this.ResourceARN = opts.ResourceARN;
        this.Message = opts.Message;
    }
}
export const RestoreOpenZFSVolumeOption = {
    DELETE_CLONED_VOLUMES: "DELETE_CLONED_VOLUMES",
    DELETE_INTERMEDIATE_SNAPSHOTS: "DELETE_INTERMEDIATE_SNAPSHOTS",
};
export const OntapFileSystemConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FsxAdminPassword && { FsxAdminPassword: SENSITIVE_STRING }),
});
export const CreateFileSystemOntapConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FsxAdminPassword && { FsxAdminPassword: SENSITIVE_STRING }),
});
export const SelfManagedActiveDirectoryConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: SENSITIVE_STRING }),
});
export const CreateFileSystemWindowsConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SelfManagedActiveDirectoryConfiguration && {
        SelfManagedActiveDirectoryConfiguration: SelfManagedActiveDirectoryConfigurationFilterSensitiveLog(obj.SelfManagedActiveDirectoryConfiguration),
    }),
});
export const CreateFileSystemRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.WindowsConfiguration && {
        WindowsConfiguration: CreateFileSystemWindowsConfigurationFilterSensitiveLog(obj.WindowsConfiguration),
    }),
    ...(obj.OntapConfiguration && {
        OntapConfiguration: CreateFileSystemOntapConfigurationFilterSensitiveLog(obj.OntapConfiguration),
    }),
});
export const CreateFileSystemFromBackupRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.WindowsConfiguration && {
        WindowsConfiguration: CreateFileSystemWindowsConfigurationFilterSensitiveLog(obj.WindowsConfiguration),
    }),
});
export const CreateSvmActiveDirectoryConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SelfManagedActiveDirectoryConfiguration && {
        SelfManagedActiveDirectoryConfiguration: SelfManagedActiveDirectoryConfigurationFilterSensitiveLog(obj.SelfManagedActiveDirectoryConfiguration),
    }),
});
export const CreateStorageVirtualMachineRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ActiveDirectoryConfiguration && {
        ActiveDirectoryConfiguration: CreateSvmActiveDirectoryConfigurationFilterSensitiveLog(obj.ActiveDirectoryConfiguration),
    }),
    ...(obj.SvmAdminPassword && { SvmAdminPassword: SENSITIVE_STRING }),
});
export const UpdateFileSystemOntapConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FsxAdminPassword && { FsxAdminPassword: SENSITIVE_STRING }),
});
export const SelfManagedActiveDirectoryConfigurationUpdatesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: SENSITIVE_STRING }),
});
export const UpdateFileSystemWindowsConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SelfManagedActiveDirectoryConfiguration && {
        SelfManagedActiveDirectoryConfiguration: SelfManagedActiveDirectoryConfigurationUpdatesFilterSensitiveLog(obj.SelfManagedActiveDirectoryConfiguration),
    }),
});
export const UpdateFileSystemRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.WindowsConfiguration && {
        WindowsConfiguration: UpdateFileSystemWindowsConfigurationFilterSensitiveLog(obj.WindowsConfiguration),
    }),
    ...(obj.OntapConfiguration && {
        OntapConfiguration: UpdateFileSystemOntapConfigurationFilterSensitiveLog(obj.OntapConfiguration),
    }),
});
export const UpdateSvmActiveDirectoryConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SelfManagedActiveDirectoryConfiguration && {
        SelfManagedActiveDirectoryConfiguration: SelfManagedActiveDirectoryConfigurationUpdatesFilterSensitiveLog(obj.SelfManagedActiveDirectoryConfiguration),
    }),
});
export const UpdateStorageVirtualMachineRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ActiveDirectoryConfiguration && {
        ActiveDirectoryConfiguration: UpdateSvmActiveDirectoryConfigurationFilterSensitiveLog(obj.ActiveDirectoryConfiguration),
    }),
    ...(obj.SvmAdminPassword && { SvmAdminPassword: SENSITIVE_STRING }),
});
export const AdministrativeActionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TargetFileSystemValues && {
        TargetFileSystemValues: FileSystemFilterSensitiveLog(obj.TargetFileSystemValues),
    }),
});
export const FileSystemFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AdministrativeActions && {
        AdministrativeActions: obj.AdministrativeActions.map((item) => AdministrativeActionFilterSensitiveLog(item)),
    }),
    ...(obj.OntapConfiguration && {
        OntapConfiguration: OntapFileSystemConfigurationFilterSensitiveLog(obj.OntapConfiguration),
    }),
});
export const SnapshotFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AdministrativeActions && {
        AdministrativeActions: obj.AdministrativeActions.map((item) => AdministrativeActionFilterSensitiveLog(item)),
    }),
});
export const VolumeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AdministrativeActions && {
        AdministrativeActions: obj.AdministrativeActions.map((item) => AdministrativeActionFilterSensitiveLog(item)),
    }),
});
export const CopySnapshotAndUpdateVolumeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AdministrativeActions && {
        AdministrativeActions: obj.AdministrativeActions.map((item) => AdministrativeActionFilterSensitiveLog(item)),
    }),
});
export const RestoreVolumeFromSnapshotResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AdministrativeActions && {
        AdministrativeActions: obj.AdministrativeActions.map((item) => AdministrativeActionFilterSensitiveLog(item)),
    }),
});
export const CreateFileSystemFromBackupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FileSystem && { FileSystem: FileSystemFilterSensitiveLog(obj.FileSystem) }),
});
export const CreateFileSystemResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FileSystem && { FileSystem: FileSystemFilterSensitiveLog(obj.FileSystem) }),
});
export const CreateSnapshotResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateVolumeFromBackupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateVolumeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ReleaseFileSystemNfsV3LocksResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FileSystem && { FileSystem: FileSystemFilterSensitiveLog(obj.FileSystem) }),
});
export const StartMisconfiguredStateRecoveryResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FileSystem && { FileSystem: FileSystemFilterSensitiveLog(obj.FileSystem) }),
});
export const UpdateFileSystemResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FileSystem && { FileSystem: FileSystemFilterSensitiveLog(obj.FileSystem) }),
});
export const UpdateSnapshotResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UpdateVolumeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeFileSystemsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FileSystems && { FileSystems: obj.FileSystems.map((item) => FileSystemFilterSensitiveLog(item)) }),
});
export const DescribeSnapshotsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeVolumesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BackupFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FileSystem && { FileSystem: FileSystemFilterSensitiveLog(obj.FileSystem) }),
});
export const CopyBackupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Backup && { Backup: BackupFilterSensitiveLog(obj.Backup) }),
});
export const CreateBackupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Backup && { Backup: BackupFilterSensitiveLog(obj.Backup) }),
});
export const DescribeBackupsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Backups && { Backups: obj.Backups.map((item) => BackupFilterSensitiveLog(item)) }),
});
