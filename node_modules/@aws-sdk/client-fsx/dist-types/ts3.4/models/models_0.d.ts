import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { FSxServiceException as __BaseException } from "./FSxServiceException";
export interface ActiveDirectoryBackupAttributes {
  DomainName?: string;
  ActiveDirectoryId?: string;
  ResourceARN?: string;
}
export declare const ActiveDirectoryErrorType: {
  readonly DOMAIN_NOT_FOUND: "DOMAIN_NOT_FOUND";
  readonly INCOMPATIBLE_DOMAIN_MODE: "INCOMPATIBLE_DOMAIN_MODE";
  readonly INVALID_DOMAIN_STAGE: "INVALID_DOMAIN_STAGE";
  readonly WRONG_VPC: "WRONG_VPC";
};
export type ActiveDirectoryErrorType =
  (typeof ActiveDirectoryErrorType)[keyof typeof ActiveDirectoryErrorType];
export declare class ActiveDirectoryError extends __BaseException {
  readonly name: "ActiveDirectoryError";
  readonly $fault: "client";
  ActiveDirectoryId: string | undefined;
  Type?: ActiveDirectoryErrorType;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ActiveDirectoryError, __BaseException>
  );
}
export declare const AdministrativeActionType: {
  readonly FILE_SYSTEM_ALIAS_ASSOCIATION: "FILE_SYSTEM_ALIAS_ASSOCIATION";
  readonly FILE_SYSTEM_ALIAS_DISASSOCIATION: "FILE_SYSTEM_ALIAS_DISASSOCIATION";
  readonly FILE_SYSTEM_UPDATE: "FILE_SYSTEM_UPDATE";
  readonly IOPS_OPTIMIZATION: "IOPS_OPTIMIZATION";
  readonly MISCONFIGURED_STATE_RECOVERY: "MISCONFIGURED_STATE_RECOVERY";
  readonly RELEASE_NFS_V3_LOCKS: "RELEASE_NFS_V3_LOCKS";
  readonly SNAPSHOT_UPDATE: "SNAPSHOT_UPDATE";
  readonly STORAGE_OPTIMIZATION: "STORAGE_OPTIMIZATION";
  readonly STORAGE_TYPE_OPTIMIZATION: "STORAGE_TYPE_OPTIMIZATION";
  readonly THROUGHPUT_OPTIMIZATION: "THROUGHPUT_OPTIMIZATION";
  readonly VOLUME_INITIALIZE_WITH_SNAPSHOT: "VOLUME_INITIALIZE_WITH_SNAPSHOT";
  readonly VOLUME_RESTORE: "VOLUME_RESTORE";
  readonly VOLUME_UPDATE: "VOLUME_UPDATE";
  readonly VOLUME_UPDATE_WITH_SNAPSHOT: "VOLUME_UPDATE_WITH_SNAPSHOT";
};
export type AdministrativeActionType =
  (typeof AdministrativeActionType)[keyof typeof AdministrativeActionType];
export interface AdministrativeActionFailureDetails {
  Message?: string;
}
export declare const Status: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly PENDING: "PENDING";
  readonly UPDATED_OPTIMIZING: "UPDATED_OPTIMIZING";
};
export type Status = (typeof Status)[keyof typeof Status];
export interface FileSystemFailureDetails {
  Message?: string;
}
export declare const FileSystemType: {
  readonly LUSTRE: "LUSTRE";
  readonly ONTAP: "ONTAP";
  readonly OPENZFS: "OPENZFS";
  readonly WINDOWS: "WINDOWS";
};
export type FileSystemType =
  (typeof FileSystemType)[keyof typeof FileSystemType];
export declare const FileSystemLifecycle: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly MISCONFIGURED: "MISCONFIGURED";
  readonly MISCONFIGURED_UNAVAILABLE: "MISCONFIGURED_UNAVAILABLE";
  readonly UPDATING: "UPDATING";
};
export type FileSystemLifecycle =
  (typeof FileSystemLifecycle)[keyof typeof FileSystemLifecycle];
export declare const DataCompressionType: {
  readonly LZ4: "LZ4";
  readonly NONE: "NONE";
};
export type DataCompressionType =
  (typeof DataCompressionType)[keyof typeof DataCompressionType];
export declare const AutoImportPolicyType: {
  readonly NEW: "NEW";
  readonly NEW_CHANGED: "NEW_CHANGED";
  readonly NEW_CHANGED_DELETED: "NEW_CHANGED_DELETED";
  readonly NONE: "NONE";
};
export type AutoImportPolicyType =
  (typeof AutoImportPolicyType)[keyof typeof AutoImportPolicyType];
export interface DataRepositoryFailureDetails {
  Message?: string;
}
export declare const DataRepositoryLifecycle: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly MISCONFIGURED: "MISCONFIGURED";
  readonly UPDATING: "UPDATING";
};
export type DataRepositoryLifecycle =
  (typeof DataRepositoryLifecycle)[keyof typeof DataRepositoryLifecycle];
export interface DataRepositoryConfiguration {
  Lifecycle?: DataRepositoryLifecycle;
  ImportPath?: string;
  ExportPath?: string;
  ImportedFileChunkSize?: number;
  AutoImportPolicy?: AutoImportPolicyType;
  FailureDetails?: DataRepositoryFailureDetails;
}
export declare const LustreDeploymentType: {
  readonly PERSISTENT_1: "PERSISTENT_1";
  readonly PERSISTENT_2: "PERSISTENT_2";
  readonly SCRATCH_1: "SCRATCH_1";
  readonly SCRATCH_2: "SCRATCH_2";
};
export type LustreDeploymentType =
  (typeof LustreDeploymentType)[keyof typeof LustreDeploymentType];
export declare const DriveCacheType: {
  readonly NONE: "NONE";
  readonly READ: "READ";
};
export type DriveCacheType =
  (typeof DriveCacheType)[keyof typeof DriveCacheType];
export declare const LustreAccessAuditLogLevel: {
  readonly DISABLED: "DISABLED";
  readonly ERROR_ONLY: "ERROR_ONLY";
  readonly WARN_ERROR: "WARN_ERROR";
  readonly WARN_ONLY: "WARN_ONLY";
};
export type LustreAccessAuditLogLevel =
  (typeof LustreAccessAuditLogLevel)[keyof typeof LustreAccessAuditLogLevel];
export interface LustreLogConfiguration {
  Level: LustreAccessAuditLogLevel | undefined;
  Destination?: string;
}
export interface LustreRootSquashConfiguration {
  RootSquash?: string;
  NoSquashNids?: string[];
}
export interface LustreFileSystemConfiguration {
  WeeklyMaintenanceStartTime?: string;
  DataRepositoryConfiguration?: DataRepositoryConfiguration;
  DeploymentType?: LustreDeploymentType;
  PerUnitStorageThroughput?: number;
  MountName?: string;
  DailyAutomaticBackupStartTime?: string;
  AutomaticBackupRetentionDays?: number;
  CopyTagsToBackups?: boolean;
  DriveCacheType?: DriveCacheType;
  DataCompressionType?: DataCompressionType;
  LogConfiguration?: LustreLogConfiguration;
  RootSquashConfiguration?: LustreRootSquashConfiguration;
}
export declare const OntapDeploymentType: {
  readonly MULTI_AZ_1: "MULTI_AZ_1";
  readonly SINGLE_AZ_1: "SINGLE_AZ_1";
  readonly SINGLE_AZ_2: "SINGLE_AZ_2";
};
export type OntapDeploymentType =
  (typeof OntapDeploymentType)[keyof typeof OntapDeploymentType];
export declare const DiskIopsConfigurationMode: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly USER_PROVISIONED: "USER_PROVISIONED";
};
export type DiskIopsConfigurationMode =
  (typeof DiskIopsConfigurationMode)[keyof typeof DiskIopsConfigurationMode];
export interface DiskIopsConfiguration {
  Mode?: DiskIopsConfigurationMode;
  Iops?: number;
}
export interface FileSystemEndpoint {
  DNSName?: string;
  IpAddresses?: string[];
}
export interface FileSystemEndpoints {
  Intercluster?: FileSystemEndpoint;
  Management?: FileSystemEndpoint;
}
export interface OntapFileSystemConfiguration {
  AutomaticBackupRetentionDays?: number;
  DailyAutomaticBackupStartTime?: string;
  DeploymentType?: OntapDeploymentType;
  EndpointIpAddressRange?: string;
  Endpoints?: FileSystemEndpoints;
  DiskIopsConfiguration?: DiskIopsConfiguration;
  PreferredSubnetId?: string;
  RouteTableIds?: string[];
  ThroughputCapacity?: number;
  WeeklyMaintenanceStartTime?: string;
  FsxAdminPassword?: string;
  HAPairs?: number;
  ThroughputCapacityPerHAPair?: number;
}
export declare const OpenZFSDeploymentType: {
  readonly MULTI_AZ_1: "MULTI_AZ_1";
  readonly SINGLE_AZ_1: "SINGLE_AZ_1";
  readonly SINGLE_AZ_2: "SINGLE_AZ_2";
};
export type OpenZFSDeploymentType =
  (typeof OpenZFSDeploymentType)[keyof typeof OpenZFSDeploymentType];
export interface OpenZFSFileSystemConfiguration {
  AutomaticBackupRetentionDays?: number;
  CopyTagsToBackups?: boolean;
  CopyTagsToVolumes?: boolean;
  DailyAutomaticBackupStartTime?: string;
  DeploymentType?: OpenZFSDeploymentType;
  ThroughputCapacity?: number;
  WeeklyMaintenanceStartTime?: string;
  DiskIopsConfiguration?: DiskIopsConfiguration;
  RootVolumeId?: string;
  PreferredSubnetId?: string;
  EndpointIpAddressRange?: string;
  RouteTableIds?: string[];
  EndpointIpAddress?: string;
}
export declare const StorageType: {
  readonly HDD: "HDD";
  readonly SSD: "SSD";
};
export type StorageType = (typeof StorageType)[keyof typeof StorageType];
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export declare const AliasLifecycle: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
};
export type AliasLifecycle =
  (typeof AliasLifecycle)[keyof typeof AliasLifecycle];
export interface Alias {
  Name?: string;
  Lifecycle?: AliasLifecycle;
}
export declare const WindowsAccessAuditLogLevel: {
  readonly DISABLED: "DISABLED";
  readonly FAILURE_ONLY: "FAILURE_ONLY";
  readonly SUCCESS_AND_FAILURE: "SUCCESS_AND_FAILURE";
  readonly SUCCESS_ONLY: "SUCCESS_ONLY";
};
export type WindowsAccessAuditLogLevel =
  (typeof WindowsAccessAuditLogLevel)[keyof typeof WindowsAccessAuditLogLevel];
export interface WindowsAuditLogConfiguration {
  FileAccessAuditLogLevel: WindowsAccessAuditLogLevel | undefined;
  FileShareAccessAuditLogLevel: WindowsAccessAuditLogLevel | undefined;
  AuditLogDestination?: string;
}
export declare const WindowsDeploymentType: {
  readonly MULTI_AZ_1: "MULTI_AZ_1";
  readonly SINGLE_AZ_1: "SINGLE_AZ_1";
  readonly SINGLE_AZ_2: "SINGLE_AZ_2";
};
export type WindowsDeploymentType =
  (typeof WindowsDeploymentType)[keyof typeof WindowsDeploymentType];
export declare const FileSystemMaintenanceOperation: {
  readonly BACKING_UP: "BACKING_UP";
  readonly PATCHING: "PATCHING";
};
export type FileSystemMaintenanceOperation =
  (typeof FileSystemMaintenanceOperation)[keyof typeof FileSystemMaintenanceOperation];
export interface SelfManagedActiveDirectoryAttributes {
  DomainName?: string;
  OrganizationalUnitDistinguishedName?: string;
  FileSystemAdministratorsGroup?: string;
  UserName?: string;
  DnsIps?: string[];
}
export interface WindowsFileSystemConfiguration {
  ActiveDirectoryId?: string;
  SelfManagedActiveDirectoryConfiguration?: SelfManagedActiveDirectoryAttributes;
  DeploymentType?: WindowsDeploymentType;
  RemoteAdministrationEndpoint?: string;
  PreferredSubnetId?: string;
  PreferredFileServerIp?: string;
  ThroughputCapacity?: number;
  MaintenanceOperationsInProgress?: FileSystemMaintenanceOperation[];
  WeeklyMaintenanceStartTime?: string;
  DailyAutomaticBackupStartTime?: string;
  AutomaticBackupRetentionDays?: number;
  CopyTagsToBackups?: boolean;
  Aliases?: Alias[];
  AuditLogConfiguration?: WindowsAuditLogConfiguration;
  DiskIopsConfiguration?: DiskIopsConfiguration;
}
export declare const SnapshotLifecycle: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly PENDING: "PENDING";
};
export type SnapshotLifecycle =
  (typeof SnapshotLifecycle)[keyof typeof SnapshotLifecycle];
export interface LifecycleTransitionReason {
  Message?: string;
}
export declare const VolumeLifecycle: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATED: "CREATED";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly MISCONFIGURED: "MISCONFIGURED";
  readonly PENDING: "PENDING";
};
export type VolumeLifecycle =
  (typeof VolumeLifecycle)[keyof typeof VolumeLifecycle];
export interface AggregateConfiguration {
  Aggregates?: string[];
  TotalConstituents?: number;
}
export declare const FlexCacheEndpointType: {
  readonly CACHE: "CACHE";
  readonly NONE: "NONE";
  readonly ORIGIN: "ORIGIN";
};
export type FlexCacheEndpointType =
  (typeof FlexCacheEndpointType)[keyof typeof FlexCacheEndpointType];
export declare const OntapVolumeType: {
  readonly DP: "DP";
  readonly LS: "LS";
  readonly RW: "RW";
};
export type OntapVolumeType =
  (typeof OntapVolumeType)[keyof typeof OntapVolumeType];
export declare const SecurityStyle: {
  readonly MIXED: "MIXED";
  readonly NTFS: "NTFS";
  readonly UNIX: "UNIX";
};
export type SecurityStyle = (typeof SecurityStyle)[keyof typeof SecurityStyle];
export declare const AutocommitPeriodType: {
  readonly DAYS: "DAYS";
  readonly HOURS: "HOURS";
  readonly MINUTES: "MINUTES";
  readonly MONTHS: "MONTHS";
  readonly NONE: "NONE";
  readonly YEARS: "YEARS";
};
export type AutocommitPeriodType =
  (typeof AutocommitPeriodType)[keyof typeof AutocommitPeriodType];
export interface AutocommitPeriod {
  Type: AutocommitPeriodType | undefined;
  Value?: number;
}
export declare const PrivilegedDelete: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly PERMANENTLY_DISABLED: "PERMANENTLY_DISABLED";
};
export type PrivilegedDelete =
  (typeof PrivilegedDelete)[keyof typeof PrivilegedDelete];
export declare const RetentionPeriodType: {
  readonly DAYS: "DAYS";
  readonly HOURS: "HOURS";
  readonly INFINITE: "INFINITE";
  readonly MINUTES: "MINUTES";
  readonly MONTHS: "MONTHS";
  readonly SECONDS: "SECONDS";
  readonly UNSPECIFIED: "UNSPECIFIED";
  readonly YEARS: "YEARS";
};
export type RetentionPeriodType =
  (typeof RetentionPeriodType)[keyof typeof RetentionPeriodType];
export interface RetentionPeriod {
  Type: RetentionPeriodType | undefined;
  Value?: number;
}
export interface SnaplockRetentionPeriod {
  DefaultRetention: RetentionPeriod | undefined;
  MinimumRetention: RetentionPeriod | undefined;
  MaximumRetention: RetentionPeriod | undefined;
}
export declare const SnaplockType: {
  readonly COMPLIANCE: "COMPLIANCE";
  readonly ENTERPRISE: "ENTERPRISE";
};
export type SnaplockType = (typeof SnaplockType)[keyof typeof SnaplockType];
export interface SnaplockConfiguration {
  AuditLogVolume?: boolean;
  AutocommitPeriod?: AutocommitPeriod;
  PrivilegedDelete?: PrivilegedDelete;
  RetentionPeriod?: SnaplockRetentionPeriod;
  SnaplockType?: SnaplockType;
  VolumeAppendModeEnabled?: boolean;
}
export declare const TieringPolicyName: {
  readonly ALL: "ALL";
  readonly AUTO: "AUTO";
  readonly NONE: "NONE";
  readonly SNAPSHOT_ONLY: "SNAPSHOT_ONLY";
};
export type TieringPolicyName =
  (typeof TieringPolicyName)[keyof typeof TieringPolicyName];
export interface TieringPolicy {
  CoolingPeriod?: number;
  Name?: TieringPolicyName;
}
export declare const VolumeStyle: {
  readonly FLEXGROUP: "FLEXGROUP";
  readonly FLEXVOL: "FLEXVOL";
};
export type VolumeStyle = (typeof VolumeStyle)[keyof typeof VolumeStyle];
export interface OntapVolumeConfiguration {
  FlexCacheEndpointType?: FlexCacheEndpointType;
  JunctionPath?: string;
  SecurityStyle?: SecurityStyle;
  SizeInMegabytes?: number;
  StorageEfficiencyEnabled?: boolean;
  StorageVirtualMachineId?: string;
  StorageVirtualMachineRoot?: boolean;
  TieringPolicy?: TieringPolicy;
  UUID?: string;
  OntapVolumeType?: OntapVolumeType;
  SnapshotPolicy?: string;
  CopyTagsToBackups?: boolean;
  SnaplockConfiguration?: SnaplockConfiguration;
  VolumeStyle?: VolumeStyle;
  AggregateConfiguration?: AggregateConfiguration;
  SizeInBytes?: number;
}
export declare const OpenZFSCopyStrategy: {
  readonly CLONE: "CLONE";
  readonly FULL_COPY: "FULL_COPY";
  readonly INCREMENTAL_COPY: "INCREMENTAL_COPY";
};
export type OpenZFSCopyStrategy =
  (typeof OpenZFSCopyStrategy)[keyof typeof OpenZFSCopyStrategy];
export declare const OpenZFSDataCompressionType: {
  readonly LZ4: "LZ4";
  readonly NONE: "NONE";
  readonly ZSTD: "ZSTD";
};
export type OpenZFSDataCompressionType =
  (typeof OpenZFSDataCompressionType)[keyof typeof OpenZFSDataCompressionType];
export interface OpenZFSClientConfiguration {
  Clients: string | undefined;
  Options: string[] | undefined;
}
export interface OpenZFSNfsExport {
  ClientConfigurations: OpenZFSClientConfiguration[] | undefined;
}
export interface OpenZFSOriginSnapshotConfiguration {
  SnapshotARN?: string;
  CopyStrategy?: OpenZFSCopyStrategy;
}
export declare const OpenZFSQuotaType: {
  readonly GROUP: "GROUP";
  readonly USER: "USER";
};
export type OpenZFSQuotaType =
  (typeof OpenZFSQuotaType)[keyof typeof OpenZFSQuotaType];
export interface OpenZFSUserOrGroupQuota {
  Type: OpenZFSQuotaType | undefined;
  Id: number | undefined;
  StorageCapacityQuotaGiB: number | undefined;
}
export interface OpenZFSVolumeConfiguration {
  ParentVolumeId?: string;
  VolumePath?: string;
  StorageCapacityReservationGiB?: number;
  StorageCapacityQuotaGiB?: number;
  RecordSizeKiB?: number;
  DataCompressionType?: OpenZFSDataCompressionType;
  CopyTagsToSnapshots?: boolean;
  OriginSnapshot?: OpenZFSOriginSnapshotConfiguration;
  ReadOnly?: boolean;
  NfsExports?: OpenZFSNfsExport[];
  UserAndGroupQuotas?: OpenZFSUserOrGroupQuota[];
  RestoreToSnapshot?: string;
  DeleteIntermediateSnaphots?: boolean;
  DeleteClonedVolumes?: boolean;
  DeleteIntermediateData?: boolean;
  SourceSnapshotARN?: string;
  DestinationSnapshot?: string;
  CopyStrategy?: OpenZFSCopyStrategy;
}
export declare const VolumeType: {
  readonly ONTAP: "ONTAP";
  readonly OPENZFS: "OPENZFS";
};
export type VolumeType = (typeof VolumeType)[keyof typeof VolumeType];
export interface AssociateFileSystemAliasesRequest {
  ClientRequestToken?: string;
  FileSystemId: string | undefined;
  Aliases: string[] | undefined;
}
export interface AssociateFileSystemAliasesResponse {
  Aliases?: Alias[];
}
export declare class BadRequest extends __BaseException {
  readonly name: "BadRequest";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<BadRequest, __BaseException>);
}
export declare class FileSystemNotFound extends __BaseException {
  readonly name: "FileSystemNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<FileSystemNotFound, __BaseException>);
}
export declare class InternalServerError extends __BaseException {
  readonly name: "InternalServerError";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerError, __BaseException>
  );
}
export declare const EventType: {
  readonly CHANGED: "CHANGED";
  readonly DELETED: "DELETED";
  readonly NEW: "NEW";
};
export type EventType = (typeof EventType)[keyof typeof EventType];
export interface AutoExportPolicy {
  Events?: EventType[];
}
export interface AutoImportPolicy {
  Events?: EventType[];
}
export interface CancelDataRepositoryTaskRequest {
  TaskId: string | undefined;
}
export declare const DataRepositoryTaskLifecycle: {
  readonly CANCELED: "CANCELED";
  readonly CANCELING: "CANCELING";
  readonly EXECUTING: "EXECUTING";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type DataRepositoryTaskLifecycle =
  (typeof DataRepositoryTaskLifecycle)[keyof typeof DataRepositoryTaskLifecycle];
export interface CancelDataRepositoryTaskResponse {
  Lifecycle?: DataRepositoryTaskLifecycle;
  TaskId?: string;
}
export declare class DataRepositoryTaskEnded extends __BaseException {
  readonly name: "DataRepositoryTaskEnded";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<DataRepositoryTaskEnded, __BaseException>
  );
}
export declare class DataRepositoryTaskNotFound extends __BaseException {
  readonly name: "DataRepositoryTaskNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<DataRepositoryTaskNotFound, __BaseException>
  );
}
export declare class UnsupportedOperation extends __BaseException {
  readonly name: "UnsupportedOperation";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<UnsupportedOperation, __BaseException>
  );
}
export declare class BackupNotFound extends __BaseException {
  readonly name: "BackupNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<BackupNotFound, __BaseException>);
}
export interface CopyBackupRequest {
  ClientRequestToken?: string;
  SourceBackupId: string | undefined;
  SourceRegion?: string;
  KmsKeyId?: string;
  CopyTags?: boolean;
  Tags?: Tag[];
}
export interface BackupFailureDetails {
  Message?: string;
}
export declare const BackupLifecycle: {
  readonly AVAILABLE: "AVAILABLE";
  readonly COPYING: "COPYING";
  readonly CREATING: "CREATING";
  readonly DELETED: "DELETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly TRANSFERRING: "TRANSFERRING";
};
export type BackupLifecycle =
  (typeof BackupLifecycle)[keyof typeof BackupLifecycle];
export declare const ResourceType: {
  readonly FILE_SYSTEM: "FILE_SYSTEM";
  readonly VOLUME: "VOLUME";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare const BackupType: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly AWS_BACKUP: "AWS_BACKUP";
  readonly USER_INITIATED: "USER_INITIATED";
};
export type BackupType = (typeof BackupType)[keyof typeof BackupType];
export declare class IncompatibleParameterError extends __BaseException {
  readonly name: "IncompatibleParameterError";
  readonly $fault: "client";
  Parameter: string | undefined;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<IncompatibleParameterError, __BaseException>
  );
}
export declare class IncompatibleRegionForMultiAZ extends __BaseException {
  readonly name: "IncompatibleRegionForMultiAZ";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<IncompatibleRegionForMultiAZ, __BaseException>
  );
}
export declare class InvalidDestinationKmsKey extends __BaseException {
  readonly name: "InvalidDestinationKmsKey";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidDestinationKmsKey, __BaseException>
  );
}
export declare class InvalidRegion extends __BaseException {
  readonly name: "InvalidRegion";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<InvalidRegion, __BaseException>);
}
export declare class InvalidSourceKmsKey extends __BaseException {
  readonly name: "InvalidSourceKmsKey";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidSourceKmsKey, __BaseException>
  );
}
export declare const ServiceLimit: {
  readonly FILE_CACHE_COUNT: "FILE_CACHE_COUNT";
  readonly FILE_SYSTEM_COUNT: "FILE_SYSTEM_COUNT";
  readonly STORAGE_VIRTUAL_MACHINES_PER_FILE_SYSTEM: "STORAGE_VIRTUAL_MACHINES_PER_FILE_SYSTEM";
  readonly TOTAL_IN_PROGRESS_COPY_BACKUPS: "TOTAL_IN_PROGRESS_COPY_BACKUPS";
  readonly TOTAL_SSD_IOPS: "TOTAL_SSD_IOPS";
  readonly TOTAL_STORAGE: "TOTAL_STORAGE";
  readonly TOTAL_THROUGHPUT_CAPACITY: "TOTAL_THROUGHPUT_CAPACITY";
  readonly TOTAL_USER_INITIATED_BACKUPS: "TOTAL_USER_INITIATED_BACKUPS";
  readonly TOTAL_USER_TAGS: "TOTAL_USER_TAGS";
  readonly VOLUMES_PER_FILE_SYSTEM: "VOLUMES_PER_FILE_SYSTEM";
};
export type ServiceLimit = (typeof ServiceLimit)[keyof typeof ServiceLimit];
export declare class ServiceLimitExceeded extends __BaseException {
  readonly name: "ServiceLimitExceeded";
  readonly $fault: "client";
  Limit: ServiceLimit | undefined;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceLimitExceeded, __BaseException>
  );
}
export declare class SourceBackupUnavailable extends __BaseException {
  readonly name: "SourceBackupUnavailable";
  readonly $fault: "client";
  Message?: string;
  BackupId?: string;
  constructor(
    opts: __ExceptionOptionType<SourceBackupUnavailable, __BaseException>
  );
}
export declare const UpdateOpenZFSVolumeOption: {
  readonly DELETE_CLONED_VOLUMES: "DELETE_CLONED_VOLUMES";
  readonly DELETE_INTERMEDIATE_DATA: "DELETE_INTERMEDIATE_DATA";
  readonly DELETE_INTERMEDIATE_SNAPSHOTS: "DELETE_INTERMEDIATE_SNAPSHOTS";
};
export type UpdateOpenZFSVolumeOption =
  (typeof UpdateOpenZFSVolumeOption)[keyof typeof UpdateOpenZFSVolumeOption];
export interface CopySnapshotAndUpdateVolumeRequest {
  ClientRequestToken?: string;
  VolumeId: string | undefined;
  SourceSnapshotARN: string | undefined;
  CopyStrategy?: OpenZFSCopyStrategy;
  Options?: UpdateOpenZFSVolumeOption[];
}
export declare class BackupInProgress extends __BaseException {
  readonly name: "BackupInProgress";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<BackupInProgress, __BaseException>);
}
export interface CreateBackupRequest {
  FileSystemId?: string;
  ClientRequestToken?: string;
  Tags?: Tag[];
  VolumeId?: string;
}
export declare class VolumeNotFound extends __BaseException {
  readonly name: "VolumeNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<VolumeNotFound, __BaseException>);
}
export interface S3DataRepositoryConfiguration {
  AutoImportPolicy?: AutoImportPolicy;
  AutoExportPolicy?: AutoExportPolicy;
}
export interface CreateDataRepositoryAssociationRequest {
  FileSystemId: string | undefined;
  FileSystemPath?: string;
  DataRepositoryPath: string | undefined;
  BatchImportMetaDataOnCreate?: boolean;
  ImportedFileChunkSize?: number;
  S3?: S3DataRepositoryConfiguration;
  ClientRequestToken?: string;
  Tags?: Tag[];
}
export declare const NfsVersion: {
  readonly NFS3: "NFS3";
};
export type NfsVersion = (typeof NfsVersion)[keyof typeof NfsVersion];
export interface NFSDataRepositoryConfiguration {
  Version: NfsVersion | undefined;
  DnsIps?: string[];
  AutoExportPolicy?: AutoExportPolicy;
}
export interface DataRepositoryAssociation {
  AssociationId?: string;
  ResourceARN?: string;
  FileSystemId?: string;
  Lifecycle?: DataRepositoryLifecycle;
  FailureDetails?: DataRepositoryFailureDetails;
  FileSystemPath?: string;
  DataRepositoryPath?: string;
  BatchImportMetaDataOnCreate?: boolean;
  ImportedFileChunkSize?: number;
  S3?: S3DataRepositoryConfiguration;
  Tags?: Tag[];
  CreationTime?: Date;
  FileCacheId?: string;
  FileCachePath?: string;
  DataRepositorySubdirectories?: string[];
  NFS?: NFSDataRepositoryConfiguration;
}
export interface CreateDataRepositoryAssociationResponse {
  Association?: DataRepositoryAssociation;
}
export declare const Unit: {
  readonly DAYS: "DAYS";
};
export type Unit = (typeof Unit)[keyof typeof Unit];
export interface DurationSinceLastAccess {
  Unit?: Unit;
  Value?: number;
}
export interface ReleaseConfiguration {
  DurationSinceLastAccess?: DurationSinceLastAccess;
}
export declare const ReportFormat: {
  readonly REPORT_CSV_20191124: "REPORT_CSV_20191124";
};
export type ReportFormat = (typeof ReportFormat)[keyof typeof ReportFormat];
export declare const ReportScope: {
  readonly FAILED_FILES_ONLY: "FAILED_FILES_ONLY";
};
export type ReportScope = (typeof ReportScope)[keyof typeof ReportScope];
export interface CompletionReport {
  Enabled: boolean | undefined;
  Path?: string;
  Format?: ReportFormat;
  Scope?: ReportScope;
}
export declare const DataRepositoryTaskType: {
  readonly AUTO_TRIGGERED_EVICTION: "AUTO_RELEASE_DATA";
  readonly EVICTION: "RELEASE_DATA_FROM_FILESYSTEM";
  readonly EXPORT: "EXPORT_TO_REPOSITORY";
  readonly IMPORT: "IMPORT_METADATA_FROM_REPOSITORY";
};
export type DataRepositoryTaskType =
  (typeof DataRepositoryTaskType)[keyof typeof DataRepositoryTaskType];
export interface CreateDataRepositoryTaskRequest {
  Type: DataRepositoryTaskType | undefined;
  Paths?: string[];
  FileSystemId: string | undefined;
  Report: CompletionReport | undefined;
  ClientRequestToken?: string;
  Tags?: Tag[];
  CapacityToRelease?: number;
  ReleaseConfiguration?: ReleaseConfiguration;
}
export interface DataRepositoryTaskFailureDetails {
  Message?: string;
}
export interface DataRepositoryTaskStatus {
  TotalCount?: number;
  SucceededCount?: number;
  FailedCount?: number;
  LastUpdatedTime?: Date;
  ReleasedCapacity?: number;
}
export interface DataRepositoryTask {
  TaskId: string | undefined;
  Lifecycle: DataRepositoryTaskLifecycle | undefined;
  Type: DataRepositoryTaskType | undefined;
  CreationTime: Date | undefined;
  StartTime?: Date;
  EndTime?: Date;
  ResourceARN?: string;
  Tags?: Tag[];
  FileSystemId?: string;
  Paths?: string[];
  FailureDetails?: DataRepositoryTaskFailureDetails;
  Status?: DataRepositoryTaskStatus;
  Report?: CompletionReport;
  CapacityToRelease?: number;
  FileCacheId?: string;
  ReleaseConfiguration?: ReleaseConfiguration;
}
export interface CreateDataRepositoryTaskResponse {
  DataRepositoryTask?: DataRepositoryTask;
}
export declare class DataRepositoryTaskExecuting extends __BaseException {
  readonly name: "DataRepositoryTaskExecuting";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<DataRepositoryTaskExecuting, __BaseException>
  );
}
export interface FileCacheNFSConfiguration {
  Version: NfsVersion | undefined;
  DnsIps?: string[];
}
export interface FileCacheDataRepositoryAssociation {
  FileCachePath: string | undefined;
  DataRepositoryPath: string | undefined;
  DataRepositorySubdirectories?: string[];
  NFS?: FileCacheNFSConfiguration;
}
export declare const FileCacheType: {
  readonly LUSTRE: "LUSTRE";
};
export type FileCacheType = (typeof FileCacheType)[keyof typeof FileCacheType];
export declare const FileCacheLustreDeploymentType: {
  readonly CACHE_1: "CACHE_1";
};
export type FileCacheLustreDeploymentType =
  (typeof FileCacheLustreDeploymentType)[keyof typeof FileCacheLustreDeploymentType];
export interface FileCacheLustreMetadataConfiguration {
  StorageCapacity: number | undefined;
}
export interface CreateFileCacheLustreConfiguration {
  PerUnitStorageThroughput: number | undefined;
  DeploymentType: FileCacheLustreDeploymentType | undefined;
  WeeklyMaintenanceStartTime?: string;
  MetadataConfiguration: FileCacheLustreMetadataConfiguration | undefined;
}
export interface CreateFileCacheRequest {
  ClientRequestToken?: string;
  FileCacheType: FileCacheType | undefined;
  FileCacheTypeVersion: string | undefined;
  StorageCapacity: number | undefined;
  SubnetIds: string[] | undefined;
  SecurityGroupIds?: string[];
  Tags?: Tag[];
  CopyTagsToDataRepositoryAssociations?: boolean;
  KmsKeyId?: string;
  LustreConfiguration?: CreateFileCacheLustreConfiguration;
  DataRepositoryAssociations?: FileCacheDataRepositoryAssociation[];
}
export interface FileCacheFailureDetails {
  Message?: string;
}
export declare const FileCacheLifecycle: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly UPDATING: "UPDATING";
};
export type FileCacheLifecycle =
  (typeof FileCacheLifecycle)[keyof typeof FileCacheLifecycle];
export interface FileCacheLustreConfiguration {
  PerUnitStorageThroughput?: number;
  DeploymentType?: FileCacheLustreDeploymentType;
  MountName?: string;
  WeeklyMaintenanceStartTime?: string;
  MetadataConfiguration?: FileCacheLustreMetadataConfiguration;
  LogConfiguration?: LustreLogConfiguration;
}
export interface FileCacheCreating {
  OwnerId?: string;
  CreationTime?: Date;
  FileCacheId?: string;
  FileCacheType?: FileCacheType;
  FileCacheTypeVersion?: string;
  Lifecycle?: FileCacheLifecycle;
  FailureDetails?: FileCacheFailureDetails;
  StorageCapacity?: number;
  VpcId?: string;
  SubnetIds?: string[];
  NetworkInterfaceIds?: string[];
  DNSName?: string;
  KmsKeyId?: string;
  ResourceARN?: string;
  Tags?: Tag[];
  CopyTagsToDataRepositoryAssociations?: boolean;
  LustreConfiguration?: FileCacheLustreConfiguration;
  DataRepositoryAssociationIds?: string[];
}
export interface CreateFileCacheResponse {
  FileCache?: FileCacheCreating;
}
export declare class InvalidNetworkSettings extends __BaseException {
  readonly name: "InvalidNetworkSettings";
  readonly $fault: "client";
  Message?: string;
  InvalidSubnetId?: string;
  InvalidSecurityGroupId?: string;
  InvalidRouteTableId?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidNetworkSettings, __BaseException>
  );
}
export declare class InvalidPerUnitStorageThroughput extends __BaseException {
  readonly name: "InvalidPerUnitStorageThroughput";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      InvalidPerUnitStorageThroughput,
      __BaseException
    >
  );
}
export declare class MissingFileCacheConfiguration extends __BaseException {
  readonly name: "MissingFileCacheConfiguration";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<MissingFileCacheConfiguration, __BaseException>
  );
}
export interface LustreLogCreateConfiguration {
  Level: LustreAccessAuditLogLevel | undefined;
  Destination?: string;
}
export interface CreateFileSystemLustreConfiguration {
  WeeklyMaintenanceStartTime?: string;
  ImportPath?: string;
  ExportPath?: string;
  ImportedFileChunkSize?: number;
  DeploymentType?: LustreDeploymentType;
  AutoImportPolicy?: AutoImportPolicyType;
  PerUnitStorageThroughput?: number;
  DailyAutomaticBackupStartTime?: string;
  AutomaticBackupRetentionDays?: number;
  CopyTagsToBackups?: boolean;
  DriveCacheType?: DriveCacheType;
  DataCompressionType?: DataCompressionType;
  LogConfiguration?: LustreLogCreateConfiguration;
  RootSquashConfiguration?: LustreRootSquashConfiguration;
}
export interface CreateFileSystemOntapConfiguration {
  AutomaticBackupRetentionDays?: number;
  DailyAutomaticBackupStartTime?: string;
  DeploymentType: OntapDeploymentType | undefined;
  EndpointIpAddressRange?: string;
  FsxAdminPassword?: string;
  DiskIopsConfiguration?: DiskIopsConfiguration;
  PreferredSubnetId?: string;
  RouteTableIds?: string[];
  ThroughputCapacity?: number;
  WeeklyMaintenanceStartTime?: string;
  HAPairs?: number;
  ThroughputCapacityPerHAPair?: number;
}
export interface OpenZFSCreateRootVolumeConfiguration {
  RecordSizeKiB?: number;
  DataCompressionType?: OpenZFSDataCompressionType;
  NfsExports?: OpenZFSNfsExport[];
  UserAndGroupQuotas?: OpenZFSUserOrGroupQuota[];
  CopyTagsToSnapshots?: boolean;
  ReadOnly?: boolean;
}
export interface CreateFileSystemOpenZFSConfiguration {
  AutomaticBackupRetentionDays?: number;
  CopyTagsToBackups?: boolean;
  CopyTagsToVolumes?: boolean;
  DailyAutomaticBackupStartTime?: string;
  DeploymentType: OpenZFSDeploymentType | undefined;
  ThroughputCapacity: number | undefined;
  WeeklyMaintenanceStartTime?: string;
  DiskIopsConfiguration?: DiskIopsConfiguration;
  RootVolumeConfiguration?: OpenZFSCreateRootVolumeConfiguration;
  PreferredSubnetId?: string;
  EndpointIpAddressRange?: string;
  RouteTableIds?: string[];
}
export interface WindowsAuditLogCreateConfiguration {
  FileAccessAuditLogLevel: WindowsAccessAuditLogLevel | undefined;
  FileShareAccessAuditLogLevel: WindowsAccessAuditLogLevel | undefined;
  AuditLogDestination?: string;
}
export interface SelfManagedActiveDirectoryConfiguration {
  DomainName: string | undefined;
  OrganizationalUnitDistinguishedName?: string;
  FileSystemAdministratorsGroup?: string;
  UserName: string | undefined;
  Password: string | undefined;
  DnsIps: string[] | undefined;
}
export interface CreateFileSystemWindowsConfiguration {
  ActiveDirectoryId?: string;
  SelfManagedActiveDirectoryConfiguration?: SelfManagedActiveDirectoryConfiguration;
  DeploymentType?: WindowsDeploymentType;
  PreferredSubnetId?: string;
  ThroughputCapacity: number | undefined;
  WeeklyMaintenanceStartTime?: string;
  DailyAutomaticBackupStartTime?: string;
  AutomaticBackupRetentionDays?: number;
  CopyTagsToBackups?: boolean;
  Aliases?: string[];
  AuditLogConfiguration?: WindowsAuditLogCreateConfiguration;
  DiskIopsConfiguration?: DiskIopsConfiguration;
}
export interface CreateFileSystemRequest {
  ClientRequestToken?: string;
  FileSystemType: FileSystemType | undefined;
  StorageCapacity: number | undefined;
  StorageType?: StorageType;
  SubnetIds: string[] | undefined;
  SecurityGroupIds?: string[];
  Tags?: Tag[];
  KmsKeyId?: string;
  WindowsConfiguration?: CreateFileSystemWindowsConfiguration;
  LustreConfiguration?: CreateFileSystemLustreConfiguration;
  OntapConfiguration?: CreateFileSystemOntapConfiguration;
  FileSystemTypeVersion?: string;
  OpenZFSConfiguration?: CreateFileSystemOpenZFSConfiguration;
}
export declare class InvalidExportPath extends __BaseException {
  readonly name: "InvalidExportPath";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<InvalidExportPath, __BaseException>);
}
export declare class InvalidImportPath extends __BaseException {
  readonly name: "InvalidImportPath";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<InvalidImportPath, __BaseException>);
}
export declare class MissingFileSystemConfiguration extends __BaseException {
  readonly name: "MissingFileSystemConfiguration";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<MissingFileSystemConfiguration, __BaseException>
  );
}
export interface CreateFileSystemFromBackupRequest {
  BackupId: string | undefined;
  ClientRequestToken?: string;
  SubnetIds: string[] | undefined;
  SecurityGroupIds?: string[];
  Tags?: Tag[];
  WindowsConfiguration?: CreateFileSystemWindowsConfiguration;
  LustreConfiguration?: CreateFileSystemLustreConfiguration;
  StorageType?: StorageType;
  KmsKeyId?: string;
  FileSystemTypeVersion?: string;
  OpenZFSConfiguration?: CreateFileSystemOpenZFSConfiguration;
  StorageCapacity?: number;
}
export interface CreateSnapshotRequest {
  ClientRequestToken?: string;
  Name: string | undefined;
  VolumeId: string | undefined;
  Tags?: Tag[];
}
export interface CreateSvmActiveDirectoryConfiguration {
  NetBiosName: string | undefined;
  SelfManagedActiveDirectoryConfiguration?: SelfManagedActiveDirectoryConfiguration;
}
export declare const StorageVirtualMachineRootVolumeSecurityStyle: {
  readonly MIXED: "MIXED";
  readonly NTFS: "NTFS";
  readonly UNIX: "UNIX";
};
export type StorageVirtualMachineRootVolumeSecurityStyle =
  (typeof StorageVirtualMachineRootVolumeSecurityStyle)[keyof typeof StorageVirtualMachineRootVolumeSecurityStyle];
export interface CreateStorageVirtualMachineRequest {
  ActiveDirectoryConfiguration?: CreateSvmActiveDirectoryConfiguration;
  ClientRequestToken?: string;
  FileSystemId: string | undefined;
  Name: string | undefined;
  SvmAdminPassword?: string;
  Tags?: Tag[];
  RootVolumeSecurityStyle?: StorageVirtualMachineRootVolumeSecurityStyle;
}
export interface SvmActiveDirectoryConfiguration {
  NetBiosName?: string;
  SelfManagedActiveDirectoryConfiguration?: SelfManagedActiveDirectoryAttributes;
}
export interface SvmEndpoint {
  DNSName?: string;
  IpAddresses?: string[];
}
export interface SvmEndpoints {
  Iscsi?: SvmEndpoint;
  Management?: SvmEndpoint;
  Nfs?: SvmEndpoint;
  Smb?: SvmEndpoint;
}
export declare const StorageVirtualMachineLifecycle: {
  readonly CREATED: "CREATED";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly MISCONFIGURED: "MISCONFIGURED";
  readonly PENDING: "PENDING";
};
export type StorageVirtualMachineLifecycle =
  (typeof StorageVirtualMachineLifecycle)[keyof typeof StorageVirtualMachineLifecycle];
export declare const StorageVirtualMachineSubtype: {
  readonly DEFAULT: "DEFAULT";
  readonly DP_DESTINATION: "DP_DESTINATION";
  readonly SYNC_DESTINATION: "SYNC_DESTINATION";
  readonly SYNC_SOURCE: "SYNC_SOURCE";
};
export type StorageVirtualMachineSubtype =
  (typeof StorageVirtualMachineSubtype)[keyof typeof StorageVirtualMachineSubtype];
export interface StorageVirtualMachine {
  ActiveDirectoryConfiguration?: SvmActiveDirectoryConfiguration;
  CreationTime?: Date;
  Endpoints?: SvmEndpoints;
  FileSystemId?: string;
  Lifecycle?: StorageVirtualMachineLifecycle;
  Name?: string;
  ResourceARN?: string;
  StorageVirtualMachineId?: string;
  Subtype?: StorageVirtualMachineSubtype;
  UUID?: string;
  Tags?: Tag[];
  LifecycleTransitionReason?: LifecycleTransitionReason;
  RootVolumeSecurityStyle?: StorageVirtualMachineRootVolumeSecurityStyle;
}
export interface CreateStorageVirtualMachineResponse {
  StorageVirtualMachine?: StorageVirtualMachine;
}
export interface CreateAggregateConfiguration {
  Aggregates?: string[];
  ConstituentsPerAggregate?: number;
}
export declare const InputOntapVolumeType: {
  readonly DP: "DP";
  readonly RW: "RW";
};
export type InputOntapVolumeType =
  (typeof InputOntapVolumeType)[keyof typeof InputOntapVolumeType];
export interface CreateSnaplockConfiguration {
  AuditLogVolume?: boolean;
  AutocommitPeriod?: AutocommitPeriod;
  PrivilegedDelete?: PrivilegedDelete;
  RetentionPeriod?: SnaplockRetentionPeriod;
  SnaplockType: SnaplockType | undefined;
  VolumeAppendModeEnabled?: boolean;
}
export interface CreateOntapVolumeConfiguration {
  JunctionPath?: string;
  SecurityStyle?: SecurityStyle;
  SizeInMegabytes?: number;
  StorageEfficiencyEnabled?: boolean;
  StorageVirtualMachineId: string | undefined;
  TieringPolicy?: TieringPolicy;
  OntapVolumeType?: InputOntapVolumeType;
  SnapshotPolicy?: string;
  CopyTagsToBackups?: boolean;
  SnaplockConfiguration?: CreateSnaplockConfiguration;
  VolumeStyle?: VolumeStyle;
  AggregateConfiguration?: CreateAggregateConfiguration;
  SizeInBytes?: number;
}
export interface CreateOpenZFSOriginSnapshotConfiguration {
  SnapshotARN: string | undefined;
  CopyStrategy: OpenZFSCopyStrategy | undefined;
}
export interface CreateOpenZFSVolumeConfiguration {
  ParentVolumeId: string | undefined;
  StorageCapacityReservationGiB?: number;
  StorageCapacityQuotaGiB?: number;
  RecordSizeKiB?: number;
  DataCompressionType?: OpenZFSDataCompressionType;
  CopyTagsToSnapshots?: boolean;
  OriginSnapshot?: CreateOpenZFSOriginSnapshotConfiguration;
  ReadOnly?: boolean;
  NfsExports?: OpenZFSNfsExport[];
  UserAndGroupQuotas?: OpenZFSUserOrGroupQuota[];
}
export interface CreateVolumeRequest {
  ClientRequestToken?: string;
  VolumeType: VolumeType | undefined;
  Name: string | undefined;
  OntapConfiguration?: CreateOntapVolumeConfiguration;
  Tags?: Tag[];
  OpenZFSConfiguration?: CreateOpenZFSVolumeConfiguration;
}
export declare class MissingVolumeConfiguration extends __BaseException {
  readonly name: "MissingVolumeConfiguration";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<MissingVolumeConfiguration, __BaseException>
  );
}
export declare class StorageVirtualMachineNotFound extends __BaseException {
  readonly name: "StorageVirtualMachineNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<StorageVirtualMachineNotFound, __BaseException>
  );
}
export interface CreateVolumeFromBackupRequest {
  BackupId: string | undefined;
  ClientRequestToken?: string;
  Name: string | undefined;
  OntapConfiguration?: CreateOntapVolumeConfiguration;
  Tags?: Tag[];
}
export declare class BackupBeingCopied extends __BaseException {
  readonly name: "BackupBeingCopied";
  readonly $fault: "client";
  Message?: string;
  BackupId?: string;
  constructor(opts: __ExceptionOptionType<BackupBeingCopied, __BaseException>);
}
export declare class BackupRestoring extends __BaseException {
  readonly name: "BackupRestoring";
  readonly $fault: "client";
  Message?: string;
  FileSystemId?: string;
  constructor(opts: __ExceptionOptionType<BackupRestoring, __BaseException>);
}
export interface DeleteBackupRequest {
  BackupId: string | undefined;
  ClientRequestToken?: string;
}
export interface DeleteBackupResponse {
  BackupId?: string;
  Lifecycle?: BackupLifecycle;
}
export declare class DataRepositoryAssociationNotFound extends __BaseException {
  readonly name: "DataRepositoryAssociationNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      DataRepositoryAssociationNotFound,
      __BaseException
    >
  );
}
export interface DeleteDataRepositoryAssociationRequest {
  AssociationId: string | undefined;
  ClientRequestToken?: string;
  DeleteDataInFileSystem?: boolean;
}
export interface DeleteDataRepositoryAssociationResponse {
  AssociationId?: string;
  Lifecycle?: DataRepositoryLifecycle;
  DeleteDataInFileSystem?: boolean;
}
export interface DeleteFileCacheRequest {
  FileCacheId: string | undefined;
  ClientRequestToken?: string;
}
export interface DeleteFileCacheResponse {
  FileCacheId?: string;
  Lifecycle?: FileCacheLifecycle;
}
export declare class FileCacheNotFound extends __BaseException {
  readonly name: "FileCacheNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<FileCacheNotFound, __BaseException>);
}
export interface DeleteFileSystemLustreConfiguration {
  SkipFinalBackup?: boolean;
  FinalBackupTags?: Tag[];
}
export declare const DeleteFileSystemOpenZFSOption: {
  readonly DELETE_CHILD_VOLUMES_AND_SNAPSHOTS: "DELETE_CHILD_VOLUMES_AND_SNAPSHOTS";
};
export type DeleteFileSystemOpenZFSOption =
  (typeof DeleteFileSystemOpenZFSOption)[keyof typeof DeleteFileSystemOpenZFSOption];
export interface DeleteFileSystemOpenZFSConfiguration {
  SkipFinalBackup?: boolean;
  FinalBackupTags?: Tag[];
  Options?: DeleteFileSystemOpenZFSOption[];
}
export interface DeleteFileSystemWindowsConfiguration {
  SkipFinalBackup?: boolean;
  FinalBackupTags?: Tag[];
}
export interface DeleteFileSystemRequest {
  FileSystemId: string | undefined;
  ClientRequestToken?: string;
  WindowsConfiguration?: DeleteFileSystemWindowsConfiguration;
  LustreConfiguration?: DeleteFileSystemLustreConfiguration;
  OpenZFSConfiguration?: DeleteFileSystemOpenZFSConfiguration;
}
export interface DeleteFileSystemLustreResponse {
  FinalBackupId?: string;
  FinalBackupTags?: Tag[];
}
export interface DeleteFileSystemOpenZFSResponse {
  FinalBackupId?: string;
  FinalBackupTags?: Tag[];
}
export interface DeleteFileSystemWindowsResponse {
  FinalBackupId?: string;
  FinalBackupTags?: Tag[];
}
export interface DeleteFileSystemResponse {
  FileSystemId?: string;
  Lifecycle?: FileSystemLifecycle;
  WindowsResponse?: DeleteFileSystemWindowsResponse;
  LustreResponse?: DeleteFileSystemLustreResponse;
  OpenZFSResponse?: DeleteFileSystemOpenZFSResponse;
}
export interface DeleteSnapshotRequest {
  ClientRequestToken?: string;
  SnapshotId: string | undefined;
}
export interface DeleteSnapshotResponse {
  SnapshotId?: string;
  Lifecycle?: SnapshotLifecycle;
}
export declare class SnapshotNotFound extends __BaseException {
  readonly name: "SnapshotNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<SnapshotNotFound, __BaseException>);
}
export interface DeleteStorageVirtualMachineRequest {
  ClientRequestToken?: string;
  StorageVirtualMachineId: string | undefined;
}
export interface DeleteStorageVirtualMachineResponse {
  StorageVirtualMachineId?: string;
  Lifecycle?: StorageVirtualMachineLifecycle;
}
export interface DeleteVolumeOntapConfiguration {
  SkipFinalBackup?: boolean;
  FinalBackupTags?: Tag[];
  BypassSnaplockEnterpriseRetention?: boolean;
}
export declare const DeleteOpenZFSVolumeOption: {
  readonly DELETE_CHILD_VOLUMES_AND_SNAPSHOTS: "DELETE_CHILD_VOLUMES_AND_SNAPSHOTS";
};
export type DeleteOpenZFSVolumeOption =
  (typeof DeleteOpenZFSVolumeOption)[keyof typeof DeleteOpenZFSVolumeOption];
export interface DeleteVolumeOpenZFSConfiguration {
  Options?: DeleteOpenZFSVolumeOption[];
}
export interface DeleteVolumeRequest {
  ClientRequestToken?: string;
  VolumeId: string | undefined;
  OntapConfiguration?: DeleteVolumeOntapConfiguration;
  OpenZFSConfiguration?: DeleteVolumeOpenZFSConfiguration;
}
export interface DeleteVolumeOntapResponse {
  FinalBackupId?: string;
  FinalBackupTags?: Tag[];
}
export interface DeleteVolumeResponse {
  VolumeId?: string;
  Lifecycle?: VolumeLifecycle;
  OntapResponse?: DeleteVolumeOntapResponse;
}
export declare const FilterName: {
  readonly BACKUP_TYPE: "backup-type";
  readonly DATA_REPOSITORY_TYPE: "data-repository-type";
  readonly FILE_CACHE_ID: "file-cache-id";
  readonly FILE_CACHE_TYPE: "file-cache-type";
  readonly FILE_SYSTEM_ID: "file-system-id";
  readonly FILE_SYSTEM_TYPE: "file-system-type";
  readonly VOLUME_ID: "volume-id";
};
export type FilterName = (typeof FilterName)[keyof typeof FilterName];
export interface Filter {
  Name?: FilterName;
  Values?: string[];
}
export interface DescribeBackupsRequest {
  BackupIds?: string[];
  Filters?: Filter[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeDataRepositoryAssociationsRequest {
  AssociationIds?: string[];
  Filters?: Filter[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeDataRepositoryAssociationsResponse {
  Associations?: DataRepositoryAssociation[];
  NextToken?: string;
}
export declare class InvalidDataRepositoryType extends __BaseException {
  readonly name: "InvalidDataRepositoryType";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidDataRepositoryType, __BaseException>
  );
}
export declare const DataRepositoryTaskFilterName: {
  readonly DATA_REPO_ASSOCIATION_ID: "data-repository-association-id";
  readonly FILE_CACHE_ID: "file-cache-id";
  readonly FILE_SYSTEM_ID: "file-system-id";
  readonly TASK_LIFECYCLE: "task-lifecycle";
};
export type DataRepositoryTaskFilterName =
  (typeof DataRepositoryTaskFilterName)[keyof typeof DataRepositoryTaskFilterName];
export interface DataRepositoryTaskFilter {
  Name?: DataRepositoryTaskFilterName;
  Values?: string[];
}
export interface DescribeDataRepositoryTasksRequest {
  TaskIds?: string[];
  Filters?: DataRepositoryTaskFilter[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeDataRepositoryTasksResponse {
  DataRepositoryTasks?: DataRepositoryTask[];
  NextToken?: string;
}
export interface DescribeFileCachesRequest {
  FileCacheIds?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface FileCache {
  OwnerId?: string;
  CreationTime?: Date;
  FileCacheId?: string;
  FileCacheType?: FileCacheType;
  FileCacheTypeVersion?: string;
  Lifecycle?: FileCacheLifecycle;
  FailureDetails?: FileCacheFailureDetails;
  StorageCapacity?: number;
  VpcId?: string;
  SubnetIds?: string[];
  NetworkInterfaceIds?: string[];
  DNSName?: string;
  KmsKeyId?: string;
  ResourceARN?: string;
  LustreConfiguration?: FileCacheLustreConfiguration;
  DataRepositoryAssociationIds?: string[];
}
export interface DescribeFileCachesResponse {
  FileCaches?: FileCache[];
  NextToken?: string;
}
export interface DescribeFileSystemAliasesRequest {
  ClientRequestToken?: string;
  FileSystemId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeFileSystemAliasesResponse {
  Aliases?: Alias[];
  NextToken?: string;
}
export interface DescribeFileSystemsRequest {
  FileSystemIds?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeSharedVpcConfigurationRequest {}
export interface DescribeSharedVpcConfigurationResponse {
  EnableFsxRouteTableUpdatesFromParticipantAccounts?: string;
}
export declare const SnapshotFilterName: {
  readonly FILE_SYSTEM_ID: "file-system-id";
  readonly VOLUME_ID: "volume-id";
};
export type SnapshotFilterName =
  (typeof SnapshotFilterName)[keyof typeof SnapshotFilterName];
export interface SnapshotFilter {
  Name?: SnapshotFilterName;
  Values?: string[];
}
export interface DescribeSnapshotsRequest {
  SnapshotIds?: string[];
  Filters?: SnapshotFilter[];
  MaxResults?: number;
  NextToken?: string;
  IncludeShared?: boolean;
}
export declare const StorageVirtualMachineFilterName: {
  readonly FILE_SYSTEM_ID: "file-system-id";
};
export type StorageVirtualMachineFilterName =
  (typeof StorageVirtualMachineFilterName)[keyof typeof StorageVirtualMachineFilterName];
export interface StorageVirtualMachineFilter {
  Name?: StorageVirtualMachineFilterName;
  Values?: string[];
}
export interface DescribeStorageVirtualMachinesRequest {
  StorageVirtualMachineIds?: string[];
  Filters?: StorageVirtualMachineFilter[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeStorageVirtualMachinesResponse {
  StorageVirtualMachines?: StorageVirtualMachine[];
  NextToken?: string;
}
export declare const VolumeFilterName: {
  readonly FILE_SYSTEM_ID: "file-system-id";
  readonly STORAGE_VIRTUAL_MACHINE_ID: "storage-virtual-machine-id";
};
export type VolumeFilterName =
  (typeof VolumeFilterName)[keyof typeof VolumeFilterName];
export interface VolumeFilter {
  Name?: VolumeFilterName;
  Values?: string[];
}
export interface DescribeVolumesRequest {
  VolumeIds?: string[];
  Filters?: VolumeFilter[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DisassociateFileSystemAliasesRequest {
  ClientRequestToken?: string;
  FileSystemId: string | undefined;
  Aliases: string[] | undefined;
}
export interface DisassociateFileSystemAliasesResponse {
  Aliases?: Alias[];
}
export interface ListTagsForResourceRequest {
  ResourceARN: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
  NextToken?: string;
}
export declare class NotServiceResourceError extends __BaseException {
  readonly name: "NotServiceResourceError";
  readonly $fault: "client";
  ResourceARN: string | undefined;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<NotServiceResourceError, __BaseException>
  );
}
export declare class ResourceDoesNotSupportTagging extends __BaseException {
  readonly name: "ResourceDoesNotSupportTagging";
  readonly $fault: "client";
  ResourceARN: string | undefined;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceDoesNotSupportTagging, __BaseException>
  );
}
export declare class ResourceNotFound extends __BaseException {
  readonly name: "ResourceNotFound";
  readonly $fault: "client";
  ResourceARN: string | undefined;
  Message?: string;
  constructor(opts: __ExceptionOptionType<ResourceNotFound, __BaseException>);
}
export interface ReleaseFileSystemNfsV3LocksRequest {
  FileSystemId: string | undefined;
  ClientRequestToken?: string;
}
export declare const RestoreOpenZFSVolumeOption: {
  readonly DELETE_CLONED_VOLUMES: "DELETE_CLONED_VOLUMES";
  readonly DELETE_INTERMEDIATE_SNAPSHOTS: "DELETE_INTERMEDIATE_SNAPSHOTS";
};
export type RestoreOpenZFSVolumeOption =
  (typeof RestoreOpenZFSVolumeOption)[keyof typeof RestoreOpenZFSVolumeOption];
export interface RestoreVolumeFromSnapshotRequest {
  ClientRequestToken?: string;
  VolumeId: string | undefined;
  SnapshotId: string | undefined;
  Options?: RestoreOpenZFSVolumeOption[];
}
export interface StartMisconfiguredStateRecoveryRequest {
  ClientRequestToken?: string;
  FileSystemId: string | undefined;
}
export interface TagResourceRequest {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateDataRepositoryAssociationRequest {
  AssociationId: string | undefined;
  ClientRequestToken?: string;
  ImportedFileChunkSize?: number;
  S3?: S3DataRepositoryConfiguration;
}
export interface UpdateDataRepositoryAssociationResponse {
  Association?: DataRepositoryAssociation;
}
export interface UpdateFileCacheLustreConfiguration {
  WeeklyMaintenanceStartTime?: string;
}
export interface UpdateFileCacheRequest {
  FileCacheId: string | undefined;
  ClientRequestToken?: string;
  LustreConfiguration?: UpdateFileCacheLustreConfiguration;
}
export interface UpdateFileCacheResponse {
  FileCache?: FileCache;
}
export interface UpdateFileSystemLustreConfiguration {
  WeeklyMaintenanceStartTime?: string;
  DailyAutomaticBackupStartTime?: string;
  AutomaticBackupRetentionDays?: number;
  AutoImportPolicy?: AutoImportPolicyType;
  DataCompressionType?: DataCompressionType;
  LogConfiguration?: LustreLogCreateConfiguration;
  RootSquashConfiguration?: LustreRootSquashConfiguration;
  PerUnitStorageThroughput?: number;
}
export interface UpdateFileSystemOntapConfiguration {
  AutomaticBackupRetentionDays?: number;
  DailyAutomaticBackupStartTime?: string;
  FsxAdminPassword?: string;
  WeeklyMaintenanceStartTime?: string;
  DiskIopsConfiguration?: DiskIopsConfiguration;
  ThroughputCapacity?: number;
  AddRouteTableIds?: string[];
  RemoveRouteTableIds?: string[];
  ThroughputCapacityPerHAPair?: number;
}
export interface UpdateFileSystemOpenZFSConfiguration {
  AutomaticBackupRetentionDays?: number;
  CopyTagsToBackups?: boolean;
  CopyTagsToVolumes?: boolean;
  DailyAutomaticBackupStartTime?: string;
  ThroughputCapacity?: number;
  WeeklyMaintenanceStartTime?: string;
  DiskIopsConfiguration?: DiskIopsConfiguration;
  AddRouteTableIds?: string[];
  RemoveRouteTableIds?: string[];
}
export interface SelfManagedActiveDirectoryConfigurationUpdates {
  UserName?: string;
  Password?: string;
  DnsIps?: string[];
  DomainName?: string;
  OrganizationalUnitDistinguishedName?: string;
  FileSystemAdministratorsGroup?: string;
}
export interface UpdateFileSystemWindowsConfiguration {
  WeeklyMaintenanceStartTime?: string;
  DailyAutomaticBackupStartTime?: string;
  AutomaticBackupRetentionDays?: number;
  ThroughputCapacity?: number;
  SelfManagedActiveDirectoryConfiguration?: SelfManagedActiveDirectoryConfigurationUpdates;
  AuditLogConfiguration?: WindowsAuditLogCreateConfiguration;
  DiskIopsConfiguration?: DiskIopsConfiguration;
}
export interface UpdateFileSystemRequest {
  FileSystemId: string | undefined;
  ClientRequestToken?: string;
  StorageCapacity?: number;
  WindowsConfiguration?: UpdateFileSystemWindowsConfiguration;
  LustreConfiguration?: UpdateFileSystemLustreConfiguration;
  OntapConfiguration?: UpdateFileSystemOntapConfiguration;
  OpenZFSConfiguration?: UpdateFileSystemOpenZFSConfiguration;
  StorageType?: StorageType;
}
export interface UpdateSharedVpcConfigurationRequest {
  EnableFsxRouteTableUpdatesFromParticipantAccounts?: string;
  ClientRequestToken?: string;
}
export interface UpdateSharedVpcConfigurationResponse {
  EnableFsxRouteTableUpdatesFromParticipantAccounts?: string;
}
export interface UpdateSnapshotRequest {
  ClientRequestToken?: string;
  Name: string | undefined;
  SnapshotId: string | undefined;
}
export interface UpdateSvmActiveDirectoryConfiguration {
  SelfManagedActiveDirectoryConfiguration?: SelfManagedActiveDirectoryConfigurationUpdates;
  NetBiosName?: string;
}
export interface UpdateStorageVirtualMachineRequest {
  ActiveDirectoryConfiguration?: UpdateSvmActiveDirectoryConfiguration;
  ClientRequestToken?: string;
  StorageVirtualMachineId: string | undefined;
  SvmAdminPassword?: string;
}
export interface UpdateStorageVirtualMachineResponse {
  StorageVirtualMachine?: StorageVirtualMachine;
}
export interface UpdateSnaplockConfiguration {
  AuditLogVolume?: boolean;
  AutocommitPeriod?: AutocommitPeriod;
  PrivilegedDelete?: PrivilegedDelete;
  RetentionPeriod?: SnaplockRetentionPeriod;
  VolumeAppendModeEnabled?: boolean;
}
export interface UpdateOntapVolumeConfiguration {
  JunctionPath?: string;
  SecurityStyle?: SecurityStyle;
  SizeInMegabytes?: number;
  StorageEfficiencyEnabled?: boolean;
  TieringPolicy?: TieringPolicy;
  SnapshotPolicy?: string;
  CopyTagsToBackups?: boolean;
  SnaplockConfiguration?: UpdateSnaplockConfiguration;
  SizeInBytes?: number;
}
export interface UpdateOpenZFSVolumeConfiguration {
  StorageCapacityReservationGiB?: number;
  StorageCapacityQuotaGiB?: number;
  RecordSizeKiB?: number;
  DataCompressionType?: OpenZFSDataCompressionType;
  NfsExports?: OpenZFSNfsExport[];
  UserAndGroupQuotas?: OpenZFSUserOrGroupQuota[];
  ReadOnly?: boolean;
}
export interface UpdateVolumeRequest {
  ClientRequestToken?: string;
  VolumeId: string | undefined;
  OntapConfiguration?: UpdateOntapVolumeConfiguration;
  Name?: string;
  OpenZFSConfiguration?: UpdateOpenZFSVolumeConfiguration;
}
export interface AdministrativeAction {
  AdministrativeActionType?: AdministrativeActionType;
  ProgressPercent?: number;
  RequestTime?: Date;
  Status?: Status;
  TargetFileSystemValues?: FileSystem;
  FailureDetails?: AdministrativeActionFailureDetails;
  TargetVolumeValues?: Volume;
  TargetSnapshotValues?: Snapshot;
  TotalTransferBytes?: number;
  RemainingTransferBytes?: number;
}
export interface FileSystem {
  OwnerId?: string;
  CreationTime?: Date;
  FileSystemId?: string;
  FileSystemType?: FileSystemType;
  Lifecycle?: FileSystemLifecycle;
  FailureDetails?: FileSystemFailureDetails;
  StorageCapacity?: number;
  StorageType?: StorageType;
  VpcId?: string;
  SubnetIds?: string[];
  NetworkInterfaceIds?: string[];
  DNSName?: string;
  KmsKeyId?: string;
  ResourceARN?: string;
  Tags?: Tag[];
  WindowsConfiguration?: WindowsFileSystemConfiguration;
  LustreConfiguration?: LustreFileSystemConfiguration;
  AdministrativeActions?: AdministrativeAction[];
  OntapConfiguration?: OntapFileSystemConfiguration;
  FileSystemTypeVersion?: string;
  OpenZFSConfiguration?: OpenZFSFileSystemConfiguration;
}
export interface Snapshot {
  ResourceARN?: string;
  SnapshotId?: string;
  Name?: string;
  VolumeId?: string;
  CreationTime?: Date;
  Lifecycle?: SnapshotLifecycle;
  LifecycleTransitionReason?: LifecycleTransitionReason;
  Tags?: Tag[];
  AdministrativeActions?: AdministrativeAction[];
}
export interface Volume {
  CreationTime?: Date;
  FileSystemId?: string;
  Lifecycle?: VolumeLifecycle;
  Name?: string;
  OntapConfiguration?: OntapVolumeConfiguration;
  ResourceARN?: string;
  Tags?: Tag[];
  VolumeId?: string;
  VolumeType?: VolumeType;
  LifecycleTransitionReason?: LifecycleTransitionReason;
  AdministrativeActions?: AdministrativeAction[];
  OpenZFSConfiguration?: OpenZFSVolumeConfiguration;
}
export interface CopySnapshotAndUpdateVolumeResponse {
  VolumeId?: string;
  Lifecycle?: VolumeLifecycle;
  AdministrativeActions?: AdministrativeAction[];
}
export interface RestoreVolumeFromSnapshotResponse {
  VolumeId?: string;
  Lifecycle?: VolumeLifecycle;
  AdministrativeActions?: AdministrativeAction[];
}
export interface CreateFileSystemFromBackupResponse {
  FileSystem?: FileSystem;
}
export interface CreateFileSystemResponse {
  FileSystem?: FileSystem;
}
export interface CreateSnapshotResponse {
  Snapshot?: Snapshot;
}
export interface CreateVolumeFromBackupResponse {
  Volume?: Volume;
}
export interface CreateVolumeResponse {
  Volume?: Volume;
}
export interface ReleaseFileSystemNfsV3LocksResponse {
  FileSystem?: FileSystem;
}
export interface StartMisconfiguredStateRecoveryResponse {
  FileSystem?: FileSystem;
}
export interface UpdateFileSystemResponse {
  FileSystem?: FileSystem;
}
export interface UpdateSnapshotResponse {
  Snapshot?: Snapshot;
}
export interface UpdateVolumeResponse {
  Volume?: Volume;
}
export interface DescribeFileSystemsResponse {
  FileSystems?: FileSystem[];
  NextToken?: string;
}
export interface DescribeSnapshotsResponse {
  Snapshots?: Snapshot[];
  NextToken?: string;
}
export interface DescribeVolumesResponse {
  Volumes?: Volume[];
  NextToken?: string;
}
export interface Backup {
  BackupId: string | undefined;
  Lifecycle: BackupLifecycle | undefined;
  FailureDetails?: BackupFailureDetails;
  Type: BackupType | undefined;
  ProgressPercent?: number;
  CreationTime: Date | undefined;
  KmsKeyId?: string;
  ResourceARN?: string;
  Tags?: Tag[];
  FileSystem: FileSystem | undefined;
  DirectoryInformation?: ActiveDirectoryBackupAttributes;
  OwnerId?: string;
  SourceBackupId?: string;
  SourceBackupRegion?: string;
  ResourceType?: ResourceType;
  Volume?: Volume;
}
export interface CopyBackupResponse {
  Backup?: Backup;
}
export interface CreateBackupResponse {
  Backup?: Backup;
}
export interface DescribeBackupsResponse {
  Backups?: Backup[];
  NextToken?: string;
}
export declare const OntapFileSystemConfigurationFilterSensitiveLog: (
  obj: OntapFileSystemConfiguration
) => any;
export declare const CreateFileSystemOntapConfigurationFilterSensitiveLog: (
  obj: CreateFileSystemOntapConfiguration
) => any;
export declare const SelfManagedActiveDirectoryConfigurationFilterSensitiveLog: (
  obj: SelfManagedActiveDirectoryConfiguration
) => any;
export declare const CreateFileSystemWindowsConfigurationFilterSensitiveLog: (
  obj: CreateFileSystemWindowsConfiguration
) => any;
export declare const CreateFileSystemRequestFilterSensitiveLog: (
  obj: CreateFileSystemRequest
) => any;
export declare const CreateFileSystemFromBackupRequestFilterSensitiveLog: (
  obj: CreateFileSystemFromBackupRequest
) => any;
export declare const CreateSvmActiveDirectoryConfigurationFilterSensitiveLog: (
  obj: CreateSvmActiveDirectoryConfiguration
) => any;
export declare const CreateStorageVirtualMachineRequestFilterSensitiveLog: (
  obj: CreateStorageVirtualMachineRequest
) => any;
export declare const UpdateFileSystemOntapConfigurationFilterSensitiveLog: (
  obj: UpdateFileSystemOntapConfiguration
) => any;
export declare const SelfManagedActiveDirectoryConfigurationUpdatesFilterSensitiveLog: (
  obj: SelfManagedActiveDirectoryConfigurationUpdates
) => any;
export declare const UpdateFileSystemWindowsConfigurationFilterSensitiveLog: (
  obj: UpdateFileSystemWindowsConfiguration
) => any;
export declare const UpdateFileSystemRequestFilterSensitiveLog: (
  obj: UpdateFileSystemRequest
) => any;
export declare const UpdateSvmActiveDirectoryConfigurationFilterSensitiveLog: (
  obj: UpdateSvmActiveDirectoryConfiguration
) => any;
export declare const UpdateStorageVirtualMachineRequestFilterSensitiveLog: (
  obj: UpdateStorageVirtualMachineRequest
) => any;
export declare const AdministrativeActionFilterSensitiveLog: (
  obj: AdministrativeAction
) => any;
export declare const FileSystemFilterSensitiveLog: (obj: FileSystem) => any;
export declare const SnapshotFilterSensitiveLog: (obj: Snapshot) => any;
export declare const VolumeFilterSensitiveLog: (obj: Volume) => any;
export declare const CopySnapshotAndUpdateVolumeResponseFilterSensitiveLog: (
  obj: CopySnapshotAndUpdateVolumeResponse
) => any;
export declare const RestoreVolumeFromSnapshotResponseFilterSensitiveLog: (
  obj: RestoreVolumeFromSnapshotResponse
) => any;
export declare const CreateFileSystemFromBackupResponseFilterSensitiveLog: (
  obj: CreateFileSystemFromBackupResponse
) => any;
export declare const CreateFileSystemResponseFilterSensitiveLog: (
  obj: CreateFileSystemResponse
) => any;
export declare const CreateSnapshotResponseFilterSensitiveLog: (
  obj: CreateSnapshotResponse
) => any;
export declare const CreateVolumeFromBackupResponseFilterSensitiveLog: (
  obj: CreateVolumeFromBackupResponse
) => any;
export declare const CreateVolumeResponseFilterSensitiveLog: (
  obj: CreateVolumeResponse
) => any;
export declare const ReleaseFileSystemNfsV3LocksResponseFilterSensitiveLog: (
  obj: ReleaseFileSystemNfsV3LocksResponse
) => any;
export declare const StartMisconfiguredStateRecoveryResponseFilterSensitiveLog: (
  obj: StartMisconfiguredStateRecoveryResponse
) => any;
export declare const UpdateFileSystemResponseFilterSensitiveLog: (
  obj: UpdateFileSystemResponse
) => any;
export declare const UpdateSnapshotResponseFilterSensitiveLog: (
  obj: UpdateSnapshotResponse
) => any;
export declare const UpdateVolumeResponseFilterSensitiveLog: (
  obj: UpdateVolumeResponse
) => any;
export declare const DescribeFileSystemsResponseFilterSensitiveLog: (
  obj: DescribeFileSystemsResponse
) => any;
export declare const DescribeSnapshotsResponseFilterSensitiveLog: (
  obj: DescribeSnapshotsResponse
) => any;
export declare const DescribeVolumesResponseFilterSensitiveLog: (
  obj: DescribeVolumesResponse
) => any;
export declare const BackupFilterSensitiveLog: (obj: Backup) => any;
export declare const CopyBackupResponseFilterSensitiveLog: (
  obj: CopyBackupResponse
) => any;
export declare const CreateBackupResponseFilterSensitiveLog: (
  obj: CreateBackupResponse
) => any;
export declare const DescribeBackupsResponseFilterSensitiveLog: (
  obj: DescribeBackupsResponse
) => any;
