import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ForecastqueryServiceException as __BaseException } from "./ForecastqueryServiceException";
export declare class InvalidInputException extends __BaseException {
  readonly name: "InvalidInputException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidInputException, __BaseException>
  );
}
export declare class InvalidNextTokenException extends __BaseException {
  readonly name: "InvalidNextTokenException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export interface QueryForecastRequest {
  ForecastArn: string | undefined;
  StartDate?: string;
  EndDate?: string;
  Filters: Record<string, string> | undefined;
  NextToken?: string;
}
export interface DataPoint {
  Timestamp?: string;
  Value?: number;
}
export interface Forecast {
  Predictions?: Record<string, DataPoint[]>;
}
export interface QueryForecastResponse {
  Forecast?: Forecast;
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface QueryWhatIfForecastRequest {
  WhatIfForecastArn: string | undefined;
  StartDate?: string;
  EndDate?: string;
  Filters: Record<string, string> | undefined;
  NextToken?: string;
}
export interface QueryWhatIfForecastResponse {
  Forecast?: Forecast;
}
