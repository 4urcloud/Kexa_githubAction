import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  QueryForecastCommandInput,
  QueryForecastCommandOutput,
} from "./commands/QueryForecastCommand";
import {
  QueryWhatIfForecastCommandInput,
  QueryWhatIfForecastCommandOutput,
} from "./commands/QueryWhatIfForecastCommand";
import { ForecastqueryClient } from "./ForecastqueryClient";
export interface Forecastquery {
  queryForecast(
    args: QueryForecastCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<QueryForecastCommandOutput>;
  queryForecast(
    args: QueryForecastCommandInput,
    cb: (err: any, data?: QueryForecastCommandOutput) => void
  ): void;
  queryForecast(
    args: QueryForecastCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: QueryForecastCommandOutput) => void
  ): void;
  queryWhatIfForecast(
    args: QueryWhatIfForecastCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<QueryWhatIfForecastCommandOutput>;
  queryWhatIfForecast(
    args: QueryWhatIfForecastCommandInput,
    cb: (err: any, data?: QueryWhatIfForecastCommandOutput) => void
  ): void;
  queryWhatIfForecast(
    args: QueryWhatIfForecastCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: QueryWhatIfForecastCommandOutput) => void
  ): void;
}
export declare class Forecastquery
  extends ForecastqueryClient
  implements Forecastquery {}
