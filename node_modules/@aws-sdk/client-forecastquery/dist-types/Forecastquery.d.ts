import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { QueryForecastCommandInput, QueryForecastCommandOutput } from "./commands/QueryForecastCommand";
import { QueryWhatIfForecastCommandInput, QueryWhatIfForecastCommandOutput } from "./commands/QueryWhatIfForecastCommand";
import { ForecastqueryClient } from "./ForecastqueryClient";
export interface Forecastquery {
    /**
     * @see {@link QueryForecastCommand}
     */
    queryForecast(args: QueryForecastCommandInput, options?: __HttpHandlerOptions): Promise<QueryForecastCommandOutput>;
    queryForecast(args: QueryForecastCommandInput, cb: (err: any, data?: QueryForecastCommandOutput) => void): void;
    queryForecast(args: QueryForecastCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: QueryForecastCommandOutput) => void): void;
    /**
     * @see {@link QueryWhatIfForecastCommand}
     */
    queryWhatIfForecast(args: QueryWhatIfForecastCommandInput, options?: __HttpHandlerOptions): Promise<QueryWhatIfForecastCommandOutput>;
    queryWhatIfForecast(args: QueryWhatIfForecastCommandInput, cb: (err: any, data?: QueryWhatIfForecastCommandOutput) => void): void;
    queryWhatIfForecast(args: QueryWhatIfForecastCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: QueryWhatIfForecastCommandOutput) => void): void;
}
/**
 * @public
 * <p>Provides APIs for creating and managing Amazon Forecast resources.</p>
 */
export declare class Forecastquery extends ForecastqueryClient implements Forecastquery {
}
