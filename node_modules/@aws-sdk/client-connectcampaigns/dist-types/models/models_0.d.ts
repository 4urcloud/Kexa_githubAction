import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ConnectCampaignsServiceException as __BaseException } from "./ConnectCampaignsServiceException";
/**
 * You do not have sufficient access to perform this action.
 * @public
 */
export declare class AccessDeniedException extends __BaseException {
    readonly name: "AccessDeniedException";
    readonly $fault: "client";
    /**
     * A header that defines the error encountered while processing the request.
     * @public
     */
    xAmzErrorType?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
}
/**
 * Agentless Dialer config
 * @public
 */
export interface AgentlessDialerConfig {
    /**
     * Allocates dialing capacity for this campaign between multiple active campaigns
     * @public
     */
    dialingCapacity?: number;
}
/**
 * The request could not be processed because of conflict in the current state of the resource.
 * @public
 */
export declare class ConflictException extends __BaseException {
    readonly name: "ConflictException";
    readonly $fault: "client";
    /**
     * A header that defines the error encountered while processing the request.
     * @public
     */
    xAmzErrorType?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
/**
 * Predictive Dialer config
 * @public
 */
export interface PredictiveDialerConfig {
    /**
     * The bandwidth allocation of a queue resource.
     * @public
     */
    bandwidthAllocation: number | undefined;
    /**
     * Allocates dialing capacity for this campaign between multiple active campaigns
     * @public
     */
    dialingCapacity?: number;
}
/**
 * Progressive Dialer config
 * @public
 */
export interface ProgressiveDialerConfig {
    /**
     * The bandwidth allocation of a queue resource.
     * @public
     */
    bandwidthAllocation: number | undefined;
    /**
     * Allocates dialing capacity for this campaign between multiple active campaigns
     * @public
     */
    dialingCapacity?: number;
}
/**
 * The possible types of dialer config parameters
 * @public
 */
export type DialerConfig = DialerConfig.AgentlessDialerConfigMember | DialerConfig.PredictiveDialerConfigMember | DialerConfig.ProgressiveDialerConfigMember | DialerConfig.$UnknownMember;
/**
 * @public
 */
export declare namespace DialerConfig {
    /**
     * Progressive Dialer config
     * @public
     */
    interface ProgressiveDialerConfigMember {
        progressiveDialerConfig: ProgressiveDialerConfig;
        predictiveDialerConfig?: never;
        agentlessDialerConfig?: never;
        $unknown?: never;
    }
    /**
     * Predictive Dialer config
     * @public
     */
    interface PredictiveDialerConfigMember {
        progressiveDialerConfig?: never;
        predictiveDialerConfig: PredictiveDialerConfig;
        agentlessDialerConfig?: never;
        $unknown?: never;
    }
    /**
     * Agentless Dialer config
     * @public
     */
    interface AgentlessDialerConfigMember {
        progressiveDialerConfig?: never;
        predictiveDialerConfig?: never;
        agentlessDialerConfig: AgentlessDialerConfig;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        progressiveDialerConfig?: never;
        predictiveDialerConfig?: never;
        agentlessDialerConfig?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        progressiveDialerConfig: (value: ProgressiveDialerConfig) => T;
        predictiveDialerConfig: (value: PredictiveDialerConfig) => T;
        agentlessDialerConfig: (value: AgentlessDialerConfig) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: DialerConfig, visitor: Visitor<T>) => T;
}
/**
 * Answering Machine Detection config
 * @public
 */
export interface AnswerMachineDetectionConfig {
    /**
     * Enable or disable answering machine detection
     * @public
     */
    enableAnswerMachineDetection: boolean | undefined;
}
/**
 * The configuration used for outbound calls.
 * @public
 */
export interface OutboundCallConfig {
    /**
     * The identifier of the contact flow for the outbound call.
     * @public
     */
    connectContactFlowId: string | undefined;
    /**
     * The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
     * @public
     */
    connectSourcePhoneNumber?: string;
    /**
     * The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
     * @public
     */
    connectQueueId?: string;
    /**
     * Answering Machine Detection config
     * @public
     */
    answerMachineDetectionConfig?: AnswerMachineDetectionConfig;
}
/**
 * The request for Create Campaign API.
 * @public
 */
export interface CreateCampaignRequest {
    /**
     * The name of an Amazon Connect Campaign name.
     * @public
     */
    name: string | undefined;
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
    /**
     * The possible types of dialer config parameters
     * @public
     */
    dialerConfig: DialerConfig | undefined;
    /**
     * The configuration used for outbound calls.
     * @public
     */
    outboundCallConfig: OutboundCallConfig | undefined;
    /**
     * Tag map with key and value.
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * The response for Create Campaign API
 * @public
 */
export interface CreateCampaignResponse {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id?: string;
    /**
     * The resource name of an Amazon Connect campaign.
     * @public
     */
    arn?: string;
    /**
     * Tag map with key and value.
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * Request processing failed because of an error or failure with the service.
 * @public
 */
export declare class InternalServerException extends __BaseException {
    readonly name: "InternalServerException";
    readonly $fault: "server";
    $retryable: {};
    /**
     * A header that defines the error encountered while processing the request.
     * @public
     */
    xAmzErrorType?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
}
/**
 * The specified resource was not found.
 * @public
 */
export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    /**
     * A header that defines the error encountered while processing the request.
     * @public
     */
    xAmzErrorType?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}
/**
 * Request would cause a service quota to be exceeded.
 * @public
 */
export declare class ServiceQuotaExceededException extends __BaseException {
    readonly name: "ServiceQuotaExceededException";
    readonly $fault: "client";
    /**
     * A header that defines the error encountered while processing the request.
     * @public
     */
    xAmzErrorType?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
}
/**
 * The request was denied due to request throttling.
 * @public
 */
export declare class ThrottlingException extends __BaseException {
    readonly name: "ThrottlingException";
    readonly $fault: "client";
    $retryable: {};
    /**
     * A header that defines the error encountered while processing the request.
     * @public
     */
    xAmzErrorType?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
}
/**
 * The input fails to satisfy the constraints specified by an AWS service.
 * @public
 */
export declare class ValidationException extends __BaseException {
    readonly name: "ValidationException";
    readonly $fault: "client";
    /**
     * A header that defines the error encountered while processing the request.
     * @public
     */
    xAmzErrorType?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
}
/**
 * DeleteCampaignRequest
 * @public
 */
export interface DeleteCampaignRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
}
/**
 * DeleteCampaignRequest
 * @public
 */
export interface DeleteConnectInstanceConfigRequest {
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
}
/**
 * The request could not be processed because of conflict in the current state.
 * @public
 */
export declare class InvalidStateException extends __BaseException {
    readonly name: "InvalidStateException";
    readonly $fault: "client";
    /**
     * A header that defines the error encountered while processing the request.
     * @public
     */
    xAmzErrorType?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidStateException, __BaseException>);
}
/**
 * The request for DeleteInstanceOnboardingJob API.
 * @public
 */
export interface DeleteInstanceOnboardingJobRequest {
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
}
/**
 * DescribeCampaignRequests
 * @public
 */
export interface DescribeCampaignRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
}
/**
 * An Amazon Connect campaign.
 * @public
 */
export interface Campaign {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
    /**
     * The resource name of an Amazon Connect campaign.
     * @public
     */
    arn: string | undefined;
    /**
     * The name of an Amazon Connect Campaign name.
     * @public
     */
    name: string | undefined;
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
    /**
     * The possible types of dialer config parameters
     * @public
     */
    dialerConfig: DialerConfig | undefined;
    /**
     * The configuration used for outbound calls.
     * @public
     */
    outboundCallConfig: OutboundCallConfig | undefined;
    /**
     * Tag map with key and value.
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * DescribeCampaignResponse
 * @public
 */
export interface DescribeCampaignResponse {
    /**
     * An Amazon Connect campaign.
     * @public
     */
    campaign?: Campaign;
}
/**
 * GetCampaignStateRequest
 * @public
 */
export interface GetCampaignStateRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const CampaignState: {
    /**
     * Campaign is in failed state
     */
    readonly FAILED: "Failed";
    /**
     * Campaign is in initialized state
     */
    readonly INITIALIZED: "Initialized";
    /**
     * Campaign is in paused state
     */
    readonly PAUSED: "Paused";
    /**
     * Campaign is in running state
     */
    readonly RUNNING: "Running";
    /**
     * Campaign is in stopped state
     */
    readonly STOPPED: "Stopped";
};
/**
 * @public
 */
export type CampaignState = (typeof CampaignState)[keyof typeof CampaignState];
/**
 * GetCampaignStateResponse
 * @public
 */
export interface GetCampaignStateResponse {
    /**
     * State of a campaign
     * @public
     */
    state?: CampaignState;
}
/**
 * GetCampaignStateBatchRequest
 * @public
 */
export interface GetCampaignStateBatchRequest {
    /**
     * List of CampaignId
     * @public
     */
    campaignIds: string[] | undefined;
}
/**
 * @public
 * @enum
 */
export declare const GetCampaignStateBatchFailureCode: {
    /**
     * The specified resource was not found
     */
    readonly RESOURCE_NOT_FOUND: "ResourceNotFound";
    /**
     * Unexpected error during processing of request
     */
    readonly UNKNOWN_ERROR: "UnknownError";
};
/**
 * @public
 */
export type GetCampaignStateBatchFailureCode = (typeof GetCampaignStateBatchFailureCode)[keyof typeof GetCampaignStateBatchFailureCode];
/**
 * Failed response of campaign state
 * @public
 */
export interface FailedCampaignStateResponse {
    /**
     * Identifier representing a Campaign
     * @public
     */
    campaignId?: string;
    /**
     * A predefined code indicating the error that caused the failure in getting state of campaigns
     * @public
     */
    failureCode?: GetCampaignStateBatchFailureCode;
}
/**
 * Successful response of campaign state
 * @public
 */
export interface SuccessfulCampaignStateResponse {
    /**
     * Identifier representing a Campaign
     * @public
     */
    campaignId?: string;
    /**
     * State of a campaign
     * @public
     */
    state?: CampaignState;
}
/**
 * GetCampaignStateBatchResponse
 * @public
 */
export interface GetCampaignStateBatchResponse {
    /**
     * List of successful response of campaign state
     * @public
     */
    successfulRequests?: SuccessfulCampaignStateResponse[];
    /**
     * List of failed requests of campaign state
     * @public
     */
    failedRequests?: FailedCampaignStateResponse[];
}
/**
 * GetConnectInstanceConfigRequest
 * @public
 */
export interface GetConnectInstanceConfigRequest {
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const EncryptionType: {
    readonly KMS: "KMS";
};
/**
 * @public
 */
export type EncryptionType = (typeof EncryptionType)[keyof typeof EncryptionType];
/**
 * Encryption config for Connect Instance. Note that sensitive data will always be encrypted.
 * If disabled, service will perform encryption with its own key.
 * If enabled, a KMS key id needs to be provided and KMS charges will apply.
 * KMS is only type supported
 * @public
 */
export interface EncryptionConfig {
    /**
     * Boolean to indicate if custom encryption has been enabled.
     * @public
     */
    enabled: boolean | undefined;
    /**
     * Server-side encryption type.
     * @public
     */
    encryptionType?: EncryptionType;
    /**
     * KMS key id/arn for encryption config.
     * @public
     */
    keyArn?: string;
}
/**
 * Instance config object
 * @public
 */
export interface InstanceConfig {
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
    /**
     * Service linked role arn
     * @public
     */
    serviceLinkedRoleArn: string | undefined;
    /**
     * Encryption config for Connect Instance. Note that sensitive data will always be encrypted.
     * If disabled, service will perform encryption with its own key.
     * If enabled, a KMS key id needs to be provided and KMS charges will apply.
     * KMS is only type supported
     * @public
     */
    encryptionConfig: EncryptionConfig | undefined;
}
/**
 * GetConnectInstanceConfigResponse
 * @public
 */
export interface GetConnectInstanceConfigResponse {
    /**
     * Instance config object
     * @public
     */
    connectInstanceConfig?: InstanceConfig;
}
/**
 * GetInstanceOnboardingJobStatusRequest
 * @public
 */
export interface GetInstanceOnboardingJobStatusRequest {
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const InstanceOnboardingJobFailureCode: {
    readonly EVENT_BRIDGE_ACCESS_DENIED: "EVENT_BRIDGE_ACCESS_DENIED";
    readonly EVENT_BRIDGE_MANAGED_RULE_LIMIT_EXCEEDED: "EVENT_BRIDGE_MANAGED_RULE_LIMIT_EXCEEDED";
    readonly IAM_ACCESS_DENIED: "IAM_ACCESS_DENIED";
    readonly INTERNAL_FAILURE: "INTERNAL_FAILURE";
    readonly KMS_ACCESS_DENIED: "KMS_ACCESS_DENIED";
    readonly KMS_KEY_NOT_FOUND: "KMS_KEY_NOT_FOUND";
};
/**
 * @public
 */
export type InstanceOnboardingJobFailureCode = (typeof InstanceOnboardingJobFailureCode)[keyof typeof InstanceOnboardingJobFailureCode];
/**
 * @public
 * @enum
 */
export declare const InstanceOnboardingJobStatusCode: {
    readonly FAILED: "FAILED";
    readonly IN_PROGRESS: "IN_PROGRESS";
    readonly SUCCEEDED: "SUCCEEDED";
};
/**
 * @public
 */
export type InstanceOnboardingJobStatusCode = (typeof InstanceOnboardingJobStatusCode)[keyof typeof InstanceOnboardingJobStatusCode];
/**
 * Instance onboarding job status object
 * @public
 */
export interface InstanceOnboardingJobStatus {
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
    /**
     * Enumeration of the possible states for instance onboarding job
     * @public
     */
    status: InstanceOnboardingJobStatusCode | undefined;
    /**
     * Enumeration of the possible failure codes for instance onboarding job
     * @public
     */
    failureCode?: InstanceOnboardingJobFailureCode;
}
/**
 * GetInstanceOnboardingJobStatusResponse
 * @public
 */
export interface GetInstanceOnboardingJobStatusResponse {
    /**
     * Instance onboarding job status object
     * @public
     */
    connectInstanceOnboardingJobStatus?: InstanceOnboardingJobStatus;
}
/**
 * @public
 * @enum
 */
export declare const InstanceIdFilterOperator: {
    /**
     * Equals operator
     */
    readonly EQ: "Eq";
};
/**
 * @public
 */
export type InstanceIdFilterOperator = (typeof InstanceIdFilterOperator)[keyof typeof InstanceIdFilterOperator];
/**
 * Connect instance identifier filter
 * @public
 */
export interface InstanceIdFilter {
    /**
     * Amazon Connect Instance Id
     * @public
     */
    value: string | undefined;
    /**
     * Operators for Connect instance identifier filter
     * @public
     */
    operator: InstanceIdFilterOperator | undefined;
}
/**
 * Filter model by type
 * @public
 */
export interface CampaignFilters {
    /**
     * Connect instance identifier filter
     * @public
     */
    instanceIdFilter?: InstanceIdFilter;
}
/**
 * ListCampaignsRequest
 * @public
 */
export interface ListCampaignsRequest {
    /**
     * The maximum number of results to return per page.
     * @public
     */
    maxResults?: number;
    /**
     * The token for the next set of results.
     * @public
     */
    nextToken?: string;
    /**
     * Filter model by type
     * @public
     */
    filters?: CampaignFilters;
}
/**
 * An Amazon Connect campaign summary.
 * @public
 */
export interface CampaignSummary {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
    /**
     * The resource name of an Amazon Connect campaign.
     * @public
     */
    arn: string | undefined;
    /**
     * The name of an Amazon Connect Campaign name.
     * @public
     */
    name: string | undefined;
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
}
/**
 * ListCampaignsResponse
 * @public
 */
export interface ListCampaignsResponse {
    /**
     * The token for the next set of results.
     * @public
     */
    nextToken?: string;
    /**
     * A list of Amazon Connect campaigns.
     * @public
     */
    campaignSummaryList?: CampaignSummary[];
}
/**
 * ListTagsForResource
 * @public
 */
export interface ListTagsForResourceRequest {
    /**
     * Arn
     * @public
     */
    arn: string | undefined;
}
/**
 * ListTagsForResponse
 * @public
 */
export interface ListTagsForResourceResponse {
    /**
     * Tag map with key and value.
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * The request could not be processed because of conflict in the current state of the campaign.
 * @public
 */
export declare class InvalidCampaignStateException extends __BaseException {
    readonly name: "InvalidCampaignStateException";
    readonly $fault: "client";
    /**
     * State of a campaign
     * @public
     */
    state: CampaignState | undefined;
    /**
     * A header that defines the error encountered while processing the request.
     * @public
     */
    xAmzErrorType?: string;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidCampaignStateException, __BaseException>);
}
/**
 * PauseCampaignRequest
 * @public
 */
export interface PauseCampaignRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
}
/**
 * A dial request for a campaign.
 * @public
 */
export interface DialRequest {
    /**
     * Client provided parameter used for idempotency. Its value must be unique for each request.
     * @public
     */
    clientToken: string | undefined;
    /**
     * The phone number of the customer, in E.164 format.
     * @public
     */
    phoneNumber: string | undefined;
    /**
     * Timestamp with no UTC offset or timezone
     * @public
     */
    expirationTime: Date | undefined;
    /**
     * A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
     * @public
     */
    attributes: Record<string, string> | undefined;
}
/**
 * PutDialRequestBatchRequest
 * @public
 */
export interface PutDialRequestBatchRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
    /**
     * A list of dial requests.
     * @public
     */
    dialRequests: DialRequest[] | undefined;
}
/**
 * @public
 * @enum
 */
export declare const FailureCode: {
    /**
     * The request failed to satisfy the constraints specified by the service
     */
    readonly INVALID_INPUT: "InvalidInput";
    /**
     * Request throttled due to large number of pending dial requests
     */
    readonly REQUEST_THROTTLED: "RequestThrottled";
    /**
     * Unexpected error during processing of request
     */
    readonly UNKNOWN_ERROR: "UnknownError";
};
/**
 * @public
 */
export type FailureCode = (typeof FailureCode)[keyof typeof FailureCode];
/**
 * A failed request identified by the unique client token.
 * @public
 */
export interface FailedRequest {
    /**
     * Client provided parameter used for idempotency. Its value must be unique for each request.
     * @public
     */
    clientToken?: string;
    /**
     * Identifier representing a Dial request
     * @public
     */
    id?: string;
    /**
     * A predefined code indicating the error that caused the failure.
     * @public
     */
    failureCode?: FailureCode;
}
/**
 * A successful request identified by the unique client token.
 * @public
 */
export interface SuccessfulRequest {
    /**
     * Client provided parameter used for idempotency. Its value must be unique for each request.
     * @public
     */
    clientToken?: string;
    /**
     * Identifier representing a Dial request
     * @public
     */
    id?: string;
}
/**
 * PutDialRequestBatchResponse
 * @public
 */
export interface PutDialRequestBatchResponse {
    /**
     * A list of successful requests identified by the unique client token.
     * @public
     */
    successfulRequests?: SuccessfulRequest[];
    /**
     * A list of failed requests.
     * @public
     */
    failedRequests?: FailedRequest[];
}
/**
 * ResumeCampaignRequest
 * @public
 */
export interface ResumeCampaignRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
}
/**
 * StartCampaignRequest
 * @public
 */
export interface StartCampaignRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
}
/**
 * The request for StartInstanceOnboardingJob API.
 * @public
 */
export interface StartInstanceOnboardingJobRequest {
    /**
     * Amazon Connect Instance Id
     * @public
     */
    connectInstanceId: string | undefined;
    /**
     * Encryption config for Connect Instance. Note that sensitive data will always be encrypted.
     * If disabled, service will perform encryption with its own key.
     * If enabled, a KMS key id needs to be provided and KMS charges will apply.
     * KMS is only type supported
     * @public
     */
    encryptionConfig: EncryptionConfig | undefined;
}
/**
 * The response for StartInstanceOnboardingJob API.
 * @public
 */
export interface StartInstanceOnboardingJobResponse {
    /**
     * Instance onboarding job status object
     * @public
     */
    connectInstanceOnboardingJobStatus?: InstanceOnboardingJobStatus;
}
/**
 * StopCampaignRequest
 * @public
 */
export interface StopCampaignRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
}
/**
 * TagResourceRequest
 * @public
 */
export interface TagResourceRequest {
    /**
     * Arn
     * @public
     */
    arn: string | undefined;
    /**
     * Tag map with key and value.
     * @public
     */
    tags: Record<string, string> | undefined;
}
/**
 * UntagResourceRequest
 * @public
 */
export interface UntagResourceRequest {
    /**
     * Arn
     * @public
     */
    arn: string | undefined;
    /**
     * List of tag keys.
     * @public
     */
    tagKeys: string[] | undefined;
}
/**
 * UpdateCampaignDialerConfigRequest
 * @public
 */
export interface UpdateCampaignDialerConfigRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
    /**
     * The possible types of dialer config parameters
     * @public
     */
    dialerConfig: DialerConfig | undefined;
}
/**
 * UpdateCampaignNameRequest
 * @public
 */
export interface UpdateCampaignNameRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
    /**
     * The name of an Amazon Connect Campaign name.
     * @public
     */
    name: string | undefined;
}
/**
 * UpdateCampaignOutboundCallConfigRequest
 * @public
 */
export interface UpdateCampaignOutboundCallConfigRequest {
    /**
     * Identifier representing a Campaign
     * @public
     */
    id: string | undefined;
    /**
     * The identifier of the contact flow for the outbound call.
     * @public
     */
    connectContactFlowId?: string;
    /**
     * The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
     * @public
     */
    connectSourcePhoneNumber?: string;
    /**
     * Answering Machine Detection config
     * @public
     */
    answerMachineDetectionConfig?: AnswerMachineDetectionConfig;
}
/**
 * @internal
 */
export declare const DialRequestFilterSensitiveLog: (obj: DialRequest) => any;
/**
 * @internal
 */
export declare const PutDialRequestBatchRequestFilterSensitiveLog: (obj: PutDialRequestBatchRequest) => any;
