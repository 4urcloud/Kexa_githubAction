import { awsExpectUnion as __expectUnion } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { ConnectCampaignsServiceException as __BaseException } from "../models/ConnectCampaignsServiceException";
import { AccessDeniedException, ConflictException, DialerConfig, InternalServerException, InvalidCampaignStateException, InvalidStateException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_CreateCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/campaigns");
    let body;
    body = JSON.stringify(take(input, {
        connectInstanceId: [],
        dialerConfig: (_) => se_DialerConfig(_, context),
        name: [],
        outboundCallConfig: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_DeleteCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/campaigns/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteConnectInstanceConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/connect-instance/{connectInstanceId}/config");
    b.p("connectInstanceId", () => input.connectInstanceId, "{connectInstanceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteInstanceOnboardingJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/connect-instance/{connectInstanceId}/onboarding");
    b.p("connectInstanceId", () => input.connectInstanceId, "{connectInstanceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/campaigns/{id}");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCampaignStateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/campaigns/{id}/state");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCampaignStateBatchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/campaigns-state");
    let body;
    body = JSON.stringify(take(input, {
        campaignIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetConnectInstanceConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/connect-instance/{connectInstanceId}/config");
    b.p("connectInstanceId", () => input.connectInstanceId, "{connectInstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetInstanceOnboardingJobStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/connect-instance/{connectInstanceId}/onboarding");
    b.p("connectInstanceId", () => input.connectInstanceId, "{connectInstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListCampaignsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/campaigns-summary");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{arn}");
    b.p("arn", () => input.arn, "{arn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PauseCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/campaigns/{id}/pause");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutDialRequestBatchCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/campaigns/{id}/dial-requests");
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        dialRequests: (_) => se_DialRequestList(_, context),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ResumeCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/campaigns/{id}/resume");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/campaigns/{id}/start");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartInstanceOnboardingJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/connect-instance/{connectInstanceId}/onboarding");
    b.p("connectInstanceId", () => input.connectInstanceId, "{connectInstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        encryptionConfig: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StopCampaignCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/campaigns/{id}/stop");
    b.p("id", () => input.id, "{id}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{arn}");
    b.p("arn", () => input.arn, "{arn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{arn}");
    b.p("arn", () => input.arn, "{arn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateCampaignDialerConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/campaigns/{id}/dialer-config");
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        dialerConfig: (_) => se_DialerConfig(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateCampaignNameCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/campaigns/{id}/name");
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateCampaignOutboundCallConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/campaigns/{id}/outbound-call-config");
    b.p("id", () => input.id, "{id}", false);
    let body;
    body = JSON.stringify(take(input, {
        answerMachineDetectionConfig: (_) => _json(_),
        connectContactFlowId: [],
        connectSourcePhoneNumber: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CreateCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        id: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteConnectInstanceConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteInstanceOnboardingJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        campaign: (_) => de_Campaign(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCampaignStateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        state: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCampaignStateBatchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        failedRequests: _json,
        successfulRequests: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConnectInstanceConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectInstanceConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInstanceOnboardingJobStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectInstanceOnboardingJobStatus: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCampaignsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        campaignSummaryList: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PauseCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutDialRequestBatchCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        failedRequests: _json,
        successfulRequests: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ResumeCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartInstanceOnboardingJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectInstanceOnboardingJobStatus: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopCampaignCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateCampaignDialerConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateCampaignNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateCampaignOutboundCallConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.connectcampaigns#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.connectcampaigns#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.connectcampaigns#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.connectcampaigns#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.connectcampaigns#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.connectcampaigns#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.connectcampaigns#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "InvalidStateException":
        case "com.amazonaws.connectcampaigns#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput, context);
        case "InvalidCampaignStateException":
        case "com.amazonaws.connectcampaigns#InvalidCampaignStateException":
            throw await de_InvalidCampaignStateExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_xAET]: [, parsedOutput.headers[_xae]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_xAET]: [, parsedOutput.headers[_xae]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_xAET]: [, parsedOutput.headers[_xae]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidCampaignStateExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_xAET]: [, parsedOutput.headers[_xae]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        state: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidCampaignStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidStateExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_xAET]: [, parsedOutput.headers[_xae]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_xAET]: [, parsedOutput.headers[_xae]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_xAET]: [, parsedOutput.headers[_xae]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_xAET]: [, parsedOutput.headers[_xae]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_xAET]: [, parsedOutput.headers[_xae]],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_AgentlessDialerConfig = (input, context) => {
    return take(input, {
        dialingCapacity: __serializeFloat,
    });
};
const se_DialerConfig = (input, context) => {
    return DialerConfig.visit(input, {
        agentlessDialerConfig: (value) => ({ agentlessDialerConfig: se_AgentlessDialerConfig(value, context) }),
        predictiveDialerConfig: (value) => ({ predictiveDialerConfig: se_PredictiveDialerConfig(value, context) }),
        progressiveDialerConfig: (value) => ({ progressiveDialerConfig: se_ProgressiveDialerConfig(value, context) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_DialRequest = (input, context) => {
    return take(input, {
        attributes: _json,
        clientToken: [],
        expirationTime: (_) => _.toISOString().split(".")[0] + "Z",
        phoneNumber: [],
    });
};
const se_DialRequestList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DialRequest(entry, context);
    });
};
const se_PredictiveDialerConfig = (input, context) => {
    return take(input, {
        bandwidthAllocation: __serializeFloat,
        dialingCapacity: __serializeFloat,
    });
};
const se_ProgressiveDialerConfig = (input, context) => {
    return take(input, {
        bandwidthAllocation: __serializeFloat,
        dialingCapacity: __serializeFloat,
    });
};
const de_AgentlessDialerConfig = (output, context) => {
    return take(output, {
        dialingCapacity: __limitedParseDouble,
    });
};
const de_Campaign = (output, context) => {
    return take(output, {
        arn: __expectString,
        connectInstanceId: __expectString,
        dialerConfig: (_) => de_DialerConfig(__expectUnion(_), context),
        id: __expectString,
        name: __expectString,
        outboundCallConfig: _json,
        tags: _json,
    });
};
const de_DialerConfig = (output, context) => {
    if (output.agentlessDialerConfig != null) {
        return {
            agentlessDialerConfig: de_AgentlessDialerConfig(output.agentlessDialerConfig, context),
        };
    }
    if (output.predictiveDialerConfig != null) {
        return {
            predictiveDialerConfig: de_PredictiveDialerConfig(output.predictiveDialerConfig, context),
        };
    }
    if (output.progressiveDialerConfig != null) {
        return {
            progressiveDialerConfig: de_ProgressiveDialerConfig(output.progressiveDialerConfig, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_PredictiveDialerConfig = (output, context) => {
    return take(output, {
        bandwidthAllocation: __limitedParseDouble,
        dialingCapacity: __limitedParseDouble,
    });
};
const de_ProgressiveDialerConfig = (output, context) => {
    return take(output, {
        bandwidthAllocation: __limitedParseDouble,
        dialingCapacity: __limitedParseDouble,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _tK = "tagKeys";
const _xAET = "xAmzErrorType";
const _xae = "x-amzn-errortype";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
