import { IoTEventsServiceException as __BaseException } from "./IoTEventsServiceException";
export const PayloadType = {
    JSON: "JSON",
    STRING: "STRING",
};
export const AlarmModelVersionStatus = {
    ACTIVATING: "ACTIVATING",
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
};
export const ComparisonOperator = {
    EQUAL: "EQUAL",
    GREATER: "GREATER",
    GREATER_OR_EQUAL: "GREATER_OR_EQUAL",
    LESS: "LESS",
    LESS_OR_EQUAL: "LESS_OR_EQUAL",
    NOT_EQUAL: "NOT_EQUAL",
};
export const AnalysisResultLevel = {
    ERROR: "ERROR",
    INFO: "INFO",
    WARNING: "WARNING",
};
export const AnalysisStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
};
export class InternalFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceArn = opts.resourceArn;
    }
}
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export const EvaluationMethod = {
    BATCH: "BATCH",
    SERIAL: "SERIAL",
};
export const DetectorModelVersionStatus = {
    ACTIVATING: "ACTIVATING",
    ACTIVE: "ACTIVE",
    DEPRECATED: "DEPRECATED",
    DRAFT: "DRAFT",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
    PAUSED: "PAUSED",
};
export const InputStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    UPDATING: "UPDATING",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const LoggingLevel = {
    DEBUG: "DEBUG",
    ERROR: "ERROR",
    INFO: "INFO",
};
export class UnsupportedOperationException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedOperationException",
            $fault: "server",
            ...opts,
        });
        this.name = "UnsupportedOperationException";
        this.$fault = "server";
        Object.setPrototypeOf(this, UnsupportedOperationException.prototype);
    }
}
