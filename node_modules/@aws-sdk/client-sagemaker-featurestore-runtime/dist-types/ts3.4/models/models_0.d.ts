import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { SageMakerFeatureStoreRuntimeServiceException as __BaseException } from "./SageMakerFeatureStoreRuntimeServiceException";
export declare class AccessForbidden extends __BaseException {
  readonly name: "AccessForbidden";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<AccessForbidden, __BaseException>);
}
export declare const ExpirationTimeResponse: {
  readonly DISABLED: "Disabled";
  readonly ENABLED: "Enabled";
};
export type ExpirationTimeResponse =
  (typeof ExpirationTimeResponse)[keyof typeof ExpirationTimeResponse];
export interface BatchGetRecordIdentifier {
  FeatureGroupName: string | undefined;
  RecordIdentifiersValueAsString: string[] | undefined;
  FeatureNames?: string[];
}
export interface BatchGetRecordRequest {
  Identifiers: BatchGetRecordIdentifier[] | undefined;
  ExpirationTimeResponse?: ExpirationTimeResponse;
}
export interface BatchGetRecordError {
  FeatureGroupName: string | undefined;
  RecordIdentifierValueAsString: string | undefined;
  ErrorCode: string | undefined;
  ErrorMessage: string | undefined;
}
export interface FeatureValue {
  FeatureName: string | undefined;
  ValueAsString?: string;
  ValueAsStringList?: string[];
}
export interface BatchGetRecordResultDetail {
  FeatureGroupName: string | undefined;
  RecordIdentifierValueAsString: string | undefined;
  Record: FeatureValue[] | undefined;
  ExpiresAt?: string;
}
export interface BatchGetRecordResponse {
  Records: BatchGetRecordResultDetail[] | undefined;
  Errors: BatchGetRecordError[] | undefined;
  UnprocessedIdentifiers: BatchGetRecordIdentifier[] | undefined;
}
export declare class InternalFailure extends __BaseException {
  readonly name: "InternalFailure";
  readonly $fault: "server";
  Message?: string;
  constructor(opts: __ExceptionOptionType<InternalFailure, __BaseException>);
}
export declare class ServiceUnavailable extends __BaseException {
  readonly name: "ServiceUnavailable";
  readonly $fault: "server";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ServiceUnavailable, __BaseException>);
}
export declare class ValidationError extends __BaseException {
  readonly name: "ValidationError";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ValidationError, __BaseException>);
}
export declare const DeletionMode: {
  readonly HARD_DELETE: "HardDelete";
  readonly SOFT_DELETE: "SoftDelete";
};
export type DeletionMode = (typeof DeletionMode)[keyof typeof DeletionMode];
export declare const TargetStore: {
  readonly OFFLINE_STORE: "OfflineStore";
  readonly ONLINE_STORE: "OnlineStore";
};
export type TargetStore = (typeof TargetStore)[keyof typeof TargetStore];
export interface DeleteRecordRequest {
  FeatureGroupName: string | undefined;
  RecordIdentifierValueAsString: string | undefined;
  EventTime: string | undefined;
  TargetStores?: TargetStore[];
  DeletionMode?: DeletionMode;
}
export interface GetRecordRequest {
  FeatureGroupName: string | undefined;
  RecordIdentifierValueAsString: string | undefined;
  FeatureNames?: string[];
  ExpirationTimeResponse?: ExpirationTimeResponse;
}
export interface GetRecordResponse {
  Record?: FeatureValue[];
  ExpiresAt?: string;
}
export declare class ResourceNotFound extends __BaseException {
  readonly name: "ResourceNotFound";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ResourceNotFound, __BaseException>);
}
export declare const TtlDurationUnit: {
  readonly DAYS: "Days";
  readonly HOURS: "Hours";
  readonly MINUTES: "Minutes";
  readonly SECONDS: "Seconds";
  readonly WEEKS: "Weeks";
};
export type TtlDurationUnit =
  (typeof TtlDurationUnit)[keyof typeof TtlDurationUnit];
export interface TtlDuration {
  Unit: TtlDurationUnit | undefined;
  Value: number | undefined;
}
export interface PutRecordRequest {
  FeatureGroupName: string | undefined;
  Record: FeatureValue[] | undefined;
  TargetStores?: TargetStore[];
  TtlDuration?: TtlDuration;
}
