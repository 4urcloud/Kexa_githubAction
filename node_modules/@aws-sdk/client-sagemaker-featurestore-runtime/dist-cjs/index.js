"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AccessForbidden: () => AccessForbidden,
  BatchGetRecordCommand: () => BatchGetRecordCommand,
  DeleteRecordCommand: () => DeleteRecordCommand,
  DeletionMode: () => DeletionMode,
  ExpirationTimeResponse: () => ExpirationTimeResponse,
  GetRecordCommand: () => GetRecordCommand,
  InternalFailure: () => InternalFailure,
  PutRecordCommand: () => PutRecordCommand,
  ResourceNotFound: () => ResourceNotFound,
  SageMakerFeatureStoreRuntime: () => SageMakerFeatureStoreRuntime,
  SageMakerFeatureStoreRuntimeClient: () => SageMakerFeatureStoreRuntimeClient,
  SageMakerFeatureStoreRuntimeServiceException: () => SageMakerFeatureStoreRuntimeServiceException,
  ServiceUnavailable: () => ServiceUnavailable,
  TargetStore: () => TargetStore,
  TtlDurationUnit: () => TtlDurationUnit,
  ValidationError: () => ValidationError,
  __Client: () => import_smithy_client.Client
});
module.exports = __toCommonJS(src_exports);

// src/SageMakerFeatureStoreRuntimeClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "sagemaker"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/SageMakerFeatureStoreRuntimeClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/SageMakerFeatureStoreRuntimeClient.ts
var _SageMakerFeatureStoreRuntimeClient = class _SageMakerFeatureStoreRuntimeClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultSageMakerFeatureStoreRuntimeHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_SageMakerFeatureStoreRuntimeClient, "SageMakerFeatureStoreRuntimeClient");
var SageMakerFeatureStoreRuntimeClient = _SageMakerFeatureStoreRuntimeClient;

// src/SageMakerFeatureStoreRuntime.ts


// src/commands/BatchGetRecordCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts



// src/models/SageMakerFeatureStoreRuntimeServiceException.ts

var _SageMakerFeatureStoreRuntimeServiceException = class _SageMakerFeatureStoreRuntimeServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _SageMakerFeatureStoreRuntimeServiceException.prototype);
  }
};
__name(_SageMakerFeatureStoreRuntimeServiceException, "SageMakerFeatureStoreRuntimeServiceException");
var SageMakerFeatureStoreRuntimeServiceException = _SageMakerFeatureStoreRuntimeServiceException;

// src/models/models_0.ts
var _AccessForbidden = class _AccessForbidden extends SageMakerFeatureStoreRuntimeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessForbidden",
      $fault: "client",
      ...opts
    });
    this.name = "AccessForbidden";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessForbidden.prototype);
    this.Message = opts.Message;
  }
};
__name(_AccessForbidden, "AccessForbidden");
var AccessForbidden = _AccessForbidden;
var ExpirationTimeResponse = {
  DISABLED: "Disabled",
  ENABLED: "Enabled"
};
var _InternalFailure = class _InternalFailure extends SageMakerFeatureStoreRuntimeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalFailure",
      $fault: "server",
      ...opts
    });
    this.name = "InternalFailure";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalFailure.prototype);
    this.Message = opts.Message;
  }
};
__name(_InternalFailure, "InternalFailure");
var InternalFailure = _InternalFailure;
var _ServiceUnavailable = class _ServiceUnavailable extends SageMakerFeatureStoreRuntimeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailable",
      $fault: "server",
      ...opts
    });
    this.name = "ServiceUnavailable";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServiceUnavailable.prototype);
    this.Message = opts.Message;
  }
};
__name(_ServiceUnavailable, "ServiceUnavailable");
var ServiceUnavailable = _ServiceUnavailable;
var _ValidationError = class _ValidationError extends SageMakerFeatureStoreRuntimeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationError",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationError";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationError.prototype);
    this.Message = opts.Message;
  }
};
__name(_ValidationError, "ValidationError");
var ValidationError = _ValidationError;
var DeletionMode = {
  HARD_DELETE: "HardDelete",
  SOFT_DELETE: "SoftDelete"
};
var TargetStore = {
  OFFLINE_STORE: "OfflineStore",
  ONLINE_STORE: "OnlineStore"
};
var _ResourceNotFound = class _ResourceNotFound extends SageMakerFeatureStoreRuntimeServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFound",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFound";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFound.prototype);
    this.Message = opts.Message;
  }
};
__name(_ResourceNotFound, "ResourceNotFound");
var ResourceNotFound = _ResourceNotFound;
var TtlDurationUnit = {
  DAYS: "Days",
  HOURS: "Hours",
  MINUTES: "Minutes",
  SECONDS: "Seconds",
  WEEKS: "Weeks"
};

// src/protocols/Aws_restJson1.ts
var se_BatchGetRecordCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/BatchGetRecord");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ExpirationTimeResponse: [],
      Identifiers: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchGetRecordCommand");
var se_DeleteRecordCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/FeatureGroup/{FeatureGroupName}");
  b.p("FeatureGroupName", () => input.FeatureGroupName, "{FeatureGroupName}", false);
  const query = (0, import_smithy_client.map)({
    [_RIVAS]: [, (0, import_smithy_client.expectNonNull)(input[_RIVAS], `RecordIdentifierValueAsString`)],
    [_ET]: [, (0, import_smithy_client.expectNonNull)(input[_ET], `EventTime`)],
    [_TS]: [() => input.TargetStores !== void 0, () => (input[_TS] || []).map((_entry) => _entry)],
    [_DM]: [, input[_DM]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteRecordCommand");
var se_GetRecordCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/FeatureGroup/{FeatureGroupName}");
  b.p("FeatureGroupName", () => input.FeatureGroupName, "{FeatureGroupName}", false);
  const query = (0, import_smithy_client.map)({
    [_RIVAS]: [, (0, import_smithy_client.expectNonNull)(input[_RIVAS], `RecordIdentifierValueAsString`)],
    [_FNe]: [() => input.FeatureNames !== void 0, () => (input[_FN] || []).map((_entry) => _entry)],
    [_ETR]: [, input[_ETR]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetRecordCommand");
var se_PutRecordCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/FeatureGroup/{FeatureGroupName}");
  b.p("FeatureGroupName", () => input.FeatureGroupName, "{FeatureGroupName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Record: (_) => (0, import_smithy_client._json)(_),
      TargetStores: (_) => (0, import_smithy_client._json)(_),
      TtlDuration: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutRecordCommand");
var de_BatchGetRecordCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Errors: import_smithy_client._json,
    Records: import_smithy_client._json,
    UnprocessedIdentifiers: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchGetRecordCommand");
var de_DeleteRecordCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteRecordCommand");
var de_GetRecordCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ExpiresAt: import_smithy_client.expectString,
    Record: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetRecordCommand");
var de_PutRecordCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutRecordCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessForbidden":
    case "com.amazonaws.sagemakerfeaturestoreruntime#AccessForbidden":
      throw await de_AccessForbiddenRes(parsedOutput, context);
    case "InternalFailure":
    case "com.amazonaws.sagemakerfeaturestoreruntime#InternalFailure":
      throw await de_InternalFailureRes(parsedOutput, context);
    case "ServiceUnavailable":
    case "com.amazonaws.sagemakerfeaturestoreruntime#ServiceUnavailable":
      throw await de_ServiceUnavailableRes(parsedOutput, context);
    case "ValidationError":
    case "com.amazonaws.sagemakerfeaturestoreruntime#ValidationError":
      throw await de_ValidationErrorRes(parsedOutput, context);
    case "ResourceNotFound":
    case "com.amazonaws.sagemakerfeaturestoreruntime#ResourceNotFound":
      throw await de_ResourceNotFoundRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(SageMakerFeatureStoreRuntimeServiceException);
var de_AccessForbiddenRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessForbidden({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessForbiddenRes");
var de_InternalFailureRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalFailure({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalFailureRes");
var de_ResourceNotFoundRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFound({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundRes");
var de_ServiceUnavailableRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailable({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableRes");
var de_ValidationErrorRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationError({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationErrorRes");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
var _DM = "DeletionMode";
var _ET = "EventTime";
var _ETR = "ExpirationTimeResponse";
var _FN = "FeatureNames";
var _FNe = "FeatureName";
var _RIVAS = "RecordIdentifierValueAsString";
var _TS = "TargetStores";
var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    return JSON.parse(encoded);
  }
  return {};
}), "parseBody");
var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
}, "parseErrorBody");
var loadRestJsonErrorCode = /* @__PURE__ */ __name((output, data) => {
  const findKey = /* @__PURE__ */ __name((object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase()), "findKey");
  const sanitizeErrorCode = /* @__PURE__ */ __name((rawValue) => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  }, "sanitizeErrorCode");
  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== void 0) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }
  if (data.code !== void 0) {
    return sanitizeErrorCode(data.code);
  }
  if (data["__type"] !== void 0) {
    return sanitizeErrorCode(data["__type"]);
  }
}, "loadRestJsonErrorCode");

// src/commands/BatchGetRecordCommand.ts
var _BatchGetRecordCommand = class _BatchGetRecordCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerFeatureStoreRuntime", "BatchGetRecord", {}).n("SageMakerFeatureStoreRuntimeClient", "BatchGetRecordCommand").f(void 0, void 0).ser(se_BatchGetRecordCommand).de(de_BatchGetRecordCommand).build() {
};
__name(_BatchGetRecordCommand, "BatchGetRecordCommand");
var BatchGetRecordCommand = _BatchGetRecordCommand;

// src/commands/DeleteRecordCommand.ts




var _DeleteRecordCommand = class _DeleteRecordCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerFeatureStoreRuntime", "DeleteRecord", {}).n("SageMakerFeatureStoreRuntimeClient", "DeleteRecordCommand").f(void 0, void 0).ser(se_DeleteRecordCommand).de(de_DeleteRecordCommand).build() {
};
__name(_DeleteRecordCommand, "DeleteRecordCommand");
var DeleteRecordCommand = _DeleteRecordCommand;

// src/commands/GetRecordCommand.ts




var _GetRecordCommand = class _GetRecordCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerFeatureStoreRuntime", "GetRecord", {}).n("SageMakerFeatureStoreRuntimeClient", "GetRecordCommand").f(void 0, void 0).ser(se_GetRecordCommand).de(de_GetRecordCommand).build() {
};
__name(_GetRecordCommand, "GetRecordCommand");
var GetRecordCommand = _GetRecordCommand;

// src/commands/PutRecordCommand.ts




var _PutRecordCommand = class _PutRecordCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AmazonSageMakerFeatureStoreRuntime", "PutRecord", {}).n("SageMakerFeatureStoreRuntimeClient", "PutRecordCommand").f(void 0, void 0).ser(se_PutRecordCommand).de(de_PutRecordCommand).build() {
};
__name(_PutRecordCommand, "PutRecordCommand");
var PutRecordCommand = _PutRecordCommand;

// src/SageMakerFeatureStoreRuntime.ts
var commands = {
  BatchGetRecordCommand,
  DeleteRecordCommand,
  GetRecordCommand,
  PutRecordCommand
};
var _SageMakerFeatureStoreRuntime = class _SageMakerFeatureStoreRuntime extends SageMakerFeatureStoreRuntimeClient {
};
__name(_SageMakerFeatureStoreRuntime, "SageMakerFeatureStoreRuntime");
var SageMakerFeatureStoreRuntime = _SageMakerFeatureStoreRuntime;
(0, import_smithy_client.createAggregatedClient)(commands, SageMakerFeatureStoreRuntime);

// src/index.ts
var import_util_endpoints = require("@aws-sdk/util-endpoints");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  SageMakerFeatureStoreRuntimeServiceException,
  __Client,
  SageMakerFeatureStoreRuntimeClient,
  SageMakerFeatureStoreRuntime,
  $Command,
  BatchGetRecordCommand,
  DeleteRecordCommand,
  GetRecordCommand,
  PutRecordCommand,
  AccessForbidden,
  ExpirationTimeResponse,
  InternalFailure,
  ServiceUnavailable,
  ValidationError,
  DeletionMode,
  TargetStore,
  ResourceNotFound,
  TtlDurationUnit
});

