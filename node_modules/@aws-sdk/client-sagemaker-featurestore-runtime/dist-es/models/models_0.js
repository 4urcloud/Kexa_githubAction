import { SageMakerFeatureStoreRuntimeServiceException as __BaseException } from "./SageMakerFeatureStoreRuntimeServiceException";
export class AccessForbidden extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessForbidden",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessForbidden";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessForbidden.prototype);
        this.Message = opts.Message;
    }
}
export const ExpirationTimeResponse = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
export class InternalFailure extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalFailure",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailure";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailure.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceUnavailable extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailable",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailable";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailable.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationError extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationError",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationError";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationError.prototype);
        this.Message = opts.Message;
    }
}
export const DeletionMode = {
    HARD_DELETE: "HardDelete",
    SOFT_DELETE: "SoftDelete",
};
export const TargetStore = {
    OFFLINE_STORE: "OfflineStore",
    ONLINE_STORE: "OnlineStore",
};
export class ResourceNotFound extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFound",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFound.prototype);
        this.Message = opts.Message;
    }
}
export const TtlDurationUnit = {
    DAYS: "Days",
    HOURS: "Hours",
    MINUTES: "Minutes",
    SECONDS: "Seconds",
    WEEKS: "Weeks",
};
