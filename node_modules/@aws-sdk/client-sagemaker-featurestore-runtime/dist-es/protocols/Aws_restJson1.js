import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, take, withBaseException, } from "@smithy/smithy-client";
import { AccessForbidden, InternalFailure, ResourceNotFound, ServiceUnavailable, ValidationError, } from "../models/models_0";
import { SageMakerFeatureStoreRuntimeServiceException as __BaseException } from "../models/SageMakerFeatureStoreRuntimeServiceException";
export const se_BatchGetRecordCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/BatchGetRecord");
    let body;
    body = JSON.stringify(take(input, {
        ExpirationTimeResponse: [],
        Identifiers: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteRecordCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/FeatureGroup/{FeatureGroupName}");
    b.p("FeatureGroupName", () => input.FeatureGroupName, "{FeatureGroupName}", false);
    const query = map({
        [_RIVAS]: [, __expectNonNull(input[_RIVAS], `RecordIdentifierValueAsString`)],
        [_ET]: [, __expectNonNull(input[_ET], `EventTime`)],
        [_TS]: [() => input.TargetStores !== void 0, () => (input[_TS] || []).map((_entry) => _entry)],
        [_DM]: [, input[_DM]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetRecordCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/FeatureGroup/{FeatureGroupName}");
    b.p("FeatureGroupName", () => input.FeatureGroupName, "{FeatureGroupName}", false);
    const query = map({
        [_RIVAS]: [, __expectNonNull(input[_RIVAS], `RecordIdentifierValueAsString`)],
        [_FNe]: [() => input.FeatureNames !== void 0, () => (input[_FN] || []).map((_entry) => _entry)],
        [_ETR]: [, input[_ETR]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutRecordCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/FeatureGroup/{FeatureGroupName}");
    b.p("FeatureGroupName", () => input.FeatureGroupName, "{FeatureGroupName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Record: (_) => _json(_),
        TargetStores: (_) => _json(_),
        TtlDuration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_BatchGetRecordCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Errors: _json,
        Records: _json,
        UnprocessedIdentifiers: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteRecordCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetRecordCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ExpiresAt: __expectString,
        Record: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutRecordCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessForbidden":
        case "com.amazonaws.sagemakerfeaturestoreruntime#AccessForbidden":
            throw await de_AccessForbiddenRes(parsedOutput, context);
        case "InternalFailure":
        case "com.amazonaws.sagemakerfeaturestoreruntime#InternalFailure":
            throw await de_InternalFailureRes(parsedOutput, context);
        case "ServiceUnavailable":
        case "com.amazonaws.sagemakerfeaturestoreruntime#ServiceUnavailable":
            throw await de_ServiceUnavailableRes(parsedOutput, context);
        case "ValidationError":
        case "com.amazonaws.sagemakerfeaturestoreruntime#ValidationError":
            throw await de_ValidationErrorRes(parsedOutput, context);
        case "ResourceNotFound":
        case "com.amazonaws.sagemakerfeaturestoreruntime#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessForbiddenRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessForbidden({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalFailureRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalFailure({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailable({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationErrorRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _DM = "DeletionMode";
const _ET = "EventTime";
const _ETR = "ExpirationTimeResponse";
const _FN = "FeatureNames";
const _FNe = "FeatureName";
const _RIVAS = "RecordIdentifierValueAsString";
const _TS = "TargetStores";
