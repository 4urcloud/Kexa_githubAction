import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { StreamingBlobTypes } from "@smithy/types";
import { WorkMailMessageFlowServiceException as __BaseException } from "./WorkMailMessageFlowServiceException";
export interface GetRawMessageContentRequest {
  messageId: string | undefined;
}
export interface GetRawMessageContentResponse {
  messageContent: StreamingBlobTypes | undefined;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class InvalidContentLocation extends __BaseException {
  readonly name: "InvalidContentLocation";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidContentLocation, __BaseException>
  );
}
export declare class MessageFrozen extends __BaseException {
  readonly name: "MessageFrozen";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<MessageFrozen, __BaseException>);
}
export declare class MessageRejected extends __BaseException {
  readonly name: "MessageRejected";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<MessageRejected, __BaseException>);
}
export interface S3Reference {
  bucket: string | undefined;
  key: string | undefined;
  objectVersion?: string;
}
export interface RawMessageContent {
  s3Reference: S3Reference | undefined;
}
export interface PutRawMessageContentRequest {
  messageId: string | undefined;
  content: RawMessageContent | undefined;
}
export interface PutRawMessageContentResponse {}
export declare const GetRawMessageContentResponseFilterSensitiveLog: (
  obj: GetRawMessageContentResponse
) => any;
