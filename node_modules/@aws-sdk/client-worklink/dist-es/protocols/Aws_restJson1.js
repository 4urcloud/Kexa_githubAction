import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { InternalServerErrorException, InvalidRequestException, ResourceAlreadyExistsException, ResourceNotFoundException, TooManyRequestsException, UnauthorizedException, } from "../models/models_0";
import { WorkLinkServiceException as __BaseException } from "../models/WorkLinkServiceException";
export const se_AssociateDomainCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associateDomain");
    let body;
    body = JSON.stringify(take(input, {
        AcmCertificateArn: [],
        DisplayName: [],
        DomainName: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateWebsiteAuthorizationProviderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associateWebsiteAuthorizationProvider");
    let body;
    body = JSON.stringify(take(input, {
        AuthorizationProviderType: [],
        DomainName: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateWebsiteCertificateAuthorityCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associateWebsiteCertificateAuthority");
    let body;
    body = JSON.stringify(take(input, {
        Certificate: [],
        DisplayName: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFleetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createFleet");
    let body;
    body = JSON.stringify(take(input, {
        DisplayName: [],
        FleetName: [],
        OptimizeForEndUserLocation: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteFleetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteFleet");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAuditStreamConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeAuditStreamConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeCompanyNetworkConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeCompanyNetworkConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeDevice");
    let body;
    body = JSON.stringify(take(input, {
        DeviceId: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeDevicePolicyConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeDevicePolicyConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeDomainCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeDomain");
    let body;
    body = JSON.stringify(take(input, {
        DomainName: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeFleetMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeFleetMetadata");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeIdentityProviderConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeIdentityProviderConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeWebsiteCertificateAuthorityCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describeWebsiteCertificateAuthority");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
        WebsiteCaId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateDomainCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/disassociateDomain");
    let body;
    body = JSON.stringify(take(input, {
        DomainName: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateWebsiteAuthorizationProviderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/disassociateWebsiteAuthorizationProvider");
    let body;
    body = JSON.stringify(take(input, {
        AuthorizationProviderId: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateWebsiteCertificateAuthorityCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/disassociateWebsiteCertificateAuthority");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
        WebsiteCaId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListDevicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listDevices");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListDomainsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listDomains");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListFleetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listFleets");
    let body;
    body = JSON.stringify(take(input, {
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListWebsiteAuthorizationProvidersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listWebsiteAuthorizationProviders");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListWebsiteCertificateAuthoritiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listWebsiteCertificateAuthorities");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RestoreDomainAccessCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restoreDomainAccess");
    let body;
    body = JSON.stringify(take(input, {
        DomainName: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RevokeDomainAccessCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/revokeDomainAccess");
    let body;
    body = JSON.stringify(take(input, {
        DomainName: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_SignOutUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/signOutUser");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
        Username: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAuditStreamConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateAuditStreamConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        AuditStreamArn: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateCompanyNetworkConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateCompanyNetworkConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
        SecurityGroupIds: (_) => _json(_),
        SubnetIds: (_) => _json(_),
        VpcId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateDevicePolicyConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateDevicePolicyConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        DeviceCaCertificate: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateDomainMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateDomainMetadata");
    let body;
    body = JSON.stringify(take(input, {
        DisplayName: [],
        DomainName: [],
        FleetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateFleetMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateFleetMetadata");
    let body;
    body = JSON.stringify(take(input, {
        DisplayName: [],
        FleetArn: [],
        OptimizeForEndUserLocation: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateIdentityProviderConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateIdentityProviderConfiguration");
    let body;
    body = JSON.stringify(take(input, {
        FleetArn: [],
        IdentityProviderSamlMetadata: [],
        IdentityProviderType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_AssociateDomainCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_AssociateWebsiteAuthorizationProviderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AuthorizationProviderId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateWebsiteCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        WebsiteCaId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFleetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FleetArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteFleetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeAuditStreamConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AuditStreamArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeCompanyNetworkConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SecurityGroupIds: _json,
        SubnetIds: _json,
        VpcId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FirstAccessedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastAccessedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Manufacturer: __expectString,
        Model: __expectString,
        OperatingSystem: __expectString,
        OperatingSystemVersion: __expectString,
        PatchLevel: __expectString,
        Status: __expectString,
        Username: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDevicePolicyConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeviceCaCertificate: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDomainCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AcmCertificateArn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        DomainName: __expectString,
        DomainStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeFleetMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CompanyCode: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        FleetName: __expectString,
        FleetStatus: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OptimizeForEndUserLocation: __expectBoolean,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeIdentityProviderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IdentityProviderSamlMetadata: __expectString,
        IdentityProviderType: __expectString,
        ServiceProviderSamlMetadata: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeWebsiteCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Certificate: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateDomainCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateWebsiteAuthorizationProviderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateWebsiteCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ListDevicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Devices: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDomainsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Domains: (_) => de_DomainSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFleetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FleetSummaryList: (_) => de_FleetSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWebsiteAuthorizationProvidersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        WebsiteAuthorizationProviders: (_) => de_WebsiteAuthorizationProvidersSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWebsiteCertificateAuthoritiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        WebsiteCertificateAuthorities: (_) => de_WebsiteCaSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RestoreDomainAccessCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RevokeDomainAccessCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SignOutUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAuditStreamConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateCompanyNetworkConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDevicePolicyConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDomainMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateFleetMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateIdentityProviderConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerErrorException":
        case "com.amazonaws.worklink#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.worklink#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.worklink#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.worklink#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.worklink#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.worklink#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DomainSummary = (output, context) => {
    return take(output, {
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        DomainName: __expectString,
        DomainStatus: __expectString,
    });
};
const de_DomainSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DomainSummary(entry, context);
    });
    return retVal;
};
const de_FleetSummary = (output, context) => {
    return take(output, {
        CompanyCode: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        FleetArn: __expectString,
        FleetName: __expectString,
        FleetStatus: __expectString,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Tags: _json,
    });
};
const de_FleetSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetSummary(entry, context);
    });
    return retVal;
};
const de_WebsiteAuthorizationProvidersSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WebsiteAuthorizationProviderSummary(entry, context);
    });
    return retVal;
};
const de_WebsiteAuthorizationProviderSummary = (output, context) => {
    return take(output, {
        AuthorizationProviderId: __expectString,
        AuthorizationProviderType: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainName: __expectString,
    });
};
const de_WebsiteCaSummary = (output, context) => {
    return take(output, {
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DisplayName: __expectString,
        WebsiteCaId: __expectString,
    });
};
const de_WebsiteCaSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WebsiteCaSummary(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _TK = "TagKeys";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
