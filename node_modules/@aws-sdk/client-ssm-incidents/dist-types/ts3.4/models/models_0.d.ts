import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { SSMIncidentsServiceException as __BaseException } from "./SSMIncidentsServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const VariableType: {
  readonly INCIDENT_RECORD_ARN: "INCIDENT_RECORD_ARN";
  readonly INVOLVED_RESOURCES: "INVOLVED_RESOURCES";
};
export type VariableType = (typeof VariableType)[keyof typeof VariableType];
export type DynamicSsmParameterValue =
  | DynamicSsmParameterValue.VariableMember
  | DynamicSsmParameterValue.$UnknownMember;
export declare namespace DynamicSsmParameterValue {
  interface VariableMember {
    variable: VariableType;
    $unknown?: never;
  }
  interface $UnknownMember {
    variable?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    variable: (value: VariableType) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: DynamicSsmParameterValue, visitor: Visitor<T>) => T;
}
export declare const SsmTargetAccount: {
  readonly IMPACTED_ACCOUNT: "IMPACTED_ACCOUNT";
  readonly RESPONSE_PLAN_OWNER_ACCOUNT: "RESPONSE_PLAN_OWNER_ACCOUNT";
};
export type SsmTargetAccount =
  (typeof SsmTargetAccount)[keyof typeof SsmTargetAccount];
export interface SsmAutomation {
  roleArn: string | undefined;
  documentName: string | undefined;
  documentVersion?: string;
  targetAccount?: SsmTargetAccount;
  parameters?: Record<string, string[]>;
  dynamicParameters?: Record<string, DynamicSsmParameterValue>;
}
export type Action = Action.SsmAutomationMember | Action.$UnknownMember;
export declare namespace Action {
  interface SsmAutomationMember {
    ssmAutomation: SsmAutomation;
    $unknown?: never;
  }
  interface $UnknownMember {
    ssmAutomation?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    ssmAutomation: (value: SsmAutomation) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Action, visitor: Visitor<T>) => T;
}
export interface AddRegionAction {
  regionName: string | undefined;
  sseKmsKeyId?: string;
}
export type AttributeValueList =
  | AttributeValueList.IntegerValuesMember
  | AttributeValueList.StringValuesMember
  | AttributeValueList.$UnknownMember;
export declare namespace AttributeValueList {
  interface StringValuesMember {
    stringValues: string[];
    integerValues?: never;
    $unknown?: never;
  }
  interface IntegerValuesMember {
    stringValues?: never;
    integerValues: number[];
    $unknown?: never;
  }
  interface $UnknownMember {
    stringValues?: never;
    integerValues?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    stringValues: (value: string[]) => T;
    integerValues: (value: number[]) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: AttributeValueList, visitor: Visitor<T>) => T;
}
export type AutomationExecution =
  | AutomationExecution.SsmExecutionArnMember
  | AutomationExecution.$UnknownMember;
export declare namespace AutomationExecution {
  interface SsmExecutionArnMember {
    ssmExecutionArn: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    ssmExecutionArn?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    ssmExecutionArn: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: AutomationExecution, visitor: Visitor<T>) => T;
}
export interface BatchGetIncidentFindingsInput {
  incidentRecordArn: string | undefined;
  findingIds: string[] | undefined;
}
export interface BatchGetIncidentFindingsError {
  findingId: string | undefined;
  code: string | undefined;
  message: string | undefined;
}
export interface CloudFormationStackUpdate {
  startTime: Date | undefined;
  endTime?: Date;
  stackArn: string | undefined;
}
export interface CodeDeployDeployment {
  startTime: Date | undefined;
  endTime?: Date;
  deploymentGroupArn: string | undefined;
  deploymentId: string | undefined;
}
export type FindingDetails =
  | FindingDetails.CloudFormationStackUpdateMember
  | FindingDetails.CodeDeployDeploymentMember
  | FindingDetails.$UnknownMember;
export declare namespace FindingDetails {
  interface CodeDeployDeploymentMember {
    codeDeployDeployment: CodeDeployDeployment;
    cloudFormationStackUpdate?: never;
    $unknown?: never;
  }
  interface CloudFormationStackUpdateMember {
    codeDeployDeployment?: never;
    cloudFormationStackUpdate: CloudFormationStackUpdate;
    $unknown?: never;
  }
  interface $UnknownMember {
    codeDeployDeployment?: never;
    cloudFormationStackUpdate?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    codeDeployDeployment: (value: CodeDeployDeployment) => T;
    cloudFormationStackUpdate: (value: CloudFormationStackUpdate) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: FindingDetails, visitor: Visitor<T>) => T;
}
export interface Finding {
  id: string | undefined;
  creationTime: Date | undefined;
  lastModifiedTime: Date | undefined;
  details?: FindingDetails;
}
export interface BatchGetIncidentFindingsOutput {
  findings: Finding[] | undefined;
  errors: BatchGetIncidentFindingsError[] | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare const ResourceType: {
  readonly INCIDENT_RECORD: "INCIDENT_RECORD";
  readonly REPLICATION_SET: "REPLICATION_SET";
  readonly RESOURCE_POLICY: "RESOURCE_POLICY";
  readonly RESPONSE_PLAN: "RESPONSE_PLAN";
  readonly TIMELINE_EVENT: "TIMELINE_EVENT";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceIdentifier?: string;
  resourceType?: ResourceType;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare const ServiceCode: {
  readonly SSM_INCIDENTS: "ssm-incidents";
};
export type ServiceCode = (typeof ServiceCode)[keyof typeof ServiceCode];
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  serviceCode: ServiceCode | undefined;
  quotaCode: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface EmptyChatChannel {}
export type ChatChannel =
  | ChatChannel.ChatbotSnsMember
  | ChatChannel.EmptyMember
  | ChatChannel.$UnknownMember;
export declare namespace ChatChannel {
  interface EmptyMember {
    empty: EmptyChatChannel;
    chatbotSns?: never;
    $unknown?: never;
  }
  interface ChatbotSnsMember {
    empty?: never;
    chatbotSns: string[];
    $unknown?: never;
  }
  interface $UnknownMember {
    empty?: never;
    chatbotSns?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    empty: (value: EmptyChatChannel) => T;
    chatbotSns: (value: string[]) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ChatChannel, visitor: Visitor<T>) => T;
}
export type Condition =
  | Condition.AfterMember
  | Condition.BeforeMember
  | Condition.EqualsMember
  | Condition.$UnknownMember;
export declare namespace Condition {
  interface BeforeMember {
    before: Date;
    after?: never;
    equals?: never;
    $unknown?: never;
  }
  interface AfterMember {
    before?: never;
    after: Date;
    equals?: never;
    $unknown?: never;
  }
  interface EqualsMember {
    before?: never;
    after?: never;
    equals: AttributeValueList;
    $unknown?: never;
  }
  interface $UnknownMember {
    before?: never;
    after?: never;
    equals?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    before: (value: Date) => T;
    after: (value: Date) => T;
    equals: (value: AttributeValueList) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Condition, visitor: Visitor<T>) => T;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  resourceIdentifier?: string;
  resourceType?: ResourceType;
  retryAfter?: Date;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface RegionMapInputValue {
  sseKmsKeyId?: string;
}
export interface CreateReplicationSetInput {
  regions: Record<string, RegionMapInputValue> | undefined;
  clientToken?: string;
  tags?: Record<string, string>;
}
export interface CreateReplicationSetOutput {
  arn: string | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  resourceIdentifier?: string;
  resourceType?: ResourceType;
  serviceCode: ServiceCode | undefined;
  quotaCode: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export type NotificationTargetItem =
  | NotificationTargetItem.SnsTopicArnMember
  | NotificationTargetItem.$UnknownMember;
export declare namespace NotificationTargetItem {
  interface SnsTopicArnMember {
    snsTopicArn: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    snsTopicArn?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    snsTopicArn: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: NotificationTargetItem, visitor: Visitor<T>) => T;
}
export interface IncidentTemplate {
  title: string | undefined;
  impact: number | undefined;
  summary?: string;
  dedupeString?: string;
  notificationTargets?: NotificationTargetItem[];
  incidentTags?: Record<string, string>;
}
export interface PagerDutyIncidentConfiguration {
  serviceId: string | undefined;
}
export interface PagerDutyConfiguration {
  name: string | undefined;
  secretId: string | undefined;
  pagerDutyIncidentConfiguration: PagerDutyIncidentConfiguration | undefined;
}
export type Integration =
  | Integration.PagerDutyConfigurationMember
  | Integration.$UnknownMember;
export declare namespace Integration {
  interface PagerDutyConfigurationMember {
    pagerDutyConfiguration: PagerDutyConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    pagerDutyConfiguration?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    pagerDutyConfiguration: (value: PagerDutyConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Integration, visitor: Visitor<T>) => T;
}
export interface CreateResponsePlanInput {
  clientToken?: string;
  name: string | undefined;
  displayName?: string;
  incidentTemplate: IncidentTemplate | undefined;
  chatChannel?: ChatChannel;
  engagements?: string[];
  actions?: Action[];
  tags?: Record<string, string>;
  integrations?: Integration[];
}
export interface CreateResponsePlanOutput {
  arn: string | undefined;
}
export type EventReference =
  | EventReference.RelatedItemIdMember
  | EventReference.ResourceMember
  | EventReference.$UnknownMember;
export declare namespace EventReference {
  interface ResourceMember {
    resource: string;
    relatedItemId?: never;
    $unknown?: never;
  }
  interface RelatedItemIdMember {
    resource?: never;
    relatedItemId: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    resource?: never;
    relatedItemId?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    resource: (value: string) => T;
    relatedItemId: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: EventReference, visitor: Visitor<T>) => T;
}
export interface CreateTimelineEventInput {
  clientToken?: string;
  incidentRecordArn: string | undefined;
  eventTime: Date | undefined;
  eventType: string | undefined;
  eventData: string | undefined;
  eventReferences?: EventReference[];
}
export interface CreateTimelineEventOutput {
  incidentRecordArn: string | undefined;
  eventId: string | undefined;
}
export interface DeleteIncidentRecordInput {
  arn: string | undefined;
}
export interface DeleteIncidentRecordOutput {}
export interface DeleteRegionAction {
  regionName: string | undefined;
}
export interface DeleteReplicationSetInput {
  arn: string | undefined;
}
export interface DeleteReplicationSetOutput {}
export interface DeleteResourcePolicyInput {
  resourceArn: string | undefined;
  policyId: string | undefined;
}
export interface DeleteResourcePolicyOutput {}
export interface DeleteResponsePlanInput {
  arn: string | undefined;
}
export interface DeleteResponsePlanOutput {}
export interface DeleteTimelineEventInput {
  incidentRecordArn: string | undefined;
  eventId: string | undefined;
}
export interface DeleteTimelineEventOutput {}
export interface EventSummary {
  incidentRecordArn: string | undefined;
  eventId: string | undefined;
  eventTime: Date | undefined;
  eventUpdatedTime: Date | undefined;
  eventType: string | undefined;
  eventReferences?: EventReference[];
}
export interface Filter {
  key: string | undefined;
  condition: Condition | undefined;
}
export interface FindingSummary {
  id: string | undefined;
  lastModifiedTime: Date | undefined;
}
export interface GetIncidentRecordInput {
  arn: string | undefined;
}
export interface IncidentRecordSource {
  createdBy: string | undefined;
  invokedBy?: string;
  resourceArn?: string;
  source: string | undefined;
}
export declare const IncidentRecordStatus: {
  readonly OPEN: "OPEN";
  readonly RESOLVED: "RESOLVED";
};
export type IncidentRecordStatus =
  (typeof IncidentRecordStatus)[keyof typeof IncidentRecordStatus];
export interface IncidentRecord {
  arn: string | undefined;
  title: string | undefined;
  summary?: string;
  status: IncidentRecordStatus | undefined;
  impact: number | undefined;
  creationTime: Date | undefined;
  resolvedTime?: Date;
  lastModifiedTime: Date | undefined;
  lastModifiedBy: string | undefined;
  automationExecutions?: AutomationExecution[];
  incidentRecordSource: IncidentRecordSource | undefined;
  dedupeString: string | undefined;
  chatChannel?: ChatChannel;
  notificationTargets?: NotificationTargetItem[];
}
export interface GetIncidentRecordOutput {
  incidentRecord: IncidentRecord | undefined;
}
export interface GetReplicationSetInput {
  arn: string | undefined;
}
export declare const RegionStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
};
export type RegionStatus = (typeof RegionStatus)[keyof typeof RegionStatus];
export interface RegionInfo {
  sseKmsKeyId?: string;
  status: RegionStatus | undefined;
  statusMessage?: string;
  statusUpdateDateTime: Date | undefined;
}
export declare const ReplicationSetStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly UPDATING: "UPDATING";
};
export type ReplicationSetStatus =
  (typeof ReplicationSetStatus)[keyof typeof ReplicationSetStatus];
export interface ReplicationSet {
  arn?: string;
  regionMap: Record<string, RegionInfo> | undefined;
  status: ReplicationSetStatus | undefined;
  deletionProtected: boolean | undefined;
  createdTime: Date | undefined;
  createdBy: string | undefined;
  lastModifiedTime: Date | undefined;
  lastModifiedBy: string | undefined;
}
export interface GetReplicationSetOutput {
  replicationSet: ReplicationSet | undefined;
}
export interface GetResourcePoliciesInput {
  resourceArn: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ResourcePolicy {
  policyDocument: string | undefined;
  policyId: string | undefined;
  ramResourceShareRegion: string | undefined;
}
export interface GetResourcePoliciesOutput {
  resourcePolicies: ResourcePolicy[] | undefined;
  nextToken?: string;
}
export interface GetResponsePlanInput {
  arn: string | undefined;
}
export interface GetResponsePlanOutput {
  arn: string | undefined;
  name: string | undefined;
  displayName?: string;
  incidentTemplate: IncidentTemplate | undefined;
  chatChannel?: ChatChannel;
  engagements?: string[];
  actions?: Action[];
  integrations?: Integration[];
}
export interface GetTimelineEventInput {
  incidentRecordArn: string | undefined;
  eventId: string | undefined;
}
export interface TimelineEvent {
  incidentRecordArn: string | undefined;
  eventId: string | undefined;
  eventTime: Date | undefined;
  eventUpdatedTime: Date | undefined;
  eventType: string | undefined;
  eventData: string | undefined;
  eventReferences?: EventReference[];
}
export interface GetTimelineEventOutput {
  event: TimelineEvent | undefined;
}
export interface IncidentRecordSummary {
  arn: string | undefined;
  title: string | undefined;
  status: IncidentRecordStatus | undefined;
  impact: number | undefined;
  creationTime: Date | undefined;
  resolvedTime?: Date;
  incidentRecordSource: IncidentRecordSource | undefined;
}
export declare const ItemType: {
  readonly ANALYSIS: "ANALYSIS";
  readonly ATTACHMENT: "ATTACHMENT";
  readonly AUTOMATION: "AUTOMATION";
  readonly INCIDENT: "INCIDENT";
  readonly INVOLVED_RESOURCE: "INVOLVED_RESOURCE";
  readonly METRIC: "METRIC";
  readonly OTHER: "OTHER";
  readonly PARENT: "PARENT";
  readonly TASK: "TASK";
};
export type ItemType = (typeof ItemType)[keyof typeof ItemType];
export interface PagerDutyIncidentDetail {
  id: string | undefined;
  autoResolve?: boolean;
  secretId?: string;
}
export type ItemValue =
  | ItemValue.ArnMember
  | ItemValue.MetricDefinitionMember
  | ItemValue.PagerDutyIncidentDetailMember
  | ItemValue.UrlMember
  | ItemValue.$UnknownMember;
export declare namespace ItemValue {
  interface ArnMember {
    arn: string;
    url?: never;
    metricDefinition?: never;
    pagerDutyIncidentDetail?: never;
    $unknown?: never;
  }
  interface UrlMember {
    arn?: never;
    url: string;
    metricDefinition?: never;
    pagerDutyIncidentDetail?: never;
    $unknown?: never;
  }
  interface MetricDefinitionMember {
    arn?: never;
    url?: never;
    metricDefinition: string;
    pagerDutyIncidentDetail?: never;
    $unknown?: never;
  }
  interface PagerDutyIncidentDetailMember {
    arn?: never;
    url?: never;
    metricDefinition?: never;
    pagerDutyIncidentDetail: PagerDutyIncidentDetail;
    $unknown?: never;
  }
  interface $UnknownMember {
    arn?: never;
    url?: never;
    metricDefinition?: never;
    pagerDutyIncidentDetail?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    arn: (value: string) => T;
    url: (value: string) => T;
    metricDefinition: (value: string) => T;
    pagerDutyIncidentDetail: (value: PagerDutyIncidentDetail) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ItemValue, visitor: Visitor<T>) => T;
}
export interface ItemIdentifier {
  value: ItemValue | undefined;
  type: ItemType | undefined;
}
export interface ListIncidentFindingsInput {
  incidentRecordArn: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListIncidentFindingsOutput {
  findings: FindingSummary[] | undefined;
  nextToken?: string;
}
export interface ListIncidentRecordsInput {
  filters?: Filter[];
  maxResults?: number;
  nextToken?: string;
}
export interface ListIncidentRecordsOutput {
  incidentRecordSummaries: IncidentRecordSummary[] | undefined;
  nextToken?: string;
}
export interface ListRelatedItemsInput {
  incidentRecordArn: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface RelatedItem {
  identifier: ItemIdentifier | undefined;
  title?: string;
  generatedId?: string;
}
export interface ListRelatedItemsOutput {
  relatedItems: RelatedItem[] | undefined;
  nextToken?: string;
}
export interface ListReplicationSetsInput {
  maxResults?: number;
  nextToken?: string;
}
export interface ListReplicationSetsOutput {
  replicationSetArns: string[] | undefined;
  nextToken?: string;
}
export interface ListResponsePlansInput {
  maxResults?: number;
  nextToken?: string;
}
export interface ResponsePlanSummary {
  arn: string | undefined;
  name: string | undefined;
  displayName?: string;
}
export interface ListResponsePlansOutput {
  responsePlanSummaries: ResponsePlanSummary[] | undefined;
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags: Record<string, string> | undefined;
}
export declare const TimelineEventSort: {
  readonly EVENT_TIME: "EVENT_TIME";
};
export type TimelineEventSort =
  (typeof TimelineEventSort)[keyof typeof TimelineEventSort];
export declare const SortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface ListTimelineEventsInput {
  incidentRecordArn: string | undefined;
  filters?: Filter[];
  sortBy?: TimelineEventSort;
  sortOrder?: SortOrder;
  maxResults?: number;
  nextToken?: string;
}
export interface ListTimelineEventsOutput {
  eventSummaries: EventSummary[] | undefined;
  nextToken?: string;
}
export interface PutResourcePolicyInput {
  resourceArn: string | undefined;
  policy: string | undefined;
}
export interface PutResourcePolicyOutput {
  policyId: string | undefined;
}
export type RelatedItemsUpdate =
  | RelatedItemsUpdate.ItemToAddMember
  | RelatedItemsUpdate.ItemToRemoveMember
  | RelatedItemsUpdate.$UnknownMember;
export declare namespace RelatedItemsUpdate {
  interface ItemToAddMember {
    itemToAdd: RelatedItem;
    itemToRemove?: never;
    $unknown?: never;
  }
  interface ItemToRemoveMember {
    itemToAdd?: never;
    itemToRemove: ItemIdentifier;
    $unknown?: never;
  }
  interface $UnknownMember {
    itemToAdd?: never;
    itemToRemove?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    itemToAdd: (value: RelatedItem) => T;
    itemToRemove: (value: ItemIdentifier) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: RelatedItemsUpdate, visitor: Visitor<T>) => T;
}
export interface TriggerDetails {
  source: string | undefined;
  triggerArn?: string;
  timestamp: Date | undefined;
  rawData?: string;
}
export interface StartIncidentInput {
  clientToken?: string;
  responsePlanArn: string | undefined;
  title?: string;
  impact?: number;
  triggerDetails?: TriggerDetails;
  relatedItems?: RelatedItem[];
}
export interface StartIncidentOutput {
  incidentRecordArn: string | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateDeletionProtectionInput {
  arn: string | undefined;
  deletionProtected: boolean | undefined;
  clientToken?: string;
}
export interface UpdateDeletionProtectionOutput {}
export interface UpdateIncidentRecordInput {
  clientToken?: string;
  arn: string | undefined;
  title?: string;
  summary?: string;
  impact?: number;
  status?: IncidentRecordStatus;
  chatChannel?: ChatChannel;
  notificationTargets?: NotificationTargetItem[];
}
export interface UpdateIncidentRecordOutput {}
export interface UpdateRelatedItemsInput {
  clientToken?: string;
  incidentRecordArn: string | undefined;
  relatedItemsUpdate: RelatedItemsUpdate | undefined;
}
export interface UpdateRelatedItemsOutput {}
export type UpdateReplicationSetAction =
  | UpdateReplicationSetAction.AddRegionActionMember
  | UpdateReplicationSetAction.DeleteRegionActionMember
  | UpdateReplicationSetAction.$UnknownMember;
export declare namespace UpdateReplicationSetAction {
  interface AddRegionActionMember {
    addRegionAction: AddRegionAction;
    deleteRegionAction?: never;
    $unknown?: never;
  }
  interface DeleteRegionActionMember {
    addRegionAction?: never;
    deleteRegionAction: DeleteRegionAction;
    $unknown?: never;
  }
  interface $UnknownMember {
    addRegionAction?: never;
    deleteRegionAction?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    addRegionAction: (value: AddRegionAction) => T;
    deleteRegionAction: (value: DeleteRegionAction) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: UpdateReplicationSetAction, visitor: Visitor<T>) => T;
}
export interface UpdateReplicationSetInput {
  arn: string | undefined;
  actions: UpdateReplicationSetAction[] | undefined;
  clientToken?: string;
}
export interface UpdateReplicationSetOutput {}
export interface UpdateResponsePlanInput {
  clientToken?: string;
  arn: string | undefined;
  displayName?: string;
  incidentTemplateTitle?: string;
  incidentTemplateImpact?: number;
  incidentTemplateSummary?: string;
  incidentTemplateDedupeString?: string;
  incidentTemplateNotificationTargets?: NotificationTargetItem[];
  chatChannel?: ChatChannel;
  engagements?: string[];
  actions?: Action[];
  incidentTemplateTags?: Record<string, string>;
  integrations?: Integration[];
}
export interface UpdateResponsePlanOutput {}
export interface UpdateTimelineEventInput {
  clientToken?: string;
  incidentRecordArn: string | undefined;
  eventId: string | undefined;
  eventTime?: Date;
  eventType?: string;
  eventData?: string;
  eventReferences?: EventReference[];
}
export interface UpdateTimelineEventOutput {}
