import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, Condition, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { SSMIncidentsServiceException as __BaseException } from "../models/SSMIncidentsServiceException";
export const se_BatchGetIncidentFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/batchGetIncidentFindings");
    let body;
    body = JSON.stringify(take(input, {
        findingIds: (_) => _json(_),
        incidentRecordArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateReplicationSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createReplicationSet");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        regions: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateResponsePlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createResponsePlan");
    let body;
    body = JSON.stringify(take(input, {
        actions: (_) => _json(_),
        chatChannel: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        displayName: [],
        engagements: (_) => _json(_),
        incidentTemplate: (_) => _json(_),
        integrations: (_) => _json(_),
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTimelineEventCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/createTimelineEvent");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        eventData: [],
        eventReferences: (_) => _json(_),
        eventTime: (_) => Math.round(_.getTime() / 1000),
        eventType: [],
        incidentRecordArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteIncidentRecordCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteIncidentRecord");
    let body;
    body = JSON.stringify(take(input, {
        arn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteReplicationSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/deleteReplicationSet");
    const query = map({
        [_a]: [, __expectNonNull(input[_a], `arn`)],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteResourcePolicy");
    let body;
    body = JSON.stringify(take(input, {
        policyId: [],
        resourceArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteResponsePlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteResponsePlan");
    let body;
    body = JSON.stringify(take(input, {
        arn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteTimelineEventCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/deleteTimelineEvent");
    let body;
    body = JSON.stringify(take(input, {
        eventId: [],
        incidentRecordArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetIncidentRecordCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/getIncidentRecord");
    const query = map({
        [_a]: [, __expectNonNull(input[_a], `arn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetReplicationSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/getReplicationSet");
    const query = map({
        [_a]: [, __expectNonNull(input[_a], `arn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetResourcePoliciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/getResourcePolicies");
    const query = map({
        [_rA]: [, __expectNonNull(input[_rA], `resourceArn`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetResponsePlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/getResponsePlan");
    const query = map({
        [_a]: [, __expectNonNull(input[_a], `arn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetTimelineEventCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/getTimelineEvent");
    const query = map({
        [_iRA]: [, __expectNonNull(input[_iRA], `incidentRecordArn`)],
        [_eI]: [, __expectNonNull(input[_eI], `eventId`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListIncidentFindingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listIncidentFindings");
    let body;
    body = JSON.stringify(take(input, {
        incidentRecordArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListIncidentRecordsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listIncidentRecords");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => se_FilterList(_, context),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListRelatedItemsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listRelatedItems");
    let body;
    body = JSON.stringify(take(input, {
        incidentRecordArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListReplicationSetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listReplicationSets");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListResponsePlansCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listResponsePlans");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListTimelineEventsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listTimelineEvents");
    let body;
    body = JSON.stringify(take(input, {
        filters: (_) => se_FilterList(_, context),
        incidentRecordArn: [],
        maxResults: [],
        nextToken: [],
        sortBy: [],
        sortOrder: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/putResourcePolicy");
    let body;
    body = JSON.stringify(take(input, {
        policy: [],
        resourceArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartIncidentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/startIncident");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        impact: [],
        relatedItems: (_) => _json(_),
        responsePlanArn: [],
        title: [],
        triggerDetails: (_) => se_TriggerDetails(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateDeletionProtectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateDeletionProtection");
    let body;
    body = JSON.stringify(take(input, {
        arn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        deletionProtected: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateIncidentRecordCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateIncidentRecord");
    let body;
    body = JSON.stringify(take(input, {
        arn: [],
        chatChannel: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        impact: [],
        notificationTargets: (_) => _json(_),
        status: [],
        summary: [],
        title: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRelatedItemsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateRelatedItems");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        incidentRecordArn: [],
        relatedItemsUpdate: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateReplicationSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateReplicationSet");
    let body;
    body = JSON.stringify(take(input, {
        actions: (_) => _json(_),
        arn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateResponsePlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateResponsePlan");
    let body;
    body = JSON.stringify(take(input, {
        actions: (_) => _json(_),
        arn: [],
        chatChannel: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        displayName: [],
        engagements: (_) => _json(_),
        incidentTemplateDedupeString: [],
        incidentTemplateImpact: [],
        incidentTemplateNotificationTargets: (_) => _json(_),
        incidentTemplateSummary: [],
        incidentTemplateTags: (_) => _json(_),
        incidentTemplateTitle: [],
        integrations: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateTimelineEventCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/updateTimelineEvent");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        eventData: [],
        eventId: [],
        eventReferences: (_) => _json(_),
        eventTime: (_) => Math.round(_.getTime() / 1000),
        eventType: [],
        incidentRecordArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_BatchGetIncidentFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errors: _json,
        findings: (_) => de_FindingList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateReplicationSetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateResponsePlanCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTimelineEventCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        eventId: __expectString,
        incidentRecordArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteIncidentRecordCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteReplicationSetCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteResponsePlanCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteTimelineEventCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetIncidentRecordCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        incidentRecord: (_) => de_IncidentRecord(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetReplicationSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        replicationSet: (_) => de_ReplicationSet(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourcePoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resourcePolicies: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResponsePlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        actions: _json,
        arn: __expectString,
        chatChannel: (_) => _json(__expectUnion(_)),
        displayName: __expectString,
        engagements: _json,
        incidentTemplate: _json,
        integrations: _json,
        name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTimelineEventCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        event: (_) => de_TimelineEvent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIncidentFindingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        findings: (_) => de_FindingSummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListIncidentRecordsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        incidentRecordSummaries: (_) => de_IncidentRecordSummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRelatedItemsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        relatedItems: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListReplicationSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        replicationSetArns: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResponsePlansCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        responsePlanSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTimelineEventsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        eventSummaries: (_) => de_EventSummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policyId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartIncidentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        incidentRecordArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDeletionProtectionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateIncidentRecordCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRelatedItemsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateReplicationSetCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateResponsePlanCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateTimelineEventCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssmincidents#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssmincidents#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.ssmincidents#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.ssmincidents#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ssmincidents#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.ssmincidents#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.ssmincidents#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceIdentifier: __expectString,
        resourceType: __expectString,
        retryAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceIdentifier: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        quotaCode: __expectString,
        resourceIdentifier: __expectString,
        resourceType: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        quotaCode: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_Condition = (input, context) => {
    return Condition.visit(input, {
        after: (value) => ({ after: Math.round(value.getTime() / 1000) }),
        before: (value) => ({ before: Math.round(value.getTime() / 1000) }),
        equals: (value) => ({ equals: _json(value) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_Filter = (input, context) => {
    return take(input, {
        condition: (_) => se_Condition(_, context),
        key: [],
    });
};
const se_FilterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Filter(entry, context);
    });
};
const se_TriggerDetails = (input, context) => {
    return take(input, {
        rawData: [],
        source: [],
        timestamp: (_) => Math.round(_.getTime() / 1000),
        triggerArn: [],
    });
};
const de_CloudFormationStackUpdate = (output, context) => {
    return take(output, {
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        stackArn: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_CodeDeployDeployment = (output, context) => {
    return take(output, {
        deploymentGroupArn: __expectString,
        deploymentId: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_EventSummary = (output, context) => {
    return take(output, {
        eventId: __expectString,
        eventReferences: _json,
        eventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        eventType: __expectString,
        eventUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        incidentRecordArn: __expectString,
    });
};
const de_EventSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventSummary(entry, context);
    });
    return retVal;
};
const de_Finding = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        details: (_) => de_FindingDetails(__expectUnion(_), context),
        id: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_FindingDetails = (output, context) => {
    if (output.cloudFormationStackUpdate != null) {
        return {
            cloudFormationStackUpdate: de_CloudFormationStackUpdate(output.cloudFormationStackUpdate, context),
        };
    }
    if (output.codeDeployDeployment != null) {
        return {
            codeDeployDeployment: de_CodeDeployDeployment(output.codeDeployDeployment, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_FindingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Finding(entry, context);
    });
    return retVal;
};
const de_FindingSummary = (output, context) => {
    return take(output, {
        id: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_FindingSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FindingSummary(entry, context);
    });
    return retVal;
};
const de_IncidentRecord = (output, context) => {
    return take(output, {
        arn: __expectString,
        automationExecutions: _json,
        chatChannel: (_) => _json(__expectUnion(_)),
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dedupeString: __expectString,
        impact: __expectInt32,
        incidentRecordSource: _json,
        lastModifiedBy: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        notificationTargets: _json,
        resolvedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        summary: __expectString,
        title: __expectString,
    });
};
const de_IncidentRecordSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        impact: __expectInt32,
        incidentRecordSource: _json,
        resolvedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        title: __expectString,
    });
};
const de_IncidentRecordSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IncidentRecordSummary(entry, context);
    });
    return retVal;
};
const de_RegionInfo = (output, context) => {
    return take(output, {
        sseKmsKeyId: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        statusUpdateDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_RegionInfoMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_RegionInfo(value, context);
        return acc;
    }, {});
};
const de_ReplicationSet = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdBy: __expectString,
        createdTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deletionProtected: __expectBoolean,
        lastModifiedBy: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        regionMap: (_) => de_RegionInfoMap(_, context),
        status: __expectString,
    });
};
const de_TimelineEvent = (output, context) => {
    return take(output, {
        eventData: __expectString,
        eventId: __expectString,
        eventReferences: _json,
        eventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        eventType: __expectString,
        eventUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        incidentRecordArn: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _a = "arn";
const _eI = "eventId";
const _iRA = "incidentRecordArn";
const _rA = "resourceArn";
const _tK = "tagKeys";
