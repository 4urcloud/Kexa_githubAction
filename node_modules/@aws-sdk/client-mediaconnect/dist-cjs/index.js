"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AddBridgeOutputsCommand: () => AddBridgeOutputsCommand,
  AddBridgeSourcesCommand: () => AddBridgeSourcesCommand,
  AddFlowMediaStreamsCommand: () => AddFlowMediaStreamsCommand,
  AddFlowOutputs420Exception: () => AddFlowOutputs420Exception,
  AddFlowOutputsCommand: () => AddFlowOutputsCommand,
  AddFlowSourcesCommand: () => AddFlowSourcesCommand,
  AddFlowVpcInterfacesCommand: () => AddFlowVpcInterfacesCommand,
  Algorithm: () => Algorithm,
  BadRequestException: () => BadRequestException,
  BridgePlacement: () => BridgePlacement,
  BridgeState: () => BridgeState,
  Colorimetry: () => Colorimetry,
  ConflictException: () => ConflictException,
  ConnectionStatus: () => ConnectionStatus,
  CreateBridge420Exception: () => CreateBridge420Exception,
  CreateBridgeCommand: () => CreateBridgeCommand,
  CreateFlow420Exception: () => CreateFlow420Exception,
  CreateFlowCommand: () => CreateFlowCommand,
  CreateGateway420Exception: () => CreateGateway420Exception,
  CreateGatewayCommand: () => CreateGatewayCommand,
  DeleteBridgeCommand: () => DeleteBridgeCommand,
  DeleteFlowCommand: () => DeleteFlowCommand,
  DeleteGatewayCommand: () => DeleteGatewayCommand,
  DeregisterGatewayInstanceCommand: () => DeregisterGatewayInstanceCommand,
  DescribeBridgeCommand: () => DescribeBridgeCommand,
  DescribeFlowCommand: () => DescribeFlowCommand,
  DescribeFlowSourceMetadataCommand: () => DescribeFlowSourceMetadataCommand,
  DescribeGatewayCommand: () => DescribeGatewayCommand,
  DescribeGatewayInstanceCommand: () => DescribeGatewayInstanceCommand,
  DescribeOfferingCommand: () => DescribeOfferingCommand,
  DescribeReservationCommand: () => DescribeReservationCommand,
  DesiredState: () => DesiredState,
  DurationUnits: () => DurationUnits,
  EncoderProfile: () => EncoderProfile,
  EncodingName: () => EncodingName,
  EntitlementStatus: () => EntitlementStatus,
  FailoverMode: () => FailoverMode,
  ForbiddenException: () => ForbiddenException,
  GatewayState: () => GatewayState,
  GrantFlowEntitlements420Exception: () => GrantFlowEntitlements420Exception,
  GrantFlowEntitlementsCommand: () => GrantFlowEntitlementsCommand,
  InstanceState: () => InstanceState,
  InternalServerErrorException: () => InternalServerErrorException,
  KeyType: () => KeyType,
  ListBridgesCommand: () => ListBridgesCommand,
  ListEntitlementsCommand: () => ListEntitlementsCommand,
  ListFlowsCommand: () => ListFlowsCommand,
  ListGatewayInstancesCommand: () => ListGatewayInstancesCommand,
  ListGatewaysCommand: () => ListGatewaysCommand,
  ListOfferingsCommand: () => ListOfferingsCommand,
  ListReservationsCommand: () => ListReservationsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  MaintenanceDay: () => MaintenanceDay,
  MediaConnect: () => MediaConnect,
  MediaConnectClient: () => MediaConnectClient,
  MediaConnectServiceException: () => MediaConnectServiceException,
  MediaStreamType: () => MediaStreamType,
  NetworkInterfaceType: () => NetworkInterfaceType,
  NotFoundException: () => NotFoundException,
  PriceUnits: () => PriceUnits,
  Protocol: () => Protocol,
  PurchaseOfferingCommand: () => PurchaseOfferingCommand,
  Range: () => Range,
  RemoveBridgeOutputCommand: () => RemoveBridgeOutputCommand,
  RemoveBridgeSourceCommand: () => RemoveBridgeSourceCommand,
  RemoveFlowMediaStreamCommand: () => RemoveFlowMediaStreamCommand,
  RemoveFlowOutputCommand: () => RemoveFlowOutputCommand,
  RemoveFlowSourceCommand: () => RemoveFlowSourceCommand,
  RemoveFlowVpcInterfaceCommand: () => RemoveFlowVpcInterfaceCommand,
  ReservationState: () => ReservationState,
  ResourceType: () => ResourceType,
  RevokeFlowEntitlementCommand: () => RevokeFlowEntitlementCommand,
  ScanMode: () => ScanMode,
  ServiceUnavailableException: () => ServiceUnavailableException,
  SourceType: () => SourceType,
  StartFlowCommand: () => StartFlowCommand,
  State: () => State,
  Status: () => Status,
  StopFlowCommand: () => StopFlowCommand,
  TagResourceCommand: () => TagResourceCommand,
  Tcs: () => Tcs,
  TooManyRequestsException: () => TooManyRequestsException,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateBridgeCommand: () => UpdateBridgeCommand,
  UpdateBridgeOutputCommand: () => UpdateBridgeOutputCommand,
  UpdateBridgeSourceCommand: () => UpdateBridgeSourceCommand,
  UpdateBridgeStateCommand: () => UpdateBridgeStateCommand,
  UpdateFlowCommand: () => UpdateFlowCommand,
  UpdateFlowEntitlementCommand: () => UpdateFlowEntitlementCommand,
  UpdateFlowMediaStreamCommand: () => UpdateFlowMediaStreamCommand,
  UpdateFlowOutputCommand: () => UpdateFlowOutputCommand,
  UpdateFlowSourceCommand: () => UpdateFlowSourceCommand,
  UpdateGatewayInstanceCommand: () => UpdateGatewayInstanceCommand,
  __Client: () => import_smithy_client.Client,
  paginateListBridges: () => paginateListBridges,
  paginateListEntitlements: () => paginateListEntitlements,
  paginateListFlows: () => paginateListFlows,
  paginateListGatewayInstances: () => paginateListGatewayInstances,
  paginateListGateways: () => paginateListGateways,
  paginateListOfferings: () => paginateListOfferings,
  paginateListReservations: () => paginateListReservations,
  waitForFlowActive: () => waitForFlowActive,
  waitForFlowDeleted: () => waitForFlowDeleted,
  waitForFlowStandby: () => waitForFlowStandby,
  waitUntilFlowActive: () => waitUntilFlowActive,
  waitUntilFlowDeleted: () => waitUntilFlowDeleted,
  waitUntilFlowStandby: () => waitUntilFlowStandby
});
module.exports = __toCommonJS(src_exports);

// src/MediaConnectClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "mediaconnect"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/MediaConnectClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/MediaConnectClient.ts
var _MediaConnectClient = class _MediaConnectClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultMediaConnectHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_MediaConnectClient, "MediaConnectClient");
var MediaConnectClient = _MediaConnectClient;

// src/MediaConnect.ts


// src/commands/AddBridgeOutputsCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");



// src/models/MediaConnectServiceException.ts

var _MediaConnectServiceException = class _MediaConnectServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _MediaConnectServiceException.prototype);
  }
};
__name(_MediaConnectServiceException, "MediaConnectServiceException");
var MediaConnectServiceException = _MediaConnectServiceException;

// src/models/models_0.ts
var Protocol = {
  cdi: "cdi",
  fujitsu_qos: "fujitsu-qos",
  rist: "rist",
  rtp: "rtp",
  rtp_fec: "rtp-fec",
  srt_caller: "srt-caller",
  srt_listener: "srt-listener",
  st2110_jpegxs: "st2110-jpegxs",
  udp: "udp",
  zixi_pull: "zixi-pull",
  zixi_push: "zixi-push"
};
var Colorimetry = {
  BT2020: "BT2020",
  BT2100: "BT2100",
  BT601: "BT601",
  BT709: "BT709",
  ST2065_1: "ST2065-1",
  ST2065_3: "ST2065-3",
  XYZ: "XYZ"
};
var Range = {
  FULL: "FULL",
  FULLPROTECT: "FULLPROTECT",
  NARROW: "NARROW"
};
var ScanMode = {
  interlace: "interlace",
  progressive: "progressive",
  progressive_segmented_frame: "progressive-segmented-frame"
};
var Tcs = {
  BT2100LINHLG: "BT2100LINHLG",
  BT2100LINPQ: "BT2100LINPQ",
  DENSITY: "DENSITY",
  HLG: "HLG",
  LINEAR: "LINEAR",
  PQ: "PQ",
  SDR: "SDR",
  ST2065_1: "ST2065-1",
  ST428_1: "ST428-1"
};
var MediaStreamType = {
  ancillary_data: "ancillary-data",
  audio: "audio",
  video: "video"
};
var Algorithm = {
  aes128: "aes128",
  aes192: "aes192",
  aes256: "aes256"
};
var KeyType = {
  speke: "speke",
  srt_password: "srt-password",
  static_key: "static-key"
};
var EncodingName = {
  jxsv: "jxsv",
  pcm: "pcm",
  raw: "raw",
  smpte291: "smpte291"
};
var EncoderProfile = {
  high: "high",
  main: "main"
};
var EntitlementStatus = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var BridgeState = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETED: "DELETED",
  DELETING: "DELETING",
  DEPLOYING: "DEPLOYING",
  STANDBY: "STANDBY",
  STARTING: "STARTING",
  START_FAILED: "START_FAILED",
  START_PENDING: "START_PENDING",
  STOPPING: "STOPPING",
  STOP_FAILED: "STOP_FAILED",
  UPDATING: "UPDATING"
};
var MaintenanceDay = {
  Friday: "Friday",
  Monday: "Monday",
  Saturday: "Saturday",
  Sunday: "Sunday",
  Thursday: "Thursday",
  Tuesday: "Tuesday",
  Wednesday: "Wednesday"
};
var SourceType = {
  ENTITLED: "ENTITLED",
  OWNED: "OWNED"
};
var Status = {
  ACTIVE: "ACTIVE",
  DELETING: "DELETING",
  ERROR: "ERROR",
  STANDBY: "STANDBY",
  STARTING: "STARTING",
  STOPPING: "STOPPING",
  UPDATING: "UPDATING"
};
var GatewayState = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETED: "DELETED",
  DELETING: "DELETING",
  ERROR: "ERROR",
  UPDATING: "UPDATING"
};
var InstanceState = {
  ACTIVE: "ACTIVE",
  DEREGISTERED: "DEREGISTERED",
  DEREGISTERING: "DEREGISTERING",
  DEREGISTRATION_ERROR: "DEREGISTRATION_ERROR",
  REGISTERING: "REGISTERING",
  REGISTRATION_ERROR: "REGISTRATION_ERROR"
};
var DurationUnits = {
  MONTHS: "MONTHS"
};
var PriceUnits = {
  HOURLY: "HOURLY"
};
var ResourceType = {
  Mbps_Outbound_Bandwidth: "Mbps_Outbound_Bandwidth"
};
var ReservationState = {
  ACTIVE: "ACTIVE",
  CANCELED: "CANCELED",
  EXPIRED: "EXPIRED",
  PROCESSING: "PROCESSING"
};
var NetworkInterfaceType = {
  efa: "efa",
  ena: "ena"
};
var _BadRequestException = class _BadRequestException extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "BadRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.Message = opts.Message;
  }
};
__name(_BadRequestException, "BadRequestException");
var BadRequestException = _BadRequestException;
var _ConflictException = class _ConflictException extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ConflictException, "ConflictException");
var ConflictException = _ConflictException;
var _ForbiddenException = class _ForbiddenException extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ForbiddenException",
      $fault: "client",
      ...opts
    });
    this.name = "ForbiddenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ForbiddenException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ForbiddenException, "ForbiddenException");
var ForbiddenException = _ForbiddenException;
var _InternalServerErrorException = class _InternalServerErrorException extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerErrorException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerErrorException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerErrorException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InternalServerErrorException, "InternalServerErrorException");
var InternalServerErrorException = _InternalServerErrorException;
var _NotFoundException = class _NotFoundException extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "NotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_NotFoundException, "NotFoundException");
var NotFoundException = _NotFoundException;
var _ServiceUnavailableException = class _ServiceUnavailableException extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "ServiceUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ServiceUnavailableException, "ServiceUnavailableException");
var ServiceUnavailableException = _ServiceUnavailableException;
var _TooManyRequestsException = class _TooManyRequestsException extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyRequestsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyRequestsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyRequestsException, "TooManyRequestsException");
var TooManyRequestsException = _TooManyRequestsException;
var _AddFlowOutputs420Exception = class _AddFlowOutputs420Exception extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AddFlowOutputs420Exception",
      $fault: "client",
      ...opts
    });
    this.name = "AddFlowOutputs420Exception";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AddFlowOutputs420Exception.prototype);
    this.Message = opts.Message;
  }
};
__name(_AddFlowOutputs420Exception, "AddFlowOutputs420Exception");
var AddFlowOutputs420Exception = _AddFlowOutputs420Exception;
var FailoverMode = {
  FAILOVER: "FAILOVER",
  MERGE: "MERGE"
};
var State = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var BridgePlacement = {
  AVAILABLE: "AVAILABLE",
  LOCKED: "LOCKED"
};
var ConnectionStatus = {
  CONNECTED: "CONNECTED",
  DISCONNECTED: "DISCONNECTED"
};
var _CreateBridge420Exception = class _CreateBridge420Exception extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CreateBridge420Exception",
      $fault: "client",
      ...opts
    });
    this.name = "CreateBridge420Exception";
    this.$fault = "client";
    Object.setPrototypeOf(this, _CreateBridge420Exception.prototype);
    this.Message = opts.Message;
  }
};
__name(_CreateBridge420Exception, "CreateBridge420Exception");
var CreateBridge420Exception = _CreateBridge420Exception;
var _CreateFlow420Exception = class _CreateFlow420Exception extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CreateFlow420Exception",
      $fault: "client",
      ...opts
    });
    this.name = "CreateFlow420Exception";
    this.$fault = "client";
    Object.setPrototypeOf(this, _CreateFlow420Exception.prototype);
    this.Message = opts.Message;
  }
};
__name(_CreateFlow420Exception, "CreateFlow420Exception");
var CreateFlow420Exception = _CreateFlow420Exception;
var _CreateGateway420Exception = class _CreateGateway420Exception extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CreateGateway420Exception",
      $fault: "client",
      ...opts
    });
    this.name = "CreateGateway420Exception";
    this.$fault = "client";
    Object.setPrototypeOf(this, _CreateGateway420Exception.prototype);
    this.Message = opts.Message;
  }
};
__name(_CreateGateway420Exception, "CreateGateway420Exception");
var CreateGateway420Exception = _CreateGateway420Exception;
var DesiredState = {
  ACTIVE: "ACTIVE",
  DELETED: "DELETED",
  STANDBY: "STANDBY"
};
var _GrantFlowEntitlements420Exception = class _GrantFlowEntitlements420Exception extends MediaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "GrantFlowEntitlements420Exception",
      $fault: "client",
      ...opts
    });
    this.name = "GrantFlowEntitlements420Exception";
    this.$fault = "client";
    Object.setPrototypeOf(this, _GrantFlowEntitlements420Exception.prototype);
    this.Message = opts.Message;
  }
};
__name(_GrantFlowEntitlements420Exception, "GrantFlowEntitlements420Exception");
var GrantFlowEntitlements420Exception = _GrantFlowEntitlements420Exception;

// src/protocols/Aws_restJson1.ts
var se_AddBridgeOutputsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/bridges/{BridgeArn}/outputs");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      outputs: [, (_) => se___listOfAddBridgeOutputRequest(_, context), `Outputs`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AddBridgeOutputsCommand");
var se_AddBridgeSourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/bridges/{BridgeArn}/sources");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      sources: [, (_) => se___listOfAddBridgeSourceRequest(_, context), `Sources`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AddBridgeSourcesCommand");
var se_AddFlowMediaStreamsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}/mediaStreams");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      mediaStreams: [, (_) => se___listOfAddMediaStreamRequest(_, context), `MediaStreams`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AddFlowMediaStreamsCommand");
var se_AddFlowOutputsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}/outputs");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      outputs: [, (_) => se___listOfAddOutputRequest(_, context), `Outputs`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AddFlowOutputsCommand");
var se_AddFlowSourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}/source");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      sources: [, (_) => se___listOfSetSourceRequest(_, context), `Sources`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AddFlowSourcesCommand");
var se_AddFlowVpcInterfacesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}/vpcInterfaces");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      vpcInterfaces: [, (_) => se___listOfVpcInterfaceRequest(_, context), `VpcInterfaces`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AddFlowVpcInterfacesCommand");
var se_CreateBridgeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/bridges");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      egressGatewayBridge: [, (_) => se_AddEgressGatewayBridgeRequest(_, context), `EgressGatewayBridge`],
      ingressGatewayBridge: [, (_) => se_AddIngressGatewayBridgeRequest(_, context), `IngressGatewayBridge`],
      name: [, , `Name`],
      outputs: [, (_) => se___listOfAddBridgeOutputRequest(_, context), `Outputs`],
      placementArn: [, , `PlacementArn`],
      sourceFailoverConfig: [, (_) => se_FailoverConfig(_, context), `SourceFailoverConfig`],
      sources: [, (_) => se___listOfAddBridgeSourceRequest(_, context), `Sources`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateBridgeCommand");
var se_CreateFlowCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      availabilityZone: [, , `AvailabilityZone`],
      entitlements: [, (_) => se___listOfGrantEntitlementRequest(_, context), `Entitlements`],
      maintenance: [, (_) => se_AddMaintenance(_, context), `Maintenance`],
      mediaStreams: [, (_) => se___listOfAddMediaStreamRequest(_, context), `MediaStreams`],
      name: [, , `Name`],
      outputs: [, (_) => se___listOfAddOutputRequest(_, context), `Outputs`],
      source: [, (_) => se_SetSourceRequest(_, context), `Source`],
      sourceFailoverConfig: [, (_) => se_FailoverConfig(_, context), `SourceFailoverConfig`],
      sources: [, (_) => se___listOfSetSourceRequest(_, context), `Sources`],
      vpcInterfaces: [, (_) => se___listOfVpcInterfaceRequest(_, context), `VpcInterfaces`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateFlowCommand");
var se_CreateGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/gateways");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      egressCidrBlocks: [, (_) => (0, import_smithy_client._json)(_), `EgressCidrBlocks`],
      name: [, , `Name`],
      networks: [, (_) => se___listOfGatewayNetwork(_, context), `Networks`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateGatewayCommand");
var se_DeleteBridgeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/bridges/{BridgeArn}");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteBridgeCommand");
var se_DeleteFlowCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/{FlowArn}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteFlowCommand");
var se_DeleteGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/gateways/{GatewayArn}");
  b.p("GatewayArn", () => input.GatewayArn, "{GatewayArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteGatewayCommand");
var se_DeregisterGatewayInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/gateway-instances/{GatewayInstanceArn}");
  b.p("GatewayInstanceArn", () => input.GatewayInstanceArn, "{GatewayInstanceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_f]: [() => input.Force !== void 0, () => input[_F].toString()]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeregisterGatewayInstanceCommand");
var se_DescribeBridgeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/bridges/{BridgeArn}");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBridgeCommand");
var se_DescribeFlowCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/{FlowArn}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeFlowCommand");
var se_DescribeFlowSourceMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/{FlowArn}/source-metadata");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeFlowSourceMetadataCommand");
var se_DescribeGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/gateways/{GatewayArn}");
  b.p("GatewayArn", () => input.GatewayArn, "{GatewayArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeGatewayCommand");
var se_DescribeGatewayInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/gateway-instances/{GatewayInstanceArn}");
  b.p("GatewayInstanceArn", () => input.GatewayInstanceArn, "{GatewayInstanceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeGatewayInstanceCommand");
var se_DescribeOfferingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/offerings/{OfferingArn}");
  b.p("OfferingArn", () => input.OfferingArn, "{OfferingArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeOfferingCommand");
var se_DescribeReservationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/reservations/{ReservationArn}");
  b.p("ReservationArn", () => input.ReservationArn, "{ReservationArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeReservationCommand");
var se_GrantFlowEntitlementsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}/entitlements");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      entitlements: [, (_) => se___listOfGrantEntitlementRequest(_, context), `Entitlements`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GrantFlowEntitlementsCommand");
var se_ListBridgesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/bridges");
  const query = (0, import_smithy_client.map)({
    [_fA]: [, input[_FA]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListBridgesCommand");
var se_ListEntitlementsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/entitlements");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListEntitlementsCommand");
var se_ListFlowsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListFlowsCommand");
var se_ListGatewayInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/gateway-instances");
  const query = (0, import_smithy_client.map)({
    [_fA]: [, input[_FA]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListGatewayInstancesCommand");
var se_ListGatewaysCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/gateways");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListGatewaysCommand");
var se_ListOfferingsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/offerings");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListOfferingsCommand");
var se_ListReservationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/reservations");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListReservationsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_PurchaseOfferingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/offerings/{OfferingArn}");
  b.p("OfferingArn", () => input.OfferingArn, "{OfferingArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      reservationName: [, , `ReservationName`],
      start: [, , `Start`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PurchaseOfferingCommand");
var se_RemoveBridgeOutputCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/bridges/{BridgeArn}/outputs/{OutputName}");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  b.p("OutputName", () => input.OutputName, "{OutputName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_RemoveBridgeOutputCommand");
var se_RemoveBridgeSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/bridges/{BridgeArn}/sources/{SourceName}");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  b.p("SourceName", () => input.SourceName, "{SourceName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_RemoveBridgeSourceCommand");
var se_RemoveFlowMediaStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/{FlowArn}/mediaStreams/{MediaStreamName}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  b.p("MediaStreamName", () => input.MediaStreamName, "{MediaStreamName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_RemoveFlowMediaStreamCommand");
var se_RemoveFlowOutputCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/{FlowArn}/outputs/{OutputArn}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  b.p("OutputArn", () => input.OutputArn, "{OutputArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_RemoveFlowOutputCommand");
var se_RemoveFlowSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/{FlowArn}/source/{SourceArn}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  b.p("SourceArn", () => input.SourceArn, "{SourceArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_RemoveFlowSourceCommand");
var se_RemoveFlowVpcInterfaceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/{FlowArn}/vpcInterfaces/{VpcInterfaceName}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  b.p("VpcInterfaceName", () => input.VpcInterfaceName, "{VpcInterfaceName}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_RemoveFlowVpcInterfaceCommand");
var se_RevokeFlowEntitlementCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/{FlowArn}/entitlements/{EntitlementArn}");
  b.p("EntitlementArn", () => input.EntitlementArn, "{EntitlementArn}", false);
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_RevokeFlowEntitlementCommand");
var se_StartFlowCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/start/{FlowArn}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartFlowCommand");
var se_StopFlowCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/flows/stop/{FlowArn}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StopFlowCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null,
      () => (input[_TK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateBridgeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/bridges/{BridgeArn}");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      egressGatewayBridge: [, (_) => se_UpdateEgressGatewayBridgeRequest(_, context), `EgressGatewayBridge`],
      ingressGatewayBridge: [, (_) => se_UpdateIngressGatewayBridgeRequest(_, context), `IngressGatewayBridge`],
      sourceFailoverConfig: [, (_) => se_UpdateFailoverConfig(_, context), `SourceFailoverConfig`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBridgeCommand");
var se_UpdateBridgeOutputCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/bridges/{BridgeArn}/outputs/{OutputName}");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  b.p("OutputName", () => input.OutputName, "{OutputName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      networkOutput: [, (_) => se_UpdateBridgeNetworkOutputRequest(_, context), `NetworkOutput`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBridgeOutputCommand");
var se_UpdateBridgeSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/bridges/{BridgeArn}/sources/{SourceName}");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  b.p("SourceName", () => input.SourceName, "{SourceName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      flowSource: [, (_) => se_UpdateBridgeFlowSourceRequest(_, context), `FlowSource`],
      networkSource: [, (_) => se_UpdateBridgeNetworkSourceRequest(_, context), `NetworkSource`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBridgeSourceCommand");
var se_UpdateBridgeStateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/bridges/{BridgeArn}/state");
  b.p("BridgeArn", () => input.BridgeArn, "{BridgeArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      desiredState: [, , `DesiredState`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateBridgeStateCommand");
var se_UpdateFlowCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maintenance: [, (_) => se_UpdateMaintenance(_, context), `Maintenance`],
      sourceFailoverConfig: [, (_) => se_UpdateFailoverConfig(_, context), `SourceFailoverConfig`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateFlowCommand");
var se_UpdateFlowEntitlementCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}/entitlements/{EntitlementArn}");
  b.p("EntitlementArn", () => input.EntitlementArn, "{EntitlementArn}", false);
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [, , `Description`],
      encryption: [, (_) => se_UpdateEncryption(_, context), `Encryption`],
      entitlementStatus: [, , `EntitlementStatus`],
      subscribers: [, (_) => (0, import_smithy_client._json)(_), `Subscribers`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateFlowEntitlementCommand");
var se_UpdateFlowMediaStreamCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}/mediaStreams/{MediaStreamName}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  b.p("MediaStreamName", () => input.MediaStreamName, "{MediaStreamName}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      attributes: [, (_) => se_MediaStreamAttributesRequest(_, context), `Attributes`],
      clockRate: [, , `ClockRate`],
      description: [, , `Description`],
      mediaStreamType: [, , `MediaStreamType`],
      videoFormat: [, , `VideoFormat`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateFlowMediaStreamCommand");
var se_UpdateFlowOutputCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}/outputs/{OutputArn}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  b.p("OutputArn", () => input.OutputArn, "{OutputArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      cidrAllowList: [, (_) => (0, import_smithy_client._json)(_), `CidrAllowList`],
      description: [, , `Description`],
      destination: [, , `Destination`],
      encryption: [, (_) => se_UpdateEncryption(_, context), `Encryption`],
      maxLatency: [, , `MaxLatency`],
      mediaStreamOutputConfigurations: [
        ,
        (_) => se___listOfMediaStreamOutputConfigurationRequest(_, context),
        `MediaStreamOutputConfigurations`
      ],
      minLatency: [, , `MinLatency`],
      port: [, , `Port`],
      protocol: [, , `Protocol`],
      remoteId: [, , `RemoteId`],
      senderControlPort: [, , `SenderControlPort`],
      senderIpAddress: [, , `SenderIpAddress`],
      smoothingLatency: [, , `SmoothingLatency`],
      streamId: [, , `StreamId`],
      vpcInterfaceAttachment: [, (_) => se_VpcInterfaceAttachment(_, context), `VpcInterfaceAttachment`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateFlowOutputCommand");
var se_UpdateFlowSourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/flows/{FlowArn}/source/{SourceArn}");
  b.p("FlowArn", () => input.FlowArn, "{FlowArn}", false);
  b.p("SourceArn", () => input.SourceArn, "{SourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      decryption: [, (_) => se_UpdateEncryption(_, context), `Decryption`],
      description: [, , `Description`],
      entitlementArn: [, , `EntitlementArn`],
      gatewayBridgeSource: [, (_) => se_UpdateGatewayBridgeSourceRequest(_, context), `GatewayBridgeSource`],
      ingestPort: [, , `IngestPort`],
      maxBitrate: [, , `MaxBitrate`],
      maxLatency: [, , `MaxLatency`],
      maxSyncBuffer: [, , `MaxSyncBuffer`],
      mediaStreamSourceConfigurations: [
        ,
        (_) => se___listOfMediaStreamSourceConfigurationRequest(_, context),
        `MediaStreamSourceConfigurations`
      ],
      minLatency: [, , `MinLatency`],
      protocol: [, , `Protocol`],
      senderControlPort: [, , `SenderControlPort`],
      senderIpAddress: [, , `SenderIpAddress`],
      sourceListenerAddress: [, , `SourceListenerAddress`],
      sourceListenerPort: [, , `SourceListenerPort`],
      streamId: [, , `StreamId`],
      vpcInterfaceName: [, , `VpcInterfaceName`],
      whitelistCidr: [, , `WhitelistCidr`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateFlowSourceCommand");
var se_UpdateGatewayInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/gateway-instances/{GatewayInstanceArn}");
  b.p("GatewayInstanceArn", () => input.GatewayInstanceArn, "{GatewayInstanceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      bridgePlacement: [, , `BridgePlacement`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateGatewayInstanceCommand");
var de_AddBridgeOutputsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    Outputs: [, (_) => de___listOfBridgeOutput(_, context), `outputs`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AddBridgeOutputsCommand");
var de_AddBridgeSourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    Sources: [, (_) => de___listOfBridgeSource(_, context), `sources`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AddBridgeSourcesCommand");
var de_AddFlowMediaStreamsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    MediaStreams: [, (_) => de___listOfMediaStream(_, context), `mediaStreams`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AddFlowMediaStreamsCommand");
var de_AddFlowOutputsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Outputs: [, (_) => de___listOfOutput(_, context), `outputs`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AddFlowOutputsCommand");
var de_AddFlowSourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Sources: [, (_) => de___listOfSource(_, context), `sources`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AddFlowSourcesCommand");
var de_AddFlowVpcInterfacesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    VpcInterfaces: [, (_) => de___listOfVpcInterface(_, context), `vpcInterfaces`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AddFlowVpcInterfacesCommand");
var de_CreateBridgeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Bridge: [, (_) => de_Bridge(_, context), `bridge`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateBridgeCommand");
var de_CreateFlowCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Flow: [, (_) => de_Flow(_, context), `flow`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateFlowCommand");
var de_CreateGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Gateway: [, (_) => de_Gateway(_, context), `gateway`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateGatewayCommand");
var de_DeleteBridgeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteBridgeCommand");
var de_DeleteFlowCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Status: [, import_smithy_client.expectString, `status`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteFlowCommand");
var de_DeleteGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    GatewayArn: [, import_smithy_client.expectString, `gatewayArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteGatewayCommand");
var de_DeregisterGatewayInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    GatewayInstanceArn: [, import_smithy_client.expectString, `gatewayInstanceArn`],
    InstanceState: [, import_smithy_client.expectString, `instanceState`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeregisterGatewayInstanceCommand");
var de_DescribeBridgeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Bridge: [, (_) => de_Bridge(_, context), `bridge`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBridgeCommand");
var de_DescribeFlowCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Flow: [, (_) => de_Flow(_, context), `flow`],
    Messages: [, (_) => de_Messages(_, context), `messages`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeFlowCommand");
var de_DescribeFlowSourceMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Messages: [, (_) => de___listOfMessageDetail(_, context), `messages`],
    Timestamp: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)), `timestamp`],
    TransportMediaInfo: [, (_) => de_TransportMediaInfo(_, context), `transportMediaInfo`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeFlowSourceMetadataCommand");
var de_DescribeGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Gateway: [, (_) => de_Gateway(_, context), `gateway`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeGatewayCommand");
var de_DescribeGatewayInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    GatewayInstance: [, (_) => de_GatewayInstance(_, context), `gatewayInstance`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeGatewayInstanceCommand");
var de_DescribeOfferingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Offering: [, (_) => de_Offering(_, context), `offering`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeOfferingCommand");
var de_DescribeReservationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Reservation: [, (_) => de_Reservation(_, context), `reservation`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeReservationCommand");
var de_GrantFlowEntitlementsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entitlements: [, (_) => de___listOfEntitlement(_, context), `entitlements`],
    FlowArn: [, import_smithy_client.expectString, `flowArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GrantFlowEntitlementsCommand");
var de_ListBridgesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Bridges: [, (_) => de___listOfListedBridge(_, context), `bridges`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBridgesCommand");
var de_ListEntitlementsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entitlements: [, (_) => de___listOfListedEntitlement(_, context), `entitlements`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListEntitlementsCommand");
var de_ListFlowsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Flows: [, (_) => de___listOfListedFlow(_, context), `flows`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListFlowsCommand");
var de_ListGatewayInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Instances: [, (_) => de___listOfListedGatewayInstance(_, context), `instances`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListGatewayInstancesCommand");
var de_ListGatewaysCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Gateways: [, (_) => de___listOfListedGateway(_, context), `gateways`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListGatewaysCommand");
var de_ListOfferingsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    Offerings: [, (_) => de___listOfOffering(_, context), `offerings`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListOfferingsCommand");
var de_ListReservationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    Reservations: [, (_) => de___listOfReservation(_, context), `reservations`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListReservationsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Tags: [, import_smithy_client._json, `tags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_PurchaseOfferingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Reservation: [, (_) => de_Reservation(_, context), `reservation`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PurchaseOfferingCommand");
var de_RemoveBridgeOutputCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    OutputName: [, import_smithy_client.expectString, `outputName`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RemoveBridgeOutputCommand");
var de_RemoveBridgeSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    SourceName: [, import_smithy_client.expectString, `sourceName`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RemoveBridgeSourceCommand");
var de_RemoveFlowMediaStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    MediaStreamName: [, import_smithy_client.expectString, `mediaStreamName`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RemoveFlowMediaStreamCommand");
var de_RemoveFlowOutputCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    OutputArn: [, import_smithy_client.expectString, `outputArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RemoveFlowOutputCommand");
var de_RemoveFlowSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    SourceArn: [, import_smithy_client.expectString, `sourceArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RemoveFlowSourceCommand");
var de_RemoveFlowVpcInterfaceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    NonDeletedNetworkInterfaceIds: [, import_smithy_client._json, `nonDeletedNetworkInterfaceIds`],
    VpcInterfaceName: [, import_smithy_client.expectString, `vpcInterfaceName`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RemoveFlowVpcInterfaceCommand");
var de_RevokeFlowEntitlementCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    EntitlementArn: [, import_smithy_client.expectString, `entitlementArn`],
    FlowArn: [, import_smithy_client.expectString, `flowArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RevokeFlowEntitlementCommand");
var de_StartFlowCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Status: [, import_smithy_client.expectString, `status`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartFlowCommand");
var de_StopFlowCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Status: [, import_smithy_client.expectString, `status`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StopFlowCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateBridgeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Bridge: [, (_) => de_Bridge(_, context), `bridge`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBridgeCommand");
var de_UpdateBridgeOutputCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    Output: [, (_) => de_BridgeOutput(_, context), `output`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBridgeOutputCommand");
var de_UpdateBridgeSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    Source: [, (_) => de_BridgeSource(_, context), `source`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBridgeSourceCommand");
var de_UpdateBridgeStateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    DesiredState: [, import_smithy_client.expectString, `desiredState`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateBridgeStateCommand");
var de_UpdateFlowCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Flow: [, (_) => de_Flow(_, context), `flow`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateFlowCommand");
var de_UpdateFlowEntitlementCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Entitlement: [, (_) => de_Entitlement(_, context), `entitlement`],
    FlowArn: [, import_smithy_client.expectString, `flowArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateFlowEntitlementCommand");
var de_UpdateFlowMediaStreamCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    MediaStream: [, (_) => de_MediaStream(_, context), `mediaStream`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateFlowMediaStreamCommand");
var de_UpdateFlowOutputCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Output: [, (_) => de_Output(_, context), `output`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateFlowOutputCommand");
var de_UpdateFlowSourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Source: [, (_) => de_Source(_, context), `source`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateFlowSourceCommand");
var de_UpdateGatewayInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    BridgePlacement: [, import_smithy_client.expectString, `bridgePlacement`],
    GatewayInstanceArn: [, import_smithy_client.expectString, `gatewayInstanceArn`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateGatewayInstanceCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.mediaconnect#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.mediaconnect#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "ForbiddenException":
    case "com.amazonaws.mediaconnect#ForbiddenException":
      throw await de_ForbiddenExceptionRes(parsedOutput, context);
    case "InternalServerErrorException":
    case "com.amazonaws.mediaconnect#InternalServerErrorException":
      throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.mediaconnect#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.mediaconnect#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.mediaconnect#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    case "AddFlowOutputs420Exception":
    case "com.amazonaws.mediaconnect#AddFlowOutputs420Exception":
      throw await de_AddFlowOutputs420ExceptionRes(parsedOutput, context);
    case "CreateBridge420Exception":
    case "com.amazonaws.mediaconnect#CreateBridge420Exception":
      throw await de_CreateBridge420ExceptionRes(parsedOutput, context);
    case "CreateFlow420Exception":
    case "com.amazonaws.mediaconnect#CreateFlow420Exception":
      throw await de_CreateFlow420ExceptionRes(parsedOutput, context);
    case "CreateGateway420Exception":
    case "com.amazonaws.mediaconnect#CreateGateway420Exception":
      throw await de_CreateGateway420ExceptionRes(parsedOutput, context);
    case "GrantFlowEntitlements420Exception":
    case "com.amazonaws.mediaconnect#GrantFlowEntitlements420Exception":
      throw await de_GrantFlowEntitlements420ExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(MediaConnectServiceException);
var de_AddFlowOutputs420ExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new AddFlowOutputs420Exception({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AddFlowOutputs420ExceptionRes");
var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_BadRequestExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_CreateBridge420ExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new CreateBridge420Exception({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_CreateBridge420ExceptionRes");
var de_CreateFlow420ExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new CreateFlow420Exception({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_CreateFlow420ExceptionRes");
var de_CreateGateway420ExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new CreateGateway420Exception({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_CreateGateway420ExceptionRes");
var de_ForbiddenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ForbiddenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ForbiddenExceptionRes");
var de_GrantFlowEntitlements420ExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new GrantFlowEntitlements420Exception({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_GrantFlowEntitlements420ExceptionRes");
var de_InternalServerErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new InternalServerErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerErrorExceptionRes");
var de_NotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new NotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_NotFoundExceptionRes");
var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableExceptionRes");
var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new TooManyRequestsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TooManyRequestsExceptionRes");
var se___listOfAddBridgeOutputRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AddBridgeOutputRequest(entry, context);
  });
}, "se___listOfAddBridgeOutputRequest");
var se___listOfAddBridgeSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AddBridgeSourceRequest(entry, context);
  });
}, "se___listOfAddBridgeSourceRequest");
var se___listOfAddMediaStreamRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AddMediaStreamRequest(entry, context);
  });
}, "se___listOfAddMediaStreamRequest");
var se___listOfAddOutputRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AddOutputRequest(entry, context);
  });
}, "se___listOfAddOutputRequest");
var se___listOfDestinationConfigurationRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_DestinationConfigurationRequest(entry, context);
  });
}, "se___listOfDestinationConfigurationRequest");
var se___listOfGatewayNetwork = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_GatewayNetwork(entry, context);
  });
}, "se___listOfGatewayNetwork");
var se___listOfGrantEntitlementRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_GrantEntitlementRequest(entry, context);
  });
}, "se___listOfGrantEntitlementRequest");
var se___listOfInputConfigurationRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputConfigurationRequest(entry, context);
  });
}, "se___listOfInputConfigurationRequest");
var se___listOfMediaStreamOutputConfigurationRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_MediaStreamOutputConfigurationRequest(entry, context);
  });
}, "se___listOfMediaStreamOutputConfigurationRequest");
var se___listOfMediaStreamSourceConfigurationRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_MediaStreamSourceConfigurationRequest(entry, context);
  });
}, "se___listOfMediaStreamSourceConfigurationRequest");
var se___listOfSetSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_SetSourceRequest(entry, context);
  });
}, "se___listOfSetSourceRequest");
var se___listOfVpcInterfaceRequest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_VpcInterfaceRequest(entry, context);
  });
}, "se___listOfVpcInterfaceRequest");
var se_AddBridgeFlowSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    flowArn: [, , `FlowArn`],
    flowVpcInterfaceAttachment: [, (_) => se_VpcInterfaceAttachment(_, context), `FlowVpcInterfaceAttachment`],
    name: [, , `Name`]
  });
}, "se_AddBridgeFlowSourceRequest");
var se_AddBridgeNetworkOutputRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ipAddress: [, , `IpAddress`],
    name: [, , `Name`],
    networkName: [, , `NetworkName`],
    port: [, , `Port`],
    protocol: [, , `Protocol`],
    ttl: [, , `Ttl`]
  });
}, "se_AddBridgeNetworkOutputRequest");
var se_AddBridgeNetworkSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    multicastIp: [, , `MulticastIp`],
    name: [, , `Name`],
    networkName: [, , `NetworkName`],
    port: [, , `Port`],
    protocol: [, , `Protocol`]
  });
}, "se_AddBridgeNetworkSourceRequest");
var se_AddBridgeOutputRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    networkOutput: [, (_) => se_AddBridgeNetworkOutputRequest(_, context), `NetworkOutput`]
  });
}, "se_AddBridgeOutputRequest");
var se_AddBridgeSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    flowSource: [, (_) => se_AddBridgeFlowSourceRequest(_, context), `FlowSource`],
    networkSource: [, (_) => se_AddBridgeNetworkSourceRequest(_, context), `NetworkSource`]
  });
}, "se_AddBridgeSourceRequest");
var se_AddEgressGatewayBridgeRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maxBitrate: [, , `MaxBitrate`]
  });
}, "se_AddEgressGatewayBridgeRequest");
var se_AddIngressGatewayBridgeRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maxBitrate: [, , `MaxBitrate`],
    maxOutputs: [, , `MaxOutputs`]
  });
}, "se_AddIngressGatewayBridgeRequest");
var se_AddMaintenance = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maintenanceDay: [, , `MaintenanceDay`],
    maintenanceStartHour: [, , `MaintenanceStartHour`]
  });
}, "se_AddMaintenance");
var se_AddMediaStreamRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    attributes: [, (_) => se_MediaStreamAttributesRequest(_, context), `Attributes`],
    clockRate: [, , `ClockRate`],
    description: [, , `Description`],
    mediaStreamId: [, , `MediaStreamId`],
    mediaStreamName: [, , `MediaStreamName`],
    mediaStreamType: [, , `MediaStreamType`],
    videoFormat: [, , `VideoFormat`]
  });
}, "se_AddMediaStreamRequest");
var se_AddOutputRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cidrAllowList: [, import_smithy_client._json, `CidrAllowList`],
    description: [, , `Description`],
    destination: [, , `Destination`],
    encryption: [, (_) => se_Encryption(_, context), `Encryption`],
    maxLatency: [, , `MaxLatency`],
    mediaStreamOutputConfigurations: [
      ,
      (_) => se___listOfMediaStreamOutputConfigurationRequest(_, context),
      `MediaStreamOutputConfigurations`
    ],
    minLatency: [, , `MinLatency`],
    name: [, , `Name`],
    port: [, , `Port`],
    protocol: [, , `Protocol`],
    remoteId: [, , `RemoteId`],
    senderControlPort: [, , `SenderControlPort`],
    smoothingLatency: [, , `SmoothingLatency`],
    streamId: [, , `StreamId`],
    vpcInterfaceAttachment: [, (_) => se_VpcInterfaceAttachment(_, context), `VpcInterfaceAttachment`]
  });
}, "se_AddOutputRequest");
var se_DestinationConfigurationRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    destinationIp: [, , `DestinationIp`],
    destinationPort: [, , `DestinationPort`],
    interface: [, (_) => se_InterfaceRequest(_, context), `Interface`]
  });
}, "se_DestinationConfigurationRequest");
var se_EncodingParametersRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    compressionFactor: [, import_smithy_client.serializeFloat, `CompressionFactor`],
    encoderProfile: [, , `EncoderProfile`]
  });
}, "se_EncodingParametersRequest");
var se_Encryption = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    algorithm: [, , `Algorithm`],
    constantInitializationVector: [, , `ConstantInitializationVector`],
    deviceId: [, , `DeviceId`],
    keyType: [, , `KeyType`],
    region: [, , `Region`],
    resourceId: [, , `ResourceId`],
    roleArn: [, , `RoleArn`],
    secretArn: [, , `SecretArn`],
    url: [, , `Url`]
  });
}, "se_Encryption");
var se_FailoverConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    failoverMode: [, , `FailoverMode`],
    recoveryWindow: [, , `RecoveryWindow`],
    sourcePriority: [, (_) => se_SourcePriority(_, context), `SourcePriority`],
    state: [, , `State`]
  });
}, "se_FailoverConfig");
var se_FmtpRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    channelOrder: [, , `ChannelOrder`],
    colorimetry: [, , `Colorimetry`],
    exactFramerate: [, , `ExactFramerate`],
    par: [, , `Par`],
    range: [, , `Range`],
    scanMode: [, , `ScanMode`],
    tcs: [, , `Tcs`]
  });
}, "se_FmtpRequest");
var se_GatewayNetwork = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cidrBlock: [, , `CidrBlock`],
    name: [, , `Name`]
  });
}, "se_GatewayNetwork");
var se_GrantEntitlementRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    dataTransferSubscriberFeePercent: [, , `DataTransferSubscriberFeePercent`],
    description: [, , `Description`],
    encryption: [, (_) => se_Encryption(_, context), `Encryption`],
    entitlementStatus: [, , `EntitlementStatus`],
    name: [, , `Name`],
    subscribers: [, import_smithy_client._json, `Subscribers`]
  });
}, "se_GrantEntitlementRequest");
var se_InputConfigurationRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputPort: [, , `InputPort`],
    interface: [, (_) => se_InterfaceRequest(_, context), `Interface`]
  });
}, "se_InputConfigurationRequest");
var se_InterfaceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    name: [, , `Name`]
  });
}, "se_InterfaceRequest");
var se_MediaStreamAttributesRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fmtp: [, (_) => se_FmtpRequest(_, context), `Fmtp`],
    lang: [, , `Lang`]
  });
}, "se_MediaStreamAttributesRequest");
var se_MediaStreamOutputConfigurationRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    destinationConfigurations: [
      ,
      (_) => se___listOfDestinationConfigurationRequest(_, context),
      `DestinationConfigurations`
    ],
    encodingName: [, , `EncodingName`],
    encodingParameters: [, (_) => se_EncodingParametersRequest(_, context), `EncodingParameters`],
    mediaStreamName: [, , `MediaStreamName`]
  });
}, "se_MediaStreamOutputConfigurationRequest");
var se_MediaStreamSourceConfigurationRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    encodingName: [, , `EncodingName`],
    inputConfigurations: [, (_) => se___listOfInputConfigurationRequest(_, context), `InputConfigurations`],
    mediaStreamName: [, , `MediaStreamName`]
  });
}, "se_MediaStreamSourceConfigurationRequest");
var se_SetGatewayBridgeSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bridgeArn: [, , `BridgeArn`],
    vpcInterfaceAttachment: [, (_) => se_VpcInterfaceAttachment(_, context), `VpcInterfaceAttachment`]
  });
}, "se_SetGatewayBridgeSourceRequest");
var se_SetSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    decryption: [, (_) => se_Encryption(_, context), `Decryption`],
    description: [, , `Description`],
    entitlementArn: [, , `EntitlementArn`],
    gatewayBridgeSource: [, (_) => se_SetGatewayBridgeSourceRequest(_, context), `GatewayBridgeSource`],
    ingestPort: [, , `IngestPort`],
    maxBitrate: [, , `MaxBitrate`],
    maxLatency: [, , `MaxLatency`],
    maxSyncBuffer: [, , `MaxSyncBuffer`],
    mediaStreamSourceConfigurations: [
      ,
      (_) => se___listOfMediaStreamSourceConfigurationRequest(_, context),
      `MediaStreamSourceConfigurations`
    ],
    minLatency: [, , `MinLatency`],
    name: [, , `Name`],
    protocol: [, , `Protocol`],
    senderControlPort: [, , `SenderControlPort`],
    senderIpAddress: [, , `SenderIpAddress`],
    sourceListenerAddress: [, , `SourceListenerAddress`],
    sourceListenerPort: [, , `SourceListenerPort`],
    streamId: [, , `StreamId`],
    vpcInterfaceName: [, , `VpcInterfaceName`],
    whitelistCidr: [, , `WhitelistCidr`]
  });
}, "se_SetSourceRequest");
var se_SourcePriority = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    primarySource: [, , `PrimarySource`]
  });
}, "se_SourcePriority");
var se_UpdateBridgeFlowSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    flowArn: [, , `FlowArn`],
    flowVpcInterfaceAttachment: [, (_) => se_VpcInterfaceAttachment(_, context), `FlowVpcInterfaceAttachment`]
  });
}, "se_UpdateBridgeFlowSourceRequest");
var se_UpdateBridgeNetworkOutputRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ipAddress: [, , `IpAddress`],
    networkName: [, , `NetworkName`],
    port: [, , `Port`],
    protocol: [, , `Protocol`],
    ttl: [, , `Ttl`]
  });
}, "se_UpdateBridgeNetworkOutputRequest");
var se_UpdateBridgeNetworkSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    multicastIp: [, , `MulticastIp`],
    networkName: [, , `NetworkName`],
    port: [, , `Port`],
    protocol: [, , `Protocol`]
  });
}, "se_UpdateBridgeNetworkSourceRequest");
var se_UpdateEgressGatewayBridgeRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maxBitrate: [, , `MaxBitrate`]
  });
}, "se_UpdateEgressGatewayBridgeRequest");
var se_UpdateEncryption = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    algorithm: [, , `Algorithm`],
    constantInitializationVector: [, , `ConstantInitializationVector`],
    deviceId: [, , `DeviceId`],
    keyType: [, , `KeyType`],
    region: [, , `Region`],
    resourceId: [, , `ResourceId`],
    roleArn: [, , `RoleArn`],
    secretArn: [, , `SecretArn`],
    url: [, , `Url`]
  });
}, "se_UpdateEncryption");
var se_UpdateFailoverConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    failoverMode: [, , `FailoverMode`],
    recoveryWindow: [, , `RecoveryWindow`],
    sourcePriority: [, (_) => se_SourcePriority(_, context), `SourcePriority`],
    state: [, , `State`]
  });
}, "se_UpdateFailoverConfig");
var se_UpdateGatewayBridgeSourceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bridgeArn: [, , `BridgeArn`],
    vpcInterfaceAttachment: [, (_) => se_VpcInterfaceAttachment(_, context), `VpcInterfaceAttachment`]
  });
}, "se_UpdateGatewayBridgeSourceRequest");
var se_UpdateIngressGatewayBridgeRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maxBitrate: [, , `MaxBitrate`],
    maxOutputs: [, , `MaxOutputs`]
  });
}, "se_UpdateIngressGatewayBridgeRequest");
var se_UpdateMaintenance = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maintenanceDay: [, , `MaintenanceDay`],
    maintenanceScheduledDate: [, , `MaintenanceScheduledDate`],
    maintenanceStartHour: [, , `MaintenanceStartHour`]
  });
}, "se_UpdateMaintenance");
var se_VpcInterfaceAttachment = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    vpcInterfaceName: [, , `VpcInterfaceName`]
  });
}, "se_VpcInterfaceAttachment");
var se_VpcInterfaceRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    name: [, , `Name`],
    networkInterfaceType: [, , `NetworkInterfaceType`],
    roleArn: [, , `RoleArn`],
    securityGroupIds: [, import_smithy_client._json, `SecurityGroupIds`],
    subnetId: [, , `SubnetId`]
  });
}, "se_VpcInterfaceRequest");
var de___listOfBridgeOutput = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BridgeOutput(entry, context);
  });
  return retVal;
}, "de___listOfBridgeOutput");
var de___listOfBridgeSource = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BridgeSource(entry, context);
  });
  return retVal;
}, "de___listOfBridgeSource");
var de___listOfDestinationConfiguration = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DestinationConfiguration(entry, context);
  });
  return retVal;
}, "de___listOfDestinationConfiguration");
var de___listOfEntitlement = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Entitlement(entry, context);
  });
  return retVal;
}, "de___listOfEntitlement");
var de___listOfGatewayNetwork = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_GatewayNetwork(entry, context);
  });
  return retVal;
}, "de___listOfGatewayNetwork");
var de___listOfInputConfiguration = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputConfiguration(entry, context);
  });
  return retVal;
}, "de___listOfInputConfiguration");
var de___listOfListedBridge = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListedBridge(entry, context);
  });
  return retVal;
}, "de___listOfListedBridge");
var de___listOfListedEntitlement = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListedEntitlement(entry, context);
  });
  return retVal;
}, "de___listOfListedEntitlement");
var de___listOfListedFlow = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListedFlow(entry, context);
  });
  return retVal;
}, "de___listOfListedFlow");
var de___listOfListedGateway = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListedGateway(entry, context);
  });
  return retVal;
}, "de___listOfListedGateway");
var de___listOfListedGatewayInstance = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ListedGatewayInstance(entry, context);
  });
  return retVal;
}, "de___listOfListedGatewayInstance");
var de___listOfMediaStream = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MediaStream(entry, context);
  });
  return retVal;
}, "de___listOfMediaStream");
var de___listOfMediaStreamOutputConfiguration = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MediaStreamOutputConfiguration(entry, context);
  });
  return retVal;
}, "de___listOfMediaStreamOutputConfiguration");
var de___listOfMediaStreamSourceConfiguration = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MediaStreamSourceConfiguration(entry, context);
  });
  return retVal;
}, "de___listOfMediaStreamSourceConfiguration");
var de___listOfMessageDetail = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MessageDetail(entry, context);
  });
  return retVal;
}, "de___listOfMessageDetail");
var de___listOfOffering = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Offering(entry, context);
  });
  return retVal;
}, "de___listOfOffering");
var de___listOfOutput = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Output(entry, context);
  });
  return retVal;
}, "de___listOfOutput");
var de___listOfReservation = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Reservation(entry, context);
  });
  return retVal;
}, "de___listOfReservation");
var de___listOfSource = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Source(entry, context);
  });
  return retVal;
}, "de___listOfSource");
var de___listOfTransportStream = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TransportStream(entry, context);
  });
  return retVal;
}, "de___listOfTransportStream");
var de___listOfTransportStreamProgram = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TransportStreamProgram(entry, context);
  });
  return retVal;
}, "de___listOfTransportStreamProgram");
var de___listOfVpcInterface = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_VpcInterface(entry, context);
  });
  return retVal;
}, "de___listOfVpcInterface");
var de_Bridge = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    BridgeMessages: [, (_) => de___listOfMessageDetail(_, context), `bridgeMessages`],
    BridgeState: [, import_smithy_client.expectString, `bridgeState`],
    EgressGatewayBridge: [, (_) => de_EgressGatewayBridge(_, context), `egressGatewayBridge`],
    IngressGatewayBridge: [, (_) => de_IngressGatewayBridge(_, context), `ingressGatewayBridge`],
    Name: [, import_smithy_client.expectString, `name`],
    Outputs: [, (_) => de___listOfBridgeOutput(_, context), `outputs`],
    PlacementArn: [, import_smithy_client.expectString, `placementArn`],
    SourceFailoverConfig: [, (_) => de_FailoverConfig(_, context), `sourceFailoverConfig`],
    Sources: [, (_) => de___listOfBridgeSource(_, context), `sources`]
  });
}, "de_Bridge");
var de_BridgeFlowOutput = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    FlowSourceArn: [, import_smithy_client.expectString, `flowSourceArn`],
    Name: [, import_smithy_client.expectString, `name`]
  });
}, "de_BridgeFlowOutput");
var de_BridgeFlowSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    FlowVpcInterfaceAttachment: [, (_) => de_VpcInterfaceAttachment(_, context), `flowVpcInterfaceAttachment`],
    Name: [, import_smithy_client.expectString, `name`],
    OutputArn: [, import_smithy_client.expectString, `outputArn`]
  });
}, "de_BridgeFlowSource");
var de_BridgeNetworkOutput = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    IpAddress: [, import_smithy_client.expectString, `ipAddress`],
    Name: [, import_smithy_client.expectString, `name`],
    NetworkName: [, import_smithy_client.expectString, `networkName`],
    Port: [, import_smithy_client.expectInt32, `port`],
    Protocol: [, import_smithy_client.expectString, `protocol`],
    Ttl: [, import_smithy_client.expectInt32, `ttl`]
  });
}, "de_BridgeNetworkOutput");
var de_BridgeNetworkSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MulticastIp: [, import_smithy_client.expectString, `multicastIp`],
    Name: [, import_smithy_client.expectString, `name`],
    NetworkName: [, import_smithy_client.expectString, `networkName`],
    Port: [, import_smithy_client.expectInt32, `port`],
    Protocol: [, import_smithy_client.expectString, `protocol`]
  });
}, "de_BridgeNetworkSource");
var de_BridgeOutput = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FlowOutput: [, (_) => de_BridgeFlowOutput(_, context), `flowOutput`],
    NetworkOutput: [, (_) => de_BridgeNetworkOutput(_, context), `networkOutput`]
  });
}, "de_BridgeOutput");
var de_BridgeSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FlowSource: [, (_) => de_BridgeFlowSource(_, context), `flowSource`],
    NetworkSource: [, (_) => de_BridgeNetworkSource(_, context), `networkSource`]
  });
}, "de_BridgeSource");
var de_DestinationConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DestinationIp: [, import_smithy_client.expectString, `destinationIp`],
    DestinationPort: [, import_smithy_client.expectInt32, `destinationPort`],
    Interface: [, (_) => de_Interface(_, context), `interface`],
    OutboundIp: [, import_smithy_client.expectString, `outboundIp`]
  });
}, "de_DestinationConfiguration");
var de_EgressGatewayBridge = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InstanceId: [, import_smithy_client.expectString, `instanceId`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`]
  });
}, "de_EgressGatewayBridge");
var de_EncodingParameters = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CompressionFactor: [, import_smithy_client.limitedParseDouble, `compressionFactor`],
    EncoderProfile: [, import_smithy_client.expectString, `encoderProfile`]
  });
}, "de_EncodingParameters");
var de_Encryption = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Algorithm: [, import_smithy_client.expectString, `algorithm`],
    ConstantInitializationVector: [, import_smithy_client.expectString, `constantInitializationVector`],
    DeviceId: [, import_smithy_client.expectString, `deviceId`],
    KeyType: [, import_smithy_client.expectString, `keyType`],
    Region: [, import_smithy_client.expectString, `region`],
    ResourceId: [, import_smithy_client.expectString, `resourceId`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    SecretArn: [, import_smithy_client.expectString, `secretArn`],
    Url: [, import_smithy_client.expectString, `url`]
  });
}, "de_Encryption");
var de_Entitlement = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DataTransferSubscriberFeePercent: [, import_smithy_client.expectInt32, `dataTransferSubscriberFeePercent`],
    Description: [, import_smithy_client.expectString, `description`],
    Encryption: [, (_) => de_Encryption(_, context), `encryption`],
    EntitlementArn: [, import_smithy_client.expectString, `entitlementArn`],
    EntitlementStatus: [, import_smithy_client.expectString, `entitlementStatus`],
    Name: [, import_smithy_client.expectString, `name`],
    Subscribers: [, import_smithy_client._json, `subscribers`]
  });
}, "de_Entitlement");
var de_FailoverConfig = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FailoverMode: [, import_smithy_client.expectString, `failoverMode`],
    RecoveryWindow: [, import_smithy_client.expectInt32, `recoveryWindow`],
    SourcePriority: [, (_) => de_SourcePriority(_, context), `sourcePriority`],
    State: [, import_smithy_client.expectString, `state`]
  });
}, "de_FailoverConfig");
var de_Flow = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AvailabilityZone: [, import_smithy_client.expectString, `availabilityZone`],
    Description: [, import_smithy_client.expectString, `description`],
    EgressIp: [, import_smithy_client.expectString, `egressIp`],
    Entitlements: [, (_) => de___listOfEntitlement(_, context), `entitlements`],
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Maintenance: [, (_) => de_Maintenance(_, context), `maintenance`],
    MediaStreams: [, (_) => de___listOfMediaStream(_, context), `mediaStreams`],
    Name: [, import_smithy_client.expectString, `name`],
    Outputs: [, (_) => de___listOfOutput(_, context), `outputs`],
    Source: [, (_) => de_Source(_, context), `source`],
    SourceFailoverConfig: [, (_) => de_FailoverConfig(_, context), `sourceFailoverConfig`],
    Sources: [, (_) => de___listOfSource(_, context), `sources`],
    Status: [, import_smithy_client.expectString, `status`],
    VpcInterfaces: [, (_) => de___listOfVpcInterface(_, context), `vpcInterfaces`]
  });
}, "de_Flow");
var de_Fmtp = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ChannelOrder: [, import_smithy_client.expectString, `channelOrder`],
    Colorimetry: [, import_smithy_client.expectString, `colorimetry`],
    ExactFramerate: [, import_smithy_client.expectString, `exactFramerate`],
    Par: [, import_smithy_client.expectString, `par`],
    Range: [, import_smithy_client.expectString, `range`],
    ScanMode: [, import_smithy_client.expectString, `scanMode`],
    Tcs: [, import_smithy_client.expectString, `tcs`]
  });
}, "de_Fmtp");
var de_FrameResolution = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FrameHeight: [, import_smithy_client.expectInt32, `frameHeight`],
    FrameWidth: [, import_smithy_client.expectInt32, `frameWidth`]
  });
}, "de_FrameResolution");
var de_Gateway = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EgressCidrBlocks: [, import_smithy_client._json, `egressCidrBlocks`],
    GatewayArn: [, import_smithy_client.expectString, `gatewayArn`],
    GatewayMessages: [, (_) => de___listOfMessageDetail(_, context), `gatewayMessages`],
    GatewayState: [, import_smithy_client.expectString, `gatewayState`],
    Name: [, import_smithy_client.expectString, `name`],
    Networks: [, (_) => de___listOfGatewayNetwork(_, context), `networks`]
  });
}, "de_Gateway");
var de_GatewayBridgeSource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    VpcInterfaceAttachment: [, (_) => de_VpcInterfaceAttachment(_, context), `vpcInterfaceAttachment`]
  });
}, "de_GatewayBridgeSource");
var de_GatewayInstance = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BridgePlacement: [, import_smithy_client.expectString, `bridgePlacement`],
    ConnectionStatus: [, import_smithy_client.expectString, `connectionStatus`],
    GatewayArn: [, import_smithy_client.expectString, `gatewayArn`],
    GatewayInstanceArn: [, import_smithy_client.expectString, `gatewayInstanceArn`],
    InstanceId: [, import_smithy_client.expectString, `instanceId`],
    InstanceMessages: [, (_) => de___listOfMessageDetail(_, context), `instanceMessages`],
    InstanceState: [, import_smithy_client.expectString, `instanceState`],
    RunningBridgeCount: [, import_smithy_client.expectInt32, `runningBridgeCount`]
  });
}, "de_GatewayInstance");
var de_GatewayNetwork = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CidrBlock: [, import_smithy_client.expectString, `cidrBlock`],
    Name: [, import_smithy_client.expectString, `name`]
  });
}, "de_GatewayNetwork");
var de_IngressGatewayBridge = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InstanceId: [, import_smithy_client.expectString, `instanceId`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    MaxOutputs: [, import_smithy_client.expectInt32, `maxOutputs`]
  });
}, "de_IngressGatewayBridge");
var de_InputConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputIp: [, import_smithy_client.expectString, `inputIp`],
    InputPort: [, import_smithy_client.expectInt32, `inputPort`],
    Interface: [, (_) => de_Interface(_, context), `interface`]
  });
}, "de_InputConfiguration");
var de_Interface = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Name: [, import_smithy_client.expectString, `name`]
  });
}, "de_Interface");
var de_ListedBridge = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    BridgeState: [, import_smithy_client.expectString, `bridgeState`],
    BridgeType: [, import_smithy_client.expectString, `bridgeType`],
    Name: [, import_smithy_client.expectString, `name`],
    PlacementArn: [, import_smithy_client.expectString, `placementArn`]
  });
}, "de_ListedBridge");
var de_ListedEntitlement = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DataTransferSubscriberFeePercent: [, import_smithy_client.expectInt32, `dataTransferSubscriberFeePercent`],
    EntitlementArn: [, import_smithy_client.expectString, `entitlementArn`],
    EntitlementName: [, import_smithy_client.expectString, `entitlementName`]
  });
}, "de_ListedEntitlement");
var de_ListedFlow = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AvailabilityZone: [, import_smithy_client.expectString, `availabilityZone`],
    Description: [, import_smithy_client.expectString, `description`],
    FlowArn: [, import_smithy_client.expectString, `flowArn`],
    Maintenance: [, (_) => de_Maintenance(_, context), `maintenance`],
    Name: [, import_smithy_client.expectString, `name`],
    SourceType: [, import_smithy_client.expectString, `sourceType`],
    Status: [, import_smithy_client.expectString, `status`]
  });
}, "de_ListedFlow");
var de_ListedGateway = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    GatewayArn: [, import_smithy_client.expectString, `gatewayArn`],
    GatewayState: [, import_smithy_client.expectString, `gatewayState`],
    Name: [, import_smithy_client.expectString, `name`]
  });
}, "de_ListedGateway");
var de_ListedGatewayInstance = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    GatewayArn: [, import_smithy_client.expectString, `gatewayArn`],
    GatewayInstanceArn: [, import_smithy_client.expectString, `gatewayInstanceArn`],
    InstanceId: [, import_smithy_client.expectString, `instanceId`],
    InstanceState: [, import_smithy_client.expectString, `instanceState`]
  });
}, "de_ListedGatewayInstance");
var de_Maintenance = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaintenanceDay: [, import_smithy_client.expectString, `maintenanceDay`],
    MaintenanceDeadline: [, import_smithy_client.expectString, `maintenanceDeadline`],
    MaintenanceScheduledDate: [, import_smithy_client.expectString, `maintenanceScheduledDate`],
    MaintenanceStartHour: [, import_smithy_client.expectString, `maintenanceStartHour`]
  });
}, "de_Maintenance");
var de_MediaStream = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Attributes: [, (_) => de_MediaStreamAttributes(_, context), `attributes`],
    ClockRate: [, import_smithy_client.expectInt32, `clockRate`],
    Description: [, import_smithy_client.expectString, `description`],
    Fmt: [, import_smithy_client.expectInt32, `fmt`],
    MediaStreamId: [, import_smithy_client.expectInt32, `mediaStreamId`],
    MediaStreamName: [, import_smithy_client.expectString, `mediaStreamName`],
    MediaStreamType: [, import_smithy_client.expectString, `mediaStreamType`],
    VideoFormat: [, import_smithy_client.expectString, `videoFormat`]
  });
}, "de_MediaStream");
var de_MediaStreamAttributes = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Fmtp: [, (_) => de_Fmtp(_, context), `fmtp`],
    Lang: [, import_smithy_client.expectString, `lang`]
  });
}, "de_MediaStreamAttributes");
var de_MediaStreamOutputConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DestinationConfigurations: [
      ,
      (_) => de___listOfDestinationConfiguration(_, context),
      `destinationConfigurations`
    ],
    EncodingName: [, import_smithy_client.expectString, `encodingName`],
    EncodingParameters: [, (_) => de_EncodingParameters(_, context), `encodingParameters`],
    MediaStreamName: [, import_smithy_client.expectString, `mediaStreamName`]
  });
}, "de_MediaStreamOutputConfiguration");
var de_MediaStreamSourceConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EncodingName: [, import_smithy_client.expectString, `encodingName`],
    InputConfigurations: [, (_) => de___listOfInputConfiguration(_, context), `inputConfigurations`],
    MediaStreamName: [, import_smithy_client.expectString, `mediaStreamName`]
  });
}, "de_MediaStreamSourceConfiguration");
var de_MessageDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Code: [, import_smithy_client.expectString, `code`],
    Message: [, import_smithy_client.expectString, `message`],
    ResourceName: [, import_smithy_client.expectString, `resourceName`]
  });
}, "de_MessageDetail");
var de_Messages = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Errors: [, import_smithy_client._json, `errors`]
  });
}, "de_Messages");
var de_Offering = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CurrencyCode: [, import_smithy_client.expectString, `currencyCode`],
    Duration: [, import_smithy_client.expectInt32, `duration`],
    DurationUnits: [, import_smithy_client.expectString, `durationUnits`],
    OfferingArn: [, import_smithy_client.expectString, `offeringArn`],
    OfferingDescription: [, import_smithy_client.expectString, `offeringDescription`],
    PricePerUnit: [, import_smithy_client.expectString, `pricePerUnit`],
    PriceUnits: [, import_smithy_client.expectString, `priceUnits`],
    ResourceSpecification: [, (_) => de_ResourceSpecification(_, context), `resourceSpecification`]
  });
}, "de_Offering");
var de_Output = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BridgeArn: [, import_smithy_client.expectString, `bridgeArn`],
    BridgePorts: [, import_smithy_client._json, `bridgePorts`],
    DataTransferSubscriberFeePercent: [, import_smithy_client.expectInt32, `dataTransferSubscriberFeePercent`],
    Description: [, import_smithy_client.expectString, `description`],
    Destination: [, import_smithy_client.expectString, `destination`],
    Encryption: [, (_) => de_Encryption(_, context), `encryption`],
    EntitlementArn: [, import_smithy_client.expectString, `entitlementArn`],
    ListenerAddress: [, import_smithy_client.expectString, `listenerAddress`],
    MediaLiveInputArn: [, import_smithy_client.expectString, `mediaLiveInputArn`],
    MediaStreamOutputConfigurations: [
      ,
      (_) => de___listOfMediaStreamOutputConfiguration(_, context),
      `mediaStreamOutputConfigurations`
    ],
    Name: [, import_smithy_client.expectString, `name`],
    OutputArn: [, import_smithy_client.expectString, `outputArn`],
    Port: [, import_smithy_client.expectInt32, `port`],
    Transport: [, (_) => de_Transport(_, context), `transport`],
    VpcInterfaceAttachment: [, (_) => de_VpcInterfaceAttachment(_, context), `vpcInterfaceAttachment`]
  });
}, "de_Output");
var de_Reservation = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CurrencyCode: [, import_smithy_client.expectString, `currencyCode`],
    Duration: [, import_smithy_client.expectInt32, `duration`],
    DurationUnits: [, import_smithy_client.expectString, `durationUnits`],
    End: [, import_smithy_client.expectString, `end`],
    OfferingArn: [, import_smithy_client.expectString, `offeringArn`],
    OfferingDescription: [, import_smithy_client.expectString, `offeringDescription`],
    PricePerUnit: [, import_smithy_client.expectString, `pricePerUnit`],
    PriceUnits: [, import_smithy_client.expectString, `priceUnits`],
    ReservationArn: [, import_smithy_client.expectString, `reservationArn`],
    ReservationName: [, import_smithy_client.expectString, `reservationName`],
    ReservationState: [, import_smithy_client.expectString, `reservationState`],
    ResourceSpecification: [, (_) => de_ResourceSpecification(_, context), `resourceSpecification`],
    Start: [, import_smithy_client.expectString, `start`]
  });
}, "de_Reservation");
var de_ResourceSpecification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ReservedBitrate: [, import_smithy_client.expectInt32, `reservedBitrate`],
    ResourceType: [, import_smithy_client.expectString, `resourceType`]
  });
}, "de_ResourceSpecification");
var de_Source = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DataTransferSubscriberFeePercent: [, import_smithy_client.expectInt32, `dataTransferSubscriberFeePercent`],
    Decryption: [, (_) => de_Encryption(_, context), `decryption`],
    Description: [, import_smithy_client.expectString, `description`],
    EntitlementArn: [, import_smithy_client.expectString, `entitlementArn`],
    GatewayBridgeSource: [, (_) => de_GatewayBridgeSource(_, context), `gatewayBridgeSource`],
    IngestIp: [, import_smithy_client.expectString, `ingestIp`],
    IngestPort: [, import_smithy_client.expectInt32, `ingestPort`],
    MediaStreamSourceConfigurations: [
      ,
      (_) => de___listOfMediaStreamSourceConfiguration(_, context),
      `mediaStreamSourceConfigurations`
    ],
    Name: [, import_smithy_client.expectString, `name`],
    SenderControlPort: [, import_smithy_client.expectInt32, `senderControlPort`],
    SenderIpAddress: [, import_smithy_client.expectString, `senderIpAddress`],
    SourceArn: [, import_smithy_client.expectString, `sourceArn`],
    Transport: [, (_) => de_Transport(_, context), `transport`],
    VpcInterfaceName: [, import_smithy_client.expectString, `vpcInterfaceName`],
    WhitelistCidr: [, import_smithy_client.expectString, `whitelistCidr`]
  });
}, "de_Source");
var de_SourcePriority = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PrimarySource: [, import_smithy_client.expectString, `primarySource`]
  });
}, "de_SourcePriority");
var de_Transport = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CidrAllowList: [, import_smithy_client._json, `cidrAllowList`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    MaxLatency: [, import_smithy_client.expectInt32, `maxLatency`],
    MaxSyncBuffer: [, import_smithy_client.expectInt32, `maxSyncBuffer`],
    MinLatency: [, import_smithy_client.expectInt32, `minLatency`],
    Protocol: [, import_smithy_client.expectString, `protocol`],
    RemoteId: [, import_smithy_client.expectString, `remoteId`],
    SenderControlPort: [, import_smithy_client.expectInt32, `senderControlPort`],
    SenderIpAddress: [, import_smithy_client.expectString, `senderIpAddress`],
    SmoothingLatency: [, import_smithy_client.expectInt32, `smoothingLatency`],
    SourceListenerAddress: [, import_smithy_client.expectString, `sourceListenerAddress`],
    SourceListenerPort: [, import_smithy_client.expectInt32, `sourceListenerPort`],
    StreamId: [, import_smithy_client.expectString, `streamId`]
  });
}, "de_Transport");
var de_TransportMediaInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Programs: [, (_) => de___listOfTransportStreamProgram(_, context), `programs`]
  });
}, "de_TransportMediaInfo");
var de_TransportStream = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Channels: [, import_smithy_client.expectInt32, `channels`],
    Codec: [, import_smithy_client.expectString, `codec`],
    FrameRate: [, import_smithy_client.expectString, `frameRate`],
    FrameResolution: [, (_) => de_FrameResolution(_, context), `frameResolution`],
    Pid: [, import_smithy_client.expectInt32, `pid`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`],
    SampleSize: [, import_smithy_client.expectInt32, `sampleSize`],
    StreamType: [, import_smithy_client.expectString, `streamType`]
  });
}, "de_TransportStream");
var de_TransportStreamProgram = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PcrPid: [, import_smithy_client.expectInt32, `pcrPid`],
    ProgramName: [, import_smithy_client.expectString, `programName`],
    ProgramNumber: [, import_smithy_client.expectInt32, `programNumber`],
    ProgramPid: [, import_smithy_client.expectInt32, `programPid`],
    Streams: [, (_) => de___listOfTransportStream(_, context), `streams`]
  });
}, "de_TransportStreamProgram");
var de_VpcInterface = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Name: [, import_smithy_client.expectString, `name`],
    NetworkInterfaceIds: [, import_smithy_client._json, `networkInterfaceIds`],
    NetworkInterfaceType: [, import_smithy_client.expectString, `networkInterfaceType`],
    RoleArn: [, import_smithy_client.expectString, `roleArn`],
    SecurityGroupIds: [, import_smithy_client._json, `securityGroupIds`],
    SubnetId: [, import_smithy_client.expectString, `subnetId`]
  });
}, "de_VpcInterface");
var de_VpcInterfaceAttachment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    VpcInterfaceName: [, import_smithy_client.expectString, `vpcInterfaceName`]
  });
}, "de_VpcInterfaceAttachment");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _F = "Force";
var _FA = "FilterArn";
var _MR = "MaxResults";
var _NT = "NextToken";
var _TK = "TagKeys";
var _f = "force";
var _fA = "filterArn";
var _mR = "maxResults";
var _nT = "nextToken";
var _tK = "tagKeys";

// src/commands/AddBridgeOutputsCommand.ts
var _AddBridgeOutputsCommand = class _AddBridgeOutputsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "AddBridgeOutputs", {}).n("MediaConnectClient", "AddBridgeOutputsCommand").f(void 0, void 0).ser(se_AddBridgeOutputsCommand).de(de_AddBridgeOutputsCommand).build() {
};
__name(_AddBridgeOutputsCommand, "AddBridgeOutputsCommand");
var AddBridgeOutputsCommand = _AddBridgeOutputsCommand;

// src/commands/AddBridgeSourcesCommand.ts




var _AddBridgeSourcesCommand = class _AddBridgeSourcesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "AddBridgeSources", {}).n("MediaConnectClient", "AddBridgeSourcesCommand").f(void 0, void 0).ser(se_AddBridgeSourcesCommand).de(de_AddBridgeSourcesCommand).build() {
};
__name(_AddBridgeSourcesCommand, "AddBridgeSourcesCommand");
var AddBridgeSourcesCommand = _AddBridgeSourcesCommand;

// src/commands/AddFlowMediaStreamsCommand.ts




var _AddFlowMediaStreamsCommand = class _AddFlowMediaStreamsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "AddFlowMediaStreams", {}).n("MediaConnectClient", "AddFlowMediaStreamsCommand").f(void 0, void 0).ser(se_AddFlowMediaStreamsCommand).de(de_AddFlowMediaStreamsCommand).build() {
};
__name(_AddFlowMediaStreamsCommand, "AddFlowMediaStreamsCommand");
var AddFlowMediaStreamsCommand = _AddFlowMediaStreamsCommand;

// src/commands/AddFlowOutputsCommand.ts




var _AddFlowOutputsCommand = class _AddFlowOutputsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "AddFlowOutputs", {}).n("MediaConnectClient", "AddFlowOutputsCommand").f(void 0, void 0).ser(se_AddFlowOutputsCommand).de(de_AddFlowOutputsCommand).build() {
};
__name(_AddFlowOutputsCommand, "AddFlowOutputsCommand");
var AddFlowOutputsCommand = _AddFlowOutputsCommand;

// src/commands/AddFlowSourcesCommand.ts




var _AddFlowSourcesCommand = class _AddFlowSourcesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "AddFlowSources", {}).n("MediaConnectClient", "AddFlowSourcesCommand").f(void 0, void 0).ser(se_AddFlowSourcesCommand).de(de_AddFlowSourcesCommand).build() {
};
__name(_AddFlowSourcesCommand, "AddFlowSourcesCommand");
var AddFlowSourcesCommand = _AddFlowSourcesCommand;

// src/commands/AddFlowVpcInterfacesCommand.ts




var _AddFlowVpcInterfacesCommand = class _AddFlowVpcInterfacesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "AddFlowVpcInterfaces", {}).n("MediaConnectClient", "AddFlowVpcInterfacesCommand").f(void 0, void 0).ser(se_AddFlowVpcInterfacesCommand).de(de_AddFlowVpcInterfacesCommand).build() {
};
__name(_AddFlowVpcInterfacesCommand, "AddFlowVpcInterfacesCommand");
var AddFlowVpcInterfacesCommand = _AddFlowVpcInterfacesCommand;

// src/commands/CreateBridgeCommand.ts




var _CreateBridgeCommand = class _CreateBridgeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "CreateBridge", {}).n("MediaConnectClient", "CreateBridgeCommand").f(void 0, void 0).ser(se_CreateBridgeCommand).de(de_CreateBridgeCommand).build() {
};
__name(_CreateBridgeCommand, "CreateBridgeCommand");
var CreateBridgeCommand = _CreateBridgeCommand;

// src/commands/CreateFlowCommand.ts




var _CreateFlowCommand = class _CreateFlowCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "CreateFlow", {}).n("MediaConnectClient", "CreateFlowCommand").f(void 0, void 0).ser(se_CreateFlowCommand).de(de_CreateFlowCommand).build() {
};
__name(_CreateFlowCommand, "CreateFlowCommand");
var CreateFlowCommand = _CreateFlowCommand;

// src/commands/CreateGatewayCommand.ts




var _CreateGatewayCommand = class _CreateGatewayCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "CreateGateway", {}).n("MediaConnectClient", "CreateGatewayCommand").f(void 0, void 0).ser(se_CreateGatewayCommand).de(de_CreateGatewayCommand).build() {
};
__name(_CreateGatewayCommand, "CreateGatewayCommand");
var CreateGatewayCommand = _CreateGatewayCommand;

// src/commands/DeleteBridgeCommand.ts




var _DeleteBridgeCommand = class _DeleteBridgeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DeleteBridge", {}).n("MediaConnectClient", "DeleteBridgeCommand").f(void 0, void 0).ser(se_DeleteBridgeCommand).de(de_DeleteBridgeCommand).build() {
};
__name(_DeleteBridgeCommand, "DeleteBridgeCommand");
var DeleteBridgeCommand = _DeleteBridgeCommand;

// src/commands/DeleteFlowCommand.ts




var _DeleteFlowCommand = class _DeleteFlowCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DeleteFlow", {}).n("MediaConnectClient", "DeleteFlowCommand").f(void 0, void 0).ser(se_DeleteFlowCommand).de(de_DeleteFlowCommand).build() {
};
__name(_DeleteFlowCommand, "DeleteFlowCommand");
var DeleteFlowCommand = _DeleteFlowCommand;

// src/commands/DeleteGatewayCommand.ts




var _DeleteGatewayCommand = class _DeleteGatewayCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DeleteGateway", {}).n("MediaConnectClient", "DeleteGatewayCommand").f(void 0, void 0).ser(se_DeleteGatewayCommand).de(de_DeleteGatewayCommand).build() {
};
__name(_DeleteGatewayCommand, "DeleteGatewayCommand");
var DeleteGatewayCommand = _DeleteGatewayCommand;

// src/commands/DeregisterGatewayInstanceCommand.ts




var _DeregisterGatewayInstanceCommand = class _DeregisterGatewayInstanceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DeregisterGatewayInstance", {}).n("MediaConnectClient", "DeregisterGatewayInstanceCommand").f(void 0, void 0).ser(se_DeregisterGatewayInstanceCommand).de(de_DeregisterGatewayInstanceCommand).build() {
};
__name(_DeregisterGatewayInstanceCommand, "DeregisterGatewayInstanceCommand");
var DeregisterGatewayInstanceCommand = _DeregisterGatewayInstanceCommand;

// src/commands/DescribeBridgeCommand.ts




var _DescribeBridgeCommand = class _DescribeBridgeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DescribeBridge", {}).n("MediaConnectClient", "DescribeBridgeCommand").f(void 0, void 0).ser(se_DescribeBridgeCommand).de(de_DescribeBridgeCommand).build() {
};
__name(_DescribeBridgeCommand, "DescribeBridgeCommand");
var DescribeBridgeCommand = _DescribeBridgeCommand;

// src/commands/DescribeFlowCommand.ts




var _DescribeFlowCommand = class _DescribeFlowCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DescribeFlow", {}).n("MediaConnectClient", "DescribeFlowCommand").f(void 0, void 0).ser(se_DescribeFlowCommand).de(de_DescribeFlowCommand).build() {
};
__name(_DescribeFlowCommand, "DescribeFlowCommand");
var DescribeFlowCommand = _DescribeFlowCommand;

// src/commands/DescribeFlowSourceMetadataCommand.ts




var _DescribeFlowSourceMetadataCommand = class _DescribeFlowSourceMetadataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DescribeFlowSourceMetadata", {}).n("MediaConnectClient", "DescribeFlowSourceMetadataCommand").f(void 0, void 0).ser(se_DescribeFlowSourceMetadataCommand).de(de_DescribeFlowSourceMetadataCommand).build() {
};
__name(_DescribeFlowSourceMetadataCommand, "DescribeFlowSourceMetadataCommand");
var DescribeFlowSourceMetadataCommand = _DescribeFlowSourceMetadataCommand;

// src/commands/DescribeGatewayCommand.ts




var _DescribeGatewayCommand = class _DescribeGatewayCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DescribeGateway", {}).n("MediaConnectClient", "DescribeGatewayCommand").f(void 0, void 0).ser(se_DescribeGatewayCommand).de(de_DescribeGatewayCommand).build() {
};
__name(_DescribeGatewayCommand, "DescribeGatewayCommand");
var DescribeGatewayCommand = _DescribeGatewayCommand;

// src/commands/DescribeGatewayInstanceCommand.ts




var _DescribeGatewayInstanceCommand = class _DescribeGatewayInstanceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DescribeGatewayInstance", {}).n("MediaConnectClient", "DescribeGatewayInstanceCommand").f(void 0, void 0).ser(se_DescribeGatewayInstanceCommand).de(de_DescribeGatewayInstanceCommand).build() {
};
__name(_DescribeGatewayInstanceCommand, "DescribeGatewayInstanceCommand");
var DescribeGatewayInstanceCommand = _DescribeGatewayInstanceCommand;

// src/commands/DescribeOfferingCommand.ts




var _DescribeOfferingCommand = class _DescribeOfferingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DescribeOffering", {}).n("MediaConnectClient", "DescribeOfferingCommand").f(void 0, void 0).ser(se_DescribeOfferingCommand).de(de_DescribeOfferingCommand).build() {
};
__name(_DescribeOfferingCommand, "DescribeOfferingCommand");
var DescribeOfferingCommand = _DescribeOfferingCommand;

// src/commands/DescribeReservationCommand.ts




var _DescribeReservationCommand = class _DescribeReservationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "DescribeReservation", {}).n("MediaConnectClient", "DescribeReservationCommand").f(void 0, void 0).ser(se_DescribeReservationCommand).de(de_DescribeReservationCommand).build() {
};
__name(_DescribeReservationCommand, "DescribeReservationCommand");
var DescribeReservationCommand = _DescribeReservationCommand;

// src/commands/GrantFlowEntitlementsCommand.ts




var _GrantFlowEntitlementsCommand = class _GrantFlowEntitlementsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "GrantFlowEntitlements", {}).n("MediaConnectClient", "GrantFlowEntitlementsCommand").f(void 0, void 0).ser(se_GrantFlowEntitlementsCommand).de(de_GrantFlowEntitlementsCommand).build() {
};
__name(_GrantFlowEntitlementsCommand, "GrantFlowEntitlementsCommand");
var GrantFlowEntitlementsCommand = _GrantFlowEntitlementsCommand;

// src/commands/ListBridgesCommand.ts




var _ListBridgesCommand = class _ListBridgesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "ListBridges", {}).n("MediaConnectClient", "ListBridgesCommand").f(void 0, void 0).ser(se_ListBridgesCommand).de(de_ListBridgesCommand).build() {
};
__name(_ListBridgesCommand, "ListBridgesCommand");
var ListBridgesCommand = _ListBridgesCommand;

// src/commands/ListEntitlementsCommand.ts




var _ListEntitlementsCommand = class _ListEntitlementsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "ListEntitlements", {}).n("MediaConnectClient", "ListEntitlementsCommand").f(void 0, void 0).ser(se_ListEntitlementsCommand).de(de_ListEntitlementsCommand).build() {
};
__name(_ListEntitlementsCommand, "ListEntitlementsCommand");
var ListEntitlementsCommand = _ListEntitlementsCommand;

// src/commands/ListFlowsCommand.ts




var _ListFlowsCommand = class _ListFlowsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "ListFlows", {}).n("MediaConnectClient", "ListFlowsCommand").f(void 0, void 0).ser(se_ListFlowsCommand).de(de_ListFlowsCommand).build() {
};
__name(_ListFlowsCommand, "ListFlowsCommand");
var ListFlowsCommand = _ListFlowsCommand;

// src/commands/ListGatewayInstancesCommand.ts




var _ListGatewayInstancesCommand = class _ListGatewayInstancesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "ListGatewayInstances", {}).n("MediaConnectClient", "ListGatewayInstancesCommand").f(void 0, void 0).ser(se_ListGatewayInstancesCommand).de(de_ListGatewayInstancesCommand).build() {
};
__name(_ListGatewayInstancesCommand, "ListGatewayInstancesCommand");
var ListGatewayInstancesCommand = _ListGatewayInstancesCommand;

// src/commands/ListGatewaysCommand.ts




var _ListGatewaysCommand = class _ListGatewaysCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "ListGateways", {}).n("MediaConnectClient", "ListGatewaysCommand").f(void 0, void 0).ser(se_ListGatewaysCommand).de(de_ListGatewaysCommand).build() {
};
__name(_ListGatewaysCommand, "ListGatewaysCommand");
var ListGatewaysCommand = _ListGatewaysCommand;

// src/commands/ListOfferingsCommand.ts




var _ListOfferingsCommand = class _ListOfferingsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "ListOfferings", {}).n("MediaConnectClient", "ListOfferingsCommand").f(void 0, void 0).ser(se_ListOfferingsCommand).de(de_ListOfferingsCommand).build() {
};
__name(_ListOfferingsCommand, "ListOfferingsCommand");
var ListOfferingsCommand = _ListOfferingsCommand;

// src/commands/ListReservationsCommand.ts




var _ListReservationsCommand = class _ListReservationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "ListReservations", {}).n("MediaConnectClient", "ListReservationsCommand").f(void 0, void 0).ser(se_ListReservationsCommand).de(de_ListReservationsCommand).build() {
};
__name(_ListReservationsCommand, "ListReservationsCommand");
var ListReservationsCommand = _ListReservationsCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "ListTagsForResource", {}).n("MediaConnectClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/PurchaseOfferingCommand.ts




var _PurchaseOfferingCommand = class _PurchaseOfferingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "PurchaseOffering", {}).n("MediaConnectClient", "PurchaseOfferingCommand").f(void 0, void 0).ser(se_PurchaseOfferingCommand).de(de_PurchaseOfferingCommand).build() {
};
__name(_PurchaseOfferingCommand, "PurchaseOfferingCommand");
var PurchaseOfferingCommand = _PurchaseOfferingCommand;

// src/commands/RemoveBridgeOutputCommand.ts




var _RemoveBridgeOutputCommand = class _RemoveBridgeOutputCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "RemoveBridgeOutput", {}).n("MediaConnectClient", "RemoveBridgeOutputCommand").f(void 0, void 0).ser(se_RemoveBridgeOutputCommand).de(de_RemoveBridgeOutputCommand).build() {
};
__name(_RemoveBridgeOutputCommand, "RemoveBridgeOutputCommand");
var RemoveBridgeOutputCommand = _RemoveBridgeOutputCommand;

// src/commands/RemoveBridgeSourceCommand.ts




var _RemoveBridgeSourceCommand = class _RemoveBridgeSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "RemoveBridgeSource", {}).n("MediaConnectClient", "RemoveBridgeSourceCommand").f(void 0, void 0).ser(se_RemoveBridgeSourceCommand).de(de_RemoveBridgeSourceCommand).build() {
};
__name(_RemoveBridgeSourceCommand, "RemoveBridgeSourceCommand");
var RemoveBridgeSourceCommand = _RemoveBridgeSourceCommand;

// src/commands/RemoveFlowMediaStreamCommand.ts




var _RemoveFlowMediaStreamCommand = class _RemoveFlowMediaStreamCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "RemoveFlowMediaStream", {}).n("MediaConnectClient", "RemoveFlowMediaStreamCommand").f(void 0, void 0).ser(se_RemoveFlowMediaStreamCommand).de(de_RemoveFlowMediaStreamCommand).build() {
};
__name(_RemoveFlowMediaStreamCommand, "RemoveFlowMediaStreamCommand");
var RemoveFlowMediaStreamCommand = _RemoveFlowMediaStreamCommand;

// src/commands/RemoveFlowOutputCommand.ts




var _RemoveFlowOutputCommand = class _RemoveFlowOutputCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "RemoveFlowOutput", {}).n("MediaConnectClient", "RemoveFlowOutputCommand").f(void 0, void 0).ser(se_RemoveFlowOutputCommand).de(de_RemoveFlowOutputCommand).build() {
};
__name(_RemoveFlowOutputCommand, "RemoveFlowOutputCommand");
var RemoveFlowOutputCommand = _RemoveFlowOutputCommand;

// src/commands/RemoveFlowSourceCommand.ts




var _RemoveFlowSourceCommand = class _RemoveFlowSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "RemoveFlowSource", {}).n("MediaConnectClient", "RemoveFlowSourceCommand").f(void 0, void 0).ser(se_RemoveFlowSourceCommand).de(de_RemoveFlowSourceCommand).build() {
};
__name(_RemoveFlowSourceCommand, "RemoveFlowSourceCommand");
var RemoveFlowSourceCommand = _RemoveFlowSourceCommand;

// src/commands/RemoveFlowVpcInterfaceCommand.ts




var _RemoveFlowVpcInterfaceCommand = class _RemoveFlowVpcInterfaceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "RemoveFlowVpcInterface", {}).n("MediaConnectClient", "RemoveFlowVpcInterfaceCommand").f(void 0, void 0).ser(se_RemoveFlowVpcInterfaceCommand).de(de_RemoveFlowVpcInterfaceCommand).build() {
};
__name(_RemoveFlowVpcInterfaceCommand, "RemoveFlowVpcInterfaceCommand");
var RemoveFlowVpcInterfaceCommand = _RemoveFlowVpcInterfaceCommand;

// src/commands/RevokeFlowEntitlementCommand.ts




var _RevokeFlowEntitlementCommand = class _RevokeFlowEntitlementCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "RevokeFlowEntitlement", {}).n("MediaConnectClient", "RevokeFlowEntitlementCommand").f(void 0, void 0).ser(se_RevokeFlowEntitlementCommand).de(de_RevokeFlowEntitlementCommand).build() {
};
__name(_RevokeFlowEntitlementCommand, "RevokeFlowEntitlementCommand");
var RevokeFlowEntitlementCommand = _RevokeFlowEntitlementCommand;

// src/commands/StartFlowCommand.ts




var _StartFlowCommand = class _StartFlowCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "StartFlow", {}).n("MediaConnectClient", "StartFlowCommand").f(void 0, void 0).ser(se_StartFlowCommand).de(de_StartFlowCommand).build() {
};
__name(_StartFlowCommand, "StartFlowCommand");
var StartFlowCommand = _StartFlowCommand;

// src/commands/StopFlowCommand.ts




var _StopFlowCommand = class _StopFlowCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "StopFlow", {}).n("MediaConnectClient", "StopFlowCommand").f(void 0, void 0).ser(se_StopFlowCommand).de(de_StopFlowCommand).build() {
};
__name(_StopFlowCommand, "StopFlowCommand");
var StopFlowCommand = _StopFlowCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "TagResource", {}).n("MediaConnectClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UntagResource", {}).n("MediaConnectClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateBridgeCommand.ts




var _UpdateBridgeCommand = class _UpdateBridgeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateBridge", {}).n("MediaConnectClient", "UpdateBridgeCommand").f(void 0, void 0).ser(se_UpdateBridgeCommand).de(de_UpdateBridgeCommand).build() {
};
__name(_UpdateBridgeCommand, "UpdateBridgeCommand");
var UpdateBridgeCommand = _UpdateBridgeCommand;

// src/commands/UpdateBridgeOutputCommand.ts




var _UpdateBridgeOutputCommand = class _UpdateBridgeOutputCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateBridgeOutput", {}).n("MediaConnectClient", "UpdateBridgeOutputCommand").f(void 0, void 0).ser(se_UpdateBridgeOutputCommand).de(de_UpdateBridgeOutputCommand).build() {
};
__name(_UpdateBridgeOutputCommand, "UpdateBridgeOutputCommand");
var UpdateBridgeOutputCommand = _UpdateBridgeOutputCommand;

// src/commands/UpdateBridgeSourceCommand.ts




var _UpdateBridgeSourceCommand = class _UpdateBridgeSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateBridgeSource", {}).n("MediaConnectClient", "UpdateBridgeSourceCommand").f(void 0, void 0).ser(se_UpdateBridgeSourceCommand).de(de_UpdateBridgeSourceCommand).build() {
};
__name(_UpdateBridgeSourceCommand, "UpdateBridgeSourceCommand");
var UpdateBridgeSourceCommand = _UpdateBridgeSourceCommand;

// src/commands/UpdateBridgeStateCommand.ts




var _UpdateBridgeStateCommand = class _UpdateBridgeStateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateBridgeState", {}).n("MediaConnectClient", "UpdateBridgeStateCommand").f(void 0, void 0).ser(se_UpdateBridgeStateCommand).de(de_UpdateBridgeStateCommand).build() {
};
__name(_UpdateBridgeStateCommand, "UpdateBridgeStateCommand");
var UpdateBridgeStateCommand = _UpdateBridgeStateCommand;

// src/commands/UpdateFlowCommand.ts




var _UpdateFlowCommand = class _UpdateFlowCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateFlow", {}).n("MediaConnectClient", "UpdateFlowCommand").f(void 0, void 0).ser(se_UpdateFlowCommand).de(de_UpdateFlowCommand).build() {
};
__name(_UpdateFlowCommand, "UpdateFlowCommand");
var UpdateFlowCommand = _UpdateFlowCommand;

// src/commands/UpdateFlowEntitlementCommand.ts




var _UpdateFlowEntitlementCommand = class _UpdateFlowEntitlementCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateFlowEntitlement", {}).n("MediaConnectClient", "UpdateFlowEntitlementCommand").f(void 0, void 0).ser(se_UpdateFlowEntitlementCommand).de(de_UpdateFlowEntitlementCommand).build() {
};
__name(_UpdateFlowEntitlementCommand, "UpdateFlowEntitlementCommand");
var UpdateFlowEntitlementCommand = _UpdateFlowEntitlementCommand;

// src/commands/UpdateFlowMediaStreamCommand.ts




var _UpdateFlowMediaStreamCommand = class _UpdateFlowMediaStreamCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateFlowMediaStream", {}).n("MediaConnectClient", "UpdateFlowMediaStreamCommand").f(void 0, void 0).ser(se_UpdateFlowMediaStreamCommand).de(de_UpdateFlowMediaStreamCommand).build() {
};
__name(_UpdateFlowMediaStreamCommand, "UpdateFlowMediaStreamCommand");
var UpdateFlowMediaStreamCommand = _UpdateFlowMediaStreamCommand;

// src/commands/UpdateFlowOutputCommand.ts




var _UpdateFlowOutputCommand = class _UpdateFlowOutputCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateFlowOutput", {}).n("MediaConnectClient", "UpdateFlowOutputCommand").f(void 0, void 0).ser(se_UpdateFlowOutputCommand).de(de_UpdateFlowOutputCommand).build() {
};
__name(_UpdateFlowOutputCommand, "UpdateFlowOutputCommand");
var UpdateFlowOutputCommand = _UpdateFlowOutputCommand;

// src/commands/UpdateFlowSourceCommand.ts




var _UpdateFlowSourceCommand = class _UpdateFlowSourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateFlowSource", {}).n("MediaConnectClient", "UpdateFlowSourceCommand").f(void 0, void 0).ser(se_UpdateFlowSourceCommand).de(de_UpdateFlowSourceCommand).build() {
};
__name(_UpdateFlowSourceCommand, "UpdateFlowSourceCommand");
var UpdateFlowSourceCommand = _UpdateFlowSourceCommand;

// src/commands/UpdateGatewayInstanceCommand.ts




var _UpdateGatewayInstanceCommand = class _UpdateGatewayInstanceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConnect", "UpdateGatewayInstance", {}).n("MediaConnectClient", "UpdateGatewayInstanceCommand").f(void 0, void 0).ser(se_UpdateGatewayInstanceCommand).de(de_UpdateGatewayInstanceCommand).build() {
};
__name(_UpdateGatewayInstanceCommand, "UpdateGatewayInstanceCommand");
var UpdateGatewayInstanceCommand = _UpdateGatewayInstanceCommand;

// src/MediaConnect.ts
var commands = {
  AddBridgeOutputsCommand,
  AddBridgeSourcesCommand,
  AddFlowMediaStreamsCommand,
  AddFlowOutputsCommand,
  AddFlowSourcesCommand,
  AddFlowVpcInterfacesCommand,
  CreateBridgeCommand,
  CreateFlowCommand,
  CreateGatewayCommand,
  DeleteBridgeCommand,
  DeleteFlowCommand,
  DeleteGatewayCommand,
  DeregisterGatewayInstanceCommand,
  DescribeBridgeCommand,
  DescribeFlowCommand,
  DescribeFlowSourceMetadataCommand,
  DescribeGatewayCommand,
  DescribeGatewayInstanceCommand,
  DescribeOfferingCommand,
  DescribeReservationCommand,
  GrantFlowEntitlementsCommand,
  ListBridgesCommand,
  ListEntitlementsCommand,
  ListFlowsCommand,
  ListGatewayInstancesCommand,
  ListGatewaysCommand,
  ListOfferingsCommand,
  ListReservationsCommand,
  ListTagsForResourceCommand,
  PurchaseOfferingCommand,
  RemoveBridgeOutputCommand,
  RemoveBridgeSourceCommand,
  RemoveFlowMediaStreamCommand,
  RemoveFlowOutputCommand,
  RemoveFlowSourceCommand,
  RemoveFlowVpcInterfaceCommand,
  RevokeFlowEntitlementCommand,
  StartFlowCommand,
  StopFlowCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateBridgeCommand,
  UpdateBridgeOutputCommand,
  UpdateBridgeSourceCommand,
  UpdateBridgeStateCommand,
  UpdateFlowCommand,
  UpdateFlowEntitlementCommand,
  UpdateFlowMediaStreamCommand,
  UpdateFlowOutputCommand,
  UpdateFlowSourceCommand,
  UpdateGatewayInstanceCommand
};
var _MediaConnect = class _MediaConnect extends MediaConnectClient {
};
__name(_MediaConnect, "MediaConnect");
var MediaConnect = _MediaConnect;
(0, import_smithy_client.createAggregatedClient)(commands, MediaConnect);

// src/pagination/ListBridgesPaginator.ts

var paginateListBridges = (0, import_core.createPaginator)(MediaConnectClient, ListBridgesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListEntitlementsPaginator.ts

var paginateListEntitlements = (0, import_core.createPaginator)(MediaConnectClient, ListEntitlementsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListFlowsPaginator.ts

var paginateListFlows = (0, import_core.createPaginator)(MediaConnectClient, ListFlowsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListGatewayInstancesPaginator.ts

var paginateListGatewayInstances = (0, import_core.createPaginator)(MediaConnectClient, ListGatewayInstancesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListGatewaysPaginator.ts

var paginateListGateways = (0, import_core.createPaginator)(MediaConnectClient, ListGatewaysCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListOfferingsPaginator.ts

var paginateListOfferings = (0, import_core.createPaginator)(MediaConnectClient, ListOfferingsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListReservationsPaginator.ts

var paginateListReservations = (0, import_core.createPaginator)(MediaConnectClient, ListReservationsCommand, "NextToken", "NextToken", "MaxResults");

// src/waiters/waitForFlowActive.ts
var import_util_waiter = require("@smithy/util-waiter");
var checkState = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeFlowCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Flow.Status;
      }, "returnComparator");
      if (returnComparator() === "ACTIVE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Flow.Status;
      }, "returnComparator");
      if (returnComparator() === "STARTING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Flow.Status;
      }, "returnComparator");
      if (returnComparator() === "UPDATING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Flow.Status;
      }, "returnComparator");
      if (returnComparator() === "ERROR") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
    if (exception.name && exception.name == "ServiceUnavailableException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForFlowActive = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
}, "waitForFlowActive");
var waitUntilFlowActive = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilFlowActive");

// src/waiters/waitForFlowDeleted.ts

var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeFlowCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Flow.Status;
      }, "returnComparator");
      if (returnComparator() === "DELETING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Flow.Status;
      }, "returnComparator");
      if (returnComparator() === "ERROR") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "NotFoundException") {
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    }
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
    if (exception.name && exception.name == "ServiceUnavailableException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForFlowDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
}, "waitForFlowDeleted");
var waitUntilFlowDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilFlowDeleted");

// src/waiters/waitForFlowStandby.ts

var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeFlowCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Flow.Status;
      }, "returnComparator");
      if (returnComparator() === "STANDBY") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Flow.Status;
      }, "returnComparator");
      if (returnComparator() === "STOPPING") {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.Flow.Status;
      }, "returnComparator");
      if (returnComparator() === "ERROR") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InternalServerErrorException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
    if (exception.name && exception.name == "ServiceUnavailableException") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForFlowStandby = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
}, "waitForFlowStandby");
var waitUntilFlowStandby = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilFlowStandby");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  MediaConnectServiceException,
  __Client,
  MediaConnectClient,
  MediaConnect,
  $Command,
  AddBridgeOutputsCommand,
  AddBridgeSourcesCommand,
  AddFlowMediaStreamsCommand,
  AddFlowOutputsCommand,
  AddFlowSourcesCommand,
  AddFlowVpcInterfacesCommand,
  CreateBridgeCommand,
  CreateFlowCommand,
  CreateGatewayCommand,
  DeleteBridgeCommand,
  DeleteFlowCommand,
  DeleteGatewayCommand,
  DeregisterGatewayInstanceCommand,
  DescribeBridgeCommand,
  DescribeFlowCommand,
  DescribeFlowSourceMetadataCommand,
  DescribeGatewayCommand,
  DescribeGatewayInstanceCommand,
  DescribeOfferingCommand,
  DescribeReservationCommand,
  GrantFlowEntitlementsCommand,
  ListBridgesCommand,
  ListEntitlementsCommand,
  ListFlowsCommand,
  ListGatewayInstancesCommand,
  ListGatewaysCommand,
  ListOfferingsCommand,
  ListReservationsCommand,
  ListTagsForResourceCommand,
  PurchaseOfferingCommand,
  RemoveBridgeOutputCommand,
  RemoveBridgeSourceCommand,
  RemoveFlowMediaStreamCommand,
  RemoveFlowOutputCommand,
  RemoveFlowSourceCommand,
  RemoveFlowVpcInterfaceCommand,
  RevokeFlowEntitlementCommand,
  StartFlowCommand,
  StopFlowCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateBridgeCommand,
  UpdateBridgeOutputCommand,
  UpdateBridgeSourceCommand,
  UpdateBridgeStateCommand,
  UpdateFlowCommand,
  UpdateFlowEntitlementCommand,
  UpdateFlowMediaStreamCommand,
  UpdateFlowOutputCommand,
  UpdateFlowSourceCommand,
  UpdateGatewayInstanceCommand,
  paginateListBridges,
  paginateListEntitlements,
  paginateListFlows,
  paginateListGatewayInstances,
  paginateListGateways,
  paginateListOfferings,
  paginateListReservations,
  waitForFlowActive,
  waitUntilFlowActive,
  waitForFlowDeleted,
  waitUntilFlowDeleted,
  waitForFlowStandby,
  waitUntilFlowStandby,
  Protocol,
  Colorimetry,
  Range,
  ScanMode,
  Tcs,
  MediaStreamType,
  Algorithm,
  KeyType,
  EncodingName,
  EncoderProfile,
  EntitlementStatus,
  BridgeState,
  MaintenanceDay,
  SourceType,
  Status,
  GatewayState,
  InstanceState,
  DurationUnits,
  PriceUnits,
  ResourceType,
  ReservationState,
  NetworkInterfaceType,
  BadRequestException,
  ConflictException,
  ForbiddenException,
  InternalServerErrorException,
  NotFoundException,
  ServiceUnavailableException,
  TooManyRequestsException,
  AddFlowOutputs420Exception,
  FailoverMode,
  State,
  BridgePlacement,
  ConnectionStatus,
  CreateBridge420Exception,
  CreateFlow420Exception,
  CreateGateway420Exception,
  DesiredState,
  GrantFlowEntitlements420Exception
});

