import { MediaConnectServiceException as __BaseException } from "./MediaConnectServiceException";
export const Protocol = {
    cdi: "cdi",
    fujitsu_qos: "fujitsu-qos",
    rist: "rist",
    rtp: "rtp",
    rtp_fec: "rtp-fec",
    srt_caller: "srt-caller",
    srt_listener: "srt-listener",
    st2110_jpegxs: "st2110-jpegxs",
    udp: "udp",
    zixi_pull: "zixi-pull",
    zixi_push: "zixi-push",
};
export const Colorimetry = {
    BT2020: "BT2020",
    BT2100: "BT2100",
    BT601: "BT601",
    BT709: "BT709",
    ST2065_1: "ST2065-1",
    ST2065_3: "ST2065-3",
    XYZ: "XYZ",
};
export const Range = {
    FULL: "FULL",
    FULLPROTECT: "FULLPROTECT",
    NARROW: "NARROW",
};
export const ScanMode = {
    interlace: "interlace",
    progressive: "progressive",
    progressive_segmented_frame: "progressive-segmented-frame",
};
export const Tcs = {
    BT2100LINHLG: "BT2100LINHLG",
    BT2100LINPQ: "BT2100LINPQ",
    DENSITY: "DENSITY",
    HLG: "HLG",
    LINEAR: "LINEAR",
    PQ: "PQ",
    SDR: "SDR",
    ST2065_1: "ST2065-1",
    ST428_1: "ST428-1",
};
export const MediaStreamType = {
    ancillary_data: "ancillary-data",
    audio: "audio",
    video: "video",
};
export const Algorithm = {
    aes128: "aes128",
    aes192: "aes192",
    aes256: "aes256",
};
export const KeyType = {
    speke: "speke",
    srt_password: "srt-password",
    static_key: "static-key",
};
export const EncodingName = {
    jxsv: "jxsv",
    pcm: "pcm",
    raw: "raw",
    smpte291: "smpte291",
};
export const EncoderProfile = {
    high: "high",
    main: "main",
};
export const EntitlementStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const BridgeState = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETING: "DELETING",
    DEPLOYING: "DEPLOYING",
    STANDBY: "STANDBY",
    STARTING: "STARTING",
    START_FAILED: "START_FAILED",
    START_PENDING: "START_PENDING",
    STOPPING: "STOPPING",
    STOP_FAILED: "STOP_FAILED",
    UPDATING: "UPDATING",
};
export const MaintenanceDay = {
    Friday: "Friday",
    Monday: "Monday",
    Saturday: "Saturday",
    Sunday: "Sunday",
    Thursday: "Thursday",
    Tuesday: "Tuesday",
    Wednesday: "Wednesday",
};
export const SourceType = {
    ENTITLED: "ENTITLED",
    OWNED: "OWNED",
};
export const Status = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
    ERROR: "ERROR",
    STANDBY: "STANDBY",
    STARTING: "STARTING",
    STOPPING: "STOPPING",
    UPDATING: "UPDATING",
};
export const GatewayState = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETING: "DELETING",
    ERROR: "ERROR",
    UPDATING: "UPDATING",
};
export const InstanceState = {
    ACTIVE: "ACTIVE",
    DEREGISTERED: "DEREGISTERED",
    DEREGISTERING: "DEREGISTERING",
    DEREGISTRATION_ERROR: "DEREGISTRATION_ERROR",
    REGISTERING: "REGISTERING",
    REGISTRATION_ERROR: "REGISTRATION_ERROR",
};
export const DurationUnits = {
    MONTHS: "MONTHS",
};
export const PriceUnits = {
    HOURLY: "HOURLY",
};
export const ResourceType = {
    Mbps_Outbound_Bandwidth: "Mbps_Outbound_Bandwidth",
};
export const ReservationState = {
    ACTIVE: "ACTIVE",
    CANCELED: "CANCELED",
    EXPIRED: "EXPIRED",
    PROCESSING: "PROCESSING",
};
export const NetworkInterfaceType = {
    efa: "efa",
    ena: "ena",
};
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class ForbiddenException extends __BaseException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.Message = opts.Message;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export class AddFlowOutputs420Exception extends __BaseException {
    constructor(opts) {
        super({
            name: "AddFlowOutputs420Exception",
            $fault: "client",
            ...opts,
        });
        this.name = "AddFlowOutputs420Exception";
        this.$fault = "client";
        Object.setPrototypeOf(this, AddFlowOutputs420Exception.prototype);
        this.Message = opts.Message;
    }
}
export const FailoverMode = {
    FAILOVER: "FAILOVER",
    MERGE: "MERGE",
};
export const State = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const BridgePlacement = {
    AVAILABLE: "AVAILABLE",
    LOCKED: "LOCKED",
};
export const ConnectionStatus = {
    CONNECTED: "CONNECTED",
    DISCONNECTED: "DISCONNECTED",
};
export class CreateBridge420Exception extends __BaseException {
    constructor(opts) {
        super({
            name: "CreateBridge420Exception",
            $fault: "client",
            ...opts,
        });
        this.name = "CreateBridge420Exception";
        this.$fault = "client";
        Object.setPrototypeOf(this, CreateBridge420Exception.prototype);
        this.Message = opts.Message;
    }
}
export class CreateFlow420Exception extends __BaseException {
    constructor(opts) {
        super({
            name: "CreateFlow420Exception",
            $fault: "client",
            ...opts,
        });
        this.name = "CreateFlow420Exception";
        this.$fault = "client";
        Object.setPrototypeOf(this, CreateFlow420Exception.prototype);
        this.Message = opts.Message;
    }
}
export class CreateGateway420Exception extends __BaseException {
    constructor(opts) {
        super({
            name: "CreateGateway420Exception",
            $fault: "client",
            ...opts,
        });
        this.name = "CreateGateway420Exception";
        this.$fault = "client";
        Object.setPrototypeOf(this, CreateGateway420Exception.prototype);
        this.Message = opts.Message;
    }
}
export const DesiredState = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    STANDBY: "STANDBY",
};
export class GrantFlowEntitlements420Exception extends __BaseException {
    constructor(opts) {
        super({
            name: "GrantFlowEntitlements420Exception",
            $fault: "client",
            ...opts,
        });
        this.name = "GrantFlowEntitlements420Exception";
        this.$fault = "client";
        Object.setPrototypeOf(this, GrantFlowEntitlements420Exception.prototype);
        this.Message = opts.Message;
    }
}
