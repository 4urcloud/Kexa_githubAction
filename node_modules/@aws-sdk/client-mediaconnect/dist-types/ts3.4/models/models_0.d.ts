import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { MediaConnectServiceException as __BaseException } from "./MediaConnectServiceException";
export declare const Protocol: {
  readonly cdi: "cdi";
  readonly fujitsu_qos: "fujitsu-qos";
  readonly rist: "rist";
  readonly rtp: "rtp";
  readonly rtp_fec: "rtp-fec";
  readonly srt_caller: "srt-caller";
  readonly srt_listener: "srt-listener";
  readonly st2110_jpegxs: "st2110-jpegxs";
  readonly udp: "udp";
  readonly zixi_pull: "zixi-pull";
  readonly zixi_push: "zixi-push";
};
export type Protocol = (typeof Protocol)[keyof typeof Protocol];
export interface AddBridgeNetworkOutputRequest {
  IpAddress: string | undefined;
  Name: string | undefined;
  NetworkName: string | undefined;
  Port: number | undefined;
  Protocol: Protocol | undefined;
  Ttl: number | undefined;
}
export interface AddBridgeOutputRequest {
  NetworkOutput?: AddBridgeNetworkOutputRequest;
}
export interface VpcInterfaceAttachment {
  VpcInterfaceName?: string;
}
export interface AddBridgeFlowSourceRequest {
  FlowArn: string | undefined;
  FlowVpcInterfaceAttachment?: VpcInterfaceAttachment;
  Name: string | undefined;
}
export interface AddBridgeNetworkSourceRequest {
  MulticastIp: string | undefined;
  Name: string | undefined;
  NetworkName: string | undefined;
  Port: number | undefined;
  Protocol: Protocol | undefined;
}
export interface AddBridgeSourceRequest {
  FlowSource?: AddBridgeFlowSourceRequest;
  NetworkSource?: AddBridgeNetworkSourceRequest;
}
export declare const Colorimetry: {
  readonly BT2020: "BT2020";
  readonly BT2100: "BT2100";
  readonly BT601: "BT601";
  readonly BT709: "BT709";
  readonly ST2065_1: "ST2065-1";
  readonly ST2065_3: "ST2065-3";
  readonly XYZ: "XYZ";
};
export type Colorimetry = (typeof Colorimetry)[keyof typeof Colorimetry];
export declare const Range: {
  readonly FULL: "FULL";
  readonly FULLPROTECT: "FULLPROTECT";
  readonly NARROW: "NARROW";
};
export type Range = (typeof Range)[keyof typeof Range];
export declare const ScanMode: {
  readonly interlace: "interlace";
  readonly progressive: "progressive";
  readonly progressive_segmented_frame: "progressive-segmented-frame";
};
export type ScanMode = (typeof ScanMode)[keyof typeof ScanMode];
export declare const Tcs: {
  readonly BT2100LINHLG: "BT2100LINHLG";
  readonly BT2100LINPQ: "BT2100LINPQ";
  readonly DENSITY: "DENSITY";
  readonly HLG: "HLG";
  readonly LINEAR: "LINEAR";
  readonly PQ: "PQ";
  readonly SDR: "SDR";
  readonly ST2065_1: "ST2065-1";
  readonly ST428_1: "ST428-1";
};
export type Tcs = (typeof Tcs)[keyof typeof Tcs];
export interface FmtpRequest {
  ChannelOrder?: string;
  Colorimetry?: Colorimetry;
  ExactFramerate?: string;
  Par?: string;
  Range?: Range;
  ScanMode?: ScanMode;
  Tcs?: Tcs;
}
export interface MediaStreamAttributesRequest {
  Fmtp?: FmtpRequest;
  Lang?: string;
}
export declare const MediaStreamType: {
  readonly ancillary_data: "ancillary-data";
  readonly audio: "audio";
  readonly video: "video";
};
export type MediaStreamType =
  (typeof MediaStreamType)[keyof typeof MediaStreamType];
export interface AddMediaStreamRequest {
  Attributes?: MediaStreamAttributesRequest;
  ClockRate?: number;
  Description?: string;
  MediaStreamId: number | undefined;
  MediaStreamName: string | undefined;
  MediaStreamType: MediaStreamType | undefined;
  VideoFormat?: string;
}
export declare const Algorithm: {
  readonly aes128: "aes128";
  readonly aes192: "aes192";
  readonly aes256: "aes256";
};
export type Algorithm = (typeof Algorithm)[keyof typeof Algorithm];
export declare const KeyType: {
  readonly speke: "speke";
  readonly srt_password: "srt-password";
  readonly static_key: "static-key";
};
export type KeyType = (typeof KeyType)[keyof typeof KeyType];
export interface Encryption {
  Algorithm?: Algorithm;
  ConstantInitializationVector?: string;
  DeviceId?: string;
  KeyType?: KeyType;
  Region?: string;
  ResourceId?: string;
  RoleArn: string | undefined;
  SecretArn?: string;
  Url?: string;
}
export interface InterfaceRequest {
  Name: string | undefined;
}
export interface DestinationConfigurationRequest {
  DestinationIp: string | undefined;
  DestinationPort: number | undefined;
  Interface: InterfaceRequest | undefined;
}
export declare const EncodingName: {
  readonly jxsv: "jxsv";
  readonly pcm: "pcm";
  readonly raw: "raw";
  readonly smpte291: "smpte291";
};
export type EncodingName = (typeof EncodingName)[keyof typeof EncodingName];
export declare const EncoderProfile: {
  readonly high: "high";
  readonly main: "main";
};
export type EncoderProfile =
  (typeof EncoderProfile)[keyof typeof EncoderProfile];
export interface EncodingParametersRequest {
  CompressionFactor: number | undefined;
  EncoderProfile: EncoderProfile | undefined;
}
export interface MediaStreamOutputConfigurationRequest {
  DestinationConfigurations?: DestinationConfigurationRequest[];
  EncodingName: EncodingName | undefined;
  EncodingParameters?: EncodingParametersRequest;
  MediaStreamName: string | undefined;
}
export interface AddOutputRequest {
  CidrAllowList?: string[];
  Description?: string;
  Destination?: string;
  Encryption?: Encryption;
  MaxLatency?: number;
  MediaStreamOutputConfigurations?: MediaStreamOutputConfigurationRequest[];
  MinLatency?: number;
  Name?: string;
  Port?: number;
  Protocol: Protocol | undefined;
  RemoteId?: string;
  SenderControlPort?: number;
  SmoothingLatency?: number;
  StreamId?: string;
  VpcInterfaceAttachment?: VpcInterfaceAttachment;
}
export interface BridgeFlowOutput {
  FlowArn: string | undefined;
  FlowSourceArn: string | undefined;
  Name: string | undefined;
}
export interface BridgeNetworkOutput {
  IpAddress: string | undefined;
  Name: string | undefined;
  NetworkName: string | undefined;
  Port: number | undefined;
  Protocol: Protocol | undefined;
  Ttl: number | undefined;
}
export interface BridgeOutput {
  FlowOutput?: BridgeFlowOutput;
  NetworkOutput?: BridgeNetworkOutput;
}
export interface BridgeFlowSource {
  FlowArn: string | undefined;
  FlowVpcInterfaceAttachment?: VpcInterfaceAttachment;
  Name: string | undefined;
  OutputArn?: string;
}
export interface BridgeNetworkSource {
  MulticastIp: string | undefined;
  Name: string | undefined;
  NetworkName: string | undefined;
  Port: number | undefined;
  Protocol: Protocol | undefined;
}
export interface BridgeSource {
  FlowSource?: BridgeFlowSource;
  NetworkSource?: BridgeNetworkSource;
}
export interface Interface {
  Name: string | undefined;
}
export interface DestinationConfiguration {
  DestinationIp: string | undefined;
  DestinationPort: number | undefined;
  Interface: Interface | undefined;
  OutboundIp: string | undefined;
}
export declare const EntitlementStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type EntitlementStatus =
  (typeof EntitlementStatus)[keyof typeof EntitlementStatus];
export interface Entitlement {
  DataTransferSubscriberFeePercent?: number;
  Description?: string;
  Encryption?: Encryption;
  EntitlementArn: string | undefined;
  EntitlementStatus?: EntitlementStatus;
  Name: string | undefined;
  Subscribers: string[] | undefined;
}
export interface GatewayNetwork {
  CidrBlock: string | undefined;
  Name: string | undefined;
}
export interface GrantEntitlementRequest {
  DataTransferSubscriberFeePercent?: number;
  Description?: string;
  Encryption?: Encryption;
  EntitlementStatus?: EntitlementStatus;
  Name?: string;
  Subscribers: string[] | undefined;
}
export interface InputConfiguration {
  InputIp: string | undefined;
  InputPort: number | undefined;
  Interface: Interface | undefined;
}
export interface InputConfigurationRequest {
  InputPort: number | undefined;
  Interface: InterfaceRequest | undefined;
}
export declare const BridgeState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETED: "DELETED";
  readonly DELETING: "DELETING";
  readonly DEPLOYING: "DEPLOYING";
  readonly STANDBY: "STANDBY";
  readonly STARTING: "STARTING";
  readonly START_FAILED: "START_FAILED";
  readonly START_PENDING: "START_PENDING";
  readonly STOPPING: "STOPPING";
  readonly STOP_FAILED: "STOP_FAILED";
  readonly UPDATING: "UPDATING";
};
export type BridgeState = (typeof BridgeState)[keyof typeof BridgeState];
export interface ListedBridge {
  BridgeArn: string | undefined;
  BridgeState: BridgeState | undefined;
  BridgeType: string | undefined;
  Name: string | undefined;
  PlacementArn: string | undefined;
}
export interface ListedEntitlement {
  DataTransferSubscriberFeePercent?: number;
  EntitlementArn: string | undefined;
  EntitlementName: string | undefined;
}
export declare const MaintenanceDay: {
  readonly Friday: "Friday";
  readonly Monday: "Monday";
  readonly Saturday: "Saturday";
  readonly Sunday: "Sunday";
  readonly Thursday: "Thursday";
  readonly Tuesday: "Tuesday";
  readonly Wednesday: "Wednesday";
};
export type MaintenanceDay =
  (typeof MaintenanceDay)[keyof typeof MaintenanceDay];
export interface Maintenance {
  MaintenanceDay?: MaintenanceDay;
  MaintenanceDeadline?: string;
  MaintenanceScheduledDate?: string;
  MaintenanceStartHour?: string;
}
export declare const SourceType: {
  readonly ENTITLED: "ENTITLED";
  readonly OWNED: "OWNED";
};
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
export declare const Status: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
  readonly STANDBY: "STANDBY";
  readonly STARTING: "STARTING";
  readonly STOPPING: "STOPPING";
  readonly UPDATING: "UPDATING";
};
export type Status = (typeof Status)[keyof typeof Status];
export interface ListedFlow {
  AvailabilityZone: string | undefined;
  Description: string | undefined;
  FlowArn: string | undefined;
  Name: string | undefined;
  SourceType: SourceType | undefined;
  Status: Status | undefined;
  Maintenance?: Maintenance;
}
export declare const GatewayState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETED: "DELETED";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
  readonly UPDATING: "UPDATING";
};
export type GatewayState = (typeof GatewayState)[keyof typeof GatewayState];
export interface ListedGateway {
  GatewayArn: string | undefined;
  GatewayState: GatewayState | undefined;
  Name: string | undefined;
}
export declare const InstanceState: {
  readonly ACTIVE: "ACTIVE";
  readonly DEREGISTERED: "DEREGISTERED";
  readonly DEREGISTERING: "DEREGISTERING";
  readonly DEREGISTRATION_ERROR: "DEREGISTRATION_ERROR";
  readonly REGISTERING: "REGISTERING";
  readonly REGISTRATION_ERROR: "REGISTRATION_ERROR";
};
export type InstanceState = (typeof InstanceState)[keyof typeof InstanceState];
export interface ListedGatewayInstance {
  GatewayArn: string | undefined;
  GatewayInstanceArn: string | undefined;
  InstanceId: string | undefined;
  InstanceState?: InstanceState;
}
export interface Fmtp {
  ChannelOrder?: string;
  Colorimetry?: Colorimetry;
  ExactFramerate?: string;
  Par?: string;
  Range?: Range;
  ScanMode?: ScanMode;
  Tcs?: Tcs;
}
export interface MediaStreamAttributes {
  Fmtp: Fmtp | undefined;
  Lang?: string;
}
export interface MediaStream {
  Attributes?: MediaStreamAttributes;
  ClockRate?: number;
  Description?: string;
  Fmt: number | undefined;
  MediaStreamId: number | undefined;
  MediaStreamName: string | undefined;
  MediaStreamType: MediaStreamType | undefined;
  VideoFormat?: string;
}
export interface EncodingParameters {
  CompressionFactor: number | undefined;
  EncoderProfile: EncoderProfile | undefined;
}
export interface MediaStreamOutputConfiguration {
  DestinationConfigurations?: DestinationConfiguration[];
  EncodingName: EncodingName | undefined;
  EncodingParameters?: EncodingParameters;
  MediaStreamName: string | undefined;
}
export interface MediaStreamSourceConfiguration {
  EncodingName: EncodingName | undefined;
  InputConfigurations?: InputConfiguration[];
  MediaStreamName: string | undefined;
}
export interface MediaStreamSourceConfigurationRequest {
  EncodingName: EncodingName | undefined;
  InputConfigurations?: InputConfigurationRequest[];
  MediaStreamName: string | undefined;
}
export interface MessageDetail {
  Code: string | undefined;
  Message: string | undefined;
  ResourceName?: string;
}
export declare const DurationUnits: {
  readonly MONTHS: "MONTHS";
};
export type DurationUnits = (typeof DurationUnits)[keyof typeof DurationUnits];
export declare const PriceUnits: {
  readonly HOURLY: "HOURLY";
};
export type PriceUnits = (typeof PriceUnits)[keyof typeof PriceUnits];
export declare const ResourceType: {
  readonly Mbps_Outbound_Bandwidth: "Mbps_Outbound_Bandwidth";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export interface ResourceSpecification {
  ReservedBitrate?: number;
  ResourceType: ResourceType | undefined;
}
export interface Offering {
  CurrencyCode: string | undefined;
  Duration: number | undefined;
  DurationUnits: DurationUnits | undefined;
  OfferingArn: string | undefined;
  OfferingDescription: string | undefined;
  PricePerUnit: string | undefined;
  PriceUnits: PriceUnits | undefined;
  ResourceSpecification: ResourceSpecification | undefined;
}
export interface Transport {
  CidrAllowList?: string[];
  MaxBitrate?: number;
  MaxLatency?: number;
  MaxSyncBuffer?: number;
  MinLatency?: number;
  Protocol: Protocol | undefined;
  RemoteId?: string;
  SenderControlPort?: number;
  SenderIpAddress?: string;
  SmoothingLatency?: number;
  SourceListenerAddress?: string;
  SourceListenerPort?: number;
  StreamId?: string;
}
export interface Output {
  DataTransferSubscriberFeePercent?: number;
  Description?: string;
  Destination?: string;
  Encryption?: Encryption;
  EntitlementArn?: string;
  ListenerAddress?: string;
  MediaLiveInputArn?: string;
  MediaStreamOutputConfigurations?: MediaStreamOutputConfiguration[];
  Name: string | undefined;
  OutputArn: string | undefined;
  Port?: number;
  Transport?: Transport;
  VpcInterfaceAttachment?: VpcInterfaceAttachment;
  BridgeArn?: string;
  BridgePorts?: number[];
}
export declare const ReservationState: {
  readonly ACTIVE: "ACTIVE";
  readonly CANCELED: "CANCELED";
  readonly EXPIRED: "EXPIRED";
  readonly PROCESSING: "PROCESSING";
};
export type ReservationState =
  (typeof ReservationState)[keyof typeof ReservationState];
export interface Reservation {
  CurrencyCode: string | undefined;
  Duration: number | undefined;
  DurationUnits: DurationUnits | undefined;
  End: string | undefined;
  OfferingArn: string | undefined;
  OfferingDescription: string | undefined;
  PricePerUnit: string | undefined;
  PriceUnits: PriceUnits | undefined;
  ReservationArn: string | undefined;
  ReservationName: string | undefined;
  ReservationState: ReservationState | undefined;
  ResourceSpecification: ResourceSpecification | undefined;
  Start: string | undefined;
}
export interface SetGatewayBridgeSourceRequest {
  BridgeArn: string | undefined;
  VpcInterfaceAttachment?: VpcInterfaceAttachment;
}
export interface SetSourceRequest {
  Decryption?: Encryption;
  Description?: string;
  EntitlementArn?: string;
  IngestPort?: number;
  MaxBitrate?: number;
  MaxLatency?: number;
  MaxSyncBuffer?: number;
  MediaStreamSourceConfigurations?: MediaStreamSourceConfigurationRequest[];
  MinLatency?: number;
  Name?: string;
  Protocol?: Protocol;
  SenderControlPort?: number;
  SenderIpAddress?: string;
  SourceListenerAddress?: string;
  SourceListenerPort?: number;
  StreamId?: string;
  VpcInterfaceName?: string;
  WhitelistCidr?: string;
  GatewayBridgeSource?: SetGatewayBridgeSourceRequest;
}
export interface GatewayBridgeSource {
  BridgeArn: string | undefined;
  VpcInterfaceAttachment?: VpcInterfaceAttachment;
}
export interface Source {
  DataTransferSubscriberFeePercent?: number;
  Decryption?: Encryption;
  Description?: string;
  EntitlementArn?: string;
  IngestIp?: string;
  IngestPort?: number;
  MediaStreamSourceConfigurations?: MediaStreamSourceConfiguration[];
  Name: string | undefined;
  SenderControlPort?: number;
  SenderIpAddress?: string;
  SourceArn: string | undefined;
  Transport?: Transport;
  VpcInterfaceName?: string;
  WhitelistCidr?: string;
  GatewayBridgeSource?: GatewayBridgeSource;
}
export interface FrameResolution {
  FrameHeight: number | undefined;
  FrameWidth: number | undefined;
}
export interface TransportStream {
  Channels?: number;
  Codec?: string;
  FrameRate?: string;
  FrameResolution?: FrameResolution;
  Pid: number | undefined;
  SampleRate?: number;
  SampleSize?: number;
  StreamType: string | undefined;
}
export interface TransportStreamProgram {
  PcrPid: number | undefined;
  ProgramName?: string;
  ProgramNumber: number | undefined;
  ProgramPid: number | undefined;
  Streams: TransportStream[] | undefined;
}
export declare const NetworkInterfaceType: {
  readonly efa: "efa";
  readonly ena: "ena";
};
export type NetworkInterfaceType =
  (typeof NetworkInterfaceType)[keyof typeof NetworkInterfaceType];
export interface VpcInterface {
  Name: string | undefined;
  NetworkInterfaceIds: string[] | undefined;
  NetworkInterfaceType: NetworkInterfaceType | undefined;
  RoleArn: string | undefined;
  SecurityGroupIds: string[] | undefined;
  SubnetId: string | undefined;
}
export interface VpcInterfaceRequest {
  Name: string | undefined;
  NetworkInterfaceType?: NetworkInterfaceType;
  RoleArn: string | undefined;
  SecurityGroupIds: string[] | undefined;
  SubnetId: string | undefined;
}
export interface AddBridgeOutputsRequest {
  BridgeArn: string | undefined;
  Outputs: AddBridgeOutputRequest[] | undefined;
}
export interface AddBridgeOutputsResponse {
  BridgeArn?: string;
  Outputs?: BridgeOutput[];
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export interface AddBridgeSourcesRequest {
  BridgeArn: string | undefined;
  Sources: AddBridgeSourceRequest[] | undefined;
}
export interface AddBridgeSourcesResponse {
  BridgeArn?: string;
  Sources?: BridgeSource[];
}
export interface AddEgressGatewayBridgeRequest {
  MaxBitrate: number | undefined;
}
export interface AddFlowMediaStreamsRequest {
  FlowArn: string | undefined;
  MediaStreams: AddMediaStreamRequest[] | undefined;
}
export interface AddFlowMediaStreamsResponse {
  FlowArn?: string;
  MediaStreams?: MediaStream[];
}
export declare class AddFlowOutputs420Exception extends __BaseException {
  readonly name: "AddFlowOutputs420Exception";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AddFlowOutputs420Exception, __BaseException>
  );
}
export interface AddFlowOutputsRequest {
  FlowArn: string | undefined;
  Outputs: AddOutputRequest[] | undefined;
}
export interface AddFlowOutputsResponse {
  FlowArn?: string;
  Outputs?: Output[];
}
export interface AddFlowSourcesRequest {
  FlowArn: string | undefined;
  Sources: SetSourceRequest[] | undefined;
}
export interface AddFlowSourcesResponse {
  FlowArn?: string;
  Sources?: Source[];
}
export interface AddFlowVpcInterfacesRequest {
  FlowArn: string | undefined;
  VpcInterfaces: VpcInterfaceRequest[] | undefined;
}
export interface AddFlowVpcInterfacesResponse {
  FlowArn?: string;
  VpcInterfaces?: VpcInterface[];
}
export interface AddIngressGatewayBridgeRequest {
  MaxBitrate: number | undefined;
  MaxOutputs: number | undefined;
}
export interface AddMaintenance {
  MaintenanceDay: MaintenanceDay | undefined;
  MaintenanceStartHour: string | undefined;
}
export interface EgressGatewayBridge {
  InstanceId?: string;
  MaxBitrate: number | undefined;
}
export interface IngressGatewayBridge {
  InstanceId?: string;
  MaxBitrate: number | undefined;
  MaxOutputs: number | undefined;
}
export declare const FailoverMode: {
  readonly FAILOVER: "FAILOVER";
  readonly MERGE: "MERGE";
};
export type FailoverMode = (typeof FailoverMode)[keyof typeof FailoverMode];
export interface SourcePriority {
  PrimarySource?: string;
}
export declare const State: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type State = (typeof State)[keyof typeof State];
export interface FailoverConfig {
  FailoverMode?: FailoverMode;
  RecoveryWindow?: number;
  SourcePriority?: SourcePriority;
  State?: State;
}
export interface Bridge {
  BridgeArn: string | undefined;
  BridgeMessages?: MessageDetail[];
  BridgeState: BridgeState | undefined;
  EgressGatewayBridge?: EgressGatewayBridge;
  IngressGatewayBridge?: IngressGatewayBridge;
  Name: string | undefined;
  Outputs?: BridgeOutput[];
  PlacementArn: string | undefined;
  SourceFailoverConfig?: FailoverConfig;
  Sources?: BridgeSource[];
}
export declare const BridgePlacement: {
  readonly AVAILABLE: "AVAILABLE";
  readonly LOCKED: "LOCKED";
};
export type BridgePlacement =
  (typeof BridgePlacement)[keyof typeof BridgePlacement];
export declare const ConnectionStatus: {
  readonly CONNECTED: "CONNECTED";
  readonly DISCONNECTED: "DISCONNECTED";
};
export type ConnectionStatus =
  (typeof ConnectionStatus)[keyof typeof ConnectionStatus];
export declare class CreateBridge420Exception extends __BaseException {
  readonly name: "CreateBridge420Exception";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<CreateBridge420Exception, __BaseException>
  );
}
export interface CreateBridgeRequest {
  EgressGatewayBridge?: AddEgressGatewayBridgeRequest;
  IngressGatewayBridge?: AddIngressGatewayBridgeRequest;
  Name: string | undefined;
  Outputs?: AddBridgeOutputRequest[];
  PlacementArn: string | undefined;
  SourceFailoverConfig?: FailoverConfig;
  Sources: AddBridgeSourceRequest[] | undefined;
}
export interface CreateBridgeResponse {
  Bridge?: Bridge;
}
export declare class CreateFlow420Exception extends __BaseException {
  readonly name: "CreateFlow420Exception";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<CreateFlow420Exception, __BaseException>
  );
}
export interface CreateFlowRequest {
  AvailabilityZone?: string;
  Entitlements?: GrantEntitlementRequest[];
  MediaStreams?: AddMediaStreamRequest[];
  Name: string | undefined;
  Outputs?: AddOutputRequest[];
  Source?: SetSourceRequest;
  SourceFailoverConfig?: FailoverConfig;
  Sources?: SetSourceRequest[];
  VpcInterfaces?: VpcInterfaceRequest[];
  Maintenance?: AddMaintenance;
}
export interface Flow {
  AvailabilityZone: string | undefined;
  Description?: string;
  EgressIp?: string;
  Entitlements: Entitlement[] | undefined;
  FlowArn: string | undefined;
  MediaStreams?: MediaStream[];
  Name: string | undefined;
  Outputs: Output[] | undefined;
  Source: Source | undefined;
  SourceFailoverConfig?: FailoverConfig;
  Sources?: Source[];
  Status: Status | undefined;
  VpcInterfaces?: VpcInterface[];
  Maintenance?: Maintenance;
}
export interface CreateFlowResponse {
  Flow?: Flow;
}
export declare class CreateGateway420Exception extends __BaseException {
  readonly name: "CreateGateway420Exception";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<CreateGateway420Exception, __BaseException>
  );
}
export interface CreateGatewayRequest {
  EgressCidrBlocks: string[] | undefined;
  Name: string | undefined;
  Networks: GatewayNetwork[] | undefined;
}
export interface Gateway {
  EgressCidrBlocks: string[] | undefined;
  GatewayArn: string | undefined;
  GatewayMessages?: MessageDetail[];
  GatewayState?: GatewayState;
  Name: string | undefined;
  Networks: GatewayNetwork[] | undefined;
}
export interface CreateGatewayResponse {
  Gateway?: Gateway;
}
export interface DeleteBridgeRequest {
  BridgeArn: string | undefined;
}
export interface DeleteBridgeResponse {
  BridgeArn?: string;
}
export interface DeleteFlowRequest {
  FlowArn: string | undefined;
}
export interface DeleteFlowResponse {
  FlowArn?: string;
  Status?: Status;
}
export interface DeleteGatewayRequest {
  GatewayArn: string | undefined;
}
export interface DeleteGatewayResponse {
  GatewayArn?: string;
}
export interface DeregisterGatewayInstanceRequest {
  Force?: boolean;
  GatewayInstanceArn: string | undefined;
}
export interface DeregisterGatewayInstanceResponse {
  GatewayInstanceArn?: string;
  InstanceState?: InstanceState;
}
export interface DescribeBridgeRequest {
  BridgeArn: string | undefined;
}
export interface DescribeBridgeResponse {
  Bridge?: Bridge;
}
export interface DescribeFlowRequest {
  FlowArn: string | undefined;
}
export interface Messages {
  Errors: string[] | undefined;
}
export interface DescribeFlowResponse {
  Flow?: Flow;
  Messages?: Messages;
}
export interface DescribeFlowSourceMetadataRequest {
  FlowArn: string | undefined;
}
export interface TransportMediaInfo {
  Programs: TransportStreamProgram[] | undefined;
}
export interface DescribeFlowSourceMetadataResponse {
  FlowArn?: string;
  Messages?: MessageDetail[];
  Timestamp?: Date;
  TransportMediaInfo?: TransportMediaInfo;
}
export interface DescribeGatewayRequest {
  GatewayArn: string | undefined;
}
export interface DescribeGatewayResponse {
  Gateway?: Gateway;
}
export interface DescribeGatewayInstanceRequest {
  GatewayInstanceArn: string | undefined;
}
export interface GatewayInstance {
  BridgePlacement: BridgePlacement | undefined;
  ConnectionStatus: ConnectionStatus | undefined;
  GatewayArn: string | undefined;
  GatewayInstanceArn: string | undefined;
  InstanceId: string | undefined;
  InstanceMessages?: MessageDetail[];
  InstanceState: InstanceState | undefined;
  RunningBridgeCount: number | undefined;
}
export interface DescribeGatewayInstanceResponse {
  GatewayInstance?: GatewayInstance;
}
export interface DescribeOfferingRequest {
  OfferingArn: string | undefined;
}
export interface DescribeOfferingResponse {
  Offering?: Offering;
}
export interface DescribeReservationRequest {
  ReservationArn: string | undefined;
}
export interface DescribeReservationResponse {
  Reservation?: Reservation;
}
export declare const DesiredState: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETED: "DELETED";
  readonly STANDBY: "STANDBY";
};
export type DesiredState = (typeof DesiredState)[keyof typeof DesiredState];
export declare class GrantFlowEntitlements420Exception extends __BaseException {
  readonly name: "GrantFlowEntitlements420Exception";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<
      GrantFlowEntitlements420Exception,
      __BaseException
    >
  );
}
export interface GrantFlowEntitlementsRequest {
  Entitlements: GrantEntitlementRequest[] | undefined;
  FlowArn: string | undefined;
}
export interface GrantFlowEntitlementsResponse {
  Entitlements?: Entitlement[];
  FlowArn?: string;
}
export interface ListBridgesRequest {
  FilterArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListBridgesResponse {
  Bridges?: ListedBridge[];
  NextToken?: string;
}
export interface ListEntitlementsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListEntitlementsResponse {
  Entitlements?: ListedEntitlement[];
  NextToken?: string;
}
export interface ListFlowsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListFlowsResponse {
  Flows?: ListedFlow[];
  NextToken?: string;
}
export interface ListGatewayInstancesRequest {
  FilterArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListGatewayInstancesResponse {
  Instances?: ListedGatewayInstance[];
  NextToken?: string;
}
export interface ListGatewaysRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListGatewaysResponse {
  Gateways?: ListedGateway[];
  NextToken?: string;
}
export interface ListOfferingsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListOfferingsResponse {
  NextToken?: string;
  Offerings?: Offering[];
}
export interface ListReservationsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListReservationsResponse {
  NextToken?: string;
  Reservations?: Reservation[];
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface PurchaseOfferingRequest {
  OfferingArn: string | undefined;
  ReservationName: string | undefined;
  Start: string | undefined;
}
export interface PurchaseOfferingResponse {
  Reservation?: Reservation;
}
export interface RemoveBridgeOutputRequest {
  BridgeArn: string | undefined;
  OutputName: string | undefined;
}
export interface RemoveBridgeOutputResponse {
  BridgeArn?: string;
  OutputName?: string;
}
export interface RemoveBridgeSourceRequest {
  BridgeArn: string | undefined;
  SourceName: string | undefined;
}
export interface RemoveBridgeSourceResponse {
  BridgeArn?: string;
  SourceName?: string;
}
export interface RemoveFlowMediaStreamRequest {
  FlowArn: string | undefined;
  MediaStreamName: string | undefined;
}
export interface RemoveFlowMediaStreamResponse {
  FlowArn?: string;
  MediaStreamName?: string;
}
export interface RemoveFlowOutputRequest {
  FlowArn: string | undefined;
  OutputArn: string | undefined;
}
export interface RemoveFlowOutputResponse {
  FlowArn?: string;
  OutputArn?: string;
}
export interface RemoveFlowSourceRequest {
  FlowArn: string | undefined;
  SourceArn: string | undefined;
}
export interface RemoveFlowSourceResponse {
  FlowArn?: string;
  SourceArn?: string;
}
export interface RemoveFlowVpcInterfaceRequest {
  FlowArn: string | undefined;
  VpcInterfaceName: string | undefined;
}
export interface RemoveFlowVpcInterfaceResponse {
  FlowArn?: string;
  NonDeletedNetworkInterfaceIds?: string[];
  VpcInterfaceName?: string;
}
export interface RevokeFlowEntitlementRequest {
  EntitlementArn: string | undefined;
  FlowArn: string | undefined;
}
export interface RevokeFlowEntitlementResponse {
  EntitlementArn?: string;
  FlowArn?: string;
}
export interface StartFlowRequest {
  FlowArn: string | undefined;
}
export interface StartFlowResponse {
  FlowArn?: string;
  Status?: Status;
}
export interface StopFlowRequest {
  FlowArn: string | undefined;
}
export interface StopFlowResponse {
  FlowArn?: string;
  Status?: Status;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UpdateEgressGatewayBridgeRequest {
  MaxBitrate?: number;
}
export interface UpdateIngressGatewayBridgeRequest {
  MaxBitrate?: number;
  MaxOutputs?: number;
}
export interface UpdateFailoverConfig {
  FailoverMode?: FailoverMode;
  RecoveryWindow?: number;
  SourcePriority?: SourcePriority;
  State?: State;
}
export interface UpdateBridgeRequest {
  BridgeArn: string | undefined;
  EgressGatewayBridge?: UpdateEgressGatewayBridgeRequest;
  IngressGatewayBridge?: UpdateIngressGatewayBridgeRequest;
  SourceFailoverConfig?: UpdateFailoverConfig;
}
export interface UpdateBridgeResponse {
  Bridge?: Bridge;
}
export interface UpdateBridgeNetworkOutputRequest {
  IpAddress?: string;
  NetworkName?: string;
  Port?: number;
  Protocol?: Protocol;
  Ttl?: number;
}
export interface UpdateBridgeOutputRequest {
  BridgeArn: string | undefined;
  NetworkOutput?: UpdateBridgeNetworkOutputRequest;
  OutputName: string | undefined;
}
export interface UpdateBridgeOutputResponse {
  BridgeArn?: string;
  Output?: BridgeOutput;
}
export interface UpdateBridgeFlowSourceRequest {
  FlowArn?: string;
  FlowVpcInterfaceAttachment?: VpcInterfaceAttachment;
}
export interface UpdateBridgeNetworkSourceRequest {
  MulticastIp?: string;
  NetworkName?: string;
  Port?: number;
  Protocol?: Protocol;
}
export interface UpdateBridgeSourceRequest {
  BridgeArn: string | undefined;
  FlowSource?: UpdateBridgeFlowSourceRequest;
  NetworkSource?: UpdateBridgeNetworkSourceRequest;
  SourceName: string | undefined;
}
export interface UpdateBridgeSourceResponse {
  BridgeArn?: string;
  Source?: BridgeSource;
}
export interface UpdateBridgeStateRequest {
  BridgeArn: string | undefined;
  DesiredState: DesiredState | undefined;
}
export interface UpdateBridgeStateResponse {
  BridgeArn?: string;
  DesiredState?: DesiredState;
}
export interface UpdateMaintenance {
  MaintenanceDay?: MaintenanceDay;
  MaintenanceScheduledDate?: string;
  MaintenanceStartHour?: string;
}
export interface UpdateFlowRequest {
  FlowArn: string | undefined;
  SourceFailoverConfig?: UpdateFailoverConfig;
  Maintenance?: UpdateMaintenance;
}
export interface UpdateFlowResponse {
  Flow?: Flow;
}
export interface UpdateEncryption {
  Algorithm?: Algorithm;
  ConstantInitializationVector?: string;
  DeviceId?: string;
  KeyType?: KeyType;
  Region?: string;
  ResourceId?: string;
  RoleArn?: string;
  SecretArn?: string;
  Url?: string;
}
export interface UpdateFlowEntitlementRequest {
  Description?: string;
  Encryption?: UpdateEncryption;
  EntitlementArn: string | undefined;
  EntitlementStatus?: EntitlementStatus;
  FlowArn: string | undefined;
  Subscribers?: string[];
}
export interface UpdateFlowEntitlementResponse {
  Entitlement?: Entitlement;
  FlowArn?: string;
}
export interface UpdateFlowMediaStreamRequest {
  Attributes?: MediaStreamAttributesRequest;
  ClockRate?: number;
  Description?: string;
  FlowArn: string | undefined;
  MediaStreamName: string | undefined;
  MediaStreamType?: MediaStreamType;
  VideoFormat?: string;
}
export interface UpdateFlowMediaStreamResponse {
  FlowArn?: string;
  MediaStream?: MediaStream;
}
export interface UpdateFlowOutputRequest {
  CidrAllowList?: string[];
  Description?: string;
  Destination?: string;
  Encryption?: UpdateEncryption;
  FlowArn: string | undefined;
  MaxLatency?: number;
  MediaStreamOutputConfigurations?: MediaStreamOutputConfigurationRequest[];
  MinLatency?: number;
  OutputArn: string | undefined;
  Port?: number;
  Protocol?: Protocol;
  RemoteId?: string;
  SenderControlPort?: number;
  SenderIpAddress?: string;
  SmoothingLatency?: number;
  StreamId?: string;
  VpcInterfaceAttachment?: VpcInterfaceAttachment;
}
export interface UpdateFlowOutputResponse {
  FlowArn?: string;
  Output?: Output;
}
export interface UpdateGatewayBridgeSourceRequest {
  BridgeArn?: string;
  VpcInterfaceAttachment?: VpcInterfaceAttachment;
}
export interface UpdateFlowSourceRequest {
  Decryption?: UpdateEncryption;
  Description?: string;
  EntitlementArn?: string;
  FlowArn: string | undefined;
  IngestPort?: number;
  MaxBitrate?: number;
  MaxLatency?: number;
  MaxSyncBuffer?: number;
  MediaStreamSourceConfigurations?: MediaStreamSourceConfigurationRequest[];
  MinLatency?: number;
  Protocol?: Protocol;
  SenderControlPort?: number;
  SenderIpAddress?: string;
  SourceArn: string | undefined;
  SourceListenerAddress?: string;
  SourceListenerPort?: number;
  StreamId?: string;
  VpcInterfaceName?: string;
  WhitelistCidr?: string;
  GatewayBridgeSource?: UpdateGatewayBridgeSourceRequest;
}
export interface UpdateFlowSourceResponse {
  FlowArn?: string;
  Source?: Source;
}
export interface UpdateGatewayInstanceRequest {
  BridgePlacement?: BridgePlacement;
  GatewayInstanceArn: string | undefined;
}
export interface UpdateGatewayInstanceResponse {
  BridgePlacement?: BridgePlacement;
  GatewayInstanceArn?: string;
}
