import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { MediaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../MediaConnectClient";
import { ListBridgesRequest, ListBridgesResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link ListBridgesCommand}.
 */
export interface ListBridgesCommandInput extends ListBridgesRequest {
}
/**
 * @public
 *
 * The output of {@link ListBridgesCommand}.
 */
export interface ListBridgesCommandOutput extends ListBridgesResponse, __MetadataBearer {
}
declare const ListBridgesCommand_base: {
    new (input: ListBridgesCommandInput): import("@smithy/smithy-client").CommandImpl<ListBridgesCommandInput, ListBridgesCommandOutput, MediaConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * @public
 * Displays a list of bridges that are associated with this account and an optionally specified Arn. This request returns a paginated result.
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { MediaConnectClient, ListBridgesCommand } from "@aws-sdk/client-mediaconnect"; // ES Modules import
 * // const { MediaConnectClient, ListBridgesCommand } = require("@aws-sdk/client-mediaconnect"); // CommonJS import
 * const client = new MediaConnectClient(config);
 * const input = { // ListBridgesRequest
 *   FilterArn: "STRING_VALUE",
 *   MaxResults: Number("int"),
 *   NextToken: "STRING_VALUE",
 * };
 * const command = new ListBridgesCommand(input);
 * const response = await client.send(command);
 * // { // ListBridgesResponse
 * //   Bridges: [ // __listOfListedBridge
 * //     { // ListedBridge
 * //       BridgeArn: "STRING_VALUE", // required
 * //       BridgeState: "CREATING" || "STANDBY" || "STARTING" || "DEPLOYING" || "ACTIVE" || "STOPPING" || "DELETING" || "DELETED" || "START_FAILED" || "START_PENDING" || "STOP_FAILED" || "UPDATING", // required
 * //       BridgeType: "STRING_VALUE", // required
 * //       Name: "STRING_VALUE", // required
 * //       PlacementArn: "STRING_VALUE", // required
 * //     },
 * //   ],
 * //   NextToken: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param ListBridgesCommandInput - {@link ListBridgesCommandInput}
 * @returns {@link ListBridgesCommandOutput}
 * @see {@link ListBridgesCommandInput} for command's `input` shape.
 * @see {@link ListBridgesCommandOutput} for command's `response` shape.
 * @see {@link MediaConnectClientResolvedConfig | config} for MediaConnectClient's `config` shape.
 *
 * @throws {@link BadRequestException} (client fault)
 *  Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
 *
 * @throws {@link ConflictException} (client fault)
 *  Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
 *
 * @throws {@link InternalServerErrorException} (server fault)
 *  Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
 *
 * @throws {@link ServiceUnavailableException} (server fault)
 *  Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
 *
 * @throws {@link TooManyRequestsException} (client fault)
 *  Exception raised by AWS Elemental MediaConnect. See the error message and documentation for the operation for more information on the cause of this exception.
 *
 * @throws {@link MediaConnectServiceException}
 * <p>Base exception class for all service exceptions from MediaConnect service.</p>
 *
 */
export declare class ListBridgesCommand extends ListBridgesCommand_base {
}
