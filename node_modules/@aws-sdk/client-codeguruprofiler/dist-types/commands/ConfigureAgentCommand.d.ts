import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CodeGuruProfilerClient";
import { ConfigureAgentRequest, ConfigureAgentResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link ConfigureAgentCommand}.
 */
export interface ConfigureAgentCommandInput extends ConfigureAgentRequest {
}
/**
 * @public
 *
 * The output of {@link ConfigureAgentCommand}.
 */
export interface ConfigureAgentCommandOutput extends ConfigureAgentResponse, __MetadataBearer {
}
declare const ConfigureAgentCommand_base: {
    new (input: ConfigureAgentCommandInput): import("@smithy/smithy-client").CommandImpl<ConfigureAgentCommandInput, ConfigureAgentCommandOutput, CodeGuruProfilerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * @public
 * <p>
 *           Used by profiler agents to report their current state and to receive remote
 *           configuration updates. For example, <code>ConfigureAgent</code> can be used
 *          to tell an agent whether to profile or not and for how long to return profiling data.
 *       </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CodeGuruProfilerClient, ConfigureAgentCommand } from "@aws-sdk/client-codeguruprofiler"; // ES Modules import
 * // const { CodeGuruProfilerClient, ConfigureAgentCommand } = require("@aws-sdk/client-codeguruprofiler"); // CommonJS import
 * const client = new CodeGuruProfilerClient(config);
 * const input = { // ConfigureAgentRequest
 *   profilingGroupName: "STRING_VALUE", // required
 *   fleetInstanceId: "STRING_VALUE",
 *   metadata: { // Metadata
 *     "<keys>": "STRING_VALUE",
 *   },
 * };
 * const command = new ConfigureAgentCommand(input);
 * const response = await client.send(command);
 * // { // ConfigureAgentResponse
 * //   configuration: { // AgentConfiguration
 * //     shouldProfile: true || false, // required
 * //     periodInSeconds: Number("int"), // required
 * //     agentParameters: { // AgentParameters
 * //       "<keys>": "STRING_VALUE",
 * //     },
 * //   },
 * // };
 *
 * ```
 *
 * @param ConfigureAgentCommandInput - {@link ConfigureAgentCommandInput}
 * @returns {@link ConfigureAgentCommandOutput}
 * @see {@link ConfigureAgentCommandInput} for command's `input` shape.
 * @see {@link ConfigureAgentCommandOutput} for command's `response` shape.
 * @see {@link CodeGuruProfilerClientResolvedConfig | config} for CodeGuruProfilerClient's `config` shape.
 *
 * @throws {@link InternalServerException} (server fault)
 *  <p>The server encountered an internal error and is unable to complete the request.</p>
 *
 * @throws {@link ResourceNotFoundException} (client fault)
 *  <p>The resource specified in the request does not exist.</p>
 *
 * @throws {@link ThrottlingException} (client fault)
 *  <p>The request was denied due to request throttling.</p>
 *
 * @throws {@link ValidationException} (client fault)
 *  <p>The parameter is not valid.</p>
 *
 * @throws {@link CodeGuruProfilerServiceException}
 * <p>Base exception class for all service exceptions from CodeGuruProfiler service.</p>
 *
 */
export declare class ConfigureAgentCommand extends ConfigureAgentCommand_base {
}
