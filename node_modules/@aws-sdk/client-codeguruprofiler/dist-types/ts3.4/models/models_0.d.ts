import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { CodeGuruProfilerServiceException as __BaseException } from "./CodeGuruProfilerServiceException";
export declare const ActionGroup: {
  readonly AGENT_PERMISSIONS: "agentPermissions";
};
export type ActionGroup = (typeof ActionGroup)[keyof typeof ActionGroup];
export declare const EventPublisher: {
  readonly ANOMALY_DETECTION: "AnomalyDetection";
};
export type EventPublisher =
  (typeof EventPublisher)[keyof typeof EventPublisher];
export interface Channel {
  id?: string;
  uri: string | undefined;
  eventPublishers: EventPublisher[] | undefined;
}
export interface AddNotificationChannelsRequest {
  profilingGroupName: string | undefined;
  channels: Channel[] | undefined;
}
export interface NotificationConfiguration {
  channels?: Channel[];
}
export interface AddNotificationChannelsResponse {
  notificationConfiguration?: NotificationConfiguration;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  $retryable: {};
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  $retryable: {};
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  $retryable: {};
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const AgentParameterField: {
  readonly MAX_STACK_DEPTH: "MaxStackDepth";
  readonly MEMORY_USAGE_LIMIT_PERCENT: "MemoryUsageLimitPercent";
  readonly MINIMUM_TIME_FOR_REPORTING_IN_MILLISECONDS: "MinimumTimeForReportingInMilliseconds";
  readonly REPORTING_INTERVAL_IN_MILLISECONDS: "ReportingIntervalInMilliseconds";
  readonly SAMPLING_INTERVAL_IN_MILLISECONDS: "SamplingIntervalInMilliseconds";
};
export type AgentParameterField =
  (typeof AgentParameterField)[keyof typeof AgentParameterField];
export interface AgentConfiguration {
  shouldProfile: boolean | undefined;
  periodInSeconds: number | undefined;
  agentParameters?: Partial<Record<AgentParameterField, string>>;
}
export interface AgentOrchestrationConfig {
  profilingEnabled: boolean | undefined;
}
export declare const AggregationPeriod: {
  readonly P1D: "P1D";
  readonly PT1H: "PT1H";
  readonly PT5M: "PT5M";
};
export type AggregationPeriod =
  (typeof AggregationPeriod)[keyof typeof AggregationPeriod];
export interface AggregatedProfileTime {
  start?: Date;
  period?: AggregationPeriod;
}
export declare const FeedbackType: {
  readonly Negative: "Negative";
  readonly Positive: "Positive";
};
export type FeedbackType = (typeof FeedbackType)[keyof typeof FeedbackType];
export interface UserFeedback {
  type: FeedbackType | undefined;
}
export interface AnomalyInstance {
  id: string | undefined;
  startTime: Date | undefined;
  endTime?: Date;
  userFeedback?: UserFeedback;
}
export declare const MetricType: {
  readonly AggregatedRelativeTotalTime: "AggregatedRelativeTotalTime";
};
export type MetricType = (typeof MetricType)[keyof typeof MetricType];
export interface Metric {
  frameName: string | undefined;
  type: MetricType | undefined;
  threadStates: string[] | undefined;
}
export interface Anomaly {
  metric: Metric | undefined;
  reason: string | undefined;
  instances: AnomalyInstance[] | undefined;
}
export interface FrameMetric {
  frameName: string | undefined;
  type: MetricType | undefined;
  threadStates: string[] | undefined;
}
export interface BatchGetFrameMetricDataRequest {
  profilingGroupName: string | undefined;
  startTime?: Date;
  endTime?: Date;
  period?: string;
  targetResolution?: AggregationPeriod;
  frameMetrics?: FrameMetric[];
}
export interface TimestampStructure {
  value: Date | undefined;
}
export interface FrameMetricDatum {
  frameMetric: FrameMetric | undefined;
  values: number[] | undefined;
}
export interface BatchGetFrameMetricDataResponse {
  startTime: Date | undefined;
  endTime: Date | undefined;
  resolution: AggregationPeriod | undefined;
  endTimes: TimestampStructure[] | undefined;
  unprocessedEndTimes: Record<string, TimestampStructure[]> | undefined;
  frameMetricData: FrameMetricDatum[] | undefined;
}
export interface GetFindingsReportAccountSummaryRequest {
  nextToken?: string;
  maxResults?: number;
  dailyReportsOnly?: boolean;
}
export interface FindingsReportSummary {
  id?: string;
  profilingGroupName?: string;
  profileStartTime?: Date;
  profileEndTime?: Date;
  totalNumberOfFindings?: number;
}
export interface GetFindingsReportAccountSummaryResponse {
  reportSummaries: FindingsReportSummary[] | undefined;
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export declare const MetadataField: {
  readonly AGENT_ID: "AgentId";
  readonly AWS_REQUEST_ID: "AwsRequestId";
  readonly COMPUTE_PLATFORM: "ComputePlatform";
  readonly EXECUTION_ENVIRONMENT: "ExecutionEnvironment";
  readonly LAMBDA_FUNCTION_ARN: "LambdaFunctionArn";
  readonly LAMBDA_MEMORY_LIMIT_IN_MB: "LambdaMemoryLimitInMB";
  readonly LAMBDA_PREVIOUS_EXECUTION_TIME_IN_MILLISECONDS: "LambdaPreviousExecutionTimeInMilliseconds";
  readonly LAMBDA_REMAINING_TIME_IN_MILLISECONDS: "LambdaRemainingTimeInMilliseconds";
  readonly LAMBDA_TIME_GAP_BETWEEN_INVOKES_IN_MILLISECONDS: "LambdaTimeGapBetweenInvokesInMilliseconds";
};
export type MetadataField = (typeof MetadataField)[keyof typeof MetadataField];
export interface ConfigureAgentRequest {
  profilingGroupName: string | undefined;
  fleetInstanceId?: string;
  metadata?: Partial<Record<MetadataField, string>>;
}
export interface ConfigureAgentResponse {
  configuration: AgentConfiguration | undefined;
}
export declare const ComputePlatform: {
  readonly AWSLAMBDA: "AWSLambda";
  readonly DEFAULT: "Default";
};
export type ComputePlatform =
  (typeof ComputePlatform)[keyof typeof ComputePlatform];
export interface CreateProfilingGroupRequest {
  profilingGroupName: string | undefined;
  computePlatform?: ComputePlatform;
  clientToken?: string;
  agentOrchestrationConfig?: AgentOrchestrationConfig;
  tags?: Record<string, string>;
}
export interface ProfilingStatus {
  latestAgentProfileReportedAt?: Date;
  latestAggregatedProfile?: AggregatedProfileTime;
  latestAgentOrchestratedAt?: Date;
}
export interface ProfilingGroupDescription {
  name?: string;
  agentOrchestrationConfig?: AgentOrchestrationConfig;
  arn?: string;
  createdAt?: Date;
  updatedAt?: Date;
  profilingStatus?: ProfilingStatus;
  computePlatform?: ComputePlatform;
  tags?: Record<string, string>;
}
export interface CreateProfilingGroupResponse {
  profilingGroup: ProfilingGroupDescription | undefined;
}
export interface DeleteProfilingGroupRequest {
  profilingGroupName: string | undefined;
}
export interface DeleteProfilingGroupResponse {}
export interface DescribeProfilingGroupRequest {
  profilingGroupName: string | undefined;
}
export interface DescribeProfilingGroupResponse {
  profilingGroup: ProfilingGroupDescription | undefined;
}
export interface GetNotificationConfigurationRequest {
  profilingGroupName: string | undefined;
}
export interface GetNotificationConfigurationResponse {
  notificationConfiguration: NotificationConfiguration | undefined;
}
export interface GetPolicyRequest {
  profilingGroupName: string | undefined;
}
export interface GetPolicyResponse {
  policy: string | undefined;
  revisionId: string | undefined;
}
export interface GetProfileRequest {
  profilingGroupName: string | undefined;
  startTime?: Date;
  period?: string;
  endTime?: Date;
  maxDepth?: number;
  accept?: string;
}
export interface GetProfileResponse {
  profile: Uint8Array | undefined;
  contentType: string | undefined;
  contentEncoding?: string;
}
export interface GetRecommendationsRequest {
  profilingGroupName: string | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
  locale?: string;
}
export interface Pattern {
  id?: string;
  name?: string;
  description?: string;
  resolutionSteps?: string;
  targetFrames?: string[][];
  thresholdPercent?: number;
  countersToAggregate?: string[];
}
export interface Match {
  targetFramesIndex?: number;
  frameAddress?: string;
  thresholdBreachValue?: number;
}
export interface Recommendation {
  allMatchesCount: number | undefined;
  allMatchesSum: number | undefined;
  pattern: Pattern | undefined;
  topMatches: Match[] | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
}
export interface GetRecommendationsResponse {
  profilingGroupName: string | undefined;
  profileStartTime: Date | undefined;
  profileEndTime: Date | undefined;
  recommendations: Recommendation[] | undefined;
  anomalies: Anomaly[] | undefined;
}
export interface ListFindingsReportsRequest {
  profilingGroupName: string | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
  nextToken?: string;
  maxResults?: number;
  dailyReportsOnly?: boolean;
}
export interface ListFindingsReportsResponse {
  findingsReportSummaries: FindingsReportSummary[] | undefined;
  nextToken?: string;
}
export declare const OrderBy: {
  readonly TIMESTAMP_ASCENDING: "TimestampAscending";
  readonly TIMESTAMP_DESCENDING: "TimestampDescending";
};
export type OrderBy = (typeof OrderBy)[keyof typeof OrderBy];
export interface ListProfileTimesRequest {
  profilingGroupName: string | undefined;
  startTime: Date | undefined;
  endTime: Date | undefined;
  period: AggregationPeriod | undefined;
  orderBy?: OrderBy;
  maxResults?: number;
  nextToken?: string;
}
export interface ProfileTime {
  start?: Date;
}
export interface ListProfileTimesResponse {
  profileTimes: ProfileTime[] | undefined;
  nextToken?: string;
}
export interface ListProfilingGroupsRequest {
  nextToken?: string;
  maxResults?: number;
  includeDescription?: boolean;
}
export interface ListProfilingGroupsResponse {
  profilingGroupNames: string[] | undefined;
  profilingGroups?: ProfilingGroupDescription[];
  nextToken?: string;
}
export interface PostAgentProfileRequest {
  profilingGroupName: string | undefined;
  agentProfile: Uint8Array | undefined;
  profileToken?: string;
  contentType: string | undefined;
}
export interface PostAgentProfileResponse {}
export interface PutPermissionRequest {
  profilingGroupName: string | undefined;
  actionGroup: ActionGroup | undefined;
  principals: string[] | undefined;
  revisionId?: string;
}
export interface PutPermissionResponse {
  policy: string | undefined;
  revisionId: string | undefined;
}
export interface RemoveNotificationChannelRequest {
  profilingGroupName: string | undefined;
  channelId: string | undefined;
}
export interface RemoveNotificationChannelResponse {
  notificationConfiguration?: NotificationConfiguration;
}
export interface RemovePermissionRequest {
  profilingGroupName: string | undefined;
  actionGroup: ActionGroup | undefined;
  revisionId: string | undefined;
}
export interface RemovePermissionResponse {
  policy: string | undefined;
  revisionId: string | undefined;
}
export interface SubmitFeedbackRequest {
  profilingGroupName: string | undefined;
  anomalyInstanceId: string | undefined;
  type: FeedbackType | undefined;
  comment?: string;
}
export interface SubmitFeedbackResponse {}
export interface UpdateProfilingGroupRequest {
  profilingGroupName: string | undefined;
  agentOrchestrationConfig: AgentOrchestrationConfig | undefined;
}
export interface UpdateProfilingGroupResponse {
  profilingGroup: ProfilingGroupDescription | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
