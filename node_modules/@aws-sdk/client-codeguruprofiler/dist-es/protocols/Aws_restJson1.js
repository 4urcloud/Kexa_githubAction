import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { CodeGuruProfilerServiceException as __BaseException } from "../models/CodeGuruProfilerServiceException";
import { ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_AddNotificationChannelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profilingGroups/{profilingGroupName}/notificationConfiguration");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    let body;
    body = JSON.stringify(take(input, {
        channels: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchGetFrameMetricDataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profilingGroups/{profilingGroupName}/frames/-/metrics");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    const query = map({
        [_sT]: [() => input.startTime !== void 0, () => (input[_sT].toISOString().split(".")[0] + "Z").toString()],
        [_eT]: [() => input.endTime !== void 0, () => (input[_eT].toISOString().split(".")[0] + "Z").toString()],
        [_p]: [, input[_p]],
        [_tR]: [, input[_tR]],
    });
    let body;
    body = JSON.stringify(take(input, {
        frameMetrics: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_ConfigureAgentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profilingGroups/{profilingGroupName}/configureAgent");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    let body;
    body = JSON.stringify(take(input, {
        fleetInstanceId: [],
        metadata: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProfilingGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profilingGroups");
    const query = map({
        [_cT]: [, __expectNonNull(input[_cT], `clientToken`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        agentOrchestrationConfig: (_) => _json(_),
        computePlatform: [],
        profilingGroupName: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteProfilingGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profilingGroups/{profilingGroupName}");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeProfilingGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profilingGroups/{profilingGroupName}");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFindingsReportAccountSummaryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/internal/findingsReports");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_dRO]: [() => input.dailyReportsOnly !== void 0, () => input[_dRO].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetNotificationConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profilingGroups/{profilingGroupName}/notificationConfiguration");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profilingGroups/{profilingGroupName}/policy");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_a]: input[_a],
    });
    b.bp("/profilingGroups/{profilingGroupName}/profile");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    const query = map({
        [_sT]: [() => input.startTime !== void 0, () => (input[_sT].toISOString().split(".")[0] + "Z").toString()],
        [_p]: [, input[_p]],
        [_eT]: [() => input.endTime !== void 0, () => (input[_eT].toISOString().split(".")[0] + "Z").toString()],
        [_mD]: [() => input.maxDepth !== void 0, () => input[_mD].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetRecommendationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/internal/profilingGroups/{profilingGroupName}/recommendations");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    const query = map({
        [_sT]: [
            __expectNonNull(input.startTime, `startTime`) != null,
            () => (input[_sT].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_eT]: [
            __expectNonNull(input.endTime, `endTime`) != null,
            () => (input[_eT].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_l]: [, input[_l]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFindingsReportsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/internal/profilingGroups/{profilingGroupName}/findingsReports");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    const query = map({
        [_sT]: [
            __expectNonNull(input.startTime, `startTime`) != null,
            () => (input[_sT].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_eT]: [
            __expectNonNull(input.endTime, `endTime`) != null,
            () => (input[_eT].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_dRO]: [() => input.dailyReportsOnly !== void 0, () => input[_dRO].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProfileTimesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profilingGroups/{profilingGroupName}/profileTimes");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    const query = map({
        [_sT]: [
            __expectNonNull(input.startTime, `startTime`) != null,
            () => (input[_sT].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_eT]: [
            __expectNonNull(input.endTime, `endTime`) != null,
            () => (input[_eT].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_p]: [, __expectNonNull(input[_p], `period`)],
        [_oB]: [, input[_oB]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProfilingGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profilingGroups");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_iD]: [() => input.includeDescription !== void 0, () => input[_iD].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PostAgentProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_ct]: input[_cTo] || "application/octet-stream",
    });
    b.bp("/profilingGroups/{profilingGroupName}/agentProfile");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    const query = map({
        [_pT]: [, input[_pT] ?? generateIdempotencyToken()],
    });
    let body;
    if (input.agentProfile !== undefined) {
        body = input.agentProfile;
    }
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutPermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profilingGroups/{profilingGroupName}/policy/{actionGroup}");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    b.p("actionGroup", () => input.actionGroup, "{actionGroup}", false);
    let body;
    body = JSON.stringify(take(input, {
        principals: (_) => _json(_),
        revisionId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_RemoveNotificationChannelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profilingGroups/{profilingGroupName}/notificationConfiguration/{channelId}");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    b.p("channelId", () => input.channelId, "{channelId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_RemovePermissionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/profilingGroups/{profilingGroupName}/policy/{actionGroup}");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    b.p("actionGroup", () => input.actionGroup, "{actionGroup}", false);
    const query = map({
        [_rI]: [, __expectNonNull(input[_rI], `revisionId`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_SubmitFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/internal/profilingGroups/{profilingGroupName}/anomalies/{anomalyInstanceId}/feedback");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    b.p("anomalyInstanceId", () => input.anomalyInstanceId, "{anomalyInstanceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        comment: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateProfilingGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/profilingGroups/{profilingGroupName}");
    b.p("profilingGroupName", () => input.profilingGroupName, "{profilingGroupName}", false);
    let body;
    body = JSON.stringify(take(input, {
        agentOrchestrationConfig: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AddNotificationChannelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        notificationConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchGetFrameMetricDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        endTimes: (_) => de_ListOfTimestamps(_, context),
        frameMetricData: (_) => de_FrameMetricData(_, context),
        resolution: __expectString,
        startTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        unprocessedEndTimes: (_) => de_UnprocessedEndTimeMap(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ConfigureAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.configuration = _json(data);
    return contents;
};
export const de_CreateProfilingGroupCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.profilingGroup = de_ProfilingGroupDescription(data, context);
    return contents;
};
export const de_DeleteProfilingGroupCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeProfilingGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.profilingGroup = de_ProfilingGroupDescription(data, context);
    return contents;
};
export const de_GetFindingsReportAccountSummaryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        reportSummaries: (_) => de_FindingsReportSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNotificationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        notificationConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: __expectString,
        revisionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_cTo]: [, output.headers[_ct]],
        [_cE]: [, output.headers[_ce]],
    });
    const data = await collectBody(output.body, context);
    contents.profile = data;
    return contents;
};
export const de_GetRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        anomalies: (_) => de_Anomalies(_, context),
        profileEndTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        profileStartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        profilingGroupName: __expectString,
        recommendations: (_) => de_Recommendations(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFindingsReportsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        findingsReportSummaries: (_) => de_FindingsReportSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProfileTimesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        profileTimes: (_) => de_ProfileTimes(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProfilingGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        profilingGroupNames: _json,
        profilingGroups: (_) => de_ProfilingGroupDescriptions(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PostAgentProfileCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutPermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: __expectString,
        revisionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RemoveNotificationChannelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        notificationConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RemovePermissionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: __expectString,
        revisionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SubmitFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateProfilingGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectObject(await parseBody(output.body, context));
    contents.profilingGroup = de_ProfilingGroupDescription(data, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.codeguruprofiler#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.codeguruprofiler#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codeguruprofiler#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.codeguruprofiler#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.codeguruprofiler#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codeguruprofiler#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_AggregatedProfileTime = (output, context) => {
    return take(output, {
        period: __expectString,
        start: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_Anomalies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Anomaly(entry, context);
    });
    return retVal;
};
const de_Anomaly = (output, context) => {
    return take(output, {
        instances: (_) => de_AnomalyInstances(_, context),
        metric: _json,
        reason: __expectString,
    });
};
const de_AnomalyInstance = (output, context) => {
    return take(output, {
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        id: __expectString,
        startTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        userFeedback: _json,
    });
};
const de_AnomalyInstances = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnomalyInstance(entry, context);
    });
    return retVal;
};
const de_FindingsReportSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FindingsReportSummary(entry, context);
    });
    return retVal;
};
const de_FindingsReportSummary = (output, context) => {
    return take(output, {
        id: __expectString,
        profileEndTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        profileStartTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        profilingGroupName: __expectString,
        totalNumberOfFindings: __expectInt32,
    });
};
const de_FrameMetricData = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FrameMetricDatum(entry, context);
    });
    return retVal;
};
const de_FrameMetricDatum = (output, context) => {
    return take(output, {
        frameMetric: _json,
        values: (_) => de_FrameMetricValues(_, context),
    });
};
const de_FrameMetricValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_ListOfTimestamps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TimestampStructure(entry, context);
    });
    return retVal;
};
const de_Match = (output, context) => {
    return take(output, {
        frameAddress: __expectString,
        targetFramesIndex: __expectInt32,
        thresholdBreachValue: __limitedParseDouble,
    });
};
const de_Matches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Match(entry, context);
    });
    return retVal;
};
const de_Pattern = (output, context) => {
    return take(output, {
        countersToAggregate: _json,
        description: __expectString,
        id: __expectString,
        name: __expectString,
        resolutionSteps: __expectString,
        targetFrames: _json,
        thresholdPercent: __limitedParseDouble,
    });
};
const de_ProfileTime = (output, context) => {
    return take(output, {
        start: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ProfileTimes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProfileTime(entry, context);
    });
    return retVal;
};
const de_ProfilingGroupDescription = (output, context) => {
    return take(output, {
        agentOrchestrationConfig: _json,
        arn: __expectString,
        computePlatform: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        name: __expectString,
        profilingStatus: (_) => de_ProfilingStatus(_, context),
        tags: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ProfilingGroupDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProfilingGroupDescription(entry, context);
    });
    return retVal;
};
const de_ProfilingStatus = (output, context) => {
    return take(output, {
        latestAgentOrchestratedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        latestAgentProfileReportedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        latestAggregatedProfile: (_) => de_AggregatedProfileTime(_, context),
    });
};
const de_Recommendation = (output, context) => {
    return take(output, {
        allMatchesCount: __expectInt32,
        allMatchesSum: __limitedParseDouble,
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        pattern: (_) => de_Pattern(_, context),
        startTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        topMatches: (_) => de_Matches(_, context),
    });
};
const de_Recommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Recommendation(entry, context);
    });
    return retVal;
};
const de_TimestampStructure = (output, context) => {
    return take(output, {
        value: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_UnprocessedEndTimeMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ListOfTimestamps(value, context);
        return acc;
    }, {});
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _a = "accept";
const _cE = "contentEncoding";
const _cT = "clientToken";
const _cTo = "contentType";
const _ce = "content-encoding";
const _ct = "content-type";
const _dRO = "dailyReportsOnly";
const _eT = "endTime";
const _iD = "includeDescription";
const _l = "locale";
const _mD = "maxDepth";
const _mR = "maxResults";
const _nT = "nextToken";
const _oB = "orderBy";
const _p = "period";
const _pT = "profileToken";
const _rI = "revisionId";
const _sT = "startTime";
const _tK = "tagKeys";
const _tR = "targetResolution";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
