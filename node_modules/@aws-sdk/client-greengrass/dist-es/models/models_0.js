import { GreengrassServiceException as __BaseException } from "./GreengrassServiceException";
export const EncodingType = {
    binary: "binary",
    json: "json",
};
export const FunctionIsolationMode = {
    GreengrassContainer: "GreengrassContainer",
    NoContainer: "NoContainer",
};
export const Permission = {
    ro: "ro",
    rw: "rw",
};
export const LoggerComponent = {
    GreengrassSystem: "GreengrassSystem",
    Lambda: "Lambda",
};
export const LoggerLevel = {
    DEBUG: "DEBUG",
    ERROR: "ERROR",
    FATAL: "FATAL",
    INFO: "INFO",
    WARN: "WARN",
};
export const LoggerType = {
    AWSCloudWatch: "AWSCloudWatch",
    FileSystem: "FileSystem",
};
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.ErrorDetails = opts.ErrorDetails;
        this.Message = opts.Message;
    }
}
export class InternalServerErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.ErrorDetails = opts.ErrorDetails;
        this.Message = opts.Message;
    }
}
export const DeploymentType = {
    ForceResetDeployment: "ForceResetDeployment",
    NewDeployment: "NewDeployment",
    Redeployment: "Redeployment",
    ResetDeployment: "ResetDeployment",
};
export const BulkDeploymentStatus = {
    Completed: "Completed",
    Failed: "Failed",
    Initializing: "Initializing",
    Running: "Running",
    Stopped: "Stopped",
    Stopping: "Stopping",
};
export const ConfigurationSyncStatus = {
    InSync: "InSync",
    OutOfSync: "OutOfSync",
};
export const SoftwareToUpdate = {
    core: "core",
    ota_agent: "ota_agent",
};
export const UpdateAgentLogLevel = {
    DEBUG: "DEBUG",
    ERROR: "ERROR",
    FATAL: "FATAL",
    INFO: "INFO",
    NONE: "NONE",
    TRACE: "TRACE",
    VERBOSE: "VERBOSE",
    WARN: "WARN",
};
export const UpdateTargetsArchitecture = {
    aarch64: "aarch64",
    armv6l: "armv6l",
    armv7l: "armv7l",
    x86_64: "x86_64",
};
export const UpdateTargetsOperatingSystem = {
    amazon_linux: "amazon_linux",
    openwrt: "openwrt",
    raspbian: "raspbian",
    ubuntu: "ubuntu",
};
export const Telemetry = {
    Off: "Off",
    On: "On",
};
