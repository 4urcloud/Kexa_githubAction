import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, take, withBaseException, } from "@smithy/smithy-client";
import { GreengrassServiceException as __BaseException } from "../models/GreengrassServiceException";
import { BadRequestException, InternalServerErrorException, } from "../models/models_0";
export const se_AssociateRoleToGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/groups/{GroupId}/role");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        RoleArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_AssociateServiceRoleToAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/servicerole");
    let body;
    body = JSON.stringify(take(input, {
        RoleArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateConnectorDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/connectors");
    let body;
    body = JSON.stringify(take(input, {
        InitialVersion: (_) => _json(_),
        Name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateConnectorDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/connectors/{ConnectorDefinitionId}/versions");
    b.p("ConnectorDefinitionId", () => input.ConnectorDefinitionId, "{ConnectorDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Connectors: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCoreDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/cores");
    let body;
    body = JSON.stringify(take(input, {
        InitialVersion: (_) => _json(_),
        Name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCoreDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/cores/{CoreDefinitionId}/versions");
    b.p("CoreDefinitionId", () => input.CoreDefinitionId, "{CoreDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Cores: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/groups/{GroupId}/deployments");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DeploymentId: [],
        DeploymentType: [],
        GroupVersionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDeviceDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/devices");
    let body;
    body = JSON.stringify(take(input, {
        InitialVersion: (_) => _json(_),
        Name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDeviceDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/devices/{DeviceDefinitionId}/versions");
    b.p("DeviceDefinitionId", () => input.DeviceDefinitionId, "{DeviceDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Devices: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFunctionDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/functions");
    let body;
    body = JSON.stringify(take(input, {
        InitialVersion: (_) => _json(_),
        Name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFunctionDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/functions/{FunctionDefinitionId}/versions");
    b.p("FunctionDefinitionId", () => input.FunctionDefinitionId, "{FunctionDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DefaultConfig: (_) => _json(_),
        Functions: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/groups");
    let body;
    body = JSON.stringify(take(input, {
        InitialVersion: (_) => _json(_),
        Name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateGroupCertificateAuthorityCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/groups/{GroupId}/certificateauthorities");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateGroupVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/groups/{GroupId}/versions");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ConnectorDefinitionVersionArn: [],
        CoreDefinitionVersionArn: [],
        DeviceDefinitionVersionArn: [],
        FunctionDefinitionVersionArn: [],
        LoggerDefinitionVersionArn: [],
        ResourceDefinitionVersionArn: [],
        SubscriptionDefinitionVersionArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLoggerDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/loggers");
    let body;
    body = JSON.stringify(take(input, {
        InitialVersion: (_) => _json(_),
        Name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLoggerDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/loggers/{LoggerDefinitionId}/versions");
    b.p("LoggerDefinitionId", () => input.LoggerDefinitionId, "{LoggerDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Loggers: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateResourceDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/resources");
    let body;
    body = JSON.stringify(take(input, {
        InitialVersion: (_) => _json(_),
        Name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateResourceDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/resources/{ResourceDefinitionId}/versions");
    b.p("ResourceDefinitionId", () => input.ResourceDefinitionId, "{ResourceDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Resources: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSoftwareUpdateJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/updates");
    let body;
    body = JSON.stringify(take(input, {
        S3UrlSignerRole: [],
        SoftwareToUpdate: [],
        UpdateAgentLogLevel: [],
        UpdateTargets: (_) => _json(_),
        UpdateTargetsArchitecture: [],
        UpdateTargetsOperatingSystem: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSubscriptionDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/subscriptions");
    let body;
    body = JSON.stringify(take(input, {
        InitialVersion: (_) => _json(_),
        Name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSubscriptionDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions");
    b.p("SubscriptionDefinitionId", () => input.SubscriptionDefinitionId, "{SubscriptionDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Subscriptions: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteConnectorDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/connectors/{ConnectorDefinitionId}");
    b.p("ConnectorDefinitionId", () => input.ConnectorDefinitionId, "{ConnectorDefinitionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteCoreDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/cores/{CoreDefinitionId}");
    b.p("CoreDefinitionId", () => input.CoreDefinitionId, "{CoreDefinitionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDeviceDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/devices/{DeviceDefinitionId}");
    b.p("DeviceDefinitionId", () => input.DeviceDefinitionId, "{DeviceDefinitionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFunctionDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/functions/{FunctionDefinitionId}");
    b.p("FunctionDefinitionId", () => input.FunctionDefinitionId, "{FunctionDefinitionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteLoggerDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/loggers/{LoggerDefinitionId}");
    b.p("LoggerDefinitionId", () => input.LoggerDefinitionId, "{LoggerDefinitionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteResourceDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/resources/{ResourceDefinitionId}");
    b.p("ResourceDefinitionId", () => input.ResourceDefinitionId, "{ResourceDefinitionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSubscriptionDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/subscriptions/{SubscriptionDefinitionId}");
    b.p("SubscriptionDefinitionId", () => input.SubscriptionDefinitionId, "{SubscriptionDefinitionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateRoleFromGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}/role");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateServiceRoleFromAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/servicerole");
    let body;
    body = "";
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetAssociatedRoleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}/role");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBulkDeploymentStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/bulk/deployments/{BulkDeploymentId}/status");
    b.p("BulkDeploymentId", () => input.BulkDeploymentId, "{BulkDeploymentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConnectivityInfoCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/things/{ThingName}/connectivityInfo");
    b.p("ThingName", () => input.ThingName, "{ThingName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConnectorDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/connectors/{ConnectorDefinitionId}");
    b.p("ConnectorDefinitionId", () => input.ConnectorDefinitionId, "{ConnectorDefinitionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConnectorDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/connectors/{ConnectorDefinitionId}/versions/{ConnectorDefinitionVersionId}");
    b.p("ConnectorDefinitionId", () => input.ConnectorDefinitionId, "{ConnectorDefinitionId}", false);
    b.p("ConnectorDefinitionVersionId", () => input.ConnectorDefinitionVersionId, "{ConnectorDefinitionVersionId}", false);
    const query = map({
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCoreDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/cores/{CoreDefinitionId}");
    b.p("CoreDefinitionId", () => input.CoreDefinitionId, "{CoreDefinitionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCoreDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}");
    b.p("CoreDefinitionId", () => input.CoreDefinitionId, "{CoreDefinitionId}", false);
    b.p("CoreDefinitionVersionId", () => input.CoreDefinitionVersionId, "{CoreDefinitionVersionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDeploymentStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status");
    b.p("DeploymentId", () => input.DeploymentId, "{DeploymentId}", false);
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDeviceDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/devices/{DeviceDefinitionId}");
    b.p("DeviceDefinitionId", () => input.DeviceDefinitionId, "{DeviceDefinitionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDeviceDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}");
    b.p("DeviceDefinitionId", () => input.DeviceDefinitionId, "{DeviceDefinitionId}", false);
    b.p("DeviceDefinitionVersionId", () => input.DeviceDefinitionVersionId, "{DeviceDefinitionVersionId}", false);
    const query = map({
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetFunctionDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/functions/{FunctionDefinitionId}");
    b.p("FunctionDefinitionId", () => input.FunctionDefinitionId, "{FunctionDefinitionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFunctionDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}");
    b.p("FunctionDefinitionId", () => input.FunctionDefinitionId, "{FunctionDefinitionId}", false);
    b.p("FunctionDefinitionVersionId", () => input.FunctionDefinitionVersionId, "{FunctionDefinitionVersionId}", false);
    const query = map({
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetGroupCertificateAuthorityCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}");
    b.p("CertificateAuthorityId", () => input.CertificateAuthorityId, "{CertificateAuthorityId}", false);
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetGroupCertificateConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetGroupVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}/versions/{GroupVersionId}");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    b.p("GroupVersionId", () => input.GroupVersionId, "{GroupVersionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetLoggerDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/loggers/{LoggerDefinitionId}");
    b.p("LoggerDefinitionId", () => input.LoggerDefinitionId, "{LoggerDefinitionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetLoggerDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}");
    b.p("LoggerDefinitionId", () => input.LoggerDefinitionId, "{LoggerDefinitionId}", false);
    b.p("LoggerDefinitionVersionId", () => input.LoggerDefinitionVersionId, "{LoggerDefinitionVersionId}", false);
    const query = map({
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetResourceDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/resources/{ResourceDefinitionId}");
    b.p("ResourceDefinitionId", () => input.ResourceDefinitionId, "{ResourceDefinitionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetResourceDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/resources/{ResourceDefinitionId}/versions/{ResourceDefinitionVersionId}");
    b.p("ResourceDefinitionId", () => input.ResourceDefinitionId, "{ResourceDefinitionId}", false);
    b.p("ResourceDefinitionVersionId", () => input.ResourceDefinitionVersionId, "{ResourceDefinitionVersionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetServiceRoleForAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/servicerole");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSubscriptionDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/subscriptions/{SubscriptionDefinitionId}");
    b.p("SubscriptionDefinitionId", () => input.SubscriptionDefinitionId, "{SubscriptionDefinitionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSubscriptionDefinitionVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}");
    b.p("SubscriptionDefinitionId", () => input.SubscriptionDefinitionId, "{SubscriptionDefinitionId}", false);
    b.p("SubscriptionDefinitionVersionId", () => input.SubscriptionDefinitionVersionId, "{SubscriptionDefinitionVersionId}", false);
    const query = map({
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetThingRuntimeConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/things/{ThingName}/runtimeconfig");
    b.p("ThingName", () => input.ThingName, "{ThingName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListBulkDeploymentDetailedReportsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/bulk/deployments/{BulkDeploymentId}/detailed-reports");
    b.p("BulkDeploymentId", () => input.BulkDeploymentId, "{BulkDeploymentId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBulkDeploymentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/bulk/deployments");
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListConnectorDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/connectors");
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListConnectorDefinitionVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/connectors/{ConnectorDefinitionId}/versions");
    b.p("ConnectorDefinitionId", () => input.ConnectorDefinitionId, "{ConnectorDefinitionId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCoreDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/cores");
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCoreDefinitionVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/cores/{CoreDefinitionId}/versions");
    b.p("CoreDefinitionId", () => input.CoreDefinitionId, "{CoreDefinitionId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDeploymentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}/deployments");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDeviceDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/devices");
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDeviceDefinitionVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/devices/{DeviceDefinitionId}/versions");
    b.p("DeviceDefinitionId", () => input.DeviceDefinitionId, "{DeviceDefinitionId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFunctionDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/functions");
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFunctionDefinitionVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/functions/{FunctionDefinitionId}/versions");
    b.p("FunctionDefinitionId", () => input.FunctionDefinitionId, "{FunctionDefinitionId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListGroupCertificateAuthoritiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}/certificateauthorities");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListGroupsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups");
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListGroupVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/groups/{GroupId}/versions");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLoggerDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/loggers");
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLoggerDefinitionVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/loggers/{LoggerDefinitionId}/versions");
    b.p("LoggerDefinitionId", () => input.LoggerDefinitionId, "{LoggerDefinitionId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListResourceDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/resources");
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListResourceDefinitionVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/resources/{ResourceDefinitionId}/versions");
    b.p("ResourceDefinitionId", () => input.ResourceDefinitionId, "{ResourceDefinitionId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSubscriptionDefinitionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/subscriptions");
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSubscriptionDefinitionVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions");
    b.p("SubscriptionDefinitionId", () => input.SubscriptionDefinitionId, "{SubscriptionDefinitionId}", false);
    const query = map({
        [_MR]: [, input[_MR]],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ResetDeploymentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/groups/{GroupId}/deployments/$reset");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Force: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartBulkDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/json",
        [_xact]: input[_ACT],
    });
    b.bp("/greengrass/bulk/deployments");
    let body;
    body = JSON.stringify(take(input, {
        ExecutionRoleArn: [],
        InputFileUri: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopBulkDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/bulk/deployments/{BulkDeploymentId}/$stop");
    b.p("BulkDeploymentId", () => input.BulkDeploymentId, "{BulkDeploymentId}", false);
    let body;
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateConnectivityInfoCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/things/{ThingName}/connectivityInfo");
    b.p("ThingName", () => input.ThingName, "{ThingName}", false);
    let body;
    body = JSON.stringify(take(input, {
        ConnectivityInfo: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateConnectorDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/definition/connectors/{ConnectorDefinitionId}");
    b.p("ConnectorDefinitionId", () => input.ConnectorDefinitionId, "{ConnectorDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateCoreDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/definition/cores/{CoreDefinitionId}");
    b.p("CoreDefinitionId", () => input.CoreDefinitionId, "{CoreDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateDeviceDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/definition/devices/{DeviceDefinitionId}");
    b.p("DeviceDefinitionId", () => input.DeviceDefinitionId, "{DeviceDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateFunctionDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/definition/functions/{FunctionDefinitionId}");
    b.p("FunctionDefinitionId", () => input.FunctionDefinitionId, "{FunctionDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/groups/{GroupId}");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateGroupCertificateConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry");
    b.p("GroupId", () => input.GroupId, "{GroupId}", false);
    let body;
    body = JSON.stringify(take(input, {
        CertificateExpiryInMilliseconds: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateLoggerDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/definition/loggers/{LoggerDefinitionId}");
    b.p("LoggerDefinitionId", () => input.LoggerDefinitionId, "{LoggerDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateResourceDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/definition/resources/{ResourceDefinitionId}");
    b.p("ResourceDefinitionId", () => input.ResourceDefinitionId, "{ResourceDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSubscriptionDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/definition/subscriptions/{SubscriptionDefinitionId}");
    b.p("SubscriptionDefinitionId", () => input.SubscriptionDefinitionId, "{SubscriptionDefinitionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateThingRuntimeConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/things/{ThingName}/runtimeconfig");
    b.p("ThingName", () => input.ThingName, "{ThingName}", false);
    let body;
    body = JSON.stringify(take(input, {
        TelemetryConfiguration: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AssociateRoleToGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssociatedAt: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateServiceRoleToAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssociatedAt: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConnectorDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConnectorDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCoreDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCoreDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeploymentArn: __expectString,
        DeploymentId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDeviceDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDeviceDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFunctionDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFunctionDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateGroupCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GroupCertificateAuthorityArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateGroupVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLoggerDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLoggerDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateResourceDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateResourceDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSoftwareUpdateJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        IotJobArn: __expectString,
        IotJobId: __expectString,
        PlatformSoftwareVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSubscriptionDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSubscriptionDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteConnectorDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteCoreDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDeviceDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteFunctionDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteLoggerDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteResourceDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSubscriptionDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateRoleFromGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DisassociatedAt: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateServiceRoleFromAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DisassociatedAt: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAssociatedRoleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssociatedAt: __expectString,
        RoleArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBulkDeploymentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BulkDeploymentMetrics: _json,
        BulkDeploymentStatus: __expectString,
        CreatedAt: __expectString,
        ErrorDetails: _json,
        ErrorMessage: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConnectivityInfoCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectivityInfo: _json,
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConnectorDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConnectorDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Definition: _json,
        Id: __expectString,
        NextToken: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCoreDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCoreDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Definition: _json,
        Id: __expectString,
        NextToken: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDeploymentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeploymentStatus: __expectString,
        DeploymentType: __expectString,
        ErrorDetails: _json,
        ErrorMessage: __expectString,
        UpdatedAt: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDeviceDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDeviceDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Definition: _json,
        Id: __expectString,
        NextToken: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFunctionDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFunctionDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Definition: _json,
        Id: __expectString,
        NextToken: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGroupCertificateAuthorityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GroupCertificateAuthorityArn: __expectString,
        GroupCertificateAuthorityId: __expectString,
        PemEncodedCertificate: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGroupCertificateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CertificateAuthorityExpiryInMilliseconds: __expectString,
        CertificateExpiryInMilliseconds: __expectString,
        GroupId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGroupVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Definition: _json,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLoggerDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLoggerDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Definition: _json,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourceDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourceDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Definition: _json,
        Id: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetServiceRoleForAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AssociatedAt: __expectString,
        RoleArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSubscriptionDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSubscriptionDefinitionVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Definition: _json,
        Id: __expectString,
        NextToken: __expectString,
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetThingRuntimeConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RuntimeConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBulkDeploymentDetailedReportsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Deployments: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBulkDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BulkDeployments: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConnectorDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Definitions: (_) => de___listOfDefinitionInformation(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConnectorDefinitionVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Versions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCoreDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Definitions: (_) => de___listOfDefinitionInformation(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCoreDefinitionVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Versions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Deployments: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDeviceDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Definitions: (_) => de___listOfDefinitionInformation(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDeviceDefinitionVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Versions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFunctionDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Definitions: (_) => de___listOfDefinitionInformation(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFunctionDefinitionVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Versions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListGroupCertificateAuthoritiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GroupCertificateAuthorities: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Groups: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListGroupVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Versions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLoggerDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Definitions: (_) => de___listOfDefinitionInformation(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLoggerDefinitionVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Versions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResourceDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Definitions: (_) => de___listOfDefinitionInformation(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResourceDefinitionVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Versions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSubscriptionDefinitionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Definitions: (_) => de___listOfDefinitionInformation(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSubscriptionDefinitionVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Versions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ResetDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DeploymentArn: __expectString,
        DeploymentId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartBulkDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BulkDeploymentArn: __expectString,
        BulkDeploymentId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopBulkDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateConnectivityInfoCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Message: [, __expectString, `message`],
        Version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateConnectorDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateCoreDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateDeviceDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateFunctionDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateGroupCertificateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CertificateAuthorityExpiryInMilliseconds: __expectString,
        CertificateExpiryInMilliseconds: __expectString,
        GroupId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateLoggerDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateResourceDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateSubscriptionDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateThingRuntimeConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.greengrass#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.greengrass#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorDetails: _json,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorDetails: _json,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de___listOfDefinitionInformation = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DefinitionInformation(entry, context);
    });
    return retVal;
};
const de_DefinitionInformation = (output, context) => {
    return take(output, {
        Arn: __expectString,
        CreationTimestamp: __expectString,
        Id: __expectString,
        LastUpdatedTimestamp: __expectString,
        LatestVersion: __expectString,
        LatestVersionArn: __expectString,
        Name: __expectString,
        Tags: [, _json, `tags`],
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _ACT = "AmznClientToken";
const _MR = "MaxResults";
const _NT = "NextToken";
const _TK = "TagKeys";
const _tK = "tagKeys";
const _xact = "x-amzn-client-token";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
