import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { ResiliencehubClientResolvedConfig } from "../ResiliencehubClient";
export interface ResiliencehubHttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface ResiliencehubHttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    ResiliencehubClientResolvedConfig,
    HandlerExecutionContext,
    ResiliencehubHttpAuthSchemeParameters,
    object
  > {}
export declare const defaultResiliencehubHttpAuthSchemeParametersProvider: (
  config: ResiliencehubClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<ResiliencehubHttpAuthSchemeParameters>;
export interface ResiliencehubHttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<ResiliencehubHttpAuthSchemeParameters> {}
export declare const defaultResiliencehubHttpAuthSchemeProvider: ResiliencehubHttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: ResiliencehubHttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: ResiliencehubHttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
