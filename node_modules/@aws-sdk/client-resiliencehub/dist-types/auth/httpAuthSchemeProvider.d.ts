import { AwsSdkSigV4AuthInputConfig, AwsSdkSigV4AuthResolvedConfig, AwsSdkSigV4PreviouslyResolved } from "@aws-sdk/core";
import { HandlerExecutionContext, HttpAuthScheme, HttpAuthSchemeParameters, HttpAuthSchemeParametersProvider, HttpAuthSchemeProvider } from "@smithy/types";
import { ResiliencehubClientResolvedConfig } from "../ResiliencehubClient";
/**
 * @internal
 */
export interface ResiliencehubHttpAuthSchemeParameters extends HttpAuthSchemeParameters {
    region?: string;
}
/**
 * @internal
 */
export interface ResiliencehubHttpAuthSchemeParametersProvider extends HttpAuthSchemeParametersProvider<ResiliencehubClientResolvedConfig, HandlerExecutionContext, ResiliencehubHttpAuthSchemeParameters, object> {
}
/**
 * @internal
 */
export declare const defaultResiliencehubHttpAuthSchemeParametersProvider: (config: ResiliencehubClientResolvedConfig, context: HandlerExecutionContext, input: object) => Promise<ResiliencehubHttpAuthSchemeParameters>;
/**
 * @internal
 */
export interface ResiliencehubHttpAuthSchemeProvider extends HttpAuthSchemeProvider<ResiliencehubHttpAuthSchemeParameters> {
}
/**
 * @internal
 */
export declare const defaultResiliencehubHttpAuthSchemeProvider: ResiliencehubHttpAuthSchemeProvider;
/**
 * @internal
 */
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
    /**
     * experimentalIdentityAndAuth: Configuration of HttpAuthSchemes for a client which provides default identity providers and signers per auth scheme.
     * @internal
     */
    httpAuthSchemes?: HttpAuthScheme[];
    /**
     * experimentalIdentityAndAuth: Configuration of an HttpAuthSchemeProvider for a client which resolves which HttpAuthScheme to use.
     * @internal
     */
    httpAuthSchemeProvider?: ResiliencehubHttpAuthSchemeProvider;
}
/**
 * @internal
 */
export interface HttpAuthSchemeResolvedConfig extends AwsSdkSigV4AuthResolvedConfig {
    /**
     * experimentalIdentityAndAuth: Configuration of HttpAuthSchemes for a client which provides default identity providers and signers per auth scheme.
     * @internal
     */
    readonly httpAuthSchemes: HttpAuthScheme[];
    /**
     * experimentalIdentityAndAuth: Configuration of an HttpAuthSchemeProvider for a client which resolves which HttpAuthScheme to use.
     * @internal
     */
    readonly httpAuthSchemeProvider: ResiliencehubHttpAuthSchemeProvider;
}
/**
 * @internal
 */
export declare const resolveHttpAuthSchemeConfig: <T>(config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved) => T & HttpAuthSchemeResolvedConfig;
