import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { ResiliencehubServiceException as __BaseException } from "../models/ResiliencehubServiceException";
export const se_AddDraftAppVersionResourceMappingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/add-draft-app-version-resource-mappings");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        resourceMappings: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchUpdateRecommendationStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/batch-update-recommendation-status");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        requestEntries: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/create-app");
    let body;
    body = JSON.stringify(take(input, {
        assessmentSchedule: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        eventSubscriptions: (_) => _json(_),
        name: [],
        permissionModel: (_) => _json(_),
        policyArn: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAppVersionAppComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/create-app-version-app-component");
    let body;
    body = JSON.stringify(take(input, {
        additionalInfo: (_) => _json(_),
        appArn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        id: [],
        name: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAppVersionResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/create-app-version-resource");
    let body;
    body = JSON.stringify(take(input, {
        additionalInfo: (_) => _json(_),
        appArn: [],
        appComponents: (_) => _json(_),
        awsAccountId: [],
        awsRegion: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        logicalResourceId: (_) => _json(_),
        physicalResourceId: [],
        resourceName: [],
        resourceType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRecommendationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/create-recommendation-template");
    let body;
    body = JSON.stringify(take(input, {
        assessmentArn: [],
        bucketName: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        format: [],
        name: [],
        recommendationIds: (_) => _json(_),
        recommendationTypes: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateResiliencyPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/create-resiliency-policy");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        dataLocationConstraint: [],
        policy: (_) => _json(_),
        policyDescription: [],
        policyName: [],
        tags: (_) => _json(_),
        tier: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-app");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        forceDelete: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-app-assessment");
    let body;
    body = JSON.stringify(take(input, {
        assessmentArn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppInputSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-app-input-source");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        eksSourceClusterNamespace: (_) => _json(_),
        sourceArn: [],
        terraformSource: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppVersionAppComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-app-version-app-component");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        id: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAppVersionResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-app-version-resource");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        awsAccountId: [],
        awsRegion: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        logicalResourceId: (_) => _json(_),
        physicalResourceId: [],
        resourceName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteRecommendationTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-recommendation-template");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        recommendationTemplateArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteResiliencyPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-resiliency-policy");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        policyArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-app");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAppAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-app-assessment");
    let body;
    body = JSON.stringify(take(input, {
        assessmentArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAppVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-app-version");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAppVersionAppComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-app-version-app-component");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
        id: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAppVersionResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-app-version-resource");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
        awsAccountId: [],
        awsRegion: [],
        logicalResourceId: (_) => _json(_),
        physicalResourceId: [],
        resourceName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAppVersionResourcesResolutionStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-app-version-resources-resolution-status");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
        resolutionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAppVersionTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-app-version-template");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeDraftAppVersionResourcesImportStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-draft-app-version-resources-import-status");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeResiliencyPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-resiliency-policy");
    let body;
    body = JSON.stringify(take(input, {
        policyArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ImportResourcesToDraftAppVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/import-resources-to-draft-app-version");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        eksSources: (_) => _json(_),
        importStrategy: [],
        sourceArns: (_) => _json(_),
        terraformSources: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAlarmRecommendationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-alarm-recommendations");
    let body;
    body = JSON.stringify(take(input, {
        assessmentArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAppAssessmentComplianceDriftsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-app-assessment-compliance-drifts");
    let body;
    body = JSON.stringify(take(input, {
        assessmentArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAppAssessmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/list-app-assessments");
    const query = map({
        [_aA]: [, input[_aA]],
        [_aN]: [, input[_aN]],
        [_aS]: [() => input.assessmentStatus !== void 0, () => (input[_aS] || []).map((_entry) => _entry)],
        [_cS]: [, input[_cS]],
        [_i]: [, input[_i]],
        [_rO]: [() => input.reverseOrder !== void 0, () => input[_rO].toString()],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAppComponentCompliancesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-app-component-compliances");
    let body;
    body = JSON.stringify(take(input, {
        assessmentArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAppComponentRecommendationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-app-component-recommendations");
    let body;
    body = JSON.stringify(take(input, {
        assessmentArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAppInputSourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-app-input-sources");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAppsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/list-apps");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_n]: [, input[_n]],
        [_aA]: [, input[_aA]],
        [_fLAT]: [
            () => input.fromLastAssessmentTime !== void 0,
            () => (input[_fLAT].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_tLAT]: [
            () => input.toLastAssessmentTime !== void 0,
            () => (input[_tLAT].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_rO]: [() => input.reverseOrder !== void 0, () => input[_rO].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAppVersionAppComponentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-app-version-app-components");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAppVersionResourceMappingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-app-version-resource-mappings");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAppVersionResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-app-version-resources");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
        maxResults: [],
        nextToken: [],
        resolutionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAppVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-app-versions");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        endTime: (_) => Math.round(_.getTime() / 1000),
        maxResults: [],
        nextToken: [],
        startTime: (_) => Math.round(_.getTime() / 1000),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListRecommendationTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/list-recommendation-templates");
    const query = map({
        [_aAs]: [, __expectNonNull(input[_aAs], `assessmentArn`)],
        [_rO]: [() => input.reverseOrder !== void 0, () => input[_rO].toString()],
        [_s]: [() => input.status !== void 0, () => (input[_s] || []).map((_entry) => _entry)],
        [_rTA]: [, input[_rTA]],
        [_n]: [, input[_n]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListResiliencyPoliciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/list-resiliency-policies");
    const query = map({
        [_pN]: [, input[_pN]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSopRecommendationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-sop-recommendations");
    let body;
    body = JSON.stringify(take(input, {
        assessmentArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListSuggestedResiliencyPoliciesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/list-suggested-resiliency-policies");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListTestRecommendationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-test-recommendations");
    let body;
    body = JSON.stringify(take(input, {
        assessmentArn: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListUnsupportedAppVersionResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-unsupported-app-version-resources");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
        maxResults: [],
        nextToken: [],
        resolutionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PublishAppVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/publish-app-version");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        versionName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutDraftAppVersionTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/put-draft-app-version-template");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appTemplateBody: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RemoveDraftAppVersionResourceMappingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/remove-draft-app-version-resource-mappings");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appRegistryAppNames: (_) => _json(_),
        eksSourceNames: (_) => _json(_),
        logicalStackNames: (_) => _json(_),
        resourceGroupNames: (_) => _json(_),
        resourceNames: (_) => _json(_),
        terraformSourceNames: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ResolveAppVersionResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/resolve-app-version-resources");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartAppAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/start-app-assessment");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        appVersion: [],
        assessmentName: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAppCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-app");
    let body;
    body = JSON.stringify(take(input, {
        appArn: [],
        assessmentSchedule: [],
        clearResiliencyPolicyArn: [],
        description: [],
        eventSubscriptions: (_) => _json(_),
        permissionModel: (_) => _json(_),
        policyArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateAppVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-app-version");
    let body;
    body = JSON.stringify(take(input, {
        additionalInfo: (_) => _json(_),
        appArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateAppVersionAppComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-app-version-app-component");
    let body;
    body = JSON.stringify(take(input, {
        additionalInfo: (_) => _json(_),
        appArn: [],
        id: [],
        name: [],
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateAppVersionResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-app-version-resource");
    let body;
    body = JSON.stringify(take(input, {
        additionalInfo: (_) => _json(_),
        appArn: [],
        appComponents: (_) => _json(_),
        awsAccountId: [],
        awsRegion: [],
        excluded: [],
        logicalResourceId: (_) => _json(_),
        physicalResourceId: [],
        resourceName: [],
        resourceType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateResiliencyPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-resiliency-policy");
    let body;
    body = JSON.stringify(take(input, {
        dataLocationConstraint: [],
        policy: (_) => _json(_),
        policyArn: [],
        policyDescription: [],
        policyName: [],
        tier: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_AddDraftAppVersionResourceMappingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        resourceMappings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchUpdateRecommendationStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        failedEntries: _json,
        successfulEntries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        app: (_) => de_App(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAppVersionAppComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appComponent: _json,
        appVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAppVersionResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        physicalResource: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRecommendationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        recommendationTemplate: (_) => de_RecommendationTemplate(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateResiliencyPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: (_) => de_ResiliencyPolicy(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAppAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentArn: __expectString,
        assessmentStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAppInputSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appInputSource: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAppVersionAppComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appComponent: _json,
        appVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAppVersionResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        physicalResource: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteRecommendationTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        recommendationTemplateArn: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteResiliencyPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policyArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        app: (_) => de_App(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAppAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessment: (_) => de_AppAssessment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAppVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        additionalInfo: _json,
        appArn: __expectString,
        appVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAppVersionAppComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appComponent: _json,
        appVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAppVersionResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        physicalResource: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAppVersionResourcesResolutionStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        errorMessage: __expectString,
        resolutionId: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAppVersionTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appTemplateBody: __expectString,
        appVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeDraftAppVersionResourcesImportStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        errorMessage: __expectString,
        status: __expectString,
        statusChangeTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeResiliencyPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: (_) => de_ResiliencyPolicy(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ImportResourcesToDraftAppVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        eksSources: _json,
        sourceArns: _json,
        status: __expectString,
        terraformSources: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAlarmRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        alarmRecommendations: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppAssessmentComplianceDriftsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        complianceDrifts: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppAssessmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentSummaries: (_) => de_AppAssessmentSummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppComponentCompliancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        componentCompliances: (_) => de_ComponentCompliancesList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppComponentRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        componentRecommendations: (_) => de_ComponentRecommendationList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppInputSourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appInputSources: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appSummaries: (_) => de_AppSummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppVersionAppComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appComponents: _json,
        appVersion: __expectString,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppVersionResourceMappingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resourceMappings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppVersionResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        physicalResources: _json,
        resolutionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAppVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appVersions: (_) => de_AppVersionList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecommendationTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        recommendationTemplates: (_) => de_RecommendationTemplateList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListResiliencyPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resiliencyPolicies: (_) => de_ResiliencyPolicies(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSopRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        sopRecommendations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSuggestedResiliencyPoliciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resiliencyPolicies: (_) => de_ResiliencyPolicies(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTestRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        testRecommendations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListUnsupportedAppVersionResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        resolutionId: __expectString,
        unsupportedResources: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PublishAppVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        identifier: __expectLong,
        versionName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutDraftAppVersionTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RemoveDraftAppVersionResourceMappingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ResolveAppVersionResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        resolutionId: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartAppAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessment: (_) => de_AppAssessment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAppCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        app: (_) => de_App(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAppVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        additionalInfo: _json,
        appArn: __expectString,
        appVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAppVersionAppComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appComponent: _json,
        appVersion: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAppVersionResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        appArn: __expectString,
        appVersion: __expectString,
        physicalResource: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateResiliencyPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        policy: (_) => de_ResiliencyPolicy(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.resiliencehub#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.resiliencehub#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.resiliencehub#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.resiliencehub#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.resiliencehub#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.resiliencehub#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.resiliencehub#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        retryAfterSeconds: __expectInt32,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_App = (output, context) => {
    return take(output, {
        appArn: __expectString,
        assessmentSchedule: __expectString,
        complianceStatus: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        driftStatus: __expectString,
        eventSubscriptions: _json,
        lastAppComplianceEvaluationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDriftEvaluationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastResiliencyScoreEvaluationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        permissionModel: _json,
        policyArn: __expectString,
        resiliencyScore: __limitedParseDouble,
        rpoInSecs: __expectInt32,
        rtoInSecs: __expectInt32,
        status: __expectString,
        tags: _json,
    });
};
const de_AppAssessment = (output, context) => {
    return take(output, {
        appArn: __expectString,
        appVersion: __expectString,
        assessmentArn: __expectString,
        assessmentName: __expectString,
        assessmentStatus: __expectString,
        compliance: _json,
        complianceStatus: __expectString,
        cost: (_) => de_Cost(_, context),
        driftStatus: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        invoker: __expectString,
        message: __expectString,
        policy: (_) => de_ResiliencyPolicy(_, context),
        resiliencyScore: (_) => de_ResiliencyScore(_, context),
        resourceErrorsDetails: _json,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        tags: _json,
        versionName: __expectString,
    });
};
const de_AppAssessmentSummary = (output, context) => {
    return take(output, {
        appArn: __expectString,
        appVersion: __expectString,
        assessmentArn: __expectString,
        assessmentName: __expectString,
        assessmentStatus: __expectString,
        complianceStatus: __expectString,
        cost: (_) => de_Cost(_, context),
        driftStatus: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        invoker: __expectString,
        message: __expectString,
        resiliencyScore: __limitedParseDouble,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        versionName: __expectString,
    });
};
const de_AppAssessmentSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppAssessmentSummary(entry, context);
    });
    return retVal;
};
const de_AppComponentCompliance = (output, context) => {
    return take(output, {
        appComponentName: __expectString,
        compliance: _json,
        cost: (_) => de_Cost(_, context),
        message: __expectString,
        resiliencyScore: (_) => de_ResiliencyScore(_, context),
        status: __expectString,
    });
};
const de_AppSummary = (output, context) => {
    return take(output, {
        appArn: __expectString,
        assessmentSchedule: __expectString,
        complianceStatus: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        driftStatus: __expectString,
        lastAppComplianceEvaluationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        resiliencyScore: __limitedParseDouble,
        rpoInSecs: __expectInt32,
        rtoInSecs: __expectInt32,
        status: __expectString,
    });
};
const de_AppSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppSummary(entry, context);
    });
    return retVal;
};
const de_AppVersionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppVersionSummary(entry, context);
    });
    return retVal;
};
const de_AppVersionSummary = (output, context) => {
    return take(output, {
        appVersion: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        identifier: __expectLong,
        versionName: __expectString,
    });
};
const de_ComponentCompliancesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppComponentCompliance(entry, context);
    });
    return retVal;
};
const de_ComponentRecommendation = (output, context) => {
    return take(output, {
        appComponentName: __expectString,
        configRecommendations: (_) => de_ConfigRecommendationList(_, context),
        recommendationStatus: __expectString,
    });
};
const de_ComponentRecommendationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComponentRecommendation(entry, context);
    });
    return retVal;
};
const de_ConfigRecommendation = (output, context) => {
    return take(output, {
        appComponentName: __expectString,
        compliance: _json,
        cost: (_) => de_Cost(_, context),
        description: __expectString,
        haArchitecture: __expectString,
        name: __expectString,
        optimizationType: __expectString,
        recommendationCompliance: _json,
        referenceId: __expectString,
        suggestedChanges: _json,
    });
};
const de_ConfigRecommendationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigRecommendation(entry, context);
    });
    return retVal;
};
const de_Cost = (output, context) => {
    return take(output, {
        amount: __limitedParseDouble,
        currency: __expectString,
        frequency: __expectString,
    });
};
const de_DisruptionResiliencyScore = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __limitedParseDouble(value);
        return acc;
    }, {});
};
const de_RecommendationTemplate = (output, context) => {
    return take(output, {
        appArn: __expectString,
        assessmentArn: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        format: __expectString,
        message: __expectString,
        name: __expectString,
        needsReplacements: __expectBoolean,
        recommendationIds: _json,
        recommendationTemplateArn: __expectString,
        recommendationTypes: _json,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        tags: _json,
        templatesLocation: _json,
    });
};
const de_RecommendationTemplateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecommendationTemplate(entry, context);
    });
    return retVal;
};
const de_ResiliencyPolicies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResiliencyPolicy(entry, context);
    });
    return retVal;
};
const de_ResiliencyPolicy = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dataLocationConstraint: __expectString,
        estimatedCostTier: __expectString,
        policy: _json,
        policyArn: __expectString,
        policyDescription: __expectString,
        policyName: __expectString,
        tags: _json,
        tier: __expectString,
    });
};
const de_ResiliencyScore = (output, context) => {
    return take(output, {
        componentScore: (_) => de_ScoringComponentResiliencyScores(_, context),
        disruptionScore: (_) => de_DisruptionResiliencyScore(_, context),
        score: __limitedParseDouble,
    });
};
const de_ScoringComponentResiliencyScore = (output, context) => {
    return take(output, {
        excludedCount: __expectLong,
        outstandingCount: __expectLong,
        possibleScore: __limitedParseDouble,
        score: __limitedParseDouble,
    });
};
const de_ScoringComponentResiliencyScores = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ScoringComponentResiliencyScore(value, context);
        return acc;
    }, {});
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _aA = "appArn";
const _aAs = "assessmentArn";
const _aN = "assessmentName";
const _aS = "assessmentStatus";
const _cS = "complianceStatus";
const _fLAT = "fromLastAssessmentTime";
const _i = "invoker";
const _mR = "maxResults";
const _n = "name";
const _nT = "nextToken";
const _pN = "policyName";
const _rO = "reverseOrder";
const _rTA = "recommendationTemplateArn";
const _s = "status";
const _tK = "tagKeys";
const _tLAT = "toLastAssessmentTime";
