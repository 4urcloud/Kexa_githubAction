import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { AppRunnerServiceException as __BaseException } from "./AppRunnerServiceException";
export const CertificateValidationRecordStatus = {
    FAILED: "FAILED",
    PENDING_VALIDATION: "PENDING_VALIDATION",
    SUCCESS: "SUCCESS",
};
export const CustomDomainAssociationStatus = {
    ACTIVE: "ACTIVE",
    BINDING_CERTIFICATE: "BINDING_CERTIFICATE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
    PENDING_CERTIFICATE_DNS_VALIDATION: "PENDING_CERTIFICATE_DNS_VALIDATION",
};
export class InternalServiceErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceErrorException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStateException.prototype);
        this.Message = opts.Message;
    }
}
export const AutoScalingConfigurationStatus = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const ProviderType = {
    BITBUCKET: "BITBUCKET",
    GITHUB: "GITHUB",
};
export const ConnectionStatus = {
    AVAILABLE: "AVAILABLE",
    DELETED: "DELETED",
    ERROR: "ERROR",
    PENDING_HANDSHAKE: "PENDING_HANDSHAKE",
};
export const TracingVendor = {
    AWSXRAY: "AWSXRAY",
};
export const ObservabilityConfigurationStatus = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
export const HealthCheckProtocol = {
    HTTP: "HTTP",
    TCP: "TCP",
};
export const EgressType = {
    DEFAULT: "DEFAULT",
    VPC: "VPC",
};
export const IpAddressType = {
    DUAL_STACK: "DUAL_STACK",
    IPV4: "IPV4",
};
export const Runtime = {
    CORRETTO_11: "CORRETTO_11",
    CORRETTO_8: "CORRETTO_8",
    DOTNET_6: "DOTNET_6",
    GO_1: "GO_1",
    NODEJS_12: "NODEJS_12",
    NODEJS_14: "NODEJS_14",
    NODEJS_16: "NODEJS_16",
    NODEJS_18: "NODEJS_18",
    PHP_81: "PHP_81",
    PYTHON_3: "PYTHON_3",
    PYTHON_311: "PYTHON_311",
    RUBY_31: "RUBY_31",
};
export const ConfigurationSource = {
    API: "API",
    REPOSITORY: "REPOSITORY",
};
export const SourceCodeVersionType = {
    BRANCH: "BRANCH",
};
export const ImageRepositoryType = {
    ECR: "ECR",
    ECR_PUBLIC: "ECR_PUBLIC",
};
export const ServiceStatus = {
    CREATE_FAILED: "CREATE_FAILED",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    OPERATION_IN_PROGRESS: "OPERATION_IN_PROGRESS",
    PAUSED: "PAUSED",
    RUNNING: "RUNNING",
};
export const VpcConnectorStatus = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
export const VpcIngressConnectionStatus = {
    AVAILABLE: "AVAILABLE",
    DELETED: "DELETED",
    FAILED_CREATION: "FAILED_CREATION",
    FAILED_DELETION: "FAILED_DELETION",
    FAILED_UPDATE: "FAILED_UPDATE",
    PENDING_CREATION: "PENDING_CREATION",
    PENDING_DELETION: "PENDING_DELETION",
    PENDING_UPDATE: "PENDING_UPDATE",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const OperationStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
    ROLLBACK_FAILED: "ROLLBACK_FAILED",
    ROLLBACK_IN_PROGRESS: "ROLLBACK_IN_PROGRESS",
    ROLLBACK_SUCCEEDED: "ROLLBACK_SUCCEEDED",
    SUCCEEDED: "SUCCEEDED",
};
export const OperationType = {
    CREATE_SERVICE: "CREATE_SERVICE",
    DELETE_SERVICE: "DELETE_SERVICE",
    PAUSE_SERVICE: "PAUSE_SERVICE",
    RESUME_SERVICE: "RESUME_SERVICE",
    START_DEPLOYMENT: "START_DEPLOYMENT",
    UPDATE_SERVICE: "UPDATE_SERVICE",
};
export const CodeConfigurationValuesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BuildCommand && { BuildCommand: SENSITIVE_STRING }),
    ...(obj.StartCommand && { StartCommand: SENSITIVE_STRING }),
    ...(obj.RuntimeEnvironmentVariables && { RuntimeEnvironmentVariables: SENSITIVE_STRING }),
    ...(obj.RuntimeEnvironmentSecrets && { RuntimeEnvironmentSecrets: SENSITIVE_STRING }),
});
export const CodeConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CodeConfigurationValues && {
        CodeConfigurationValues: CodeConfigurationValuesFilterSensitiveLog(obj.CodeConfigurationValues),
    }),
});
export const CodeRepositoryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CodeConfiguration && { CodeConfiguration: CodeConfigurationFilterSensitiveLog(obj.CodeConfiguration) }),
});
export const ImageConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RuntimeEnvironmentVariables && { RuntimeEnvironmentVariables: SENSITIVE_STRING }),
    ...(obj.StartCommand && { StartCommand: SENSITIVE_STRING }),
    ...(obj.RuntimeEnvironmentSecrets && { RuntimeEnvironmentSecrets: SENSITIVE_STRING }),
});
export const ImageRepositoryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImageConfiguration && { ImageConfiguration: ImageConfigurationFilterSensitiveLog(obj.ImageConfiguration) }),
});
export const SourceConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.CodeRepository && { CodeRepository: CodeRepositoryFilterSensitiveLog(obj.CodeRepository) }),
    ...(obj.ImageRepository && { ImageRepository: ImageRepositoryFilterSensitiveLog(obj.ImageRepository) }),
});
export const CreateServiceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SourceConfiguration && {
        SourceConfiguration: SourceConfigurationFilterSensitiveLog(obj.SourceConfiguration),
    }),
});
export const ServiceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SourceConfiguration && {
        SourceConfiguration: SourceConfigurationFilterSensitiveLog(obj.SourceConfiguration),
    }),
});
export const CreateServiceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Service && { Service: ServiceFilterSensitiveLog(obj.Service) }),
});
export const DeleteServiceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Service && { Service: ServiceFilterSensitiveLog(obj.Service) }),
});
export const DescribeServiceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Service && { Service: ServiceFilterSensitiveLog(obj.Service) }),
});
export const PauseServiceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Service && { Service: ServiceFilterSensitiveLog(obj.Service) }),
});
export const ResumeServiceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Service && { Service: ServiceFilterSensitiveLog(obj.Service) }),
});
export const UpdateServiceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SourceConfiguration && {
        SourceConfiguration: SourceConfigurationFilterSensitiveLog(obj.SourceConfiguration),
    }),
});
export const UpdateServiceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Service && { Service: ServiceFilterSensitiveLog(obj.Service) }),
});
