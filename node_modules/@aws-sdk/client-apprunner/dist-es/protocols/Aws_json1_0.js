import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { AppRunnerServiceException as __BaseException } from "../models/AppRunnerServiceException";
import { InternalServiceErrorException, InvalidRequestException, InvalidStateException, ResourceNotFoundException, ServiceQuotaExceededException, } from "../models/models_0";
export const se_AssociateCustomDomainCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateCustomDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAutoScalingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAutoScalingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateObservabilityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateObservabilityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateServiceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcConnectorCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVpcConnector");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVpcIngressConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVpcIngressConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAutoScalingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAutoScalingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteObservabilityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteObservabilityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteServiceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcConnectorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVpcConnector");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVpcIngressConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVpcIngressConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAutoScalingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAutoScalingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCustomDomainsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCustomDomains");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeObservabilityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeObservabilityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeServiceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcConnectorCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeVpcConnector");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVpcIngressConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeVpcIngressConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateCustomDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateCustomDomain");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAutoScalingConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAutoScalingConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListConnectionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListConnections");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListObservabilityConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListObservabilityConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListOperationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOperations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListServices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServicesForAutoScalingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("ListServicesForAutoScalingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListVpcConnectorsCommand = async (input, context) => {
    const headers = sharedHeaders("ListVpcConnectors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListVpcIngressConnectionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListVpcIngressConnections");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PauseServiceCommand = async (input, context) => {
    const headers = sharedHeaders("PauseService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResumeServiceCommand = async (input, context) => {
    const headers = sharedHeaders("ResumeService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("StartDeployment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDefaultAutoScalingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDefaultAutoScalingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateServiceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateVpcIngressConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateVpcIngressConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateCustomDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAutoScalingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAutoScalingConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateConnectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateObservabilityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateObservabilityConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateVpcConnectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcConnectorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateVpcIngressConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcIngressConnectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAutoScalingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAutoScalingConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteConnectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteObservabilityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteObservabilityConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteVpcConnectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcConnectorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteVpcIngressConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcIngressConnectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAutoScalingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutoScalingConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCustomDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeObservabilityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeObservabilityConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeVpcConnectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcConnectorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeVpcIngressConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcIngressConnectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateCustomDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAutoScalingConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAutoScalingConfigurationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListConnectionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListObservabilityConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListOperationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListOperationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServicesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServicesForAutoScalingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListVpcConnectorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListVpcConnectorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListVpcIngressConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PauseServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PauseServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResumeServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResumeServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDefaultAutoScalingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDefaultAutoScalingConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateServiceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateVpcIngressConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateVpcIngressConnectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceErrorException":
        case "com.amazonaws.apprunner#InternalServiceErrorException":
            throw await de_InternalServiceErrorExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.apprunner#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidStateException":
        case "com.amazonaws.apprunner#InvalidStateException":
            throw await de_InvalidStateExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.apprunner#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.apprunner#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InternalServiceErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServiceErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AutoScalingConfiguration = (output, context) => {
    return take(output, {
        AutoScalingConfigurationArn: __expectString,
        AutoScalingConfigurationName: __expectString,
        AutoScalingConfigurationRevision: __expectInt32,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HasAssociatedService: __expectBoolean,
        IsDefault: __expectBoolean,
        Latest: __expectBoolean,
        MaxConcurrency: __expectInt32,
        MaxSize: __expectInt32,
        MinSize: __expectInt32,
        Status: __expectString,
    });
};
const de_AutoScalingConfigurationSummary = (output, context) => {
    return take(output, {
        AutoScalingConfigurationArn: __expectString,
        AutoScalingConfigurationName: __expectString,
        AutoScalingConfigurationRevision: __expectInt32,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HasAssociatedService: __expectBoolean,
        IsDefault: __expectBoolean,
        Status: __expectString,
    });
};
const de_AutoScalingConfigurationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoScalingConfigurationSummary(entry, context);
    });
    return retVal;
};
const de_Connection = (output, context) => {
    return take(output, {
        ConnectionArn: __expectString,
        ConnectionName: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProviderType: __expectString,
        Status: __expectString,
    });
};
const de_ConnectionSummary = (output, context) => {
    return take(output, {
        ConnectionArn: __expectString,
        ConnectionName: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ProviderType: __expectString,
        Status: __expectString,
    });
};
const de_ConnectionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConnectionSummary(entry, context);
    });
    return retVal;
};
const de_CreateAutoScalingConfigurationResponse = (output, context) => {
    return take(output, {
        AutoScalingConfiguration: (_) => de_AutoScalingConfiguration(_, context),
    });
};
const de_CreateConnectionResponse = (output, context) => {
    return take(output, {
        Connection: (_) => de_Connection(_, context),
    });
};
const de_CreateObservabilityConfigurationResponse = (output, context) => {
    return take(output, {
        ObservabilityConfiguration: (_) => de_ObservabilityConfiguration(_, context),
    });
};
const de_CreateServiceResponse = (output, context) => {
    return take(output, {
        OperationId: __expectString,
        Service: (_) => de_Service(_, context),
    });
};
const de_CreateVpcConnectorResponse = (output, context) => {
    return take(output, {
        VpcConnector: (_) => de_VpcConnector(_, context),
    });
};
const de_CreateVpcIngressConnectionResponse = (output, context) => {
    return take(output, {
        VpcIngressConnection: (_) => de_VpcIngressConnection(_, context),
    });
};
const de_DeleteAutoScalingConfigurationResponse = (output, context) => {
    return take(output, {
        AutoScalingConfiguration: (_) => de_AutoScalingConfiguration(_, context),
    });
};
const de_DeleteConnectionResponse = (output, context) => {
    return take(output, {
        Connection: (_) => de_Connection(_, context),
    });
};
const de_DeleteObservabilityConfigurationResponse = (output, context) => {
    return take(output, {
        ObservabilityConfiguration: (_) => de_ObservabilityConfiguration(_, context),
    });
};
const de_DeleteServiceResponse = (output, context) => {
    return take(output, {
        OperationId: __expectString,
        Service: (_) => de_Service(_, context),
    });
};
const de_DeleteVpcConnectorResponse = (output, context) => {
    return take(output, {
        VpcConnector: (_) => de_VpcConnector(_, context),
    });
};
const de_DeleteVpcIngressConnectionResponse = (output, context) => {
    return take(output, {
        VpcIngressConnection: (_) => de_VpcIngressConnection(_, context),
    });
};
const de_DescribeAutoScalingConfigurationResponse = (output, context) => {
    return take(output, {
        AutoScalingConfiguration: (_) => de_AutoScalingConfiguration(_, context),
    });
};
const de_DescribeObservabilityConfigurationResponse = (output, context) => {
    return take(output, {
        ObservabilityConfiguration: (_) => de_ObservabilityConfiguration(_, context),
    });
};
const de_DescribeServiceResponse = (output, context) => {
    return take(output, {
        Service: (_) => de_Service(_, context),
    });
};
const de_DescribeVpcConnectorResponse = (output, context) => {
    return take(output, {
        VpcConnector: (_) => de_VpcConnector(_, context),
    });
};
const de_DescribeVpcIngressConnectionResponse = (output, context) => {
    return take(output, {
        VpcIngressConnection: (_) => de_VpcIngressConnection(_, context),
    });
};
const de_ListAutoScalingConfigurationsResponse = (output, context) => {
    return take(output, {
        AutoScalingConfigurationSummaryList: (_) => de_AutoScalingConfigurationSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListConnectionsResponse = (output, context) => {
    return take(output, {
        ConnectionSummaryList: (_) => de_ConnectionSummaryList(_, context),
        NextToken: __expectString,
    });
};
const de_ListOperationsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        OperationSummaryList: (_) => de_OperationSummaryList(_, context),
    });
};
const de_ListServicesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ServiceSummaryList: (_) => de_ServiceSummaryList(_, context),
    });
};
const de_ListVpcConnectorsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        VpcConnectors: (_) => de_VpcConnectors(_, context),
    });
};
const de_ObservabilityConfiguration = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Latest: __expectBoolean,
        ObservabilityConfigurationArn: __expectString,
        ObservabilityConfigurationName: __expectString,
        ObservabilityConfigurationRevision: __expectInt32,
        Status: __expectString,
        TraceConfiguration: _json,
    });
};
const de_OperationSummary = (output, context) => {
    return take(output, {
        EndedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Id: __expectString,
        StartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        TargetArn: __expectString,
        Type: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_OperationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OperationSummary(entry, context);
    });
    return retVal;
};
const de_PauseServiceResponse = (output, context) => {
    return take(output, {
        OperationId: __expectString,
        Service: (_) => de_Service(_, context),
    });
};
const de_ResumeServiceResponse = (output, context) => {
    return take(output, {
        OperationId: __expectString,
        Service: (_) => de_Service(_, context),
    });
};
const de_Service = (output, context) => {
    return take(output, {
        AutoScalingConfigurationSummary: (_) => de_AutoScalingConfigurationSummary(_, context),
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EncryptionConfiguration: _json,
        HealthCheckConfiguration: _json,
        InstanceConfiguration: _json,
        NetworkConfiguration: _json,
        ObservabilityConfiguration: _json,
        ServiceArn: __expectString,
        ServiceId: __expectString,
        ServiceName: __expectString,
        ServiceUrl: __expectString,
        SourceConfiguration: _json,
        Status: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ServiceSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ServiceArn: __expectString,
        ServiceId: __expectString,
        ServiceName: __expectString,
        ServiceUrl: __expectString,
        Status: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ServiceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceSummary(entry, context);
    });
    return retVal;
};
const de_UpdateDefaultAutoScalingConfigurationResponse = (output, context) => {
    return take(output, {
        AutoScalingConfiguration: (_) => de_AutoScalingConfiguration(_, context),
    });
};
const de_UpdateServiceResponse = (output, context) => {
    return take(output, {
        OperationId: __expectString,
        Service: (_) => de_Service(_, context),
    });
};
const de_UpdateVpcIngressConnectionResponse = (output, context) => {
    return take(output, {
        VpcIngressConnection: (_) => de_VpcIngressConnection(_, context),
    });
};
const de_VpcConnector = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SecurityGroups: _json,
        Status: __expectString,
        Subnets: _json,
        VpcConnectorArn: __expectString,
        VpcConnectorName: __expectString,
        VpcConnectorRevision: __expectInt32,
    });
};
const de_VpcConnectors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcConnector(entry, context);
    });
    return retVal;
};
const de_VpcIngressConnection = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DomainName: __expectString,
        IngressVpcConfiguration: _json,
        ServiceArn: __expectString,
        Status: __expectString,
        VpcIngressConnectionArn: __expectString,
        VpcIngressConnectionName: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `AppRunner.${operation}`,
    };
}
