import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { FMSServiceException as __BaseException } from "./FMSServiceException";
export declare const AccountRoleStatus: {
  readonly Creating: "CREATING";
  readonly Deleted: "DELETED";
  readonly Deleting: "DELETING";
  readonly PendingDeletion: "PENDING_DELETION";
  readonly Ready: "READY";
};
export type AccountRoleStatus =
  (typeof AccountRoleStatus)[keyof typeof AccountRoleStatus];
export interface AccountScope {
  Accounts?: string[];
  AllAccountsEnabled?: boolean;
  ExcludeSpecifiedAccounts?: boolean;
}
export interface ActionTarget {
  ResourceId?: string;
  Description?: string;
}
export declare const OrganizationStatus: {
  readonly Offboarding: "OFFBOARDING";
  readonly OffboardingComplete: "OFFBOARDING_COMPLETE";
  readonly Onboarding: "ONBOARDING";
  readonly OnboardingComplete: "ONBOARDING_COMPLETE";
};
export type OrganizationStatus =
  (typeof OrganizationStatus)[keyof typeof OrganizationStatus];
export interface AdminAccountSummary {
  AdminAccount?: string;
  DefaultAdmin?: boolean;
  Status?: OrganizationStatus;
}
export interface OrganizationalUnitScope {
  OrganizationalUnits?: string[];
  AllOrganizationalUnitsEnabled?: boolean;
  ExcludeSpecifiedOrganizationalUnits?: boolean;
}
export declare const SecurityServiceType: {
  readonly DNS_FIREWALL: "DNS_FIREWALL";
  readonly IMPORT_NETWORK_FIREWALL: "IMPORT_NETWORK_FIREWALL";
  readonly NETWORK_FIREWALL: "NETWORK_FIREWALL";
  readonly SECURITY_GROUPS_COMMON: "SECURITY_GROUPS_COMMON";
  readonly SECURITY_GROUPS_CONTENT_AUDIT: "SECURITY_GROUPS_CONTENT_AUDIT";
  readonly SECURITY_GROUPS_USAGE_AUDIT: "SECURITY_GROUPS_USAGE_AUDIT";
  readonly SHIELD_ADVANCED: "SHIELD_ADVANCED";
  readonly THIRD_PARTY_FIREWALL: "THIRD_PARTY_FIREWALL";
  readonly WAF: "WAF";
  readonly WAFV2: "WAFV2";
};
export type SecurityServiceType =
  (typeof SecurityServiceType)[keyof typeof SecurityServiceType];
export interface PolicyTypeScope {
  PolicyTypes?: SecurityServiceType[];
  AllPolicyTypesEnabled?: boolean;
}
export interface RegionScope {
  Regions?: string[];
  AllRegionsEnabled?: boolean;
}
export interface AdminScope {
  AccountScope?: AccountScope;
  OrganizationalUnitScope?: OrganizationalUnitScope;
  RegionScope?: RegionScope;
  PolicyTypeScope?: PolicyTypeScope;
}
export interface App {
  AppName: string | undefined;
  Protocol: string | undefined;
  Port: number | undefined;
}
export interface AppsListData {
  ListId?: string;
  ListName: string | undefined;
  ListUpdateToken?: string;
  CreateTime?: Date;
  LastUpdateTime?: Date;
  AppsList: App[] | undefined;
  PreviousAppsList?: Record<string, App[]>;
}
export interface AppsListDataSummary {
  ListArn?: string;
  ListId?: string;
  ListName?: string;
  AppsList?: App[];
}
export interface AssociateAdminAccountRequest {
  AdminAccount: string | undefined;
}
export declare class InternalErrorException extends __BaseException {
  readonly name: "InternalErrorException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalErrorException, __BaseException>
  );
}
export declare class InvalidInputException extends __BaseException {
  readonly name: "InvalidInputException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidInputException, __BaseException>
  );
}
export declare class InvalidOperationException extends __BaseException {
  readonly name: "InvalidOperationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidOperationException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare const ThirdPartyFirewall: {
  readonly FORTIGATE_CLOUD_NATIVE_FIREWALL: "FORTIGATE_CLOUD_NATIVE_FIREWALL";
  readonly PALO_ALTO_NETWORKS_CLOUD_NGFW: "PALO_ALTO_NETWORKS_CLOUD_NGFW";
};
export type ThirdPartyFirewall =
  (typeof ThirdPartyFirewall)[keyof typeof ThirdPartyFirewall];
export interface AssociateThirdPartyFirewallRequest {
  ThirdPartyFirewall: ThirdPartyFirewall | undefined;
}
export declare const ThirdPartyFirewallAssociationStatus: {
  readonly NOT_EXIST: "NOT_EXIST";
  readonly OFFBOARDING: "OFFBOARDING";
  readonly OFFBOARD_COMPLETE: "OFFBOARD_COMPLETE";
  readonly ONBOARDING: "ONBOARDING";
  readonly ONBOARD_COMPLETE: "ONBOARD_COMPLETE";
};
export type ThirdPartyFirewallAssociationStatus =
  (typeof ThirdPartyFirewallAssociationStatus)[keyof typeof ThirdPartyFirewallAssociationStatus];
export interface AssociateThirdPartyFirewallResponse {
  ThirdPartyFirewallStatus?: ThirdPartyFirewallAssociationStatus;
}
export interface AwsEc2NetworkInterfaceViolation {
  ViolationTarget?: string;
  ViolatingSecurityGroups?: string[];
}
export interface AwsEc2InstanceViolation {
  ViolationTarget?: string;
  AwsEc2NetworkInterfaceViolations?: AwsEc2NetworkInterfaceViolation[];
}
export interface BatchAssociateResourceRequest {
  ResourceSetIdentifier: string | undefined;
  Items: string[] | undefined;
}
export declare const FailedItemReason: {
  readonly NotValidAccountId: "NOT_VALID_ACCOUNT_ID";
  readonly NotValidArn: "NOT_VALID_ARN";
  readonly NotValidPartition: "NOT_VALID_PARTITION";
  readonly NotValidRegion: "NOT_VALID_REGION";
  readonly NotValidResourceType: "NOT_VALID_RESOURCE_TYPE";
  readonly NotValidService: "NOT_VALID_SERVICE";
};
export type FailedItemReason =
  (typeof FailedItemReason)[keyof typeof FailedItemReason];
export interface FailedItem {
  URI?: string;
  Reason?: FailedItemReason;
}
export interface BatchAssociateResourceResponse {
  ResourceSetIdentifier: string | undefined;
  FailedItems: FailedItem[] | undefined;
}
export interface BatchDisassociateResourceRequest {
  ResourceSetIdentifier: string | undefined;
  Items: string[] | undefined;
}
export interface BatchDisassociateResourceResponse {
  ResourceSetIdentifier: string | undefined;
  FailedItems: FailedItem[] | undefined;
}
export interface DeleteAppsListRequest {
  ListId: string | undefined;
}
export interface DeleteNotificationChannelRequest {}
export interface DeletePolicyRequest {
  PolicyId: string | undefined;
  DeleteAllPolicyResources?: boolean;
}
export interface DeleteProtocolsListRequest {
  ListId: string | undefined;
}
export interface DeleteResourceSetRequest {
  Identifier: string | undefined;
}
export interface DisassociateAdminAccountRequest {}
export interface DisassociateThirdPartyFirewallRequest {
  ThirdPartyFirewall: ThirdPartyFirewall | undefined;
}
export interface DisassociateThirdPartyFirewallResponse {
  ThirdPartyFirewallStatus?: ThirdPartyFirewallAssociationStatus;
}
export interface GetAdminAccountRequest {}
export interface GetAdminAccountResponse {
  AdminAccount?: string;
  RoleStatus?: AccountRoleStatus;
}
export interface GetAdminScopeRequest {
  AdminAccount: string | undefined;
}
export interface GetAdminScopeResponse {
  AdminScope?: AdminScope;
  Status?: OrganizationStatus;
}
export interface GetAppsListRequest {
  ListId: string | undefined;
  DefaultList?: boolean;
}
export interface GetAppsListResponse {
  AppsList?: AppsListData;
  AppsListArn?: string;
}
export interface GetComplianceDetailRequest {
  PolicyId: string | undefined;
  MemberAccount: string | undefined;
}
export declare const DependentServiceName: {
  readonly AWSConfig: "AWSCONFIG";
  readonly AWSShieldAdvanced: "AWSSHIELD_ADVANCED";
  readonly AWSVirtualPrivateCloud: "AWSVPC";
  readonly AWSWAF: "AWSWAF";
};
export type DependentServiceName =
  (typeof DependentServiceName)[keyof typeof DependentServiceName];
export declare const ViolationReason: {
  readonly BlackHoleRouteDetected: "BLACK_HOLE_ROUTE_DETECTED";
  readonly BlackHoleRouteDetectedInFirewallSubnet: "BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET";
  readonly FMSCreatedSecurityGroupEdited: "FMS_CREATED_SECURITY_GROUP_EDITED";
  readonly FirewallSubnetIsOutOfScope: "FIREWALL_SUBNET_IS_OUT_OF_SCOPE";
  readonly FirewallSubnetMissingExpectedRoute: "FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE";
  readonly FirewallSubnetMissingVPCEndpoint: "FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT";
  readonly InternetGatewayMissingExpectedRoute: "INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE";
  readonly InternetTrafficNotInspected: "INTERNET_TRAFFIC_NOT_INSPECTED";
  readonly InvalidRouteConfiguration: "INVALID_ROUTE_CONFIGURATION";
  readonly MissingExpectedRouteTable: "MISSING_EXPECTED_ROUTE_TABLE";
  readonly MissingFirewall: "MISSING_FIREWALL";
  readonly MissingFirewallSubnetInAZ: "MISSING_FIREWALL_SUBNET_IN_AZ";
  readonly MissingTargetGateway: "MISSING_TARGET_GATEWAY";
  readonly NetworkFirewallPolicyModified: "NETWORK_FIREWALL_POLICY_MODIFIED";
  readonly ResourceIncorrectWebAcl: "RESOURCE_INCORRECT_WEB_ACL";
  readonly ResourceMissingDnsFirewall: "RESOURCE_MISSING_DNS_FIREWALL";
  readonly ResourceMissingSecurityGroup: "RESOURCE_MISSING_SECURITY_GROUP";
  readonly ResourceMissingShieldProtection: "RESOURCE_MISSING_SHIELD_PROTECTION";
  readonly ResourceMissingWebAcl: "RESOURCE_MISSING_WEB_ACL";
  readonly ResourceMissingWebaclOrShieldProtection: "RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION";
  readonly ResourceViolatesAuditSecurityGroup: "RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP";
  readonly RouteHasOutOfScopeEndpoint: "ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT";
  readonly SecurityGroupRedundant: "SECURITY_GROUP_REDUNDANT";
  readonly SecurityGroupUnused: "SECURITY_GROUP_UNUSED";
  readonly TrafficInspectionCrossesAZBoundary: "TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY";
  readonly UnexpectedFirewallRoutes: "UNEXPECTED_FIREWALL_ROUTES";
  readonly UnexpectedTargetGatewayRoutes: "UNEXPECTED_TARGET_GATEWAY_ROUTES";
  readonly WebAclMissingRuleGroup: "WEB_ACL_MISSING_RULE_GROUP";
};
export type ViolationReason =
  (typeof ViolationReason)[keyof typeof ViolationReason];
export interface ComplianceViolator {
  ResourceId?: string;
  ViolationReason?: ViolationReason;
  ResourceType?: string;
  Metadata?: Record<string, string>;
}
export interface PolicyComplianceDetail {
  PolicyOwner?: string;
  PolicyId?: string;
  MemberAccount?: string;
  Violators?: ComplianceViolator[];
  EvaluationLimitExceeded?: boolean;
  ExpiredAt?: Date;
  IssueInfoMap?: Partial<Record<DependentServiceName, string>>;
}
export interface GetComplianceDetailResponse {
  PolicyComplianceDetail?: PolicyComplianceDetail;
}
export interface GetNotificationChannelRequest {}
export interface GetNotificationChannelResponse {
  SnsTopicArn?: string;
  SnsRoleName?: string;
}
export interface GetPolicyRequest {
  PolicyId: string | undefined;
}
export declare const CustomerPolicyScopeIdType: {
  readonly ACCOUNT: "ACCOUNT";
  readonly ORG_UNIT: "ORG_UNIT";
};
export type CustomerPolicyScopeIdType =
  (typeof CustomerPolicyScopeIdType)[keyof typeof CustomerPolicyScopeIdType];
export declare const CustomerPolicyStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly OUT_OF_ADMIN_SCOPE: "OUT_OF_ADMIN_SCOPE";
};
export type CustomerPolicyStatus =
  (typeof CustomerPolicyStatus)[keyof typeof CustomerPolicyStatus];
export interface ResourceTag {
  Key: string | undefined;
  Value?: string;
}
export declare const FirewallDeploymentModel: {
  readonly CENTRALIZED: "CENTRALIZED";
  readonly DISTRIBUTED: "DISTRIBUTED";
};
export type FirewallDeploymentModel =
  (typeof FirewallDeploymentModel)[keyof typeof FirewallDeploymentModel];
export interface NetworkFirewallPolicy {
  FirewallDeploymentModel?: FirewallDeploymentModel;
}
export interface ThirdPartyFirewallPolicy {
  FirewallDeploymentModel?: FirewallDeploymentModel;
}
export interface PolicyOption {
  NetworkFirewallPolicy?: NetworkFirewallPolicy;
  ThirdPartyFirewallPolicy?: ThirdPartyFirewallPolicy;
}
export interface SecurityServicePolicyData {
  Type: SecurityServiceType | undefined;
  ManagedServiceData?: string;
  PolicyOption?: PolicyOption;
}
export interface Policy {
  PolicyId?: string;
  PolicyName: string | undefined;
  PolicyUpdateToken?: string;
  SecurityServicePolicyData: SecurityServicePolicyData | undefined;
  ResourceType: string | undefined;
  ResourceTypeList?: string[];
  ResourceTags?: ResourceTag[];
  ExcludeResourceTags: boolean | undefined;
  RemediationEnabled: boolean | undefined;
  DeleteUnusedFMManagedResources?: boolean;
  IncludeMap?: Partial<Record<CustomerPolicyScopeIdType, string[]>>;
  ExcludeMap?: Partial<Record<CustomerPolicyScopeIdType, string[]>>;
  ResourceSetIds?: string[];
  PolicyDescription?: string;
  PolicyStatus?: CustomerPolicyStatus;
}
export interface GetPolicyResponse {
  Policy?: Policy;
  PolicyArn?: string;
}
export declare class InvalidTypeException extends __BaseException {
  readonly name: "InvalidTypeException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidTypeException, __BaseException>
  );
}
export interface GetProtectionStatusRequest {
  PolicyId: string | undefined;
  MemberAccountId?: string;
  StartTime?: Date;
  EndTime?: Date;
  NextToken?: string;
  MaxResults?: number;
}
export interface GetProtectionStatusResponse {
  AdminAccountId?: string;
  ServiceType?: SecurityServiceType;
  Data?: string;
  NextToken?: string;
}
export interface GetProtocolsListRequest {
  ListId: string | undefined;
  DefaultList?: boolean;
}
export interface ProtocolsListData {
  ListId?: string;
  ListName: string | undefined;
  ListUpdateToken?: string;
  CreateTime?: Date;
  LastUpdateTime?: Date;
  ProtocolsList: string[] | undefined;
  PreviousProtocolsList?: Record<string, string[]>;
}
export interface GetProtocolsListResponse {
  ProtocolsList?: ProtocolsListData;
  ProtocolsListArn?: string;
}
export interface GetResourceSetRequest {
  Identifier: string | undefined;
}
export declare const ResourceSetStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly OUT_OF_ADMIN_SCOPE: "OUT_OF_ADMIN_SCOPE";
};
export type ResourceSetStatus =
  (typeof ResourceSetStatus)[keyof typeof ResourceSetStatus];
export interface ResourceSet {
  Id?: string;
  Name: string | undefined;
  Description?: string;
  UpdateToken?: string;
  ResourceTypeList: string[] | undefined;
  LastUpdateTime?: Date;
  ResourceSetStatus?: ResourceSetStatus;
}
export interface GetResourceSetResponse {
  ResourceSet: ResourceSet | undefined;
  ResourceSetArn: string | undefined;
}
export interface GetThirdPartyFirewallAssociationStatusRequest {
  ThirdPartyFirewall: ThirdPartyFirewall | undefined;
}
export declare const MarketplaceSubscriptionOnboardingStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly NOT_COMPLETE: "NOT_COMPLETE";
  readonly NO_SUBSCRIPTION: "NO_SUBSCRIPTION";
};
export type MarketplaceSubscriptionOnboardingStatus =
  (typeof MarketplaceSubscriptionOnboardingStatus)[keyof typeof MarketplaceSubscriptionOnboardingStatus];
export interface GetThirdPartyFirewallAssociationStatusResponse {
  ThirdPartyFirewallStatus?: ThirdPartyFirewallAssociationStatus;
  MarketplaceOnboardingStatus?: MarketplaceSubscriptionOnboardingStatus;
}
export interface GetViolationDetailsRequest {
  PolicyId: string | undefined;
  MemberAccount: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface PartialMatch {
  Reference?: string;
  TargetViolationReasons?: string[];
}
export declare const RemediationActionType: {
  readonly Modify: "MODIFY";
  readonly Remove: "REMOVE";
};
export type RemediationActionType =
  (typeof RemediationActionType)[keyof typeof RemediationActionType];
export interface SecurityGroupRuleDescription {
  IPV4Range?: string;
  IPV6Range?: string;
  PrefixListId?: string;
  Protocol?: string;
  FromPort?: number;
  ToPort?: number;
}
export interface SecurityGroupRemediationAction {
  RemediationActionType?: RemediationActionType;
  Description?: string;
  RemediationResult?: SecurityGroupRuleDescription;
  IsDefaultAction?: boolean;
}
export interface AwsVPCSecurityGroupViolation {
  ViolationTarget?: string;
  ViolationTargetDescription?: string;
  PartialMatches?: PartialMatch[];
  PossibleSecurityGroupRemediationActions?: SecurityGroupRemediationAction[];
}
export interface DnsDuplicateRuleGroupViolation {
  ViolationTarget?: string;
  ViolationTargetDescription?: string;
}
export interface DnsRuleGroupLimitExceededViolation {
  ViolationTarget?: string;
  ViolationTargetDescription?: string;
  NumberOfRuleGroupsAlreadyAssociated?: number;
}
export interface DnsRuleGroupPriorityConflictViolation {
  ViolationTarget?: string;
  ViolationTargetDescription?: string;
  ConflictingPriority?: number;
  ConflictingPolicyId?: string;
  UnavailablePriorities?: number[];
}
export interface FirewallSubnetIsOutOfScopeViolation {
  FirewallSubnetId?: string;
  VpcId?: string;
  SubnetAvailabilityZone?: string;
  SubnetAvailabilityZoneId?: string;
  VpcEndpointId?: string;
}
export interface FirewallSubnetMissingVPCEndpointViolation {
  FirewallSubnetId?: string;
  VpcId?: string;
  SubnetAvailabilityZone?: string;
  SubnetAvailabilityZoneId?: string;
}
export declare const DestinationType: {
  readonly IPV4: "IPV4";
  readonly IPV6: "IPV6";
  readonly PrefixList: "PREFIX_LIST";
};
export type DestinationType =
  (typeof DestinationType)[keyof typeof DestinationType];
export declare const TargetType: {
  readonly CarrierGateway: "CARRIER_GATEWAY";
  readonly EgressOnlyInternetGateway: "EGRESS_ONLY_INTERNET_GATEWAY";
  readonly Gateway: "GATEWAY";
  readonly Instance: "INSTANCE";
  readonly LocalGateway: "LOCAL_GATEWAY";
  readonly NatGateway: "NAT_GATEWAY";
  readonly NetworkInterface: "NETWORK_INTERFACE";
  readonly TransitGateway: "TRANSIT_GATEWAY";
  readonly VPCEndpoint: "VPC_ENDPOINT";
  readonly VPCPeeringConnection: "VPC_PEERING_CONNECTION";
};
export type TargetType = (typeof TargetType)[keyof typeof TargetType];
export interface Route {
  DestinationType?: DestinationType;
  TargetType?: TargetType;
  Destination?: string;
  Target?: string;
}
export interface NetworkFirewallBlackHoleRouteDetectedViolation {
  ViolationTarget?: string;
  RouteTableId?: string;
  VpcId?: string;
  ViolatingRoutes?: Route[];
}
export interface ExpectedRoute {
  IpV4Cidr?: string;
  PrefixListId?: string;
  IpV6Cidr?: string;
  ContributingSubnets?: string[];
  AllowedTargets?: string[];
  RouteTableId?: string;
}
export interface NetworkFirewallInternetTrafficNotInspectedViolation {
  SubnetId?: string;
  SubnetAvailabilityZone?: string;
  RouteTableId?: string;
  ViolatingRoutes?: Route[];
  IsRouteTableUsedInDifferentAZ?: boolean;
  CurrentFirewallSubnetRouteTable?: string;
  ExpectedFirewallEndpoint?: string;
  FirewallSubnetId?: string;
  ExpectedFirewallSubnetRoutes?: ExpectedRoute[];
  ActualFirewallSubnetRoutes?: Route[];
  InternetGatewayId?: string;
  CurrentInternetGatewayRouteTable?: string;
  ExpectedInternetGatewayRoutes?: ExpectedRoute[];
  ActualInternetGatewayRoutes?: Route[];
  VpcId?: string;
}
export interface NetworkFirewallInvalidRouteConfigurationViolation {
  AffectedSubnets?: string[];
  RouteTableId?: string;
  IsRouteTableUsedInDifferentAZ?: boolean;
  ViolatingRoute?: Route;
  CurrentFirewallSubnetRouteTable?: string;
  ExpectedFirewallEndpoint?: string;
  ActualFirewallEndpoint?: string;
  ExpectedFirewallSubnetId?: string;
  ActualFirewallSubnetId?: string;
  ExpectedFirewallSubnetRoutes?: ExpectedRoute[];
  ActualFirewallSubnetRoutes?: Route[];
  InternetGatewayId?: string;
  CurrentInternetGatewayRouteTable?: string;
  ExpectedInternetGatewayRoutes?: ExpectedRoute[];
  ActualInternetGatewayRoutes?: Route[];
  VpcId?: string;
}
export interface NetworkFirewallMissingExpectedRoutesViolation {
  ViolationTarget?: string;
  ExpectedRoutes?: ExpectedRoute[];
  VpcId?: string;
}
export interface NetworkFirewallMissingExpectedRTViolation {
  ViolationTarget?: string;
  VPC?: string;
  AvailabilityZone?: string;
  CurrentRouteTable?: string;
  ExpectedRouteTable?: string;
}
export interface NetworkFirewallMissingFirewallViolation {
  ViolationTarget?: string;
  VPC?: string;
  AvailabilityZone?: string;
  TargetViolationReason?: string;
}
export interface NetworkFirewallMissingSubnetViolation {
  ViolationTarget?: string;
  VPC?: string;
  AvailabilityZone?: string;
  TargetViolationReason?: string;
}
export declare const RuleOrder: {
  readonly DEFAULT_ACTION_ORDER: "DEFAULT_ACTION_ORDER";
  readonly STRICT_ORDER: "STRICT_ORDER";
};
export type RuleOrder = (typeof RuleOrder)[keyof typeof RuleOrder];
export interface StatefulEngineOptions {
  RuleOrder?: RuleOrder;
}
export declare const NetworkFirewallOverrideAction: {
  readonly DROP_TO_ALERT: "DROP_TO_ALERT";
};
export type NetworkFirewallOverrideAction =
  (typeof NetworkFirewallOverrideAction)[keyof typeof NetworkFirewallOverrideAction];
export interface NetworkFirewallStatefulRuleGroupOverride {
  Action?: NetworkFirewallOverrideAction;
}
export interface StatefulRuleGroup {
  RuleGroupName?: string;
  ResourceId?: string;
  Priority?: number;
  Override?: NetworkFirewallStatefulRuleGroupOverride;
}
export interface StatelessRuleGroup {
  RuleGroupName?: string;
  ResourceId?: string;
  Priority?: number;
}
export interface NetworkFirewallPolicyDescription {
  StatelessRuleGroups?: StatelessRuleGroup[];
  StatelessDefaultActions?: string[];
  StatelessFragmentDefaultActions?: string[];
  StatelessCustomActions?: string[];
  StatefulRuleGroups?: StatefulRuleGroup[];
  StatefulDefaultActions?: string[];
  StatefulEngineOptions?: StatefulEngineOptions;
}
export interface NetworkFirewallPolicyModifiedViolation {
  ViolationTarget?: string;
  CurrentPolicyDescription?: NetworkFirewallPolicyDescription;
  ExpectedPolicyDescription?: NetworkFirewallPolicyDescription;
}
export interface NetworkFirewallUnexpectedFirewallRoutesViolation {
  FirewallSubnetId?: string;
  ViolatingRoutes?: Route[];
  RouteTableId?: string;
  FirewallEndpoint?: string;
  VpcId?: string;
}
export interface NetworkFirewallUnexpectedGatewayRoutesViolation {
  GatewayId?: string;
  ViolatingRoutes?: Route[];
  RouteTableId?: string;
  VpcId?: string;
}
export interface EC2AssociateRouteTableAction {
  Description?: string;
  RouteTableId: ActionTarget | undefined;
  SubnetId?: ActionTarget;
  GatewayId?: ActionTarget;
}
export interface EC2CopyRouteTableAction {
  Description?: string;
  VpcId: ActionTarget | undefined;
  RouteTableId: ActionTarget | undefined;
}
export interface EC2CreateRouteAction {
  Description?: string;
  DestinationCidrBlock?: string;
  DestinationPrefixListId?: string;
  DestinationIpv6CidrBlock?: string;
  VpcEndpointId?: ActionTarget;
  GatewayId?: ActionTarget;
  RouteTableId: ActionTarget | undefined;
}
export interface EC2CreateRouteTableAction {
  Description?: string;
  VpcId: ActionTarget | undefined;
}
export interface EC2DeleteRouteAction {
  Description?: string;
  DestinationCidrBlock?: string;
  DestinationPrefixListId?: string;
  DestinationIpv6CidrBlock?: string;
  RouteTableId: ActionTarget | undefined;
}
export interface EC2ReplaceRouteAction {
  Description?: string;
  DestinationCidrBlock?: string;
  DestinationPrefixListId?: string;
  DestinationIpv6CidrBlock?: string;
  GatewayId?: ActionTarget;
  RouteTableId: ActionTarget | undefined;
}
export interface EC2ReplaceRouteTableAssociationAction {
  Description?: string;
  AssociationId: ActionTarget | undefined;
  RouteTableId: ActionTarget | undefined;
}
export interface FMSPolicyUpdateFirewallCreationConfigAction {
  Description?: string;
  FirewallCreationConfig?: string;
}
export interface RemediationAction {
  Description?: string;
  EC2CreateRouteAction?: EC2CreateRouteAction;
  EC2ReplaceRouteAction?: EC2ReplaceRouteAction;
  EC2DeleteRouteAction?: EC2DeleteRouteAction;
  EC2CopyRouteTableAction?: EC2CopyRouteTableAction;
  EC2ReplaceRouteTableAssociationAction?: EC2ReplaceRouteTableAssociationAction;
  EC2AssociateRouteTableAction?: EC2AssociateRouteTableAction;
  EC2CreateRouteTableAction?: EC2CreateRouteTableAction;
  FMSPolicyUpdateFirewallCreationConfigAction?: FMSPolicyUpdateFirewallCreationConfigAction;
}
export interface RemediationActionWithOrder {
  RemediationAction?: RemediationAction;
  Order?: number;
}
export interface PossibleRemediationAction {
  Description?: string;
  OrderedRemediationActions: RemediationActionWithOrder[] | undefined;
  IsDefaultAction?: boolean;
}
export interface PossibleRemediationActions {
  Description?: string;
  Actions?: PossibleRemediationAction[];
}
export interface RouteHasOutOfScopeEndpointViolation {
  SubnetId?: string;
  VpcId?: string;
  RouteTableId?: string;
  ViolatingRoutes?: Route[];
  SubnetAvailabilityZone?: string;
  SubnetAvailabilityZoneId?: string;
  CurrentFirewallSubnetRouteTable?: string;
  FirewallSubnetId?: string;
  FirewallSubnetRoutes?: Route[];
  InternetGatewayId?: string;
  CurrentInternetGatewayRouteTable?: string;
  InternetGatewayRoutes?: Route[];
}
export interface ThirdPartyFirewallMissingExpectedRouteTableViolation {
  ViolationTarget?: string;
  VPC?: string;
  AvailabilityZone?: string;
  CurrentRouteTable?: string;
  ExpectedRouteTable?: string;
}
export interface ThirdPartyFirewallMissingFirewallViolation {
  ViolationTarget?: string;
  VPC?: string;
  AvailabilityZone?: string;
  TargetViolationReason?: string;
}
export interface ThirdPartyFirewallMissingSubnetViolation {
  ViolationTarget?: string;
  VPC?: string;
  AvailabilityZone?: string;
  TargetViolationReason?: string;
}
export interface ResourceViolation {
  AwsVPCSecurityGroupViolation?: AwsVPCSecurityGroupViolation;
  AwsEc2NetworkInterfaceViolation?: AwsEc2NetworkInterfaceViolation;
  AwsEc2InstanceViolation?: AwsEc2InstanceViolation;
  NetworkFirewallMissingFirewallViolation?: NetworkFirewallMissingFirewallViolation;
  NetworkFirewallMissingSubnetViolation?: NetworkFirewallMissingSubnetViolation;
  NetworkFirewallMissingExpectedRTViolation?: NetworkFirewallMissingExpectedRTViolation;
  NetworkFirewallPolicyModifiedViolation?: NetworkFirewallPolicyModifiedViolation;
  NetworkFirewallInternetTrafficNotInspectedViolation?: NetworkFirewallInternetTrafficNotInspectedViolation;
  NetworkFirewallInvalidRouteConfigurationViolation?: NetworkFirewallInvalidRouteConfigurationViolation;
  NetworkFirewallBlackHoleRouteDetectedViolation?: NetworkFirewallBlackHoleRouteDetectedViolation;
  NetworkFirewallUnexpectedFirewallRoutesViolation?: NetworkFirewallUnexpectedFirewallRoutesViolation;
  NetworkFirewallUnexpectedGatewayRoutesViolation?: NetworkFirewallUnexpectedGatewayRoutesViolation;
  NetworkFirewallMissingExpectedRoutesViolation?: NetworkFirewallMissingExpectedRoutesViolation;
  DnsRuleGroupPriorityConflictViolation?: DnsRuleGroupPriorityConflictViolation;
  DnsDuplicateRuleGroupViolation?: DnsDuplicateRuleGroupViolation;
  DnsRuleGroupLimitExceededViolation?: DnsRuleGroupLimitExceededViolation;
  PossibleRemediationActions?: PossibleRemediationActions;
  FirewallSubnetIsOutOfScopeViolation?: FirewallSubnetIsOutOfScopeViolation;
  RouteHasOutOfScopeEndpointViolation?: RouteHasOutOfScopeEndpointViolation;
  ThirdPartyFirewallMissingFirewallViolation?: ThirdPartyFirewallMissingFirewallViolation;
  ThirdPartyFirewallMissingSubnetViolation?: ThirdPartyFirewallMissingSubnetViolation;
  ThirdPartyFirewallMissingExpectedRouteTableViolation?: ThirdPartyFirewallMissingExpectedRouteTableViolation;
  FirewallSubnetMissingVPCEndpointViolation?: FirewallSubnetMissingVPCEndpointViolation;
}
export interface ViolationDetail {
  PolicyId: string | undefined;
  MemberAccount: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  ResourceViolations: ResourceViolation[] | undefined;
  ResourceTags?: Tag[];
  ResourceDescription?: string;
}
export interface GetViolationDetailsResponse {
  ViolationDetail?: ViolationDetail;
}
export interface ListAdminAccountsForOrganizationRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListAdminAccountsForOrganizationResponse {
  AdminAccounts?: AdminAccountSummary[];
  NextToken?: string;
}
export interface ListAdminsManagingAccountRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListAdminsManagingAccountResponse {
  AdminAccounts?: string[];
  NextToken?: string;
}
export interface ListAppsListsRequest {
  DefaultLists?: boolean;
  NextToken?: string;
  MaxResults: number | undefined;
}
export interface ListAppsListsResponse {
  AppsLists?: AppsListDataSummary[];
  NextToken?: string;
}
export interface ListComplianceStatusRequest {
  PolicyId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export declare const PolicyComplianceStatusType: {
  readonly Compliant: "COMPLIANT";
  readonly NonCompliant: "NON_COMPLIANT";
};
export type PolicyComplianceStatusType =
  (typeof PolicyComplianceStatusType)[keyof typeof PolicyComplianceStatusType];
export interface EvaluationResult {
  ComplianceStatus?: PolicyComplianceStatusType;
  ViolatorCount?: number;
  EvaluationLimitExceeded?: boolean;
}
export interface PolicyComplianceStatus {
  PolicyOwner?: string;
  PolicyId?: string;
  PolicyName?: string;
  MemberAccount?: string;
  EvaluationResults?: EvaluationResult[];
  LastUpdated?: Date;
  IssueInfoMap?: Partial<Record<DependentServiceName, string>>;
}
export interface ListComplianceStatusResponse {
  PolicyComplianceStatusList?: PolicyComplianceStatus[];
  NextToken?: string;
}
export interface ListDiscoveredResourcesRequest {
  MemberAccountIds: string[] | undefined;
  ResourceType: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface DiscoveredResource {
  URI?: string;
  AccountId?: string;
  Type?: string;
  Name?: string;
}
export interface ListDiscoveredResourcesResponse {
  Items?: DiscoveredResource[];
  NextToken?: string;
}
export interface ListMemberAccountsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListMemberAccountsResponse {
  MemberAccounts?: string[];
  NextToken?: string;
}
export interface ListPoliciesRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface PolicySummary {
  PolicyArn?: string;
  PolicyId?: string;
  PolicyName?: string;
  ResourceType?: string;
  SecurityServiceType?: SecurityServiceType;
  RemediationEnabled?: boolean;
  DeleteUnusedFMManagedResources?: boolean;
  PolicyStatus?: CustomerPolicyStatus;
}
export interface ListPoliciesResponse {
  PolicyList?: PolicySummary[];
  NextToken?: string;
}
export interface ListProtocolsListsRequest {
  DefaultLists?: boolean;
  NextToken?: string;
  MaxResults: number | undefined;
}
export interface ProtocolsListDataSummary {
  ListArn?: string;
  ListId?: string;
  ListName?: string;
  ProtocolsList?: string[];
}
export interface ListProtocolsListsResponse {
  ProtocolsLists?: ProtocolsListDataSummary[];
  NextToken?: string;
}
export interface ListResourceSetResourcesRequest {
  Identifier: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface Resource {
  URI: string | undefined;
  AccountId?: string;
}
export interface ListResourceSetResourcesResponse {
  Items: Resource[] | undefined;
  NextToken?: string;
}
export interface ListResourceSetsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ResourceSetSummary {
  Id?: string;
  Name?: string;
  Description?: string;
  LastUpdateTime?: Date;
  ResourceSetStatus?: ResourceSetStatus;
}
export interface ListResourceSetsResponse {
  ResourceSets?: ResourceSetSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  TagList?: Tag[];
}
export interface ListThirdPartyFirewallFirewallPoliciesRequest {
  ThirdPartyFirewall: ThirdPartyFirewall | undefined;
  NextToken?: string;
  MaxResults: number | undefined;
}
export interface ThirdPartyFirewallFirewallPolicy {
  FirewallPolicyId?: string;
  FirewallPolicyName?: string;
}
export interface ListThirdPartyFirewallFirewallPoliciesResponse {
  ThirdPartyFirewallFirewallPolicies?: ThirdPartyFirewallFirewallPolicy[];
  NextToken?: string;
}
export interface PutAdminAccountRequest {
  AdminAccount: string | undefined;
  AdminScope?: AdminScope;
}
export interface PutAppsListRequest {
  AppsList: AppsListData | undefined;
  TagList?: Tag[];
}
export interface PutAppsListResponse {
  AppsList?: AppsListData;
  AppsListArn?: string;
}
export interface PutNotificationChannelRequest {
  SnsTopicArn: string | undefined;
  SnsRoleName: string | undefined;
}
export interface PutPolicyRequest {
  Policy: Policy | undefined;
  TagList?: Tag[];
}
export interface PutPolicyResponse {
  Policy?: Policy;
  PolicyArn?: string;
}
export interface PutProtocolsListRequest {
  ProtocolsList: ProtocolsListData | undefined;
  TagList?: Tag[];
}
export interface PutProtocolsListResponse {
  ProtocolsList?: ProtocolsListData;
  ProtocolsListArn?: string;
}
export interface PutResourceSetRequest {
  ResourceSet: ResourceSet | undefined;
  TagList?: Tag[];
}
export interface PutResourceSetResponse {
  ResourceSet: ResourceSet | undefined;
  ResourceSetArn: string | undefined;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  TagList: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
