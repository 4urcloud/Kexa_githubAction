import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { FMSServiceException as __BaseException } from "../models/FMSServiceException";
import { InternalErrorException, InvalidInputException, InvalidOperationException, InvalidTypeException, LimitExceededException, ResourceNotFoundException, } from "../models/models_0";
export const se_AssociateAdminAccountCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateAdminAccount");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateThirdPartyFirewallCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateThirdPartyFirewall");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchAssociateResourceCommand = async (input, context) => {
    const headers = sharedHeaders("BatchAssociateResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchDisassociateResourceCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDisassociateResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAppsListCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAppsList");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteNotificationChannelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteNotificationChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteProtocolsListCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProtocolsList");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourceSetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourceSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateAdminAccountCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateAdminAccount");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateThirdPartyFirewallCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateThirdPartyFirewall");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAdminAccountCommand = async (input, context) => {
    const headers = sharedHeaders("GetAdminAccount");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAdminScopeCommand = async (input, context) => {
    const headers = sharedHeaders("GetAdminScope");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAppsListCommand = async (input, context) => {
    const headers = sharedHeaders("GetAppsList");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetComplianceDetailCommand = async (input, context) => {
    const headers = sharedHeaders("GetComplianceDetail");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetNotificationChannelCommand = async (input, context) => {
    const headers = sharedHeaders("GetNotificationChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetProtectionStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetProtectionStatus");
    let body;
    body = JSON.stringify(se_GetProtectionStatusRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetProtocolsListCommand = async (input, context) => {
    const headers = sharedHeaders("GetProtocolsList");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourceSetCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetThirdPartyFirewallAssociationStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetThirdPartyFirewallAssociationStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetViolationDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetViolationDetails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAdminAccountsForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("ListAdminAccountsForOrganization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAdminsManagingAccountCommand = async (input, context) => {
    const headers = sharedHeaders("ListAdminsManagingAccount");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAppsListsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAppsLists");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListComplianceStatusCommand = async (input, context) => {
    const headers = sharedHeaders("ListComplianceStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDiscoveredResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDiscoveredResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMemberAccountsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMemberAccounts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListPolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListProtocolsListsCommand = async (input, context) => {
    const headers = sharedHeaders("ListProtocolsLists");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListResourceSetResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceSetResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListResourceSetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceSets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListThirdPartyFirewallFirewallPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListThirdPartyFirewallFirewallPolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutAdminAccountCommand = async (input, context) => {
    const headers = sharedHeaders("PutAdminAccount");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutAppsListCommand = async (input, context) => {
    const headers = sharedHeaders("PutAppsList");
    let body;
    body = JSON.stringify(se_PutAppsListRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutNotificationChannelCommand = async (input, context) => {
    const headers = sharedHeaders("PutNotificationChannel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutProtocolsListCommand = async (input, context) => {
    const headers = sharedHeaders("PutProtocolsList");
    let body;
    body = JSON.stringify(se_PutProtocolsListRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutResourceSetCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourceSet");
    let body;
    body = JSON.stringify(se_PutResourceSetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_AssociateThirdPartyFirewallCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchAssociateResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchDisassociateResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAppsListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteNotificationChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeletePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteProtocolsListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteResourceSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DisassociateAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DisassociateThirdPartyFirewallCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAdminScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAppsListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAppsListResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetComplianceDetailCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComplianceDetailResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetNotificationChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetProtectionStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetProtocolsListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetProtocolsListResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourceSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourceSetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetThirdPartyFirewallAssociationStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetViolationDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetViolationDetailsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAdminAccountsForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAdminsManagingAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAppsListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListComplianceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListComplianceStatusResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDiscoveredResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMemberAccountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListProtocolsListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListResourceSetResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListResourceSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListResourceSetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListThirdPartyFirewallFirewallPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_PutAppsListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAppsListResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutNotificationChannelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_PutPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutProtocolsListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutProtocolsListResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutResourceSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutResourceSetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.fms#InternalErrorException":
            throw await de_InternalErrorExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.fms#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "InvalidOperationException":
        case "com.amazonaws.fms#InvalidOperationException":
            throw await de_InvalidOperationExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.fms#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.fms#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "InvalidTypeException":
        case "com.amazonaws.fms#InvalidTypeException":
            throw await de_InvalidTypeExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InternalErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AppsListData = (input, context) => {
    return take(input, {
        AppsList: _json,
        CreateTime: (_) => Math.round(_.getTime() / 1000),
        LastUpdateTime: (_) => Math.round(_.getTime() / 1000),
        ListId: [],
        ListName: [],
        ListUpdateToken: [],
        PreviousAppsList: _json,
    });
};
const se_GetProtectionStatusRequest = (input, context) => {
    return take(input, {
        EndTime: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        MemberAccountId: [],
        NextToken: [],
        PolicyId: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ProtocolsListData = (input, context) => {
    return take(input, {
        CreateTime: (_) => Math.round(_.getTime() / 1000),
        LastUpdateTime: (_) => Math.round(_.getTime() / 1000),
        ListId: [],
        ListName: [],
        ListUpdateToken: [],
        PreviousProtocolsList: _json,
        ProtocolsList: _json,
    });
};
const se_PutAppsListRequest = (input, context) => {
    return take(input, {
        AppsList: (_) => se_AppsListData(_, context),
        TagList: _json,
    });
};
const se_PutProtocolsListRequest = (input, context) => {
    return take(input, {
        ProtocolsList: (_) => se_ProtocolsListData(_, context),
        TagList: _json,
    });
};
const se_PutResourceSetRequest = (input, context) => {
    return take(input, {
        ResourceSet: (_) => se_ResourceSet(_, context),
        TagList: _json,
    });
};
const se_ResourceSet = (input, context) => {
    return take(input, {
        Description: [],
        Id: [],
        LastUpdateTime: (_) => Math.round(_.getTime() / 1000),
        Name: [],
        ResourceSetStatus: [],
        ResourceTypeList: _json,
        UpdateToken: [],
    });
};
const de_AppsListData = (output, context) => {
    return take(output, {
        AppsList: _json,
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ListId: __expectString,
        ListName: __expectString,
        ListUpdateToken: __expectString,
        PreviousAppsList: _json,
    });
};
const de_GetAppsListResponse = (output, context) => {
    return take(output, {
        AppsList: (_) => de_AppsListData(_, context),
        AppsListArn: __expectString,
    });
};
const de_GetComplianceDetailResponse = (output, context) => {
    return take(output, {
        PolicyComplianceDetail: (_) => de_PolicyComplianceDetail(_, context),
    });
};
const de_GetProtocolsListResponse = (output, context) => {
    return take(output, {
        ProtocolsList: (_) => de_ProtocolsListData(_, context),
        ProtocolsListArn: __expectString,
    });
};
const de_GetResourceSetResponse = (output, context) => {
    return take(output, {
        ResourceSet: (_) => de_ResourceSet(_, context),
        ResourceSetArn: __expectString,
    });
};
const de_GetViolationDetailsResponse = (output, context) => {
    return take(output, {
        ViolationDetail: (_) => de_ViolationDetail(_, context),
    });
};
const de_ListComplianceStatusResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PolicyComplianceStatusList: (_) => de_PolicyComplianceStatusList(_, context),
    });
};
const de_ListResourceSetsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ResourceSets: (_) => de_ResourceSetSummaryList(_, context),
    });
};
const de_PolicyComplianceDetail = (output, context) => {
    return take(output, {
        EvaluationLimitExceeded: __expectBoolean,
        ExpiredAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IssueInfoMap: _json,
        MemberAccount: __expectString,
        PolicyId: __expectString,
        PolicyOwner: __expectString,
        Violators: _json,
    });
};
const de_PolicyComplianceStatus = (output, context) => {
    return take(output, {
        EvaluationResults: _json,
        IssueInfoMap: _json,
        LastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MemberAccount: __expectString,
        PolicyId: __expectString,
        PolicyName: __expectString,
        PolicyOwner: __expectString,
    });
};
const de_PolicyComplianceStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PolicyComplianceStatus(entry, context);
    });
    return retVal;
};
const de_ProtocolsListData = (output, context) => {
    return take(output, {
        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ListId: __expectString,
        ListName: __expectString,
        ListUpdateToken: __expectString,
        PreviousProtocolsList: _json,
        ProtocolsList: _json,
    });
};
const de_PutAppsListResponse = (output, context) => {
    return take(output, {
        AppsList: (_) => de_AppsListData(_, context),
        AppsListArn: __expectString,
    });
};
const de_PutProtocolsListResponse = (output, context) => {
    return take(output, {
        ProtocolsList: (_) => de_ProtocolsListData(_, context),
        ProtocolsListArn: __expectString,
    });
};
const de_PutResourceSetResponse = (output, context) => {
    return take(output, {
        ResourceSet: (_) => de_ResourceSet(_, context),
        ResourceSetArn: __expectString,
    });
};
const de_ResourceSet = (output, context) => {
    return take(output, {
        Description: __expectString,
        Id: __expectString,
        LastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ResourceSetStatus: __expectString,
        ResourceTypeList: _json,
        UpdateToken: __expectString,
    });
};
const de_ResourceSetSummary = (output, context) => {
    return take(output, {
        Description: __expectString,
        Id: __expectString,
        LastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        ResourceSetStatus: __expectString,
    });
};
const de_ResourceSetSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceSetSummary(entry, context);
    });
    return retVal;
};
const de_ViolationDetail = (output, context) => {
    return take(output, {
        MemberAccount: __expectString,
        PolicyId: __expectString,
        ResourceDescription: __expectString,
        ResourceId: __expectString,
        ResourceTags: _json,
        ResourceType: __expectString,
        ResourceViolations: _json,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSFMS_20180101.${operation}`,
    };
}
