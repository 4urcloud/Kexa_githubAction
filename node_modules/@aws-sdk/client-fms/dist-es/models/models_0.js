import { FMSServiceException as __BaseException } from "./FMSServiceException";
export const AccountRoleStatus = {
    Creating: "CREATING",
    Deleted: "DELETED",
    Deleting: "DELETING",
    PendingDeletion: "PENDING_DELETION",
    Ready: "READY",
};
export const OrganizationStatus = {
    Offboarding: "OFFBOARDING",
    OffboardingComplete: "OFFBOARDING_COMPLETE",
    Onboarding: "ONBOARDING",
    OnboardingComplete: "ONBOARDING_COMPLETE",
};
export const SecurityServiceType = {
    DNS_FIREWALL: "DNS_FIREWALL",
    IMPORT_NETWORK_FIREWALL: "IMPORT_NETWORK_FIREWALL",
    NETWORK_FIREWALL: "NETWORK_FIREWALL",
    SECURITY_GROUPS_COMMON: "SECURITY_GROUPS_COMMON",
    SECURITY_GROUPS_CONTENT_AUDIT: "SECURITY_GROUPS_CONTENT_AUDIT",
    SECURITY_GROUPS_USAGE_AUDIT: "SECURITY_GROUPS_USAGE_AUDIT",
    SHIELD_ADVANCED: "SHIELD_ADVANCED",
    THIRD_PARTY_FIREWALL: "THIRD_PARTY_FIREWALL",
    WAF: "WAF",
    WAFV2: "WAFV2",
};
export class InternalErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalErrorException",
            $fault: "client",
            ...opts,
        });
        this.name = "InternalErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InternalErrorException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidInputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidOperationException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOperationException.prototype);
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const ThirdPartyFirewall = {
    FORTIGATE_CLOUD_NATIVE_FIREWALL: "FORTIGATE_CLOUD_NATIVE_FIREWALL",
    PALO_ALTO_NETWORKS_CLOUD_NGFW: "PALO_ALTO_NETWORKS_CLOUD_NGFW",
};
export const ThirdPartyFirewallAssociationStatus = {
    NOT_EXIST: "NOT_EXIST",
    OFFBOARDING: "OFFBOARDING",
    OFFBOARD_COMPLETE: "OFFBOARD_COMPLETE",
    ONBOARDING: "ONBOARDING",
    ONBOARD_COMPLETE: "ONBOARD_COMPLETE",
};
export const FailedItemReason = {
    NotValidAccountId: "NOT_VALID_ACCOUNT_ID",
    NotValidArn: "NOT_VALID_ARN",
    NotValidPartition: "NOT_VALID_PARTITION",
    NotValidRegion: "NOT_VALID_REGION",
    NotValidResourceType: "NOT_VALID_RESOURCE_TYPE",
    NotValidService: "NOT_VALID_SERVICE",
};
export const DependentServiceName = {
    AWSConfig: "AWSCONFIG",
    AWSShieldAdvanced: "AWSSHIELD_ADVANCED",
    AWSVirtualPrivateCloud: "AWSVPC",
    AWSWAF: "AWSWAF",
};
export const ViolationReason = {
    BlackHoleRouteDetected: "BLACK_HOLE_ROUTE_DETECTED",
    BlackHoleRouteDetectedInFirewallSubnet: "BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET",
    FMSCreatedSecurityGroupEdited: "FMS_CREATED_SECURITY_GROUP_EDITED",
    FirewallSubnetIsOutOfScope: "FIREWALL_SUBNET_IS_OUT_OF_SCOPE",
    FirewallSubnetMissingExpectedRoute: "FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE",
    FirewallSubnetMissingVPCEndpoint: "FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT",
    InternetGatewayMissingExpectedRoute: "INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE",
    InternetTrafficNotInspected: "INTERNET_TRAFFIC_NOT_INSPECTED",
    InvalidRouteConfiguration: "INVALID_ROUTE_CONFIGURATION",
    MissingExpectedRouteTable: "MISSING_EXPECTED_ROUTE_TABLE",
    MissingFirewall: "MISSING_FIREWALL",
    MissingFirewallSubnetInAZ: "MISSING_FIREWALL_SUBNET_IN_AZ",
    MissingTargetGateway: "MISSING_TARGET_GATEWAY",
    NetworkFirewallPolicyModified: "NETWORK_FIREWALL_POLICY_MODIFIED",
    ResourceIncorrectWebAcl: "RESOURCE_INCORRECT_WEB_ACL",
    ResourceMissingDnsFirewall: "RESOURCE_MISSING_DNS_FIREWALL",
    ResourceMissingSecurityGroup: "RESOURCE_MISSING_SECURITY_GROUP",
    ResourceMissingShieldProtection: "RESOURCE_MISSING_SHIELD_PROTECTION",
    ResourceMissingWebAcl: "RESOURCE_MISSING_WEB_ACL",
    ResourceMissingWebaclOrShieldProtection: "RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION",
    ResourceViolatesAuditSecurityGroup: "RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP",
    RouteHasOutOfScopeEndpoint: "ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT",
    SecurityGroupRedundant: "SECURITY_GROUP_REDUNDANT",
    SecurityGroupUnused: "SECURITY_GROUP_UNUSED",
    TrafficInspectionCrossesAZBoundary: "TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY",
    UnexpectedFirewallRoutes: "UNEXPECTED_FIREWALL_ROUTES",
    UnexpectedTargetGatewayRoutes: "UNEXPECTED_TARGET_GATEWAY_ROUTES",
    WebAclMissingRuleGroup: "WEB_ACL_MISSING_RULE_GROUP",
};
export const CustomerPolicyScopeIdType = {
    ACCOUNT: "ACCOUNT",
    ORG_UNIT: "ORG_UNIT",
};
export const CustomerPolicyStatus = {
    ACTIVE: "ACTIVE",
    OUT_OF_ADMIN_SCOPE: "OUT_OF_ADMIN_SCOPE",
};
export const FirewallDeploymentModel = {
    CENTRALIZED: "CENTRALIZED",
    DISTRIBUTED: "DISTRIBUTED",
};
export class InvalidTypeException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidTypeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTypeException.prototype);
        this.Message = opts.Message;
    }
}
export const ResourceSetStatus = {
    ACTIVE: "ACTIVE",
    OUT_OF_ADMIN_SCOPE: "OUT_OF_ADMIN_SCOPE",
};
export const MarketplaceSubscriptionOnboardingStatus = {
    COMPLETE: "COMPLETE",
    NOT_COMPLETE: "NOT_COMPLETE",
    NO_SUBSCRIPTION: "NO_SUBSCRIPTION",
};
export const RemediationActionType = {
    Modify: "MODIFY",
    Remove: "REMOVE",
};
export const DestinationType = {
    IPV4: "IPV4",
    IPV6: "IPV6",
    PrefixList: "PREFIX_LIST",
};
export const TargetType = {
    CarrierGateway: "CARRIER_GATEWAY",
    EgressOnlyInternetGateway: "EGRESS_ONLY_INTERNET_GATEWAY",
    Gateway: "GATEWAY",
    Instance: "INSTANCE",
    LocalGateway: "LOCAL_GATEWAY",
    NatGateway: "NAT_GATEWAY",
    NetworkInterface: "NETWORK_INTERFACE",
    TransitGateway: "TRANSIT_GATEWAY",
    VPCEndpoint: "VPC_ENDPOINT",
    VPCPeeringConnection: "VPC_PEERING_CONNECTION",
};
export const RuleOrder = {
    DEFAULT_ACTION_ORDER: "DEFAULT_ACTION_ORDER",
    STRICT_ORDER: "STRICT_ORDER",
};
export const NetworkFirewallOverrideAction = {
    DROP_TO_ALERT: "DROP_TO_ALERT",
};
export const PolicyComplianceStatusType = {
    Compliant: "COMPLIANT",
    NonCompliant: "NON_COMPLIANT",
};
