import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { OpsWorksServiceException as __BaseException } from "./OpsWorksServiceException";
export interface StackConfigurationManager {
  Name?: string;
  Version?: string;
}
export interface AgentVersion {
  Version?: string;
  ConfigurationManager?: StackConfigurationManager;
}
export declare const SourceType: {
  readonly archive: "archive";
  readonly git: "git";
  readonly s3: "s3";
  readonly svn: "svn";
};
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
export interface Source {
  Type?: SourceType;
  Url?: string;
  Username?: string;
  Password?: string;
  SshKey?: string;
  Revision?: string;
}
export declare const AppAttributesKeys: {
  readonly AutoBundleOnDeploy: "AutoBundleOnDeploy";
  readonly AwsFlowRubySettings: "AwsFlowRubySettings";
  readonly DocumentRoot: "DocumentRoot";
  readonly RailsEnv: "RailsEnv";
};
export type AppAttributesKeys =
  (typeof AppAttributesKeys)[keyof typeof AppAttributesKeys];
export interface DataSource {
  Type?: string;
  Arn?: string;
  DatabaseName?: string;
}
export interface EnvironmentVariable {
  Key: string | undefined;
  Value: string | undefined;
  Secure?: boolean;
}
export interface SslConfiguration {
  Certificate: string | undefined;
  PrivateKey: string | undefined;
  Chain?: string;
}
export declare const AppType: {
  readonly aws_flow_ruby: "aws-flow-ruby";
  readonly java: "java";
  readonly nodejs: "nodejs";
  readonly other: "other";
  readonly php: "php";
  readonly rails: "rails";
  readonly static: "static";
};
export type AppType = (typeof AppType)[keyof typeof AppType];
export interface App {
  AppId?: string;
  StackId?: string;
  Shortname?: string;
  Name?: string;
  Description?: string;
  DataSources?: DataSource[];
  Type?: AppType;
  AppSource?: Source;
  Domains?: string[];
  EnableSsl?: boolean;
  SslConfiguration?: SslConfiguration;
  Attributes?: Partial<Record<AppAttributesKeys, string>>;
  CreatedAt?: string;
  Environment?: EnvironmentVariable[];
}
export declare const Architecture: {
  readonly i386: "i386";
  readonly x86_64: "x86_64";
};
export type Architecture = (typeof Architecture)[keyof typeof Architecture];
export interface AssignInstanceRequest {
  InstanceId: string | undefined;
  LayerIds: string[] | undefined;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface AssignVolumeRequest {
  VolumeId: string | undefined;
  InstanceId?: string;
}
export interface AssociateElasticIpRequest {
  ElasticIp: string | undefined;
  InstanceId?: string;
}
export interface AttachElasticLoadBalancerRequest {
  ElasticLoadBalancerName: string | undefined;
  LayerId: string | undefined;
}
export interface AutoScalingThresholds {
  InstanceCount?: number;
  ThresholdsWaitTime?: number;
  IgnoreMetricsTime?: number;
  CpuThreshold?: number;
  MemoryThreshold?: number;
  LoadThreshold?: number;
  Alarms?: string[];
}
export declare const AutoScalingType: {
  readonly load: "load";
  readonly timer: "timer";
};
export type AutoScalingType =
  (typeof AutoScalingType)[keyof typeof AutoScalingType];
export declare const VolumeType: {
  readonly gp2: "gp2";
  readonly io1: "io1";
  readonly standard: "standard";
};
export type VolumeType = (typeof VolumeType)[keyof typeof VolumeType];
export interface EbsBlockDevice {
  SnapshotId?: string;
  Iops?: number;
  VolumeSize?: number;
  VolumeType?: VolumeType;
  DeleteOnTermination?: boolean;
}
export interface BlockDeviceMapping {
  DeviceName?: string;
  NoDevice?: string;
  VirtualName?: string;
  Ebs?: EbsBlockDevice;
}
export interface ChefConfiguration {
  ManageBerkshelf?: boolean;
  BerkshelfVersion?: string;
}
export declare const StackAttributesKeys: {
  readonly Color: "Color";
};
export type StackAttributesKeys =
  (typeof StackAttributesKeys)[keyof typeof StackAttributesKeys];
export declare const RootDeviceType: {
  readonly ebs: "ebs";
  readonly instance_store: "instance-store";
};
export type RootDeviceType =
  (typeof RootDeviceType)[keyof typeof RootDeviceType];
export interface CloneStackRequest {
  SourceStackId: string | undefined;
  Name?: string;
  Region?: string;
  VpcId?: string;
  Attributes?: Partial<Record<StackAttributesKeys, string>>;
  ServiceRoleArn: string | undefined;
  DefaultInstanceProfileArn?: string;
  DefaultOs?: string;
  HostnameTheme?: string;
  DefaultAvailabilityZone?: string;
  DefaultSubnetId?: string;
  CustomJson?: string;
  ConfigurationManager?: StackConfigurationManager;
  ChefConfiguration?: ChefConfiguration;
  UseCustomCookbooks?: boolean;
  UseOpsworksSecurityGroups?: boolean;
  CustomCookbooksSource?: Source;
  DefaultSshKeyName?: string;
  ClonePermissions?: boolean;
  CloneAppIds?: string[];
  DefaultRootDeviceType?: RootDeviceType;
  AgentVersion?: string;
}
export interface CloneStackResult {
  StackId?: string;
}
export declare const CloudWatchLogsEncoding: {
  readonly ascii: "ascii";
  readonly big5: "big5";
  readonly big5hkscs: "big5hkscs";
  readonly cp037: "cp037";
  readonly cp1006: "cp1006";
  readonly cp1026: "cp1026";
  readonly cp1140: "cp1140";
  readonly cp1250: "cp1250";
  readonly cp1251: "cp1251";
  readonly cp1252: "cp1252";
  readonly cp1253: "cp1253";
  readonly cp1254: "cp1254";
  readonly cp1255: "cp1255";
  readonly cp1256: "cp1256";
  readonly cp1257: "cp1257";
  readonly cp1258: "cp1258";
  readonly cp424: "cp424";
  readonly cp437: "cp437";
  readonly cp500: "cp500";
  readonly cp720: "cp720";
  readonly cp737: "cp737";
  readonly cp775: "cp775";
  readonly cp850: "cp850";
  readonly cp852: "cp852";
  readonly cp855: "cp855";
  readonly cp856: "cp856";
  readonly cp857: "cp857";
  readonly cp858: "cp858";
  readonly cp860: "cp860";
  readonly cp861: "cp861";
  readonly cp862: "cp862";
  readonly cp863: "cp863";
  readonly cp864: "cp864";
  readonly cp865: "cp865";
  readonly cp866: "cp866";
  readonly cp869: "cp869";
  readonly cp874: "cp874";
  readonly cp875: "cp875";
  readonly cp932: "cp932";
  readonly cp949: "cp949";
  readonly cp950: "cp950";
  readonly euc_jis_2004: "euc_jis_2004";
  readonly euc_jisx0213: "euc_jisx0213";
  readonly euc_jp: "euc_jp";
  readonly euc_kr: "euc_kr";
  readonly gb18030: "gb18030";
  readonly gb2312: "gb2312";
  readonly gbk: "gbk";
  readonly hz: "hz";
  readonly iso2022_jp: "iso2022_jp";
  readonly iso2022_jp_1: "iso2022_jp_1";
  readonly iso2022_jp_2: "iso2022_jp_2";
  readonly iso2022_jp_2004: "iso2022_jp_2004";
  readonly iso2022_jp_3: "iso2022_jp_3";
  readonly iso2022_jp_ext: "iso2022_jp_ext";
  readonly iso2022_kr: "iso2022_kr";
  readonly iso8859_10: "iso8859_10";
  readonly iso8859_13: "iso8859_13";
  readonly iso8859_14: "iso8859_14";
  readonly iso8859_15: "iso8859_15";
  readonly iso8859_16: "iso8859_16";
  readonly iso8859_2: "iso8859_2";
  readonly iso8859_3: "iso8859_3";
  readonly iso8859_4: "iso8859_4";
  readonly iso8859_5: "iso8859_5";
  readonly iso8859_6: "iso8859_6";
  readonly iso8859_7: "iso8859_7";
  readonly iso8859_8: "iso8859_8";
  readonly iso8859_9: "iso8859_9";
  readonly johab: "johab";
  readonly koi8_r: "koi8_r";
  readonly koi8_u: "koi8_u";
  readonly latin_1: "latin_1";
  readonly mac_cyrillic: "mac_cyrillic";
  readonly mac_greek: "mac_greek";
  readonly mac_iceland: "mac_iceland";
  readonly mac_latin2: "mac_latin2";
  readonly mac_roman: "mac_roman";
  readonly mac_turkish: "mac_turkish";
  readonly ptcp154: "ptcp154";
  readonly shift_jis: "shift_jis";
  readonly shift_jis_2004: "shift_jis_2004";
  readonly shift_jisx0213: "shift_jisx0213";
  readonly utf_16: "utf_16";
  readonly utf_16_be: "utf_16_be";
  readonly utf_16_le: "utf_16_le";
  readonly utf_32: "utf_32";
  readonly utf_32_be: "utf_32_be";
  readonly utf_32_le: "utf_32_le";
  readonly utf_7: "utf_7";
  readonly utf_8: "utf_8";
  readonly utf_8_sig: "utf_8_sig";
};
export type CloudWatchLogsEncoding =
  (typeof CloudWatchLogsEncoding)[keyof typeof CloudWatchLogsEncoding];
export declare const CloudWatchLogsInitialPosition: {
  readonly end_of_file: "end_of_file";
  readonly start_of_file: "start_of_file";
};
export type CloudWatchLogsInitialPosition =
  (typeof CloudWatchLogsInitialPosition)[keyof typeof CloudWatchLogsInitialPosition];
export declare const CloudWatchLogsTimeZone: {
  readonly LOCAL: "LOCAL";
  readonly UTC: "UTC";
};
export type CloudWatchLogsTimeZone =
  (typeof CloudWatchLogsTimeZone)[keyof typeof CloudWatchLogsTimeZone];
export interface CloudWatchLogsLogStream {
  LogGroupName?: string;
  DatetimeFormat?: string;
  TimeZone?: CloudWatchLogsTimeZone;
  File?: string;
  FileFingerprintLines?: string;
  MultiLineStartPattern?: string;
  InitialPosition?: CloudWatchLogsInitialPosition;
  Encoding?: CloudWatchLogsEncoding;
  BufferDuration?: number;
  BatchCount?: number;
  BatchSize?: number;
}
export interface CloudWatchLogsConfiguration {
  Enabled?: boolean;
  LogStreams?: CloudWatchLogsLogStream[];
}
export interface Command {
  CommandId?: string;
  InstanceId?: string;
  DeploymentId?: string;
  CreatedAt?: string;
  AcknowledgedAt?: string;
  CompletedAt?: string;
  Status?: string;
  ExitCode?: number;
  LogUrl?: string;
  Type?: string;
}
export interface CreateAppRequest {
  StackId: string | undefined;
  Shortname?: string;
  Name: string | undefined;
  Description?: string;
  DataSources?: DataSource[];
  Type: AppType | undefined;
  AppSource?: Source;
  Domains?: string[];
  EnableSsl?: boolean;
  SslConfiguration?: SslConfiguration;
  Attributes?: Partial<Record<AppAttributesKeys, string>>;
  Environment?: EnvironmentVariable[];
}
export interface CreateAppResult {
  AppId?: string;
}
export declare const DeploymentCommandName: {
  readonly configure: "configure";
  readonly deploy: "deploy";
  readonly execute_recipes: "execute_recipes";
  readonly install_dependencies: "install_dependencies";
  readonly restart: "restart";
  readonly rollback: "rollback";
  readonly setup: "setup";
  readonly start: "start";
  readonly stop: "stop";
  readonly undeploy: "undeploy";
  readonly update_custom_cookbooks: "update_custom_cookbooks";
  readonly update_dependencies: "update_dependencies";
};
export type DeploymentCommandName =
  (typeof DeploymentCommandName)[keyof typeof DeploymentCommandName];
export interface DeploymentCommand {
  Name: DeploymentCommandName | undefined;
  Args?: Record<string, string[]>;
}
export interface CreateDeploymentRequest {
  StackId: string | undefined;
  AppId?: string;
  InstanceIds?: string[];
  LayerIds?: string[];
  Command: DeploymentCommand | undefined;
  Comment?: string;
  CustomJson?: string;
}
export interface CreateDeploymentResult {
  DeploymentId?: string;
}
export interface CreateInstanceRequest {
  StackId: string | undefined;
  LayerIds: string[] | undefined;
  InstanceType: string | undefined;
  AutoScalingType?: AutoScalingType;
  Hostname?: string;
  Os?: string;
  AmiId?: string;
  SshKeyName?: string;
  AvailabilityZone?: string;
  VirtualizationType?: string;
  SubnetId?: string;
  Architecture?: Architecture;
  RootDeviceType?: RootDeviceType;
  BlockDeviceMappings?: BlockDeviceMapping[];
  InstallUpdatesOnBoot?: boolean;
  EbsOptimized?: boolean;
  AgentVersion?: string;
  Tenancy?: string;
}
export interface CreateInstanceResult {
  InstanceId?: string;
}
export declare const LayerAttributesKeys: {
  readonly BundlerVersion: "BundlerVersion";
  readonly EcsClusterArn: "EcsClusterArn";
  readonly EnableHaproxyStats: "EnableHaproxyStats";
  readonly GangliaPassword: "GangliaPassword";
  readonly GangliaUrl: "GangliaUrl";
  readonly GangliaUser: "GangliaUser";
  readonly HaproxyHealthCheckMethod: "HaproxyHealthCheckMethod";
  readonly HaproxyHealthCheckUrl: "HaproxyHealthCheckUrl";
  readonly HaproxyStatsPassword: "HaproxyStatsPassword";
  readonly HaproxyStatsUrl: "HaproxyStatsUrl";
  readonly HaproxyStatsUser: "HaproxyStatsUser";
  readonly JavaAppServer: "JavaAppServer";
  readonly JavaAppServerVersion: "JavaAppServerVersion";
  readonly Jvm: "Jvm";
  readonly JvmOptions: "JvmOptions";
  readonly JvmVersion: "JvmVersion";
  readonly ManageBundler: "ManageBundler";
  readonly MemcachedMemory: "MemcachedMemory";
  readonly MysqlRootPassword: "MysqlRootPassword";
  readonly MysqlRootPasswordUbiquitous: "MysqlRootPasswordUbiquitous";
  readonly NodejsVersion: "NodejsVersion";
  readonly PassengerVersion: "PassengerVersion";
  readonly RailsStack: "RailsStack";
  readonly RubyVersion: "RubyVersion";
  readonly RubygemsVersion: "RubygemsVersion";
};
export type LayerAttributesKeys =
  (typeof LayerAttributesKeys)[keyof typeof LayerAttributesKeys];
export interface Recipes {
  Setup?: string[];
  Configure?: string[];
  Deploy?: string[];
  Undeploy?: string[];
  Shutdown?: string[];
}
export interface ShutdownEventConfiguration {
  ExecutionTimeout?: number;
  DelayUntilElbConnectionsDrained?: boolean;
}
export interface LifecycleEventConfiguration {
  Shutdown?: ShutdownEventConfiguration;
}
export declare const LayerType: {
  readonly aws_flow_ruby: "aws-flow-ruby";
  readonly custom: "custom";
  readonly db_master: "db-master";
  readonly ecs_cluster: "ecs-cluster";
  readonly java_app: "java-app";
  readonly lb: "lb";
  readonly memcached: "memcached";
  readonly monitoring_master: "monitoring-master";
  readonly nodejs_app: "nodejs-app";
  readonly php_app: "php-app";
  readonly rails_app: "rails-app";
  readonly web: "web";
};
export type LayerType = (typeof LayerType)[keyof typeof LayerType];
export interface VolumeConfiguration {
  MountPoint: string | undefined;
  RaidLevel?: number;
  NumberOfDisks: number | undefined;
  Size: number | undefined;
  VolumeType?: string;
  Iops?: number;
  Encrypted?: boolean;
}
export interface CreateLayerRequest {
  StackId: string | undefined;
  Type: LayerType | undefined;
  Name: string | undefined;
  Shortname: string | undefined;
  Attributes?: Partial<Record<LayerAttributesKeys, string>>;
  CloudWatchLogsConfiguration?: CloudWatchLogsConfiguration;
  CustomInstanceProfileArn?: string;
  CustomJson?: string;
  CustomSecurityGroupIds?: string[];
  Packages?: string[];
  VolumeConfigurations?: VolumeConfiguration[];
  EnableAutoHealing?: boolean;
  AutoAssignElasticIps?: boolean;
  AutoAssignPublicIps?: boolean;
  CustomRecipes?: Recipes;
  InstallUpdatesOnBoot?: boolean;
  UseEbsOptimizedInstances?: boolean;
  LifecycleEventConfiguration?: LifecycleEventConfiguration;
}
export interface CreateLayerResult {
  LayerId?: string;
}
export interface CreateStackRequest {
  Name: string | undefined;
  Region: string | undefined;
  VpcId?: string;
  Attributes?: Partial<Record<StackAttributesKeys, string>>;
  ServiceRoleArn: string | undefined;
  DefaultInstanceProfileArn: string | undefined;
  DefaultOs?: string;
  HostnameTheme?: string;
  DefaultAvailabilityZone?: string;
  DefaultSubnetId?: string;
  CustomJson?: string;
  ConfigurationManager?: StackConfigurationManager;
  ChefConfiguration?: ChefConfiguration;
  UseCustomCookbooks?: boolean;
  UseOpsworksSecurityGroups?: boolean;
  CustomCookbooksSource?: Source;
  DefaultSshKeyName?: string;
  DefaultRootDeviceType?: RootDeviceType;
  AgentVersion?: string;
}
export interface CreateStackResult {
  StackId?: string;
}
export interface CreateUserProfileRequest {
  IamUserArn: string | undefined;
  SshUsername?: string;
  SshPublicKey?: string;
  AllowSelfManagement?: boolean;
}
export interface CreateUserProfileResult {
  IamUserArn?: string;
}
export interface DeleteAppRequest {
  AppId: string | undefined;
}
export interface DeleteInstanceRequest {
  InstanceId: string | undefined;
  DeleteElasticIp?: boolean;
  DeleteVolumes?: boolean;
}
export interface DeleteLayerRequest {
  LayerId: string | undefined;
}
export interface DeleteStackRequest {
  StackId: string | undefined;
}
export interface DeleteUserProfileRequest {
  IamUserArn: string | undefined;
}
export interface Deployment {
  DeploymentId?: string;
  StackId?: string;
  AppId?: string;
  CreatedAt?: string;
  CompletedAt?: string;
  Duration?: number;
  IamUserArn?: string;
  Comment?: string;
  Command?: DeploymentCommand;
  Status?: string;
  CustomJson?: string;
  InstanceIds?: string[];
}
export interface DeregisterEcsClusterRequest {
  EcsClusterArn: string | undefined;
}
export interface DeregisterElasticIpRequest {
  ElasticIp: string | undefined;
}
export interface DeregisterInstanceRequest {
  InstanceId: string | undefined;
}
export interface DeregisterRdsDbInstanceRequest {
  RdsDbInstanceArn: string | undefined;
}
export interface DeregisterVolumeRequest {
  VolumeId: string | undefined;
}
export interface DescribeAgentVersionsRequest {
  StackId?: string;
  ConfigurationManager?: StackConfigurationManager;
}
export interface DescribeAgentVersionsResult {
  AgentVersions?: AgentVersion[];
}
export interface DescribeAppsRequest {
  StackId?: string;
  AppIds?: string[];
}
export interface DescribeAppsResult {
  Apps?: App[];
}
export interface DescribeCommandsRequest {
  DeploymentId?: string;
  InstanceId?: string;
  CommandIds?: string[];
}
export interface DescribeCommandsResult {
  Commands?: Command[];
}
export interface DescribeDeploymentsRequest {
  StackId?: string;
  AppId?: string;
  DeploymentIds?: string[];
}
export interface DescribeDeploymentsResult {
  Deployments?: Deployment[];
}
export interface DescribeEcsClustersRequest {
  EcsClusterArns?: string[];
  StackId?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface EcsCluster {
  EcsClusterArn?: string;
  EcsClusterName?: string;
  StackId?: string;
  RegisteredAt?: string;
}
export interface DescribeEcsClustersResult {
  EcsClusters?: EcsCluster[];
  NextToken?: string;
}
export interface DescribeElasticIpsRequest {
  InstanceId?: string;
  StackId?: string;
  Ips?: string[];
}
export interface ElasticIp {
  Ip?: string;
  Name?: string;
  Domain?: string;
  Region?: string;
  InstanceId?: string;
}
export interface DescribeElasticIpsResult {
  ElasticIps?: ElasticIp[];
}
export interface DescribeElasticLoadBalancersRequest {
  StackId?: string;
  LayerIds?: string[];
}
export interface ElasticLoadBalancer {
  ElasticLoadBalancerName?: string;
  Region?: string;
  DnsName?: string;
  StackId?: string;
  LayerId?: string;
  VpcId?: string;
  AvailabilityZones?: string[];
  SubnetIds?: string[];
  Ec2InstanceIds?: string[];
}
export interface DescribeElasticLoadBalancersResult {
  ElasticLoadBalancers?: ElasticLoadBalancer[];
}
export interface DescribeInstancesRequest {
  StackId?: string;
  LayerId?: string;
  InstanceIds?: string[];
}
export interface ReportedOs {
  Family?: string;
  Name?: string;
  Version?: string;
}
export declare const VirtualizationType: {
  readonly hvm: "hvm";
  readonly paravirtual: "paravirtual";
};
export type VirtualizationType =
  (typeof VirtualizationType)[keyof typeof VirtualizationType];
export interface Instance {
  AgentVersion?: string;
  AmiId?: string;
  Architecture?: Architecture;
  Arn?: string;
  AutoScalingType?: AutoScalingType;
  AvailabilityZone?: string;
  BlockDeviceMappings?: BlockDeviceMapping[];
  CreatedAt?: string;
  EbsOptimized?: boolean;
  Ec2InstanceId?: string;
  EcsClusterArn?: string;
  EcsContainerInstanceArn?: string;
  ElasticIp?: string;
  Hostname?: string;
  InfrastructureClass?: string;
  InstallUpdatesOnBoot?: boolean;
  InstanceId?: string;
  InstanceProfileArn?: string;
  InstanceType?: string;
  LastServiceErrorId?: string;
  LayerIds?: string[];
  Os?: string;
  Platform?: string;
  PrivateDns?: string;
  PrivateIp?: string;
  PublicDns?: string;
  PublicIp?: string;
  RegisteredBy?: string;
  ReportedAgentVersion?: string;
  ReportedOs?: ReportedOs;
  RootDeviceType?: RootDeviceType;
  RootDeviceVolumeId?: string;
  SecurityGroupIds?: string[];
  SshHostDsaKeyFingerprint?: string;
  SshHostRsaKeyFingerprint?: string;
  SshKeyName?: string;
  StackId?: string;
  Status?: string;
  SubnetId?: string;
  Tenancy?: string;
  VirtualizationType?: VirtualizationType;
}
export interface DescribeInstancesResult {
  Instances?: Instance[];
}
export interface DescribeLayersRequest {
  StackId?: string;
  LayerIds?: string[];
}
export interface Layer {
  Arn?: string;
  StackId?: string;
  LayerId?: string;
  Type?: LayerType;
  Name?: string;
  Shortname?: string;
  Attributes?: Partial<Record<LayerAttributesKeys, string>>;
  CloudWatchLogsConfiguration?: CloudWatchLogsConfiguration;
  CustomInstanceProfileArn?: string;
  CustomJson?: string;
  CustomSecurityGroupIds?: string[];
  DefaultSecurityGroupNames?: string[];
  Packages?: string[];
  VolumeConfigurations?: VolumeConfiguration[];
  EnableAutoHealing?: boolean;
  AutoAssignElasticIps?: boolean;
  AutoAssignPublicIps?: boolean;
  DefaultRecipes?: Recipes;
  CustomRecipes?: Recipes;
  CreatedAt?: string;
  InstallUpdatesOnBoot?: boolean;
  UseEbsOptimizedInstances?: boolean;
  LifecycleEventConfiguration?: LifecycleEventConfiguration;
}
export interface DescribeLayersResult {
  Layers?: Layer[];
}
export interface DescribeLoadBasedAutoScalingRequest {
  LayerIds: string[] | undefined;
}
export interface LoadBasedAutoScalingConfiguration {
  LayerId?: string;
  Enable?: boolean;
  UpScaling?: AutoScalingThresholds;
  DownScaling?: AutoScalingThresholds;
}
export interface DescribeLoadBasedAutoScalingResult {
  LoadBasedAutoScalingConfigurations?: LoadBasedAutoScalingConfiguration[];
}
export interface SelfUserProfile {
  IamUserArn?: string;
  Name?: string;
  SshUsername?: string;
  SshPublicKey?: string;
}
export interface DescribeMyUserProfileResult {
  UserProfile?: SelfUserProfile;
}
export interface OperatingSystemConfigurationManager {
  Name?: string;
  Version?: string;
}
export interface OperatingSystem {
  Name?: string;
  Id?: string;
  Type?: string;
  ConfigurationManagers?: OperatingSystemConfigurationManager[];
  ReportedName?: string;
  ReportedVersion?: string;
  Supported?: boolean;
}
export interface DescribeOperatingSystemsResponse {
  OperatingSystems?: OperatingSystem[];
}
export interface DescribePermissionsRequest {
  IamUserArn?: string;
  StackId?: string;
}
export interface Permission {
  StackId?: string;
  IamUserArn?: string;
  AllowSsh?: boolean;
  AllowSudo?: boolean;
  Level?: string;
}
export interface DescribePermissionsResult {
  Permissions?: Permission[];
}
export interface DescribeRaidArraysRequest {
  InstanceId?: string;
  StackId?: string;
  RaidArrayIds?: string[];
}
export interface RaidArray {
  RaidArrayId?: string;
  InstanceId?: string;
  Name?: string;
  RaidLevel?: number;
  NumberOfDisks?: number;
  Size?: number;
  Device?: string;
  MountPoint?: string;
  AvailabilityZone?: string;
  CreatedAt?: string;
  StackId?: string;
  VolumeType?: string;
  Iops?: number;
}
export interface DescribeRaidArraysResult {
  RaidArrays?: RaidArray[];
}
export interface DescribeRdsDbInstancesRequest {
  StackId: string | undefined;
  RdsDbInstanceArns?: string[];
}
export interface RdsDbInstance {
  RdsDbInstanceArn?: string;
  DbInstanceIdentifier?: string;
  DbUser?: string;
  DbPassword?: string;
  Region?: string;
  Address?: string;
  Engine?: string;
  StackId?: string;
  MissingOnRds?: boolean;
}
export interface DescribeRdsDbInstancesResult {
  RdsDbInstances?: RdsDbInstance[];
}
export interface DescribeServiceErrorsRequest {
  StackId?: string;
  InstanceId?: string;
  ServiceErrorIds?: string[];
}
export interface ServiceError {
  ServiceErrorId?: string;
  StackId?: string;
  InstanceId?: string;
  Type?: string;
  Message?: string;
  CreatedAt?: string;
}
export interface DescribeServiceErrorsResult {
  ServiceErrors?: ServiceError[];
}
export interface DescribeStackProvisioningParametersRequest {
  StackId: string | undefined;
}
export interface DescribeStackProvisioningParametersResult {
  AgentInstallerUrl?: string;
  Parameters?: Record<string, string>;
}
export interface DescribeStacksRequest {
  StackIds?: string[];
}
export interface Stack {
  StackId?: string;
  Name?: string;
  Arn?: string;
  Region?: string;
  VpcId?: string;
  Attributes?: Partial<Record<StackAttributesKeys, string>>;
  ServiceRoleArn?: string;
  DefaultInstanceProfileArn?: string;
  DefaultOs?: string;
  HostnameTheme?: string;
  DefaultAvailabilityZone?: string;
  DefaultSubnetId?: string;
  CustomJson?: string;
  ConfigurationManager?: StackConfigurationManager;
  ChefConfiguration?: ChefConfiguration;
  UseCustomCookbooks?: boolean;
  UseOpsworksSecurityGroups?: boolean;
  CustomCookbooksSource?: Source;
  DefaultSshKeyName?: string;
  CreatedAt?: string;
  DefaultRootDeviceType?: RootDeviceType;
  AgentVersion?: string;
}
export interface DescribeStacksResult {
  Stacks?: Stack[];
}
export interface DescribeStackSummaryRequest {
  StackId: string | undefined;
}
export interface InstancesCount {
  Assigning?: number;
  Booting?: number;
  ConnectionLost?: number;
  Deregistering?: number;
  Online?: number;
  Pending?: number;
  Rebooting?: number;
  Registered?: number;
  Registering?: number;
  Requested?: number;
  RunningSetup?: number;
  SetupFailed?: number;
  ShuttingDown?: number;
  StartFailed?: number;
  StopFailed?: number;
  Stopped?: number;
  Stopping?: number;
  Terminated?: number;
  Terminating?: number;
  Unassigning?: number;
}
export interface StackSummary {
  StackId?: string;
  Name?: string;
  Arn?: string;
  LayersCount?: number;
  AppsCount?: number;
  InstancesCount?: InstancesCount;
}
export interface DescribeStackSummaryResult {
  StackSummary?: StackSummary;
}
export interface DescribeTimeBasedAutoScalingRequest {
  InstanceIds: string[] | undefined;
}
export interface WeeklyAutoScalingSchedule {
  Monday?: Record<string, string>;
  Tuesday?: Record<string, string>;
  Wednesday?: Record<string, string>;
  Thursday?: Record<string, string>;
  Friday?: Record<string, string>;
  Saturday?: Record<string, string>;
  Sunday?: Record<string, string>;
}
export interface TimeBasedAutoScalingConfiguration {
  InstanceId?: string;
  AutoScalingSchedule?: WeeklyAutoScalingSchedule;
}
export interface DescribeTimeBasedAutoScalingResult {
  TimeBasedAutoScalingConfigurations?: TimeBasedAutoScalingConfiguration[];
}
export interface DescribeUserProfilesRequest {
  IamUserArns?: string[];
}
export interface UserProfile {
  IamUserArn?: string;
  Name?: string;
  SshUsername?: string;
  SshPublicKey?: string;
  AllowSelfManagement?: boolean;
}
export interface DescribeUserProfilesResult {
  UserProfiles?: UserProfile[];
}
export interface DescribeVolumesRequest {
  InstanceId?: string;
  StackId?: string;
  RaidArrayId?: string;
  VolumeIds?: string[];
}
export interface Volume {
  VolumeId?: string;
  Ec2VolumeId?: string;
  Name?: string;
  RaidArrayId?: string;
  InstanceId?: string;
  Status?: string;
  Size?: number;
  Device?: string;
  MountPoint?: string;
  Region?: string;
  AvailabilityZone?: string;
  VolumeType?: string;
  Iops?: number;
  Encrypted?: boolean;
}
export interface DescribeVolumesResult {
  Volumes?: Volume[];
}
export interface DetachElasticLoadBalancerRequest {
  ElasticLoadBalancerName: string | undefined;
  LayerId: string | undefined;
}
export interface DisassociateElasticIpRequest {
  ElasticIp: string | undefined;
}
export interface GetHostnameSuggestionRequest {
  LayerId: string | undefined;
}
export interface GetHostnameSuggestionResult {
  LayerId?: string;
  Hostname?: string;
}
export interface GrantAccessRequest {
  InstanceId: string | undefined;
  ValidForInMinutes?: number;
}
export interface TemporaryCredential {
  Username?: string;
  Password?: string;
  ValidForInMinutes?: number;
  InstanceId?: string;
}
export interface GrantAccessResult {
  TemporaryCredential?: TemporaryCredential;
}
export interface InstanceIdentity {
  Document?: string;
  Signature?: string;
}
export interface ListTagsRequest {
  ResourceArn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListTagsResult {
  Tags?: Record<string, string>;
  NextToken?: string;
}
export interface RebootInstanceRequest {
  InstanceId: string | undefined;
}
export interface RegisterEcsClusterRequest {
  EcsClusterArn: string | undefined;
  StackId: string | undefined;
}
export interface RegisterEcsClusterResult {
  EcsClusterArn?: string;
}
export interface RegisterElasticIpRequest {
  ElasticIp: string | undefined;
  StackId: string | undefined;
}
export interface RegisterElasticIpResult {
  ElasticIp?: string;
}
export interface RegisterInstanceRequest {
  StackId: string | undefined;
  Hostname?: string;
  PublicIp?: string;
  PrivateIp?: string;
  RsaPublicKey?: string;
  RsaPublicKeyFingerprint?: string;
  InstanceIdentity?: InstanceIdentity;
}
export interface RegisterInstanceResult {
  InstanceId?: string;
}
export interface RegisterRdsDbInstanceRequest {
  StackId: string | undefined;
  RdsDbInstanceArn: string | undefined;
  DbUser: string | undefined;
  DbPassword: string | undefined;
}
export interface RegisterVolumeRequest {
  Ec2VolumeId?: string;
  StackId: string | undefined;
}
export interface RegisterVolumeResult {
  VolumeId?: string;
}
export interface SetLoadBasedAutoScalingRequest {
  LayerId: string | undefined;
  Enable?: boolean;
  UpScaling?: AutoScalingThresholds;
  DownScaling?: AutoScalingThresholds;
}
export interface SetPermissionRequest {
  StackId: string | undefined;
  IamUserArn: string | undefined;
  AllowSsh?: boolean;
  AllowSudo?: boolean;
  Level?: string;
}
export interface SetTimeBasedAutoScalingRequest {
  InstanceId: string | undefined;
  AutoScalingSchedule?: WeeklyAutoScalingSchedule;
}
export interface StartInstanceRequest {
  InstanceId: string | undefined;
}
export interface StartStackRequest {
  StackId: string | undefined;
}
export interface StopInstanceRequest {
  InstanceId: string | undefined;
  Force?: boolean;
}
export interface StopStackRequest {
  StackId: string | undefined;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface UnassignInstanceRequest {
  InstanceId: string | undefined;
}
export interface UnassignVolumeRequest {
  VolumeId: string | undefined;
}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UpdateAppRequest {
  AppId: string | undefined;
  Name?: string;
  Description?: string;
  DataSources?: DataSource[];
  Type?: AppType;
  AppSource?: Source;
  Domains?: string[];
  EnableSsl?: boolean;
  SslConfiguration?: SslConfiguration;
  Attributes?: Partial<Record<AppAttributesKeys, string>>;
  Environment?: EnvironmentVariable[];
}
export interface UpdateElasticIpRequest {
  ElasticIp: string | undefined;
  Name?: string;
}
export interface UpdateInstanceRequest {
  InstanceId: string | undefined;
  LayerIds?: string[];
  InstanceType?: string;
  AutoScalingType?: AutoScalingType;
  Hostname?: string;
  Os?: string;
  AmiId?: string;
  SshKeyName?: string;
  Architecture?: Architecture;
  InstallUpdatesOnBoot?: boolean;
  EbsOptimized?: boolean;
  AgentVersion?: string;
}
export interface UpdateLayerRequest {
  LayerId: string | undefined;
  Name?: string;
  Shortname?: string;
  Attributes?: Partial<Record<LayerAttributesKeys, string>>;
  CloudWatchLogsConfiguration?: CloudWatchLogsConfiguration;
  CustomInstanceProfileArn?: string;
  CustomJson?: string;
  CustomSecurityGroupIds?: string[];
  Packages?: string[];
  VolumeConfigurations?: VolumeConfiguration[];
  EnableAutoHealing?: boolean;
  AutoAssignElasticIps?: boolean;
  AutoAssignPublicIps?: boolean;
  CustomRecipes?: Recipes;
  InstallUpdatesOnBoot?: boolean;
  UseEbsOptimizedInstances?: boolean;
  LifecycleEventConfiguration?: LifecycleEventConfiguration;
}
export interface UpdateMyUserProfileRequest {
  SshPublicKey?: string;
}
export interface UpdateRdsDbInstanceRequest {
  RdsDbInstanceArn: string | undefined;
  DbUser?: string;
  DbPassword?: string;
}
export interface UpdateStackRequest {
  StackId: string | undefined;
  Name?: string;
  Attributes?: Partial<Record<StackAttributesKeys, string>>;
  ServiceRoleArn?: string;
  DefaultInstanceProfileArn?: string;
  DefaultOs?: string;
  HostnameTheme?: string;
  DefaultAvailabilityZone?: string;
  DefaultSubnetId?: string;
  CustomJson?: string;
  ConfigurationManager?: StackConfigurationManager;
  ChefConfiguration?: ChefConfiguration;
  UseCustomCookbooks?: boolean;
  CustomCookbooksSource?: Source;
  DefaultSshKeyName?: string;
  DefaultRootDeviceType?: RootDeviceType;
  UseOpsworksSecurityGroups?: boolean;
  AgentVersion?: string;
}
export interface UpdateUserProfileRequest {
  IamUserArn: string | undefined;
  SshUsername?: string;
  SshPublicKey?: string;
  AllowSelfManagement?: boolean;
}
export interface UpdateVolumeRequest {
  VolumeId: string | undefined;
  Name?: string;
  MountPoint?: string;
}
