import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { OpsWorksClientResolvedConfig } from "../OpsWorksClient";
export interface OpsWorksHttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface OpsWorksHttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    OpsWorksClientResolvedConfig,
    HandlerExecutionContext,
    OpsWorksHttpAuthSchemeParameters,
    object
  > {}
export declare const defaultOpsWorksHttpAuthSchemeParametersProvider: (
  config: OpsWorksClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<OpsWorksHttpAuthSchemeParameters>;
export interface OpsWorksHttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<OpsWorksHttpAuthSchemeParameters> {}
export declare const defaultOpsWorksHttpAuthSchemeProvider: OpsWorksHttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: OpsWorksHttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: OpsWorksHttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
