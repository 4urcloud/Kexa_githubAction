import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { AuditManagerServiceException as __BaseException } from "../models/AuditManagerServiceException";
import { AccessDeniedException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_AssociateAssessmentReportEvidenceFolderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/associateToAssessmentReport");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        evidenceFolderId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_BatchAssociateAssessmentReportEvidenceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/batchAssociateToAssessmentReport");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        evidenceFolderId: [],
        evidenceIds: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_BatchCreateDelegationByAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/delegations");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        createDelegationRequests: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchDeleteDelegationByAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/delegations");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        delegationIds: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_BatchDisassociateAssessmentReportEvidenceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/batchDisassociateFromAssessmentReport");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        evidenceFolderId: [],
        evidenceIds: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_BatchImportEvidenceToAssessmentControlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}/evidence");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    b.p("controlSetId", () => input.controlSetId, "{controlSetId}", false);
    b.p("controlId", () => input.controlId, "{controlId}", false);
    let body;
    body = JSON.stringify(take(input, {
        manualEvidence: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments");
    let body;
    body = JSON.stringify(take(input, {
        assessmentReportsDestination: (_) => _json(_),
        description: [],
        frameworkId: [],
        name: [],
        roles: (_) => _json(_),
        scope: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAssessmentFrameworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessmentFrameworks");
    let body;
    body = JSON.stringify(take(input, {
        complianceType: [],
        controlSets: (_) => _json(_),
        description: [],
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAssessmentReportCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/reports");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        name: [],
        queryStatement: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateControlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/controls");
    let body;
    body = JSON.stringify(take(input, {
        actionPlanInstructions: [],
        actionPlanTitle: [],
        controlMappingSources: (_) => _json(_),
        description: [],
        name: [],
        tags: (_) => _json(_),
        testingInformation: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAssessmentFrameworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessmentFrameworks/{frameworkId}");
    b.p("frameworkId", () => input.frameworkId, "{frameworkId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAssessmentFrameworkShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessmentFrameworkShareRequests/{requestId}");
    b.p("requestId", () => input.requestId, "{requestId}", false);
    const query = map({
        [_rT]: [, __expectNonNull(input[_rT], `requestType`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteAssessmentReportCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}/reports/{assessmentReportId}");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    b.p("assessmentReportId", () => input.assessmentReportId, "{assessmentReportId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteControlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/controls/{controlId}");
    b.p("controlId", () => input.controlId, "{controlId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeregisterAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account/deregisterAccount");
    let body;
    body = "";
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeregisterOrganizationAdminAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account/deregisterOrganizationAdminAccount");
    let body;
    body = JSON.stringify(take(input, {
        adminAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateAssessmentReportEvidenceFolderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/disassociateFromAssessmentReport");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        evidenceFolderId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_GetAccountStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account/status");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAssessmentFrameworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessmentFrameworks/{frameworkId}");
    b.p("frameworkId", () => input.frameworkId, "{frameworkId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAssessmentReportUrlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}/reports/{assessmentReportId}/url");
    b.p("assessmentReportId", () => input.assessmentReportId, "{assessmentReportId}", false);
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetChangeLogsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}/changelogs");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    const query = map({
        [_cSI]: [, input[_cSI]],
        [_cI]: [, input[_cI]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetControlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/controls/{controlId}");
    b.p("controlId", () => input.controlId, "{controlId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDelegationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/delegations");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetEvidenceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence/{evidenceId}");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    b.p("controlSetId", () => input.controlSetId, "{controlSetId}", false);
    b.p("evidenceFolderId", () => input.evidenceFolderId, "{evidenceFolderId}", false);
    b.p("evidenceId", () => input.evidenceId, "{evidenceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEvidenceByEvidenceFolderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    b.p("controlSetId", () => input.controlSetId, "{controlSetId}", false);
    b.p("evidenceFolderId", () => input.evidenceFolderId, "{evidenceFolderId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetEvidenceFileUploadUrlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/evidenceFileUploadUrl");
    const query = map({
        [_fN]: [, __expectNonNull(input[_fN], `fileName`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetEvidenceFolderCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    b.p("controlSetId", () => input.controlSetId, "{controlSetId}", false);
    b.p("evidenceFolderId", () => input.evidenceFolderId, "{evidenceFolderId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEvidenceFoldersByAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}/evidenceFolders");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetEvidenceFoldersByAssessmentControlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments/{assessmentId}/evidenceFolders-by-assessment-control/{controlSetId}/{controlId}");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    b.p("controlSetId", () => input.controlSetId, "{controlSetId}", false);
    b.p("controlId", () => input.controlId, "{controlId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetInsightsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/insights");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetInsightsByAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/insights/assessments/{assessmentId}");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetOrganizationAdminAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account/organizationAdminAccount");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetServicesInScopeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/services");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/settings/{attribute}");
    b.p("attribute", () => input.attribute, "{attribute}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListAssessmentControlInsightsByControlDomainCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/insights/controls-by-assessment");
    const query = map({
        [_cDI]: [, __expectNonNull(input[_cDI], `controlDomainId`)],
        [_aI]: [, __expectNonNull(input[_aI], `assessmentId`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssessmentFrameworksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessmentFrameworks");
    const query = map({
        [_fT]: [, __expectNonNull(input[_fT], `frameworkType`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssessmentFrameworkShareRequestsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessmentFrameworkShareRequests");
    const query = map({
        [_rT]: [, __expectNonNull(input[_rT], `requestType`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssessmentReportsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessmentReports");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssessmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assessments");
    const query = map({
        [_s]: [, input[_s]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListControlDomainInsightsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/insights/control-domains");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListControlDomainInsightsByAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/insights/control-domains-by-assessment");
    const query = map({
        [_aI]: [, __expectNonNull(input[_aI], `assessmentId`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListControlInsightsByControlDomainCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/insights/controls");
    const query = map({
        [_cDI]: [, __expectNonNull(input[_cDI], `controlDomainId`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListControlsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/controls");
    const query = map({
        [_cT]: [, __expectNonNull(input[_cT], `controlType`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListKeywordsForDataSourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/dataSourceKeywords");
    const query = map({
        [_so]: [, __expectNonNull(input[_so], `source`)],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListNotificationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/notifications");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_RegisterAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account/registerAccount");
    let body;
    body = JSON.stringify(take(input, {
        delegatedAdminAccount: [],
        kmsKey: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RegisterOrganizationAdminAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account/registerOrganizationAdminAccount");
    let body;
    body = JSON.stringify(take(input, {
        adminAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartAssessmentFrameworkShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessmentFrameworks/{frameworkId}/shareRequests");
    b.p("frameworkId", () => input.frameworkId, "{frameworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        comment: [],
        destinationAccount: [],
        destinationRegion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAssessmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        assessmentDescription: [],
        assessmentName: [],
        assessmentReportsDestination: (_) => _json(_),
        roles: (_) => _json(_),
        scope: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAssessmentControlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    b.p("controlSetId", () => input.controlSetId, "{controlSetId}", false);
    b.p("controlId", () => input.controlId, "{controlId}", false);
    let body;
    body = JSON.stringify(take(input, {
        commentBody: [],
        controlStatus: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAssessmentControlSetStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/controlSets/{controlSetId}/status");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    b.p("controlSetId", () => input.controlSetId, "{controlSetId}", false);
    let body;
    body = JSON.stringify(take(input, {
        comment: [],
        status: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAssessmentFrameworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessmentFrameworks/{frameworkId}");
    b.p("frameworkId", () => input.frameworkId, "{frameworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        complianceType: [],
        controlSets: (_) => _json(_),
        description: [],
        name: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAssessmentFrameworkShareCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessmentFrameworkShareRequests/{requestId}");
    b.p("requestId", () => input.requestId, "{requestId}", false);
    let body;
    body = JSON.stringify(take(input, {
        action: [],
        requestType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateAssessmentStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessments/{assessmentId}/status");
    b.p("assessmentId", () => input.assessmentId, "{assessmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        status: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateControlCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/controls/{controlId}");
    b.p("controlId", () => input.controlId, "{controlId}", false);
    let body;
    body = JSON.stringify(take(input, {
        actionPlanInstructions: [],
        actionPlanTitle: [],
        controlMappingSources: (_) => _json(_),
        description: [],
        name: [],
        testingInformation: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/settings");
    let body;
    body = JSON.stringify(take(input, {
        defaultAssessmentReportsDestination: (_) => _json(_),
        defaultExportDestination: (_) => _json(_),
        defaultProcessOwners: (_) => _json(_),
        deregistrationPolicy: (_) => _json(_),
        evidenceFinderEnabled: [],
        kmsKey: [],
        snsTopic: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_ValidateAssessmentReportIntegrityCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assessmentReports/integrity");
    let body;
    body = JSON.stringify(take(input, {
        s3RelativePath: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_AssociateAssessmentReportEvidenceFolderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_BatchAssociateAssessmentReportEvidenceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errors: _json,
        evidenceIds: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchCreateDelegationByAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        delegations: (_) => de_Delegations(_, context),
        errors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchDeleteDelegationByAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchDisassociateAssessmentReportEvidenceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errors: _json,
        evidenceIds: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchImportEvidenceToAssessmentControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessment: (_) => de_Assessment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAssessmentFrameworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        framework: (_) => de_Framework(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAssessmentReportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentReport: (_) => de_AssessmentReport(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        control: (_) => de_Control(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAssessmentFrameworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAssessmentFrameworkShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAssessmentReportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeregisterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeregisterOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateAssessmentReportEvidenceFolderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAccountStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessment: (_) => de_Assessment(_, context),
        userRole: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAssessmentFrameworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        framework: (_) => de_Framework(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAssessmentReportUrlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        preSignedUrl: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetChangeLogsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        changeLogs: (_) => de_ChangeLogs(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        control: (_) => de_Control(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDelegationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        delegations: (_) => de_DelegationMetadataList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEvidenceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        evidence: (_) => de_Evidence(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEvidenceByEvidenceFolderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        evidence: (_) => de_EvidenceList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEvidenceFileUploadUrlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        evidenceFileName: __expectString,
        uploadUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEvidenceFolderCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        evidenceFolder: (_) => de_AssessmentEvidenceFolder(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEvidenceFoldersByAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        evidenceFolders: (_) => de_AssessmentEvidenceFolders(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEvidenceFoldersByAssessmentControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        evidenceFolders: (_) => de_AssessmentEvidenceFolders(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInsightsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        insights: (_) => de_Insights(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInsightsByAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        insights: (_) => de_InsightsByAssessment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        adminAccountId: __expectString,
        organizationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetServicesInScopeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        serviceMetadata: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        settings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssessmentControlInsightsByControlDomainCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        controlInsightsByAssessment: (_) => de_ControlInsightsMetadataByAssessment(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssessmentFrameworksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        frameworkMetadataList: (_) => de_FrameworkMetadataList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssessmentFrameworkShareRequestsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentFrameworkShareRequests: (_) => de_AssessmentFrameworkShareRequestList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssessmentReportsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentReports: (_) => de_AssessmentReportsMetadata(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssessmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentMetadata: (_) => de_ListAssessmentMetadata(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListControlDomainInsightsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        controlDomainInsights: (_) => de_ControlDomainInsightsList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListControlDomainInsightsByAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        controlDomainInsights: (_) => de_ControlDomainInsightsList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListControlInsightsByControlDomainCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        controlInsightsMetadata: (_) => de_ControlInsightsMetadata(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        controlMetadataList: (_) => de_ControlMetadataList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListKeywordsForDataSourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        keywords: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListNotificationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        notifications: (_) => de_Notifications(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RegisterAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RegisterOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        adminAccountId: __expectString,
        organizationId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartAssessmentFrameworkShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentFrameworkShareRequest: (_) => de_AssessmentFrameworkShareRequest(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAssessmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessment: (_) => de_Assessment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAssessmentControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        control: (_) => de_AssessmentControl(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAssessmentControlSetStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        controlSet: (_) => de_AssessmentControlSet(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAssessmentFrameworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        framework: (_) => de_Framework(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAssessmentFrameworkShareCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessmentFrameworkShareRequest: (_) => de_AssessmentFrameworkShareRequest(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAssessmentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assessment: (_) => de_Assessment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateControlCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        control: (_) => de_Control(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        settings: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ValidateAssessmentReportIntegrityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        signatureAlgorithm: __expectString,
        signatureDateTime: __expectString,
        signatureKeyId: __expectString,
        signatureValid: __expectBoolean,
        validationErrors: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.auditmanager#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.auditmanager#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.auditmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.auditmanager#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.auditmanager#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.auditmanager#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        fields: _json,
        message: __expectString,
        reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_Assessment = (output, context) => {
    return take(output, {
        arn: __expectString,
        awsAccount: _json,
        framework: (_) => de_AssessmentFramework(_, context),
        metadata: (_) => de_AssessmentMetadata(_, context),
        tags: _json,
    });
};
const de_AssessmentControl = (output, context) => {
    return take(output, {
        assessmentReportEvidenceCount: __expectInt32,
        comments: (_) => de_ControlComments(_, context),
        description: __expectString,
        evidenceCount: __expectInt32,
        evidenceSources: _json,
        id: __expectString,
        name: __expectString,
        response: __expectString,
        status: __expectString,
    });
};
const de_AssessmentControls = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentControl(entry, context);
    });
    return retVal;
};
const de_AssessmentControlSet = (output, context) => {
    return take(output, {
        controls: (_) => de_AssessmentControls(_, context),
        delegations: (_) => de_Delegations(_, context),
        description: __expectString,
        id: __expectString,
        manualEvidenceCount: __expectInt32,
        roles: _json,
        status: __expectString,
        systemEvidenceCount: __expectInt32,
    });
};
const de_AssessmentControlSets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentControlSet(entry, context);
    });
    return retVal;
};
const de_AssessmentEvidenceFolder = (output, context) => {
    return take(output, {
        assessmentId: __expectString,
        assessmentReportSelectionCount: __expectInt32,
        author: __expectString,
        controlId: __expectString,
        controlName: __expectString,
        controlSetId: __expectString,
        dataSource: __expectString,
        date: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        evidenceAwsServiceSourceCount: __expectInt32,
        evidenceByTypeComplianceCheckCount: __expectInt32,
        evidenceByTypeComplianceCheckIssuesCount: __expectInt32,
        evidenceByTypeConfigurationDataCount: __expectInt32,
        evidenceByTypeManualCount: __expectInt32,
        evidenceByTypeUserActivityCount: __expectInt32,
        evidenceResourcesIncludedCount: __expectInt32,
        id: __expectString,
        name: __expectString,
        totalEvidence: __expectInt32,
    });
};
const de_AssessmentEvidenceFolders = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentEvidenceFolder(entry, context);
    });
    return retVal;
};
const de_AssessmentFramework = (output, context) => {
    return take(output, {
        arn: __expectString,
        controlSets: (_) => de_AssessmentControlSets(_, context),
        id: __expectString,
        metadata: _json,
    });
};
const de_AssessmentFrameworkMetadata = (output, context) => {
    return take(output, {
        arn: __expectString,
        complianceType: __expectString,
        controlSetsCount: __expectInt32,
        controlsCount: __expectInt32,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        id: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        logo: __expectString,
        name: __expectString,
        type: __expectString,
    });
};
const de_AssessmentFrameworkShareRequest = (output, context) => {
    return take(output, {
        comment: __expectString,
        complianceType: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        customControlsCount: __expectInt32,
        destinationAccount: __expectString,
        destinationRegion: __expectString,
        expirationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        frameworkDescription: __expectString,
        frameworkId: __expectString,
        frameworkName: __expectString,
        id: __expectString,
        lastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        sourceAccount: __expectString,
        standardControlsCount: __expectInt32,
        status: __expectString,
    });
};
const de_AssessmentFrameworkShareRequestList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentFrameworkShareRequest(entry, context);
    });
    return retVal;
};
const de_AssessmentMetadata = (output, context) => {
    return take(output, {
        assessmentReportsDestination: _json,
        complianceType: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        delegations: (_) => de_Delegations(_, context),
        description: __expectString,
        id: __expectString,
        lastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        roles: _json,
        scope: _json,
        status: __expectString,
    });
};
const de_AssessmentMetadataItem = (output, context) => {
    return take(output, {
        complianceType: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        delegations: (_) => de_Delegations(_, context),
        id: __expectString,
        lastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        roles: _json,
        status: __expectString,
    });
};
const de_AssessmentReport = (output, context) => {
    return take(output, {
        assessmentId: __expectString,
        assessmentName: __expectString,
        author: __expectString,
        awsAccountId: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        id: __expectString,
        name: __expectString,
        status: __expectString,
    });
};
const de_AssessmentReportMetadata = (output, context) => {
    return take(output, {
        assessmentId: __expectString,
        assessmentName: __expectString,
        author: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        id: __expectString,
        name: __expectString,
        status: __expectString,
    });
};
const de_AssessmentReportsMetadata = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentReportMetadata(entry, context);
    });
    return retVal;
};
const de_ChangeLog = (output, context) => {
    return take(output, {
        action: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdBy: __expectString,
        objectName: __expectString,
        objectType: __expectString,
    });
};
const de_ChangeLogs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChangeLog(entry, context);
    });
    return retVal;
};
const de_Control = (output, context) => {
    return take(output, {
        actionPlanInstructions: __expectString,
        actionPlanTitle: __expectString,
        arn: __expectString,
        controlMappingSources: _json,
        controlSources: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdBy: __expectString,
        description: __expectString,
        id: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedBy: __expectString,
        name: __expectString,
        tags: _json,
        testingInformation: __expectString,
        type: __expectString,
    });
};
const de_ControlComment = (output, context) => {
    return take(output, {
        authorName: __expectString,
        commentBody: __expectString,
        postedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ControlComments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ControlComment(entry, context);
    });
    return retVal;
};
const de_ControlDomainInsights = (output, context) => {
    return take(output, {
        controlsCountByNoncompliantEvidence: __expectInt32,
        evidenceInsights: _json,
        id: __expectString,
        lastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        totalControlsCount: __expectInt32,
    });
};
const de_ControlDomainInsightsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ControlDomainInsights(entry, context);
    });
    return retVal;
};
const de_ControlInsightsMetadata = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ControlInsightsMetadataItem(entry, context);
    });
    return retVal;
};
const de_ControlInsightsMetadataByAssessment = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ControlInsightsMetadataByAssessmentItem(entry, context);
    });
    return retVal;
};
const de_ControlInsightsMetadataByAssessmentItem = (output, context) => {
    return take(output, {
        controlSetName: __expectString,
        evidenceInsights: _json,
        id: __expectString,
        lastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
    });
};
const de_ControlInsightsMetadataItem = (output, context) => {
    return take(output, {
        evidenceInsights: _json,
        id: __expectString,
        lastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
    });
};
const de_ControlMetadata = (output, context) => {
    return take(output, {
        arn: __expectString,
        controlSources: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        id: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
    });
};
const de_ControlMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ControlMetadata(entry, context);
    });
    return retVal;
};
const de_Controls = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Control(entry, context);
    });
    return retVal;
};
const de_ControlSet = (output, context) => {
    return take(output, {
        controls: (_) => de_Controls(_, context),
        id: __expectString,
        name: __expectString,
    });
};
const de_ControlSets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ControlSet(entry, context);
    });
    return retVal;
};
const de_Delegation = (output, context) => {
    return take(output, {
        assessmentId: __expectString,
        assessmentName: __expectString,
        comment: __expectString,
        controlSetId: __expectString,
        createdBy: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        id: __expectString,
        lastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        roleArn: __expectString,
        roleType: __expectString,
        status: __expectString,
    });
};
const de_DelegationMetadata = (output, context) => {
    return take(output, {
        assessmentId: __expectString,
        assessmentName: __expectString,
        controlSetName: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        id: __expectString,
        roleArn: __expectString,
        status: __expectString,
    });
};
const de_DelegationMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DelegationMetadata(entry, context);
    });
    return retVal;
};
const de_Delegations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Delegation(entry, context);
    });
    return retVal;
};
const de_Evidence = (output, context) => {
    return take(output, {
        assessmentReportSelection: __expectString,
        attributes: _json,
        awsAccountId: __expectString,
        awsOrganization: __expectString,
        complianceCheck: __expectString,
        dataSource: __expectString,
        eventName: __expectString,
        eventSource: __expectString,
        evidenceAwsAccountId: __expectString,
        evidenceByType: __expectString,
        evidenceFolderId: __expectString,
        iamId: __expectString,
        id: __expectString,
        resourcesIncluded: _json,
        time: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_EvidenceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Evidence(entry, context);
    });
    return retVal;
};
const de_Framework = (output, context) => {
    return take(output, {
        arn: __expectString,
        complianceType: __expectString,
        controlSets: (_) => de_ControlSets(_, context),
        controlSources: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdBy: __expectString,
        description: __expectString,
        id: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedBy: __expectString,
        logo: __expectString,
        name: __expectString,
        tags: _json,
        type: __expectString,
    });
};
const de_FrameworkMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentFrameworkMetadata(entry, context);
    });
    return retVal;
};
const de_Insights = (output, context) => {
    return take(output, {
        activeAssessmentsCount: __expectInt32,
        assessmentControlsCountByNoncompliantEvidence: __expectInt32,
        compliantEvidenceCount: __expectInt32,
        inconclusiveEvidenceCount: __expectInt32,
        lastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        noncompliantEvidenceCount: __expectInt32,
        totalAssessmentControlsCount: __expectInt32,
    });
};
const de_InsightsByAssessment = (output, context) => {
    return take(output, {
        assessmentControlsCountByNoncompliantEvidence: __expectInt32,
        compliantEvidenceCount: __expectInt32,
        inconclusiveEvidenceCount: __expectInt32,
        lastUpdated: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        noncompliantEvidenceCount: __expectInt32,
        totalAssessmentControlsCount: __expectInt32,
    });
};
const de_ListAssessmentMetadata = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssessmentMetadataItem(entry, context);
    });
    return retVal;
};
const de_Notification = (output, context) => {
    return take(output, {
        assessmentId: __expectString,
        assessmentName: __expectString,
        controlSetId: __expectString,
        controlSetName: __expectString,
        description: __expectString,
        eventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        id: __expectString,
        source: __expectString,
    });
};
const de_Notifications = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Notification(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _aI = "assessmentId";
const _cDI = "controlDomainId";
const _cI = "controlId";
const _cSI = "controlSetId";
const _cT = "controlType";
const _fN = "fileName";
const _fT = "frameworkType";
const _mR = "maxResults";
const _nT = "nextToken";
const _rT = "requestType";
const _s = "status";
const _so = "source";
const _tK = "tagKeys";
