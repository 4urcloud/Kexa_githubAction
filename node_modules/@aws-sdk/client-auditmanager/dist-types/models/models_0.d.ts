import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AuditManagerServiceException as __BaseException } from "./AuditManagerServiceException";
/**
 * <p> Your account isn't registered with Audit Manager. Check the delegated
 *          administrator setup on the Audit Manager settings page, and try again. </p>
 * @public
 */
export declare class AccessDeniedException extends __BaseException {
    readonly name: "AccessDeniedException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
}
/**
 * @public
 * @enum
 */
export declare const AccountStatus: {
    readonly ACTIVE: "ACTIVE";
    readonly INACTIVE: "INACTIVE";
    readonly PENDING_ACTIVATION: "PENDING_ACTIVATION";
};
/**
 * @public
 */
export type AccountStatus = (typeof AccountStatus)[keyof typeof AccountStatus];
/**
 * @public
 * @enum
 */
export declare const ActionEnum: {
    readonly ACTIVE: "ACTIVE";
    readonly CREATE: "CREATE";
    readonly DELETE: "DELETE";
    readonly IMPORT_EVIDENCE: "IMPORT_EVIDENCE";
    readonly INACTIVE: "INACTIVE";
    readonly REVIEWED: "REVIEWED";
    readonly UNDER_REVIEW: "UNDER_REVIEW";
    readonly UPDATE_METADATA: "UPDATE_METADATA";
};
/**
 * @public
 */
export type ActionEnum = (typeof ActionEnum)[keyof typeof ActionEnum];
/**
 * <p> The wrapper of Amazon Web Services account details, such as account ID or email address.
 *       </p>
 * @public
 */
export interface AWSAccount {
    /**
     * <p> The identifier for the Amazon Web Services account. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The email address that's associated with the Amazon Web Services account. </p>
     * @public
     */
    emailAddress?: string;
    /**
     * <p> The name of the Amazon Web Services account. </p>
     * @public
     */
    name?: string;
}
/**
 * <p> A comment that's posted by a user on a control. This includes the author's name, the
 *          comment text, and a timestamp. </p>
 * @public
 */
export interface ControlComment {
    /**
     * <p> The name of the user who authored the comment. </p>
     * @public
     */
    authorName?: string;
    /**
     * <p> The body text of a control comment. </p>
     * @public
     */
    commentBody?: string;
    /**
     * <p> The time when the comment was posted. </p>
     * @public
     */
    postedDate?: Date;
}
/**
 * @public
 * @enum
 */
export declare const ControlResponse: {
    readonly AUTOMATE: "AUTOMATE";
    readonly DEFER: "DEFER";
    readonly IGNORE: "IGNORE";
    readonly MANUAL: "MANUAL";
};
/**
 * @public
 */
export type ControlResponse = (typeof ControlResponse)[keyof typeof ControlResponse];
/**
 * @public
 * @enum
 */
export declare const ControlStatus: {
    readonly INACTIVE: "INACTIVE";
    readonly REVIEWED: "REVIEWED";
    readonly UNDER_REVIEW: "UNDER_REVIEW";
};
/**
 * @public
 */
export type ControlStatus = (typeof ControlStatus)[keyof typeof ControlStatus];
/**
 * <p> The control entity that represents a standard control or a custom control in an Audit Manager assessment. </p>
 * @public
 */
export interface AssessmentControl {
    /**
     * <p> The identifier for the control. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name of the control. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The description of the control. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The status of the control. </p>
     * @public
     */
    status?: ControlStatus;
    /**
     * <p> The response of the control. </p>
     * @public
     */
    response?: ControlResponse;
    /**
     * <p> The list of comments that's attached to the control. </p>
     * @public
     */
    comments?: ControlComment[];
    /**
     * <p> The list of data sources for the evidence. </p>
     * @public
     */
    evidenceSources?: string[];
    /**
     * <p> The amount of evidence that's collected for the control. </p>
     * @public
     */
    evidenceCount?: number;
    /**
     * <p> The amount of evidence in the assessment report. </p>
     * @public
     */
    assessmentReportEvidenceCount?: number;
}
/**
 * @public
 * @enum
 */
export declare const RoleType: {
    readonly PROCESS_OWNER: "PROCESS_OWNER";
    readonly RESOURCE_OWNER: "RESOURCE_OWNER";
};
/**
 * @public
 */
export type RoleType = (typeof RoleType)[keyof typeof RoleType];
/**
 * @public
 * @enum
 */
export declare const DelegationStatus: {
    readonly COMPLETE: "COMPLETE";
    readonly IN_PROGRESS: "IN_PROGRESS";
    readonly UNDER_REVIEW: "UNDER_REVIEW";
};
/**
 * @public
 */
export type DelegationStatus = (typeof DelegationStatus)[keyof typeof DelegationStatus];
/**
 * <p> The assignment of a control set to a delegate for review. </p>
 * @public
 */
export interface Delegation {
    /**
     * <p> The unique identifier for the delegation. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name of the assessment that's associated with the delegation. </p>
     * @public
     */
    assessmentName?: string;
    /**
     * <p> The identifier for the assessment that's associated with the delegation. </p>
     * @public
     */
    assessmentId?: string;
    /**
     * <p> The status of the delegation. </p>
     * @public
     */
    status?: DelegationStatus;
    /**
     * <p> The Amazon Resource Name (ARN) of the IAM role. </p>
     * @public
     */
    roleArn?: string;
    /**
     * <p> The type of customer persona. </p>
     *          <note>
     *             <p>In <code>CreateAssessment</code>, <code>roleType</code> can only be
     *                <code>PROCESS_OWNER</code>. </p>
     *             <p>In <code>UpdateSettings</code>, <code>roleType</code> can only be
     *                <code>PROCESS_OWNER</code>.</p>
     *             <p>In <code>BatchCreateDelegationByAssessment</code>, <code>roleType</code> can only be
     *                <code>RESOURCE_OWNER</code>.</p>
     *          </note>
     * @public
     */
    roleType?: RoleType;
    /**
     * <p> Specifies when the delegation was created. </p>
     * @public
     */
    creationTime?: Date;
    /**
     * <p> Specifies when the delegation was last updated. </p>
     * @public
     */
    lastUpdated?: Date;
    /**
     * <p> The identifier for the control set that's associated with the delegation. </p>
     * @public
     */
    controlSetId?: string;
    /**
     * <p> The comment that's related to the delegation. </p>
     * @public
     */
    comment?: string;
    /**
     * <p> The user or role that created the delegation. </p>
     * @public
     */
    createdBy?: string;
}
/**
 * <p> The wrapper that contains the Audit Manager role information of the current user.
 *          This includes the role type and IAM Amazon Resource Name (ARN). </p>
 * @public
 */
export interface Role {
    /**
     * <p> The type of customer persona. </p>
     *          <note>
     *             <p>In <code>CreateAssessment</code>, <code>roleType</code> can only be
     *                <code>PROCESS_OWNER</code>. </p>
     *             <p>In <code>UpdateSettings</code>, <code>roleType</code> can only be
     *                <code>PROCESS_OWNER</code>.</p>
     *             <p>In <code>BatchCreateDelegationByAssessment</code>, <code>roleType</code> can only be
     *                <code>RESOURCE_OWNER</code>.</p>
     *          </note>
     * @public
     */
    roleType: RoleType | undefined;
    /**
     * <p> The Amazon Resource Name (ARN) of the IAM role. </p>
     * @public
     */
    roleArn: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const ControlSetStatus: {
    readonly ACTIVE: "ACTIVE";
    readonly REVIEWED: "REVIEWED";
    readonly UNDER_REVIEW: "UNDER_REVIEW";
};
/**
 * @public
 */
export type ControlSetStatus = (typeof ControlSetStatus)[keyof typeof ControlSetStatus];
/**
 * <p> Represents a set of controls in an Audit Manager assessment. </p>
 * @public
 */
export interface AssessmentControlSet {
    /**
     * <p> The identifier of the control set in the assessment. This is the control set name in a
     *          plain string format. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The description for the control set. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The current status of the control set. </p>
     * @public
     */
    status?: ControlSetStatus;
    /**
     * <p> The roles that are associated with the control set. </p>
     * @public
     */
    roles?: Role[];
    /**
     * <p> The list of controls that's contained with the control set. </p>
     * @public
     */
    controls?: AssessmentControl[];
    /**
     * <p> The delegations that are associated with the control set. </p>
     * @public
     */
    delegations?: Delegation[];
    /**
     * <p> The total number of evidence objects that are retrieved automatically for the control
     *          set. </p>
     * @public
     */
    systemEvidenceCount?: number;
    /**
     * <p> The total number of evidence objects that are uploaded manually to the control set.
     *       </p>
     * @public
     */
    manualEvidenceCount?: number;
}
/**
 * <p> The metadata of a framework, such as the name, ID, or description. </p>
 * @public
 */
export interface FrameworkMetadata {
    /**
     * <p> The name of the framework. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The description of the framework. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The logo that's associated with the framework. </p>
     * @public
     */
    logo?: string;
    /**
     * <p> The compliance standard that's associated with the framework. For example, this could
     *          be PCI DSS or HIPAA. </p>
     * @public
     */
    complianceType?: string;
}
/**
 * <p> The file used to structure and automate Audit Manager assessments for a given
 *          compliance standard. </p>
 * @public
 */
export interface AssessmentFramework {
    /**
     * <p> The unique identifier for the framework. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The Amazon Resource Name (ARN) of the framework. </p>
     * @public
     */
    arn?: string;
    /**
     * <p> The metadata of a framework, such as the name, ID, or description. </p>
     * @public
     */
    metadata?: FrameworkMetadata;
    /**
     * <p> The control sets that are associated with the framework. </p>
     * @public
     */
    controlSets?: AssessmentControlSet[];
}
/**
 * @public
 * @enum
 */
export declare const AssessmentReportDestinationType: {
    readonly S3: "S3";
};
/**
 * @public
 */
export type AssessmentReportDestinationType = (typeof AssessmentReportDestinationType)[keyof typeof AssessmentReportDestinationType];
/**
 * <p> The location where Audit Manager saves assessment reports for the given
 *          assessment. </p>
 * @public
 */
export interface AssessmentReportsDestination {
    /**
     * <p> The destination type, such as Amazon S3. </p>
     * @public
     */
    destinationType?: AssessmentReportDestinationType;
    /**
     * <p> The destination bucket where Audit Manager stores assessment reports. </p>
     * @public
     */
    destination?: string;
}
/**
 * <p> An Amazon Web Service such as Amazon S3 or CloudTrail.
 *       </p>
 *          <p>For an example of how to find an Amazon Web Service name and how to define it in
 *          your assessment scope, see the following:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetServicesInScope.html#API_GetServicesInScope_Example_2">Finding an Amazon Web Service name to use in your assessment scope</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetServicesInScope.html#API_GetServicesInScope_Example_3">Defining an Amazon Web Service name in your assessment scope</a>
 *                </p>
 *             </li>
 *          </ul>
 * @public
 */
export interface AWSService {
    /**
     * <p> The name of the Amazon Web Service. </p>
     * @public
     */
    serviceName?: string;
}
/**
 * <p> The wrapper that contains the Amazon Web Services accounts and services that are in
 *          scope for the assessment. </p>
 * @public
 */
export interface Scope {
    /**
     * <p> The Amazon Web Services accounts that are included in the scope of the assessment.
     *       </p>
     * @public
     */
    awsAccounts?: AWSAccount[];
    /**
     * <p> The Amazon Web Services services that are included in the scope of the assessment.
     *       </p>
     * @public
     */
    awsServices?: AWSService[];
}
/**
 * @public
 * @enum
 */
export declare const AssessmentStatus: {
    readonly ACTIVE: "ACTIVE";
    readonly INACTIVE: "INACTIVE";
};
/**
 * @public
 */
export type AssessmentStatus = (typeof AssessmentStatus)[keyof typeof AssessmentStatus];
/**
 * <p> The metadata that's associated with the specified assessment. </p>
 * @public
 */
export interface AssessmentMetadata {
    /**
     * <p> The name of the assessment. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The description of the assessment. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The name of the compliance standard that's related to the assessment, such as PCI-DSS.
     *       </p>
     * @public
     */
    complianceType?: string;
    /**
     * <p> The overall status of the assessment. </p>
     * @public
     */
    status?: AssessmentStatus;
    /**
     * <p> The destination that evidence reports are stored in for the assessment. </p>
     * @public
     */
    assessmentReportsDestination?: AssessmentReportsDestination;
    /**
     * <p> The wrapper of Amazon Web Services accounts and services that are in scope for the
     *          assessment. </p>
     * @public
     */
    scope?: Scope;
    /**
     * <p> The roles that are associated with the assessment. </p>
     * @public
     */
    roles?: Role[];
    /**
     * <p> The delegations that are associated with the assessment. </p>
     * @public
     */
    delegations?: Delegation[];
    /**
     * <p> Specifies when the assessment was created. </p>
     * @public
     */
    creationTime?: Date;
    /**
     * <p> The time of the most recent update. </p>
     * @public
     */
    lastUpdated?: Date;
}
/**
 * <p> An entity that defines the scope of audit evidence collected by Audit Manager.
 *          An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
 * @public
 */
export interface Assessment {
    /**
     * <p> The Amazon Resource Name (ARN) of the assessment. </p>
     * @public
     */
    arn?: string;
    /**
     * <p> The Amazon Web Services account that's associated with the assessment. </p>
     * @public
     */
    awsAccount?: AWSAccount;
    /**
     * <p> The metadata for the assessment. </p>
     * @public
     */
    metadata?: AssessmentMetadata;
    /**
     * <p> The framework that the assessment was created from. </p>
     * @public
     */
    framework?: AssessmentFramework;
    /**
     * <p> The tags that are associated with the assessment. </p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * <p> The folder where Audit Manager stores evidence for an assessment. </p>
 * @public
 */
export interface AssessmentEvidenceFolder {
    /**
     * <p> The name of the evidence folder. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The date when the first evidence was added to the evidence folder. </p>
     * @public
     */
    date?: Date;
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId?: string;
    /**
     * <p> The identifier for the control set. </p>
     * @public
     */
    controlSetId?: string;
    /**
     * <p> The unique identifier for the control. </p>
     * @public
     */
    controlId?: string;
    /**
     * <p> The identifier for the folder that the evidence is stored in. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The Amazon Web Service that the evidence was collected from. </p>
     * @public
     */
    dataSource?: string;
    /**
     * <p> The name of the user who created the evidence folder. </p>
     * @public
     */
    author?: string;
    /**
     * <p> The total amount of evidence in the evidence folder. </p>
     * @public
     */
    totalEvidence?: number;
    /**
     * <p> The total count of evidence that's included in the assessment report. </p>
     * @public
     */
    assessmentReportSelectionCount?: number;
    /**
     * <p> The name of the control. </p>
     * @public
     */
    controlName?: string;
    /**
     * <p> The amount of evidence that's included in the evidence folder. </p>
     * @public
     */
    evidenceResourcesIncludedCount?: number;
    /**
     * <p> The number of evidence that falls under the configuration data category. This evidence
     *          is collected from configuration snapshots of other Amazon Web Services such as
     *             Amazon EC2, Amazon S3, or IAM. </p>
     * @public
     */
    evidenceByTypeConfigurationDataCount?: number;
    /**
     * <p> The number of evidence that falls under the manual category. This evidence is imported
     *          manually. </p>
     * @public
     */
    evidenceByTypeManualCount?: number;
    /**
     * <p> The number of evidence that falls under the compliance check category. This evidence is
     *          collected from Config or Security Hub. </p>
     * @public
     */
    evidenceByTypeComplianceCheckCount?: number;
    /**
     * <p> The total number of issues that were reported directly from Security Hub,
     *             Config, or both. </p>
     * @public
     */
    evidenceByTypeComplianceCheckIssuesCount?: number;
    /**
     * <p> The number of evidence that falls under the user activity category. This evidence is
     *          collected from CloudTrail logs. </p>
     * @public
     */
    evidenceByTypeUserActivityCount?: number;
    /**
     * <p> The total number of Amazon Web Services resources that were assessed to generate the
     *          evidence. </p>
     * @public
     */
    evidenceAwsServiceSourceCount?: number;
}
/**
 * @public
 * @enum
 */
export declare const FrameworkType: {
    readonly CUSTOM: "Custom";
    readonly STANDARD: "Standard";
};
/**
 * @public
 */
export type FrameworkType = (typeof FrameworkType)[keyof typeof FrameworkType];
/**
 * <p> The metadata that's associated with a standard framework or a custom framework. </p>
 * @public
 */
export interface AssessmentFrameworkMetadata {
    /**
     * <p> The Amazon Resource Name (ARN) of the framework. </p>
     * @public
     */
    arn?: string;
    /**
     * <p> The unique identifier for the framework. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The framework type, such as a standard framework or a custom framework. </p>
     * @public
     */
    type?: FrameworkType;
    /**
     * <p> The name of the framework. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The description of the framework. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The logo that's associated with the framework. </p>
     * @public
     */
    logo?: string;
    /**
     * <p> The compliance type that the new custom framework supports, such as CIS or HIPAA.
     *       </p>
     * @public
     */
    complianceType?: string;
    /**
     * <p> The number of controls that are associated with the framework. </p>
     * @public
     */
    controlsCount?: number;
    /**
     * <p> The number of control sets that are associated with the framework. </p>
     * @public
     */
    controlSetsCount?: number;
    /**
     * <p> The time when the framework was created. </p>
     * @public
     */
    createdAt?: Date;
    /**
     * <p> The time when the framework was most recently updated. </p>
     * @public
     */
    lastUpdatedAt?: Date;
}
/**
 * @public
 * @enum
 */
export declare const ShareRequestStatus: {
    readonly ACTIVE: "ACTIVE";
    readonly DECLINED: "DECLINED";
    readonly EXPIRED: "EXPIRED";
    readonly EXPIRING: "EXPIRING";
    readonly FAILED: "FAILED";
    readonly REPLICATING: "REPLICATING";
    readonly REVOKED: "REVOKED";
    readonly SHARED: "SHARED";
};
/**
 * @public
 */
export type ShareRequestStatus = (typeof ShareRequestStatus)[keyof typeof ShareRequestStatus];
/**
 * <p> Represents a share request for a custom framework in Audit Manager. </p>
 * @public
 */
export interface AssessmentFrameworkShareRequest {
    /**
     * <p> The unique identifier for the share request. </p>
     * @public
     */
    id?: string;
    /**
     * <p>The unique identifier for the shared custom framework. </p>
     * @public
     */
    frameworkId?: string;
    /**
     * <p> The name of the custom framework that the share request is for. </p>
     * @public
     */
    frameworkName?: string;
    /**
     * <p>The description of the shared custom framework.</p>
     * @public
     */
    frameworkDescription?: string;
    /**
     * <p> The status of the share request. </p>
     * @public
     */
    status?: ShareRequestStatus;
    /**
     * <p> The Amazon Web Services account of the sender. </p>
     * @public
     */
    sourceAccount?: string;
    /**
     * <p> The Amazon Web Services account of the recipient. </p>
     * @public
     */
    destinationAccount?: string;
    /**
     * <p> The Amazon Web Services Region of the recipient. </p>
     * @public
     */
    destinationRegion?: string;
    /**
     * <p> The time when the share request expires. </p>
     * @public
     */
    expirationTime?: Date;
    /**
     * <p> The time when the share request was created. </p>
     * @public
     */
    creationTime?: Date;
    /**
     * <p> Specifies when the share request was last updated. </p>
     * @public
     */
    lastUpdated?: Date;
    /**
     * <p> An optional comment from the sender about the share request. </p>
     * @public
     */
    comment?: string;
    /**
     * <p>The number of standard controls that are part of the shared custom framework. </p>
     * @public
     */
    standardControlsCount?: number;
    /**
     * <p>The number of custom controls that are part of the shared custom framework.</p>
     * @public
     */
    customControlsCount?: number;
    /**
     * <p>The compliance type that the shared custom framework supports, such as CIS or
     *          HIPAA.</p>
     * @public
     */
    complianceType?: string;
}
/**
 * <p> A metadata object that's associated with an assessment in Audit Manager.
 *       </p>
 * @public
 */
export interface AssessmentMetadataItem {
    /**
     * <p> The name of the assessment. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name of the compliance standard that's related to the assessment, such as PCI-DSS.
     *       </p>
     * @public
     */
    complianceType?: string;
    /**
     * <p> The current status of the assessment. </p>
     * @public
     */
    status?: AssessmentStatus;
    /**
     * <p> The roles that are associated with the assessment. </p>
     * @public
     */
    roles?: Role[];
    /**
     * <p> The delegations that are associated with the assessment. </p>
     * @public
     */
    delegations?: Delegation[];
    /**
     * <p> Specifies when the assessment was created. </p>
     * @public
     */
    creationTime?: Date;
    /**
     * <p> The time of the most recent update. </p>
     * @public
     */
    lastUpdated?: Date;
}
/**
 * @public
 * @enum
 */
export declare const AssessmentReportStatus: {
    readonly COMPLETE: "COMPLETE";
    readonly FAILED: "FAILED";
    readonly IN_PROGRESS: "IN_PROGRESS";
};
/**
 * @public
 */
export type AssessmentReportStatus = (typeof AssessmentReportStatus)[keyof typeof AssessmentReportStatus];
/**
 * <p> A finalized document that's generated from an Audit Manager assessment. These
 *          reports summarize the relevant evidence that was collected for your audit, and link to the
 *          relevant evidence folders. These evidence folders are named and organized according to the
 *          controls that are specified in your assessment. </p>
 * @public
 */
export interface AssessmentReport {
    /**
     * <p> The unique identifier for the assessment report. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name that's given to the assessment report. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The description of the specified assessment report. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The identifier for the specified Amazon Web Services account. </p>
     * @public
     */
    awsAccountId?: string;
    /**
     * <p> The identifier for the specified assessment. </p>
     * @public
     */
    assessmentId?: string;
    /**
     * <p> The name of the associated assessment. </p>
     * @public
     */
    assessmentName?: string;
    /**
     * <p> The name of the user who created the assessment report. </p>
     * @public
     */
    author?: string;
    /**
     * <p> The current status of the specified assessment report. </p>
     * @public
     */
    status?: AssessmentReportStatus;
    /**
     * <p> Specifies when the assessment report was created. </p>
     * @public
     */
    creationTime?: Date;
}
/**
 * <p> An error entity for assessment report evidence errors. This is used to provide more
 *          meaningful errors than a simple string message. </p>
 * @public
 */
export interface AssessmentReportEvidenceError {
    /**
     * <p> The identifier for the evidence. </p>
     * @public
     */
    evidenceId?: string;
    /**
     * <p> The error code that was returned. </p>
     * @public
     */
    errorCode?: string;
    /**
     * <p> The error message that was returned. </p>
     * @public
     */
    errorMessage?: string;
}
/**
 * <p> The metadata objects that are associated with the specified assessment report. </p>
 * @public
 */
export interface AssessmentReportMetadata {
    /**
     * <p> The unique identifier for the assessment report. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name of the assessment report. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The description of the assessment report. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The unique identifier for the associated assessment. </p>
     * @public
     */
    assessmentId?: string;
    /**
     * <p>The name of the associated assessment. </p>
     * @public
     */
    assessmentName?: string;
    /**
     * <p> The name of the user who created the assessment report. </p>
     * @public
     */
    author?: string;
    /**
     * <p> The current status of the assessment report. </p>
     * @public
     */
    status?: AssessmentReportStatus;
    /**
     * <p> Specifies when the assessment report was created. </p>
     * @public
     */
    creationTime?: Date;
}
/**
 * @public
 */
export interface AssociateAssessmentReportEvidenceFolderRequest {
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The identifier for the folder that the evidence is stored in. </p>
     * @public
     */
    evidenceFolderId: string | undefined;
}
/**
 * @public
 */
export interface AssociateAssessmentReportEvidenceFolderResponse {
}
/**
 * <p> An internal service error occurred during the processing of your request. Try again
 *          later. </p>
 * @public
 */
export declare class InternalServerException extends __BaseException {
    readonly name: "InternalServerException";
    readonly $fault: "server";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
}
/**
 * <p> The resource that's specified in the request can't be found. </p>
 * @public
 */
export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    /**
     * <p> The unique identifier for the resource. </p>
     * @public
     */
    resourceId: string | undefined;
    /**
     * <p> The type of resource that's affected by the error. </p>
     * @public
     */
    resourceType: string | undefined;
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}
/**
 * <p> Indicates that the request has invalid or missing parameters for the field. </p>
 * @public
 */
export interface ValidationExceptionField {
    /**
     * <p> The name of the validation error. </p>
     * @public
     */
    name: string | undefined;
    /**
     * <p> The body of the error message. </p>
     * @public
     */
    message: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const ValidationExceptionReason: {
    readonly CANNOT_PARSE: "cannotParse";
    readonly FIELD_VALIDATION_FAILED: "fieldValidationFailed";
    readonly OTHER: "other";
    readonly UNKNOWN_OPERATION: "unknownOperation";
};
/**
 * @public
 */
export type ValidationExceptionReason = (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
/**
 * <p> The request has invalid or missing parameters. </p>
 * @public
 */
export declare class ValidationException extends __BaseException {
    readonly name: "ValidationException";
    readonly $fault: "client";
    /**
     * <p> The reason the request failed validation. </p>
     * @public
     */
    reason?: ValidationExceptionReason;
    /**
     * <p> The fields that caused the error, if applicable. </p>
     * @public
     */
    fields?: ValidationExceptionField[];
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
}
/**
 * @public
 */
export interface BatchAssociateAssessmentReportEvidenceRequest {
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The identifier for the folder that the evidence is stored in. </p>
     * @public
     */
    evidenceFolderId: string | undefined;
    /**
     * <p> The list of evidence identifiers. </p>
     * @public
     */
    evidenceIds: string[] | undefined;
}
/**
 * @public
 */
export interface BatchAssociateAssessmentReportEvidenceResponse {
    /**
     * <p> The list of evidence identifiers. </p>
     * @public
     */
    evidenceIds?: string[];
    /**
     * <p> A list of errors that the <code>BatchAssociateAssessmentReportEvidence</code> API
     *          returned. </p>
     * @public
     */
    errors?: AssessmentReportEvidenceError[];
}
/**
 * <p> A collection of attributes that's used to create a delegation for an assessment in
 *             Audit Manager. </p>
 * @public
 */
export interface CreateDelegationRequest {
    /**
     * <p> A comment that's related to the delegation request. </p>
     * @public
     */
    comment?: string;
    /**
     * <p> The unique identifier for the control set. </p>
     * @public
     */
    controlSetId?: string;
    /**
     * <p> The Amazon Resource Name (ARN) of the IAM role. </p>
     * @public
     */
    roleArn?: string;
    /**
     * <p> The type of customer persona. </p>
     *          <note>
     *             <p>In <code>CreateAssessment</code>, <code>roleType</code> can only be
     *                <code>PROCESS_OWNER</code>. </p>
     *             <p>In <code>UpdateSettings</code>, <code>roleType</code> can only be
     *                <code>PROCESS_OWNER</code>.</p>
     *             <p>In <code>BatchCreateDelegationByAssessment</code>, <code>roleType</code> can only be
     *                <code>RESOURCE_OWNER</code>.</p>
     *          </note>
     * @public
     */
    roleType?: RoleType;
}
/**
 * @public
 */
export interface BatchCreateDelegationByAssessmentRequest {
    /**
     * <p> The API request to batch create delegations in Audit Manager. </p>
     * @public
     */
    createDelegationRequests: CreateDelegationRequest[] | undefined;
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
}
/**
 * <p> An error entity for the <code>BatchCreateDelegationByAssessment</code> API. This is
 *          used to provide more meaningful errors than a simple string message. </p>
 * @public
 */
export interface BatchCreateDelegationByAssessmentError {
    /**
     * <p> The API request to batch create delegations in Audit Manager. </p>
     * @public
     */
    createDelegationRequest?: CreateDelegationRequest;
    /**
     * <p> The error code that the <code>BatchCreateDelegationByAssessment</code> API returned.
     *       </p>
     * @public
     */
    errorCode?: string;
    /**
     * <p> The error message that the <code>BatchCreateDelegationByAssessment</code> API returned.
     *       </p>
     * @public
     */
    errorMessage?: string;
}
/**
 * @public
 */
export interface BatchCreateDelegationByAssessmentResponse {
    /**
     * <p> The delegations that are associated with the assessment. </p>
     * @public
     */
    delegations?: Delegation[];
    /**
     * <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned.
     *       </p>
     * @public
     */
    errors?: BatchCreateDelegationByAssessmentError[];
}
/**
 * @public
 */
export interface BatchDeleteDelegationByAssessmentRequest {
    /**
     * <p> The identifiers for the delegations. </p>
     * @public
     */
    delegationIds: string[] | undefined;
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
}
/**
 * <p> An error entity for the <code>BatchDeleteDelegationByAssessment</code> API. This is
 *          used to provide more meaningful errors than a simple string message. </p>
 * @public
 */
export interface BatchDeleteDelegationByAssessmentError {
    /**
     * <p> The identifier for the delegation. </p>
     * @public
     */
    delegationId?: string;
    /**
     * <p> The error code that the <code>BatchDeleteDelegationByAssessment</code> API returned.
     *       </p>
     * @public
     */
    errorCode?: string;
    /**
     * <p> The error message that the <code>BatchDeleteDelegationByAssessment</code> API returned.
     *       </p>
     * @public
     */
    errorMessage?: string;
}
/**
 * @public
 */
export interface BatchDeleteDelegationByAssessmentResponse {
    /**
     * <p> A list of errors that the <code>BatchDeleteDelegationByAssessment</code> API returned.
     *       </p>
     * @public
     */
    errors?: BatchDeleteDelegationByAssessmentError[];
}
/**
 * @public
 */
export interface BatchDisassociateAssessmentReportEvidenceRequest {
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The identifier for the folder that the evidence is stored in. </p>
     * @public
     */
    evidenceFolderId: string | undefined;
    /**
     * <p> The list of evidence identifiers. </p>
     * @public
     */
    evidenceIds: string[] | undefined;
}
/**
 * @public
 */
export interface BatchDisassociateAssessmentReportEvidenceResponse {
    /**
     * <p> The identifier for the evidence. </p>
     * @public
     */
    evidenceIds?: string[];
    /**
     * <p> A list of errors that the <code>BatchDisassociateAssessmentReportEvidence</code> API
     *          returned. </p>
     * @public
     */
    errors?: AssessmentReportEvidenceError[];
}
/**
 * <p> Evidence that's manually added to a control in Audit Manager.
 *             <code>manualEvidence</code> can be one of the following: <code>evidenceFileName</code>,
 *             <code>s3ResourcePath</code>, or <code>textResponse</code>.</p>
 * @public
 */
export interface ManualEvidence {
    /**
     * <p>The S3 URL of the object that's imported as manual evidence. </p>
     * @public
     */
    s3ResourcePath?: string;
    /**
     * <p>The plain text response that's entered and saved as manual evidence.</p>
     * @public
     */
    textResponse?: string;
    /**
     * <p>The name of the file that's uploaded as manual evidence. This name is populated using
     *          the <code>evidenceFileName</code> value from the <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_GetEvidenceFileUploadUrl.html">
     *                <code>GetEvidenceFileUploadUrl</code>
     *             </a> API response.</p>
     * @public
     */
    evidenceFileName?: string;
}
/**
 * @public
 */
export interface BatchImportEvidenceToAssessmentControlRequest {
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The identifier for the control set. </p>
     * @public
     */
    controlSetId: string | undefined;
    /**
     * <p> The identifier for the control. </p>
     * @public
     */
    controlId: string | undefined;
    /**
     * <p> The list of manual evidence objects. </p>
     * @public
     */
    manualEvidence: ManualEvidence[] | undefined;
}
/**
 * <p> An error entity for the <code>BatchImportEvidenceToAssessmentControl</code> API. This
 *          is used to provide more meaningful errors than a simple string message. </p>
 * @public
 */
export interface BatchImportEvidenceToAssessmentControlError {
    /**
     * <p> Manual evidence that can't be collected automatically by Audit Manager. </p>
     * @public
     */
    manualEvidence?: ManualEvidence;
    /**
     * <p> The error code that the <code>BatchImportEvidenceToAssessmentControl</code> API
     *          returned. </p>
     * @public
     */
    errorCode?: string;
    /**
     * <p> The error message that the <code>BatchImportEvidenceToAssessmentControl</code> API
     *          returned. </p>
     * @public
     */
    errorMessage?: string;
}
/**
 * @public
 */
export interface BatchImportEvidenceToAssessmentControlResponse {
    /**
     * <p> A list of errors that the <code>BatchImportEvidenceToAssessmentControl</code> API
     *          returned. </p>
     * @public
     */
    errors?: BatchImportEvidenceToAssessmentControlError[];
}
/**
 * <p>The request was denied due to request throttling.</p>
 * @public
 */
export declare class ThrottlingException extends __BaseException {
    readonly name: "ThrottlingException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
}
/**
 * @public
 */
export interface CreateAssessmentRequest {
    /**
     * <p> The name of the assessment to be created. </p>
     * @public
     */
    name: string | undefined;
    /**
     * <p> The optional description of the assessment to be created. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The assessment report storage destination for the assessment that's being created.
     *       </p>
     * @public
     */
    assessmentReportsDestination: AssessmentReportsDestination | undefined;
    /**
     * <p> The wrapper that contains the Amazon Web Services accounts and services that are in
     *          scope for the assessment. </p>
     * @public
     */
    scope: Scope | undefined;
    /**
     * <p> The list of roles for the assessment. </p>
     * @public
     */
    roles: Role[] | undefined;
    /**
     * <p> The identifier for the framework that the assessment will be created from. </p>
     * @public
     */
    frameworkId: string | undefined;
    /**
     * <p> The tags that are associated with the assessment. </p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * @public
 */
export interface CreateAssessmentResponse {
    /**
     * <p> An entity that defines the scope of audit evidence collected by Audit Manager.
     *          An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
     * @public
     */
    assessment?: Assessment;
}
/**
 * <p>You've reached your account quota for this resource type. To perform the requested
 *          action, delete some existing resources or <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">request a quota increase</a> from
 *          the Service Quotas console. For a list of Audit Manager service quotas, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html">Quotas and
 *             restrictions for Audit Manager</a>.</p>
 * @public
 */
export declare class ServiceQuotaExceededException extends __BaseException {
    readonly name: "ServiceQuotaExceededException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
}
/**
 * <p> The control entity attributes that uniquely identify an existing control to be added to
 *          a framework in Audit Manager. </p>
 * @public
 */
export interface CreateAssessmentFrameworkControl {
    /**
     * <p> The unique identifier of the control. </p>
     * @public
     */
    id: string | undefined;
}
/**
 * <p> A <code>controlSet</code> entity that represents a collection of controls in Audit Manager. This doesn't contain the control set ID. </p>
 * @public
 */
export interface CreateAssessmentFrameworkControlSet {
    /**
     * <p> The name of the control set. </p>
     * @public
     */
    name: string | undefined;
    /**
     * <p> The list of controls within the control set. This doesn't contain the control set ID.
     *       </p>
     * @public
     */
    controls?: CreateAssessmentFrameworkControl[];
}
/**
 * @public
 */
export interface CreateAssessmentFrameworkRequest {
    /**
     * <p> The name of the new custom framework. </p>
     * @public
     */
    name: string | undefined;
    /**
     * <p> An optional description for the new custom framework. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The compliance type that the new custom framework supports, such as CIS or HIPAA.
     *       </p>
     * @public
     */
    complianceType?: string;
    /**
     * <p> The control sets that are associated with the framework. </p>
     * @public
     */
    controlSets: CreateAssessmentFrameworkControlSet[] | undefined;
    /**
     * <p> The tags that are associated with the framework. </p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * @public
 * @enum
 */
export declare const SourceFrequency: {
    readonly DAILY: "DAILY";
    readonly MONTHLY: "MONTHLY";
    readonly WEEKLY: "WEEKLY";
};
/**
 * @public
 */
export type SourceFrequency = (typeof SourceFrequency)[keyof typeof SourceFrequency];
/**
 * @public
 * @enum
 */
export declare const KeywordInputType: {
    readonly INPUT_TEXT: "INPUT_TEXT";
    readonly SELECT_FROM_LIST: "SELECT_FROM_LIST";
    readonly UPLOAD_FILE: "UPLOAD_FILE";
};
/**
 * @public
 */
export type KeywordInputType = (typeof KeywordInputType)[keyof typeof KeywordInputType];
/**
 * <p>A keyword that relates to the control data source.</p>
 *          <p>For manual evidence, this keyword indicates if the manual evidence is a file or
 *          text.</p>
 *          <p>For automated evidence, this keyword identifies a specific CloudTrail event,
 *             Config rule, Security Hub control, or Amazon Web Services API name. </p>
 *          <p> To learn more about the supported keywords that you can use when mapping a control data
 *          source, see the following pages in the <i>Audit Manager User
 *             Guide</i>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Config rules supported by Audit Manager</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Security Hub controls supported by Audit Manager</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls
 *                   supported by Audit Manager</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a>
 *                </p>
 *             </li>
 *          </ul>
 * @public
 */
export interface SourceKeyword {
    /**
     * <p> The input method for the keyword. </p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>SELECT_FROM_LIST</code> is used when mapping a data source for automated
     *                evidence.</p>
     *                <ul>
     *                   <li>
     *                      <p>When <code>keywordInputType</code> is <code>SELECT_FROM_LIST</code>, a
     *                      keyword must be selected to collect automated evidence. For example, this
     *                      keyword can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call.</p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>UPLOAD_FILE</code> and <code>INPUT_TEXT</code> are only used when mapping a
     *                data source for manual evidence.</p>
     *                <ul>
     *                   <li>
     *                      <p>When <code>keywordInputType</code> is <code>UPLOAD_FILE</code>, a file must
     *                      be uploaded as manual evidence.</p>
     *                   </li>
     *                   <li>
     *                      <p>When <code>keywordInputType</code> is <code>INPUT_TEXT</code>, text must be
     *                      entered as manual evidence.</p>
     *                   </li>
     *                </ul>
     *             </li>
     *          </ul>
     * @public
     */
    keywordInputType?: KeywordInputType;
    /**
     * <p> The value of the keyword that's used when mapping a control data source. For example,
     *          this can be a CloudTrail event name, a rule name for Config, a
     *             Security Hub control, or the name of an Amazon Web Services API call. </p>
     *          <p>If you’re mapping a data source to a rule in Config, the
     *             <code>keywordValue</code> that you specify depends on the type of rule:</p>
     *          <ul>
     *             <li>
     *                <p>For <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">managed rules</a>, you can use the rule identifier as the
     *                   <code>keywordValue</code>. You can find the rule identifier from the <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">list of Config managed rules</a>. For some
     *                rules, the rule identifier is different from the rule name. For example, the rule
     *                name <code>restricted-ssh</code> has the following rule identifier:
     *                   <code>INCOMING_SSH_DISABLED</code>. Make sure to use the rule identifier, not the
     *                rule name. </p>
     *                <p>Keyword example for managed rules:</p>
     *                <ul>
     *                   <li>
     *                      <p>Managed rule name: <a href="https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-acl-prohibited.html">s3-bucket-acl-prohibited</a>
     *                      </p>
     *                      <p>
     *                         <code>keywordValue</code>: <code>S3_BUCKET_ACL_PROHIBITED</code>
     *                      </p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html">custom rules</a>, you form the <code>keywordValue</code>
     *                by adding the <code>Custom_</code> prefix to the rule name. This prefix distinguishes
     *                the custom rule from a managed rule. </p>
     *                <p>Keyword example for custom rules:</p>
     *                <ul>
     *                   <li>
     *                      <p>Custom rule name: my-custom-config-rule</p>
     *                      <p>
     *                         <code>keywordValue</code>: <code>Custom_my-custom-config-rule</code>
     *                      </p>
     *                   </li>
     *                </ul>
     *             </li>
     *             <li>
     *                <p>For <a href="https://docs.aws.amazon.com/config/latest/developerguide/service-linked-awsconfig-rules.html">service-linked rules</a>, you form the
     *                   <code>keywordValue</code> by adding the <code>Custom_</code> prefix to the rule
     *                name. In addition, you remove the suffix ID that appears at the end of the rule name. </p>
     *                <p>Keyword examples for service-linked rules:</p>
     *                <ul>
     *                   <li>
     *                      <p>Service-linked rule name:
     *                      CustomRuleForAccount-conformance-pack-szsm1uv0w</p>
     *                      <p>
     *                         <code>keywordValue</code>:
     *                         <code>Custom_CustomRuleForAccount-conformance-pack</code>
     *                      </p>
     *                   </li>
     *                   <li>
     *                      <p>Service-linked rule name:
     *                      OrgConfigRule-s3-bucket-versioning-enabled-dbgzf8ba</p>
     *                      <p>
     *                         <code>keywordValue</code>:
     *                         <code>Custom_OrgConfigRule-s3-bucket-versioning-enabled</code>
     *                      </p>
     *                   </li>
     *                </ul>
     *             </li>
     *          </ul>
     *          <important>
     *             <p>The <code>keywordValue</code> is case sensitive. If you enter a value incorrectly, Audit Manager might not recognize the data source mapping. As a result, you might not
     *          successfully collect evidence from that data source as intended. </p>
     *             <p>Keep in mind the following requirements, depending on the data source type that
     *             you're using. </p>
     *             <ol>
     *                <li>
     *                   <p>For Config: </p>
     *                   <ul>
     *                      <li>
     *                         <p>For managed rules, make sure that the <code>keywordValue</code> is the rule identifier in
     *                      <code>ALL_CAPS_WITH_UNDERSCORES</code>. For example,
     *                      <code>CLOUDWATCH_LOG_GROUP_ENCRYPTED</code>. For accuracy, we recommend
     *                      that you reference the list of <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">supported Config managed rules</a>.</p>
     *                      </li>
     *                      <li>
     *                         <p>For custom rules, make sure that the <code>keywordValue</code> has the <code>Custom_</code>
     *                      prefix followed by the custom rule name. The format of the custom rule name
     *                      itself may vary. For accuracy, we recommend that you visit the <a href="https://console.aws.amazon.com/config/">Config console</a> to
     *                      verify your custom rule name.</p>
     *                      </li>
     *                   </ul>
     *                </li>
     *                <li>
     *                   <p>For Security Hub: The format varies for Security Hub control names.
     *                   For accuracy, we recommend that you reference the list of <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">supported
     *                      Security Hub controls</a>.</p>
     *                </li>
     *                <li>
     *                   <p>For Amazon Web Services API calls: Make sure that the <code>keywordValue</code>
     *                   is written as <code>serviceprefix_ActionName</code>. For example,
     *                   <code>iam_ListGroups</code>. For accuracy, we recommend that you reference the
     *                   list of <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">supported
     *                      API calls</a>.</p>
     *                </li>
     *                <li>
     *                   <p>For CloudTrail: Make sure that the <code>keywordValue</code> is written
     *                   as <code>serviceprefix_ActionName</code>. For example,
     *                   <code>cloudtrail_StartLogging</code>. For accuracy, we recommend that you
     *                   review the Amazon Web Service prefix and action names in the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">Service Authorization Reference</a>.</p>
     *                </li>
     *             </ol>
     *          </important>
     * @public
     */
    keywordValue?: string;
}
/**
 * @public
 * @enum
 */
export declare const SourceSetUpOption: {
    readonly PROCEDURAL_CONTROLS_MAPPING: "Procedural_Controls_Mapping";
    readonly SYSTEM_CONTROLS_MAPPING: "System_Controls_Mapping";
};
/**
 * @public
 */
export type SourceSetUpOption = (typeof SourceSetUpOption)[keyof typeof SourceSetUpOption];
/**
 * @public
 * @enum
 */
export declare const SourceType: {
    readonly AWS_API_CALL: "AWS_API_Call";
    readonly AWS_CLOUDTRAIL: "AWS_Cloudtrail";
    readonly AWS_CONFIG: "AWS_Config";
    readonly AWS_SECURITY_HUB: "AWS_Security_Hub";
    readonly MANUAL: "MANUAL";
};
/**
 * @public
 */
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
/**
 * <p> The data source that determines where Audit Manager collects evidence from for
 *          the control. </p>
 * @public
 */
export interface ControlMappingSource {
    /**
     * <p> The unique identifier for the source. </p>
     * @public
     */
    sourceId?: string;
    /**
     * <p> The name of the source. </p>
     * @public
     */
    sourceName?: string;
    /**
     * <p> The description of the source. </p>
     * @public
     */
    sourceDescription?: string;
    /**
     * <p> The setup option for the data source. This option reflects if the evidence collection
     *          is automated or manual. </p>
     * @public
     */
    sourceSetUpOption?: SourceSetUpOption;
    /**
     * <p> Specifies one of the five data source types for evidence collection. </p>
     * @public
     */
    sourceType?: SourceType;
    /**
     * <p>A keyword that relates to the control data source.</p>
     *          <p>For manual evidence, this keyword indicates if the manual evidence is a file or
     *          text.</p>
     *          <p>For automated evidence, this keyword identifies a specific CloudTrail event,
     *             Config rule, Security Hub control, or Amazon Web Services API name. </p>
     *          <p> To learn more about the supported keywords that you can use when mapping a control data
     *          source, see the following pages in the <i>Audit Manager User
     *             Guide</i>:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Config rules supported by Audit Manager</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Security Hub controls supported by Audit Manager</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls
     *                   supported by Audit Manager</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a>
     *                </p>
     *             </li>
     *          </ul>
     * @public
     */
    sourceKeyword?: SourceKeyword;
    /**
     * <p>Specifies how often evidence is collected from the control mapping source. </p>
     * @public
     */
    sourceFrequency?: SourceFrequency;
    /**
     * <p> The instructions for troubleshooting the control. </p>
     * @public
     */
    troubleshootingText?: string;
}
/**
 * @public
 * @enum
 */
export declare const ControlType: {
    readonly CUSTOM: "Custom";
    readonly STANDARD: "Standard";
};
/**
 * @public
 */
export type ControlType = (typeof ControlType)[keyof typeof ControlType];
/**
 * <p> A control in Audit Manager. </p>
 * @public
 */
export interface Control {
    /**
     * <p> The Amazon Resource Name (ARN) of the control. </p>
     * @public
     */
    arn?: string;
    /**
     * <p> The unique identifier for the control. </p>
     * @public
     */
    id?: string;
    /**
     * <p> Specifies whether the control is a standard control or a custom control.</p>
     * @public
     */
    type?: ControlType;
    /**
     * <p> The name of the control. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The description of the control. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The steps that you should follow to determine if the control has been satisfied.
     *       </p>
     * @public
     */
    testingInformation?: string;
    /**
     * <p> The title of the action plan for remediating the control. </p>
     * @public
     */
    actionPlanTitle?: string;
    /**
     * <p> The recommended actions to carry out if the control isn't fulfilled. </p>
     * @public
     */
    actionPlanInstructions?: string;
    /**
     * <p> The data source types that determine where Audit Manager collects evidence from for
     *          the control. </p>
     * @public
     */
    controlSources?: string;
    /**
     * <p> The data mapping sources for the control. </p>
     * @public
     */
    controlMappingSources?: ControlMappingSource[];
    /**
     * <p> The time when the control was created. </p>
     * @public
     */
    createdAt?: Date;
    /**
     * <p> The time when the control was most recently updated. </p>
     * @public
     */
    lastUpdatedAt?: Date;
    /**
     * <p> The user or role that created the control. </p>
     * @public
     */
    createdBy?: string;
    /**
     * <p> The user or role that most recently updated the control. </p>
     * @public
     */
    lastUpdatedBy?: string;
    /**
     * <p> The tags associated with the control. </p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * <p> A set of controls in Audit Manager. </p>
 * @public
 */
export interface ControlSet {
    /**
     * <p> The identifier of the control set in the assessment. This is the control set name in a
     *          plain string format. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name of the control set. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The list of controls within the control set. </p>
     * @public
     */
    controls?: Control[];
}
/**
 * <p> The file that's used to structure and automate Audit Manager assessments for a
 *          given compliance standard. </p>
 * @public
 */
export interface Framework {
    /**
     * <p> The Amazon Resource Name (ARN) of the framework. </p>
     * @public
     */
    arn?: string;
    /**
     * <p> The unique identifier for the framework. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name of the framework. </p>
     * @public
     */
    name?: string;
    /**
     * <p> Specifies whether the framework is a standard framework or a custom framework.</p>
     * @public
     */
    type?: FrameworkType;
    /**
     * <p> The compliance type that the framework supports, such as CIS or HIPAA. </p>
     * @public
     */
    complianceType?: string;
    /**
     * <p> The description of the framework. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The logo that's associated with the framework. </p>
     * @public
     */
    logo?: string;
    /**
     * <p> The control data sources where Audit Manager collects evidence from.</p>
     * @public
     */
    controlSources?: string;
    /**
     * <p> The control sets that are associated with the framework. </p>
     * @public
     */
    controlSets?: ControlSet[];
    /**
     * <p> The time when the framework was created. </p>
     * @public
     */
    createdAt?: Date;
    /**
     * <p> The time when the framework was most recently updated. </p>
     * @public
     */
    lastUpdatedAt?: Date;
    /**
     * <p> The user or role that created the framework. </p>
     * @public
     */
    createdBy?: string;
    /**
     * <p> The user or role that most recently updated the framework. </p>
     * @public
     */
    lastUpdatedBy?: string;
    /**
     * <p> The tags that are associated with the framework. </p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * @public
 */
export interface CreateAssessmentFrameworkResponse {
    /**
     * <p> The name of the new framework that the <code>CreateAssessmentFramework</code> API
     *          returned. </p>
     * @public
     */
    framework?: Framework;
}
/**
 * @public
 */
export interface CreateAssessmentReportRequest {
    /**
     * <p> The name of the new assessment report. </p>
     * @public
     */
    name: string | undefined;
    /**
     * <p> The description of the assessment report. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p>A SQL statement that represents an evidence finder query.</p>
     *          <p>Provide this parameter when you want to generate an assessment report from the results
     *          of an evidence finder search query. When you use this parameter, Audit Manager
     *          generates a one-time report using only the evidence from the query output. This report does
     *          not include any assessment evidence that was manually <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#generate-assessment-report-include-evidence">added to a report using the console</a>, or <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_BatchAssociateAssessmentReportEvidence.html">associated with a report using the API</a>. </p>
     *          <p>To use this parameter, the <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_EvidenceFinderEnablement.html#auditmanager-Type-EvidenceFinderEnablement-enablementStatus">enablementStatus</a> of evidence finder must be <code>ENABLED</code>. </p>
     *          <p> For examples and help resolving <code>queryStatement</code> validation exceptions, see
     *             <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/evidence-finder-issues.html#querystatement-exceptions">Troubleshooting evidence finder issues</a> in the
     *                <i>Audit Manager User Guide.</i>
     *          </p>
     * @public
     */
    queryStatement?: string;
}
/**
 * @public
 */
export interface CreateAssessmentReportResponse {
    /**
     * <p> The new assessment report that the <code>CreateAssessmentReport</code> API returned.
     *       </p>
     * @public
     */
    assessmentReport?: AssessmentReport;
}
/**
 * <p> The control mapping fields that represent the source for evidence collection, along
 *          with related parameters and metadata. This doesn't contain <code>mappingID</code>. </p>
 * @public
 */
export interface CreateControlMappingSource {
    /**
     * <p> The name of the control mapping data source. </p>
     * @public
     */
    sourceName?: string;
    /**
     * <p> The description of the data source that determines where Audit Manager collects
     *          evidence from for the control. </p>
     * @public
     */
    sourceDescription?: string;
    /**
     * <p> The setup option for the data source, which reflects if the evidence collection is
     *          automated or manual. </p>
     * @public
     */
    sourceSetUpOption?: SourceSetUpOption;
    /**
     * <p> Specifies one of the five types of data sources for evidence collection. </p>
     * @public
     */
    sourceType?: SourceType;
    /**
     * <p>A keyword that relates to the control data source.</p>
     *          <p>For manual evidence, this keyword indicates if the manual evidence is a file or
     *          text.</p>
     *          <p>For automated evidence, this keyword identifies a specific CloudTrail event,
     *             Config rule, Security Hub control, or Amazon Web Services API name. </p>
     *          <p> To learn more about the supported keywords that you can use when mapping a control data
     *          source, see the following pages in the <i>Audit Manager User
     *             Guide</i>:</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Config rules supported by Audit Manager</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Security Hub controls supported by Audit Manager</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls
     *                   supported by Audit Manager</a>
     *                </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a>
     *                </p>
     *             </li>
     *          </ul>
     * @public
     */
    sourceKeyword?: SourceKeyword;
    /**
     * <p>Specifies how often evidence is collected from the control mapping source. </p>
     * @public
     */
    sourceFrequency?: SourceFrequency;
    /**
     * <p> The instructions for troubleshooting the control. </p>
     * @public
     */
    troubleshootingText?: string;
}
/**
 * @public
 */
export interface CreateControlRequest {
    /**
     * <p> The name of the control. </p>
     * @public
     */
    name: string | undefined;
    /**
     * <p> The description of the control. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The steps to follow to determine if the control is satisfied. </p>
     * @public
     */
    testingInformation?: string;
    /**
     * <p> The title of the action plan for remediating the control. </p>
     * @public
     */
    actionPlanTitle?: string;
    /**
     * <p> The recommended actions to carry out if the control isn't fulfilled. </p>
     * @public
     */
    actionPlanInstructions?: string;
    /**
     * <p> The data mapping sources for the control. </p>
     * @public
     */
    controlMappingSources: CreateControlMappingSource[] | undefined;
    /**
     * <p> The tags that are associated with the control. </p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * @public
 */
export interface CreateControlResponse {
    /**
     * <p> The new control that the <code>CreateControl</code> API returned. </p>
     * @public
     */
    control?: Control;
}
/**
 * @public
 */
export interface DeleteAssessmentRequest {
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
}
/**
 * @public
 */
export interface DeleteAssessmentResponse {
}
/**
 * @public
 */
export interface DeleteAssessmentFrameworkRequest {
    /**
     * <p> The identifier for the custom framework. </p>
     * @public
     */
    frameworkId: string | undefined;
}
/**
 * @public
 */
export interface DeleteAssessmentFrameworkResponse {
}
/**
 * @public
 * @enum
 */
export declare const ShareRequestType: {
    readonly RECEIVED: "RECEIVED";
    readonly SENT: "SENT";
};
/**
 * @public
 */
export type ShareRequestType = (typeof ShareRequestType)[keyof typeof ShareRequestType];
/**
 * @public
 */
export interface DeleteAssessmentFrameworkShareRequest {
    /**
     * <p>The unique identifier for the share request to be deleted.</p>
     * @public
     */
    requestId: string | undefined;
    /**
     * <p>Specifies whether the share request is a sent request or a received request.</p>
     * @public
     */
    requestType: ShareRequestType | undefined;
}
/**
 * @public
 */
export interface DeleteAssessmentFrameworkShareResponse {
}
/**
 * @public
 */
export interface DeleteAssessmentReportRequest {
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The unique identifier for the assessment report. </p>
     * @public
     */
    assessmentReportId: string | undefined;
}
/**
 * @public
 */
export interface DeleteAssessmentReportResponse {
}
/**
 * @public
 */
export interface DeleteControlRequest {
    /**
     * <p> The unique identifier for the control. </p>
     * @public
     */
    controlId: string | undefined;
}
/**
 * @public
 */
export interface DeleteControlResponse {
}
/**
 * @public
 */
export interface DeregisterAccountRequest {
}
/**
 * @public
 */
export interface DeregisterAccountResponse {
    /**
     * <p> The registration status of the account. </p>
     * @public
     */
    status?: AccountStatus;
}
/**
 * @public
 */
export interface DeregisterOrganizationAdminAccountRequest {
    /**
     * <p> The identifier for the administrator account. </p>
     * @public
     */
    adminAccountId?: string;
}
/**
 * @public
 */
export interface DeregisterOrganizationAdminAccountResponse {
}
/**
 * @public
 */
export interface DisassociateAssessmentReportEvidenceFolderRequest {
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The unique identifier for the folder that the evidence is stored in. </p>
     * @public
     */
    evidenceFolderId: string | undefined;
}
/**
 * @public
 */
export interface DisassociateAssessmentReportEvidenceFolderResponse {
}
/**
 * @public
 */
export interface GetAccountStatusRequest {
}
/**
 * @public
 */
export interface GetAccountStatusResponse {
    /**
     * <p> The status of the Amazon Web Services account. </p>
     * @public
     */
    status?: AccountStatus;
}
/**
 * @public
 */
export interface GetAssessmentRequest {
    /**
     * <p>The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
}
/**
 * @public
 */
export interface GetAssessmentResponse {
    /**
     * <p> An entity that defines the scope of audit evidence collected by Audit Manager.
     *          An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
     * @public
     */
    assessment?: Assessment;
    /**
     * <p> The wrapper that contains the Audit Manager role information of the current user.
     *          This includes the role type and IAM Amazon Resource Name (ARN). </p>
     * @public
     */
    userRole?: Role;
}
/**
 * @public
 */
export interface GetAssessmentFrameworkRequest {
    /**
     * <p> The identifier for the framework. </p>
     * @public
     */
    frameworkId: string | undefined;
}
/**
 * @public
 */
export interface GetAssessmentFrameworkResponse {
    /**
     * <p> The framework that the <code>GetAssessmentFramework</code> API returned. </p>
     * @public
     */
    framework?: Framework;
}
/**
 * @public
 */
export interface GetAssessmentReportUrlRequest {
    /**
     * <p> The unique identifier for the assessment report. </p>
     * @public
     */
    assessmentReportId: string | undefined;
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
}
/**
 * <p> Short for uniform resource locator. A URL is used as a unique identifier to locate a
 *          resource on the internet. </p>
 * @public
 */
export interface URL {
    /**
     * <p> The name or word that's used as a hyperlink to the URL. </p>
     * @public
     */
    hyperlinkName?: string;
    /**
     * <p> The unique identifier for the internet resource. </p>
     * @public
     */
    link?: string;
}
/**
 * @public
 */
export interface GetAssessmentReportUrlResponse {
    /**
     * <p> Short for uniform resource locator. A URL is used as a unique identifier to locate a
     *          resource on the internet. </p>
     * @public
     */
    preSignedUrl?: URL;
}
/**
 * @public
 */
export interface GetChangeLogsRequest {
    /**
     * <p>The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The unique identifier for the control set. </p>
     * @public
     */
    controlSetId?: string;
    /**
     * <p> The unique identifier for the control. </p>
     * @public
     */
    controlId?: string;
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 * @enum
 */
export declare const ObjectTypeEnum: {
    readonly ASSESSMENT: "ASSESSMENT";
    readonly ASSESSMENT_REPORT: "ASSESSMENT_REPORT";
    readonly CONTROL: "CONTROL";
    readonly CONTROL_SET: "CONTROL_SET";
    readonly DELEGATION: "DELEGATION";
};
/**
 * @public
 */
export type ObjectTypeEnum = (typeof ObjectTypeEnum)[keyof typeof ObjectTypeEnum];
/**
 * <p> The record of a change within Audit Manager. For example, this could be the
 *          status change of an assessment or the delegation of a control set. </p>
 * @public
 */
export interface ChangeLog {
    /**
     * <p> The object that was changed, such as an assessment, control, or control set. </p>
     * @public
     */
    objectType?: ObjectTypeEnum;
    /**
     * <p> The name of the object that changed. This could be the name of an assessment, control,
     *          or control set.</p>
     * @public
     */
    objectName?: string;
    /**
     * <p> The action that was performed. </p>
     * @public
     */
    action?: ActionEnum;
    /**
     * <p> The time when the action was performed and the changelog record was created. </p>
     * @public
     */
    createdAt?: Date;
    /**
     * <p> The user or role that performed the action. </p>
     * @public
     */
    createdBy?: string;
}
/**
 * @public
 */
export interface GetChangeLogsResponse {
    /**
     * <p>The list of user activity for the control. </p>
     * @public
     */
    changeLogs?: ChangeLog[];
    /**
     * <p>The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface GetControlRequest {
    /**
     * <p> The identifier for the control. </p>
     * @public
     */
    controlId: string | undefined;
}
/**
 * @public
 */
export interface GetControlResponse {
    /**
     * <p> The details of the control that the <code>GetControl</code> API returned. </p>
     * @public
     */
    control?: Control;
}
/**
 * @public
 */
export interface GetDelegationsRequest {
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * <p> The metadata that's associated with the delegation. </p>
 * @public
 */
export interface DelegationMetadata {
    /**
     * <p> The unique identifier for the delegation. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name of the associated assessment. </p>
     * @public
     */
    assessmentName?: string;
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId?: string;
    /**
     * <p> The current status of the delegation. </p>
     * @public
     */
    status?: DelegationStatus;
    /**
     * <p> The Amazon Resource Name (ARN) of the IAM role. </p>
     * @public
     */
    roleArn?: string;
    /**
     * <p> Specifies when the delegation was created. </p>
     * @public
     */
    creationTime?: Date;
    /**
     * <p> Specifies the name of the control set that was delegated for review. </p>
     * @public
     */
    controlSetName?: string;
}
/**
 * @public
 */
export interface GetDelegationsResponse {
    /**
     * <p> The list of delegations that the <code>GetDelegations</code> API returned. </p>
     * @public
     */
    delegations?: DelegationMetadata[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface GetEvidenceRequest {
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The unique identifier for the control set. </p>
     * @public
     */
    controlSetId: string | undefined;
    /**
     * <p> The unique identifier for the folder that the evidence is stored in. </p>
     * @public
     */
    evidenceFolderId: string | undefined;
    /**
     * <p> The unique identifier for the evidence. </p>
     * @public
     */
    evidenceId: string | undefined;
}
/**
 * <p> A system asset that's evaluated in an Audit Manager assessment. </p>
 * @public
 */
export interface Resource {
    /**
     * <p> The Amazon Resource Name (ARN) for the resource. </p>
     * @public
     */
    arn?: string;
    /**
     * <p> The value of the resource. </p>
     * @public
     */
    value?: string;
    /**
     * <p> The evaluation status for a resource that was assessed when collecting compliance check
     *          evidence. </p>
     *          <ul>
     *             <li>
     *                <p>Audit Manager classes the resource as non-compliant if Security Hub reports a
     *                   <i>Fail</i> result, or if Config reports a
     *                   <i>Non-compliant</i> result.</p>
     *             </li>
     *             <li>
     *                <p>Audit Manager classes the resource as compliant if Security Hub reports a
     *                   <i>Pass</i> result, or if Config reports a
     *                   <i>Compliant</i> result.</p>
     *             </li>
     *             <li>
     *                <p>If a compliance check isn't available or applicable, then no compliance evaluation can be made
     *                for that resource. This is the case if a resource assessment uses Config or Security Hub as the underlying data source type, but those services
     *                aren't enabled. This is also the case if the resource assessment uses an underlying
     *                data source type that doesn't support compliance checks (such as manual evidence,
     *                   Amazon Web Services API calls, or CloudTrail). </p>
     *             </li>
     *          </ul>
     * @public
     */
    complianceCheck?: string;
}
/**
 * <p> A record that contains the information needed to demonstrate compliance with the
 *          requirements specified by a control. Examples of evidence include change activity invoked
 *          by a user, or a system configuration snapshot. </p>
 * @public
 */
export interface Evidence {
    /**
     * <p> The data source where the evidence was collected from. </p>
     * @public
     */
    dataSource?: string;
    /**
     * <p> The identifier for the Amazon Web Services account. </p>
     * @public
     */
    evidenceAwsAccountId?: string;
    /**
     * <p> The timestamp that represents when the evidence was collected. </p>
     * @public
     */
    time?: Date;
    /**
     * <p> The Amazon Web Service that the evidence is collected from. </p>
     * @public
     */
    eventSource?: string;
    /**
     * <p> The name of the evidence event. </p>
     * @public
     */
    eventName?: string;
    /**
     * <p> The type of automated evidence. </p>
     * @public
     */
    evidenceByType?: string;
    /**
     * <p> The list of resources that are assessed to generate the evidence. </p>
     * @public
     */
    resourcesIncluded?: Resource[];
    /**
     * <p> The names and values that are used by the evidence event. This includes an attribute
     *          name (such as <code>allowUsersToChangePassword</code>) and value (such as <code>true</code>
     *          or <code>false</code>). </p>
     * @public
     */
    attributes?: Record<string, string>;
    /**
     * <p> The unique identifier for the user or role that's associated with
     *          the evidence. </p>
     * @public
     */
    iamId?: string;
    /**
     * <p>The evaluation status for automated evidence that falls under the compliance check
     *          category.</p>
     *          <ul>
     *             <li>
     *                <p>Audit Manager classes evidence as non-compliant if Security Hub reports a
     *                   <i>Fail</i> result, or if Config reports a
     *                   <i>Non-compliant</i> result.</p>
     *             </li>
     *             <li>
     *                <p>Audit Manager classes evidence as compliant if Security Hub reports a
     *                   <i>Pass</i> result, or if Config reports a
     *                   <i>Compliant</i> result.</p>
     *             </li>
     *             <li>
     *                <p>If a compliance check isn't available or applicable, then no compliance evaluation can be made
     *                for that evidence. This is the case if the evidence uses Config or
     *                   Security Hub as the underlying data source type, but those services aren't
     *                enabled. This is also the case if the evidence uses an underlying data source type
     *                that doesn't support compliance checks (such as manual evidence, Amazon Web Services
     *                API calls, or CloudTrail). </p>
     *             </li>
     *          </ul>
     * @public
     */
    complianceCheck?: string;
    /**
     * <p> The Amazon Web Services account that the evidence is collected from, and its
     *          organization path. </p>
     * @public
     */
    awsOrganization?: string;
    /**
     * <p> The identifier for the Amazon Web Services account. </p>
     * @public
     */
    awsAccountId?: string;
    /**
     * <p> The identifier for the folder that the evidence is stored in. </p>
     * @public
     */
    evidenceFolderId?: string;
    /**
     * <p> The identifier for the evidence. </p>
     * @public
     */
    id?: string;
    /**
     * <p> Specifies whether the evidence is included in the assessment report. </p>
     * @public
     */
    assessmentReportSelection?: string;
}
/**
 * @public
 */
export interface GetEvidenceResponse {
    /**
     * <p> The evidence that the <code>GetEvidence</code> API returned. </p>
     * @public
     */
    evidence?: Evidence;
}
/**
 * @public
 */
export interface GetEvidenceByEvidenceFolderRequest {
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The identifier for the control set. </p>
     * @public
     */
    controlSetId: string | undefined;
    /**
     * <p> The unique identifier for the folder that the evidence is stored in. </p>
     * @public
     */
    evidenceFolderId: string | undefined;
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 */
export interface GetEvidenceByEvidenceFolderResponse {
    /**
     * <p> The list of evidence that the <code>GetEvidenceByEvidenceFolder</code> API returned.
     *       </p>
     * @public
     */
    evidence?: Evidence[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface GetEvidenceFileUploadUrlRequest {
    /**
     * <p>The file that you want to upload. For a list of supported file formats, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files">Supported file types for manual evidence</a> in the <i>Audit Manager
     *             User Guide</i>.</p>
     * @public
     */
    fileName: string | undefined;
}
/**
 * @public
 */
export interface GetEvidenceFileUploadUrlResponse {
    /**
     * <p>The name of the uploaded manual evidence file that the presigned URL was generated
     *          for.</p>
     * @public
     */
    evidenceFileName?: string;
    /**
     * <p>The presigned URL that was generated.</p>
     * @public
     */
    uploadUrl?: string;
}
/**
 * @public
 */
export interface GetEvidenceFolderRequest {
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The unique identifier for the control set. </p>
     * @public
     */
    controlSetId: string | undefined;
    /**
     * <p> The unique identifier for the folder that the evidence is stored in. </p>
     * @public
     */
    evidenceFolderId: string | undefined;
}
/**
 * @public
 */
export interface GetEvidenceFolderResponse {
    /**
     * <p> The folder that the evidence is stored in. </p>
     * @public
     */
    evidenceFolder?: AssessmentEvidenceFolder;
}
/**
 * @public
 */
export interface GetEvidenceFoldersByAssessmentRequest {
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 */
export interface GetEvidenceFoldersByAssessmentResponse {
    /**
     * <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessment</code> API
     *          returned. </p>
     * @public
     */
    evidenceFolders?: AssessmentEvidenceFolder[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface GetEvidenceFoldersByAssessmentControlRequest {
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The identifier for the control set. </p>
     * @public
     */
    controlSetId: string | undefined;
    /**
     * <p> The identifier for the control. </p>
     * @public
     */
    controlId: string | undefined;
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 */
export interface GetEvidenceFoldersByAssessmentControlResponse {
    /**
     * <p> The list of evidence folders that the
     *             <code>GetEvidenceFoldersByAssessmentControl</code> API returned. </p>
     * @public
     */
    evidenceFolders?: AssessmentEvidenceFolder[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface GetInsightsRequest {
}
/**
 * <p>A summary of the latest analytics data for all your active assessments. </p>
 *          <p>This summary is a snapshot of the data that your active assessments collected on the
 *             <code>lastUpdated</code> date. It’s important to understand that the following totals
 *          are daily counts based on this date — they aren’t a total sum to date. </p>
 *          <p>The <code>Insights</code> data is eventually consistent. This means that, when you read
 *          data from <code>Insights</code>, the response might not instantly reflect the results of a
 *          recently completed write or update operation. If you repeat your read request after a few
 *          hours, the response should return the latest data.</p>
 *          <note>
 *             <p>If you delete an assessment or change its status to inactive,
 *                <code>InsightsByAssessment</code> includes data for that assessment as
 *             follows.</p>
 *             <ul>
 *                <li>
 *                   <p>
 *                      <b>Inactive assessments</b> - If Audit Manager
 *                   collected evidence for your assessment before you changed it inactive, that
 *                   evidence is included in the <code>InsightsByAssessment</code> counts for that
 *                   day.</p>
 *                </li>
 *                <li>
 *                   <p>
 *                      <b>Deleted assessments</b> - If Audit Manager
 *                   collected evidence for your assessment before you deleted it, that evidence isn't
 *                   included in the <code>InsightsByAssessment</code> counts for that day.</p>
 *                </li>
 *             </ul>
 *          </note>
 * @public
 */
export interface Insights {
    /**
     * <p>The number of active assessments in Audit Manager. </p>
     * @public
     */
    activeAssessmentsCount?: number;
    /**
     * <p>The number of compliance check evidence that Audit Manager classified as
     *          non-compliant on the <code>lastUpdated</code> date. This includes evidence that was
     *          collected from Security Hub with a <i>Fail</i> ruling, or collected
     *          from Config with a <i>Non-compliant</i> ruling. </p>
     * @public
     */
    noncompliantEvidenceCount?: number;
    /**
     * <p>The number of compliance check evidence that Audit Manager classified as compliant
     *          on the <code>lastUpdated</code> date. This includes evidence that was collected from
     *             Security Hub with a <i>Pass</i> ruling, or collected from
     *             Config with a <i>Compliant</i> ruling. </p>
     * @public
     */
    compliantEvidenceCount?: number;
    /**
     * <p>The number of evidence without a compliance check ruling. Evidence is inconclusive when
     *          the associated control uses Security Hub or Config as a data
     *          source but you didn't enable those services. This is also the case when a control uses a
     *          data source that doesn’t support compliance checks (for example: manual evidence, API
     *          calls, or CloudTrail). </p>
     *          <note>
     *             <p>If evidence has a compliance check status of <i>not applicable</i>,
     *             it's classed as <i>inconclusive</i> in <code>Insights</code> data.</p>
     *          </note>
     * @public
     */
    inconclusiveEvidenceCount?: number;
    /**
     * <p>The number of assessment controls that collected non-compliant evidence on the
     *             <code>lastUpdated</code> date. </p>
     * @public
     */
    assessmentControlsCountByNoncompliantEvidence?: number;
    /**
     * <p>The total number of controls across all active assessments. </p>
     * @public
     */
    totalAssessmentControlsCount?: number;
    /**
     * <p>The time when the cross-assessment insights were last updated. </p>
     * @public
     */
    lastUpdated?: Date;
}
/**
 * @public
 */
export interface GetInsightsResponse {
    /**
     * <p>The analytics data that the <code>GetInsights</code> API returned. </p>
     * @public
     */
    insights?: Insights;
}
/**
 * @public
 */
export interface GetInsightsByAssessmentRequest {
    /**
     * <p>The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
}
/**
 * <p>A summary of the latest analytics data for a specific active assessment.</p>
 *          <p>This summary is a snapshot of the data that was collected on the
 *             <code>lastUpdated</code> date. It’s important to understand that the totals in
 *             <code>InsightsByAssessment</code> are daily counts based on this date — they aren’t a
 *          total sum to date. </p>
 *          <p>The <code>InsightsByAssessment</code> data is eventually consistent. This means that
 *          when you read data from <code>InsightsByAssessment</code>, the response might not instantly
 *          reflect the results of a recently completed write or update operation. If you repeat your
 *          read request after a few hours, the response returns the latest data.</p>
 *          <note>
 *             <p>If you delete an assessment or change its status to inactive,
 *                <code>InsightsByAssessment</code> includes data for that assessment as
 *             follows.</p>
 *             <ul>
 *                <li>
 *                   <p>
 *                      <b>Inactive assessments</b> - If Audit Manager
 *                   collected evidence for your assessment before you changed it inactive, that
 *                   evidence is included in the <code>InsightsByAssessment</code> counts for that
 *                   day.</p>
 *                </li>
 *                <li>
 *                   <p>
 *                      <b>Deleted assessments</b> - If Audit Manager
 *                   collected evidence for your assessment before you deleted it, that evidence isn't
 *                   included in the <code>InsightsByAssessment</code> counts for that day.</p>
 *                </li>
 *             </ul>
 *          </note>
 * @public
 */
export interface InsightsByAssessment {
    /**
     * <p>The number of compliance check evidence that Audit Manager classified as
     *          non-compliant. This includes evidence that was collected from Security Hub with a
     *             <i>Fail</i> ruling, or collected from Config with a
     *             <i>Non-compliant</i> ruling. </p>
     * @public
     */
    noncompliantEvidenceCount?: number;
    /**
     * <p>The number of compliance check evidence that Audit Manager classified as compliant.
     *          This includes evidence that was collected from Security Hub with a
     *             <i>Pass</i> ruling, or collected from Config with a
     *             <i>Compliant</i> ruling. </p>
     * @public
     */
    compliantEvidenceCount?: number;
    /**
     * <p>The amount of evidence without a compliance check ruling. Evidence is inconclusive if
     *          the associated control uses Security Hub or Config as a data
     *          source and you didn't enable those services. This is also the case if a control uses a data
     *          source that doesn’t support compliance checks (for example, manual evidence, API calls, or
     *             CloudTrail). </p>
     *          <note>
     *             <p>If evidence has a compliance check status of <i>not applicable</i>,
     *             it's classified as <i>inconclusive</i> in
     *                <code>InsightsByAssessment</code> data.</p>
     *          </note>
     * @public
     */
    inconclusiveEvidenceCount?: number;
    /**
     * <p>The number of assessment controls that collected non-compliant evidence on the
     *             <code>lastUpdated</code> date. </p>
     * @public
     */
    assessmentControlsCountByNoncompliantEvidence?: number;
    /**
     * <p>The total number of controls in the assessment. </p>
     * @public
     */
    totalAssessmentControlsCount?: number;
    /**
     * <p>The time when the assessment insights were last updated.</p>
     * @public
     */
    lastUpdated?: Date;
}
/**
 * @public
 */
export interface GetInsightsByAssessmentResponse {
    /**
     * <p> The assessment analytics data that the <code>GetInsightsByAssessment</code> API
     *          returned. </p>
     * @public
     */
    insights?: InsightsByAssessment;
}
/**
 * @public
 */
export interface GetOrganizationAdminAccountRequest {
}
/**
 * @public
 */
export interface GetOrganizationAdminAccountResponse {
    /**
     * <p> The identifier for the administrator account. </p>
     * @public
     */
    adminAccountId?: string;
    /**
     * <p> The identifier for the organization. </p>
     * @public
     */
    organizationId?: string;
}
/**
 * @public
 */
export interface GetServicesInScopeRequest {
}
/**
 * <p> The metadata that's associated with the Amazon Web Service. </p>
 * @public
 */
export interface ServiceMetadata {
    /**
     * <p> The name of the Amazon Web Service. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The display name of the Amazon Web Service. </p>
     * @public
     */
    displayName?: string;
    /**
     * <p> The description of the Amazon Web Service. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The category that the Amazon Web Service belongs to, such as compute, storage,
     *          or database. </p>
     * @public
     */
    category?: string;
}
/**
 * @public
 */
export interface GetServicesInScopeResponse {
    /**
     * <p> The metadata that's associated with the Amazon Web Service. </p>
     * @public
     */
    serviceMetadata?: ServiceMetadata[];
}
/**
 * @public
 * @enum
 */
export declare const SettingAttribute: {
    readonly ALL: "ALL";
    readonly DEFAULT_ASSESSMENT_REPORTS_DESTINATION: "DEFAULT_ASSESSMENT_REPORTS_DESTINATION";
    readonly DEFAULT_EXPORT_DESTINATION: "DEFAULT_EXPORT_DESTINATION";
    readonly DEFAULT_PROCESS_OWNERS: "DEFAULT_PROCESS_OWNERS";
    readonly DEREGISTRATION_POLICY: "DEREGISTRATION_POLICY";
    readonly EVIDENCE_FINDER_ENABLEMENT: "EVIDENCE_FINDER_ENABLEMENT";
    readonly IS_AWS_ORG_ENABLED: "IS_AWS_ORG_ENABLED";
    readonly SNS_TOPIC: "SNS_TOPIC";
};
/**
 * @public
 */
export type SettingAttribute = (typeof SettingAttribute)[keyof typeof SettingAttribute];
/**
 * @public
 */
export interface GetSettingsRequest {
    /**
     * <p> The list of setting attribute enum values. </p>
     * @public
     */
    attribute: SettingAttribute | undefined;
}
/**
 * @public
 * @enum
 */
export declare const ExportDestinationType: {
    readonly S3: "S3";
};
/**
 * @public
 */
export type ExportDestinationType = (typeof ExportDestinationType)[keyof typeof ExportDestinationType];
/**
 * <p>The default s3 bucket where Audit Manager saves the files that you export from evidence finder.</p>
 * @public
 */
export interface DefaultExportDestination {
    /**
     * <p>The destination type, such as Amazon S3.</p>
     * @public
     */
    destinationType?: ExportDestinationType;
    /**
     * <p>The destination bucket where Audit Manager stores exported files.</p>
     * @public
     */
    destination?: string;
}
/**
 * @public
 * @enum
 */
export declare const DeleteResources: {
    readonly ALL: "ALL";
    readonly DEFAULT: "DEFAULT";
};
/**
 * @public
 */
export type DeleteResources = (typeof DeleteResources)[keyof typeof DeleteResources];
/**
 * <p>The deregistration policy for the data that's stored in Audit Manager. You can
 *          use this attribute to determine how your data is handled when you <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeregisterAccount.html">deregister Audit Manager</a>.</p>
 *          <p>By default, Audit Manager retains evidence data for two years from the time of its
 *          creation. Other Audit Manager resources (including assessments, custom controls, and
 *          custom frameworks) remain in Audit Manager indefinitely, and are available if you
 *             <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_RegisterAccount.html">re-register Audit Manager</a> in the future. For more
 *          information about data retention, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/data-protection.html">Data
 *             Protection</a> in the <i>Audit Manager User Guide</i>.</p>
 *          <important>
 *             <p>If you choose to delete all data, this action permanently deletes all evidence data
 *             in your account within seven days. It also deletes all of the Audit Manager
 *             resources that you created, including assessments, custom controls, and custom
 *             frameworks. Your data will not be available if you re-register Audit Manager in the
 *             future.</p>
 *          </important>
 * @public
 */
export interface DeregistrationPolicy {
    /**
     * <p>Specifies which Audit Manager data will be deleted when you deregister Audit Manager.</p>
     *          <ul>
     *             <li>
     *                <p>If you set the value to <code>ALL</code>, all of your data is deleted within seven
     *                days of deregistration.</p>
     *             </li>
     *             <li>
     *                <p>If you set the value to <code>DEFAULT</code>, none of your data is deleted at the
     *                time of deregistration. However, keep in mind that the Audit Manager data
     *                retention policy still applies. As a result, any evidence data will be deleted two
     *                years after its creation date. Your other Audit Manager resources will continue
     *                to exist indefinitely.</p>
     *             </li>
     *          </ul>
     * @public
     */
    deleteResources?: DeleteResources;
}
/**
 * @public
 * @enum
 */
export declare const EvidenceFinderBackfillStatus: {
    readonly COMPLETED: "COMPLETED";
    readonly IN_PROGRESS: "IN_PROGRESS";
    readonly NOT_STARTED: "NOT_STARTED";
};
/**
 * @public
 */
export type EvidenceFinderBackfillStatus = (typeof EvidenceFinderBackfillStatus)[keyof typeof EvidenceFinderBackfillStatus];
/**
 * @public
 * @enum
 */
export declare const EvidenceFinderEnablementStatus: {
    readonly DISABLED: "DISABLED";
    readonly DISABLE_IN_PROGRESS: "DISABLE_IN_PROGRESS";
    readonly ENABLED: "ENABLED";
    readonly ENABLE_IN_PROGRESS: "ENABLE_IN_PROGRESS";
};
/**
 * @public
 */
export type EvidenceFinderEnablementStatus = (typeof EvidenceFinderEnablementStatus)[keyof typeof EvidenceFinderEnablementStatus];
/**
 * <p>The settings object that specifies whether evidence finder is enabled. This object also
 *          describes the related event data store, and the backfill status for populating the event
 *          data store with evidence data.</p>
 * @public
 */
export interface EvidenceFinderEnablement {
    /**
     * <p>The Amazon Resource Name (ARN) of the CloudTrail Lake event data store that’s
     *          used by evidence finder. The event data store is the lake of evidence data that evidence
     *          finder runs queries against.</p>
     * @public
     */
    eventDataStoreArn?: string;
    /**
     * <p>The current status of the evidence finder feature and the related event data store. </p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>ENABLE_IN_PROGRESS</code> means that you requested to enable evidence
     *                finder. An event data store is currently being created to support evidence finder
     *                queries.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>ENABLED</code> means that an event data store was successfully created and
     *                evidence finder is enabled. We recommend that you wait 7 days until the event data
     *                store is backfilled with your past two years’ worth of evidence data. You can use
     *                evidence finder in the meantime, but not all data might be available until the
     *                backfill is complete.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>DISABLE_IN_PROGRESS</code> means that you requested to disable evidence finder, and your
     *                request is pending the deletion of the event data store.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>DISABLED</code> means that you have permanently disabled evidence finder and the event
     *                data store has been deleted. You can't re-enable evidence finder after this
     *                point.</p>
     *             </li>
     *          </ul>
     * @public
     */
    enablementStatus?: EvidenceFinderEnablementStatus;
    /**
     * <p>The current status of the evidence data backfill process. </p>
     *          <p>The backfill starts after you enable evidence finder. During this task, Audit Manager populates an event data store with your past two years’ worth of evidence data so that
     *          your evidence can be queried.</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <code>NOT_STARTED</code> means that the backfill hasn’t started yet. </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>IN_PROGRESS</code> means that the backfill is in progress. This can take up
     *                to 7 days to complete, depending on the amount of evidence data. </p>
     *             </li>
     *             <li>
     *                <p>
     *                   <code>COMPLETED</code> means that the backfill is complete. All of your past
     *                evidence is now queryable. </p>
     *             </li>
     *          </ul>
     * @public
     */
    backfillStatus?: EvidenceFinderBackfillStatus;
    /**
     * <p>Represents any errors that occurred when enabling or disabling evidence finder. </p>
     * @public
     */
    error?: string;
}
/**
 * <p> The settings object that holds all supported Audit Manager settings. </p>
 * @public
 */
export interface Settings {
    /**
     * <p> Specifies whether Organizations is enabled. </p>
     * @public
     */
    isAwsOrgEnabled?: boolean;
    /**
     * <p> The designated Amazon Simple Notification Service (Amazon SNS) topic. </p>
     * @public
     */
    snsTopic?: string;
    /**
     * <p>The default S3 destination bucket for storing assessment reports.</p>
     * @public
     */
    defaultAssessmentReportsDestination?: AssessmentReportsDestination;
    /**
     * <p> The designated default audit owners. </p>
     * @public
     */
    defaultProcessOwners?: Role[];
    /**
     * <p> The KMS key details. </p>
     * @public
     */
    kmsKey?: string;
    /**
     * <p>The current evidence finder status and event data store details.</p>
     * @public
     */
    evidenceFinderEnablement?: EvidenceFinderEnablement;
    /**
     * <p>The deregistration policy for your Audit Manager data. You can
     *       use this attribute to determine how your data is handled when you deregister Audit Manager.</p>
     * @public
     */
    deregistrationPolicy?: DeregistrationPolicy;
    /**
     * <p>The default S3 destination bucket for storing evidence finder exports.</p>
     * @public
     */
    defaultExportDestination?: DefaultExportDestination;
}
/**
 * @public
 */
export interface GetSettingsResponse {
    /**
     * <p> The settings object that holds all supported Audit Manager settings. </p>
     * @public
     */
    settings?: Settings;
}
/**
 * @public
 */
export interface ListAssessmentControlInsightsByControlDomainRequest {
    /**
     * <p>The unique identifier for the control domain. </p>
     * @public
     */
    controlDomainId: string | undefined;
    /**
     * <p>The unique identifier for the active assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p>The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * <p>A breakdown of the latest compliance check status for the evidence in your Audit Manager assessments. </p>
 * @public
 */
export interface EvidenceInsights {
    /**
     * <p>The number of compliance check evidence that Audit Manager classified as
     *          non-compliant. This includes evidence that was collected from Security Hub with a
     *             <i>Fail</i> ruling, or collected from Config with a
     *             <i>Non-compliant</i> ruling. </p>
     * @public
     */
    noncompliantEvidenceCount?: number;
    /**
     * <p>The number of compliance check evidence that Audit Manager classified as compliant.
     *          This includes evidence that was collected from Security Hub with a
     *             <i>Pass</i> ruling, or collected from Config with a
     *             <i>Compliant</i> ruling. </p>
     * @public
     */
    compliantEvidenceCount?: number;
    /**
     * <p>The number of evidence that a compliance check ruling isn't available for. Evidence is
     *          inconclusive when the associated control uses Security Hub or Config as a data source but you didn't enable those services. This is also the case when a
     *          control uses a data source that doesn’t support compliance checks (for example, manual
     *          evidence, API calls, or CloudTrail). </p>
     *          <note>
     *             <p>If evidence has a compliance check status of <i>not applicable</i> in
     *             the console, it's classified as <i>inconclusive</i> in
     *                <code>EvidenceInsights</code> data.</p>
     *          </note>
     * @public
     */
    inconclusiveEvidenceCount?: number;
}
/**
 * <p>A summary of the latest analytics data for a specific control in a specific active
 *          assessment.</p>
 *          <p>Control insights are grouped by control domain, and ranked by the highest total count of
 *          non-compliant evidence. </p>
 * @public
 */
export interface ControlInsightsMetadataByAssessmentItem {
    /**
     * <p>The name of the assessment control. </p>
     * @public
     */
    name?: string;
    /**
     * <p>The unique identifier for the assessment control. </p>
     * @public
     */
    id?: string;
    /**
     * <p>A breakdown of the compliance check status for the evidence that’s associated with the
     *          assessment control. </p>
     * @public
     */
    evidenceInsights?: EvidenceInsights;
    /**
     * <p>The name of the control set that the assessment control belongs to. </p>
     * @public
     */
    controlSetName?: string;
    /**
     * <p>The time when the assessment control insights were last updated. </p>
     * @public
     */
    lastUpdated?: Date;
}
/**
 * @public
 */
export interface ListAssessmentControlInsightsByControlDomainResponse {
    /**
     * <p>The assessment control analytics data that the
     *             <code>ListAssessmentControlInsightsByControlDomain</code> API returned. </p>
     * @public
     */
    controlInsightsByAssessment?: ControlInsightsMetadataByAssessmentItem[];
    /**
     * <p>The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListAssessmentFrameworksRequest {
    /**
     * <p> The type of framework, such as a standard framework or a custom framework. </p>
     * @public
     */
    frameworkType: FrameworkType | undefined;
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 */
export interface ListAssessmentFrameworksResponse {
    /**
     * <p> A list of metadata that the <code>ListAssessmentFrameworks</code> API returns for each
     *          framework.</p>
     * @public
     */
    frameworkMetadataList?: AssessmentFrameworkMetadata[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListAssessmentFrameworkShareRequestsRequest {
    /**
     * <p> Specifies whether the share request is a sent request or a received request.</p>
     * @public
     */
    requestType: ShareRequestType | undefined;
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 */
export interface ListAssessmentFrameworkShareRequestsResponse {
    /**
     * <p> The list of share requests that the <code>ListAssessmentFrameworkShareRequests</code>
     *          API returned. </p>
     * @public
     */
    assessmentFrameworkShareRequests?: AssessmentFrameworkShareRequest[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListAssessmentReportsRequest {
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 */
export interface ListAssessmentReportsResponse {
    /**
     * <p> The list of assessment reports that the <code>ListAssessmentReports</code> API
     *          returned. </p>
     * @public
     */
    assessmentReports?: AssessmentReportMetadata[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListAssessmentsRequest {
    /**
     * <p> The current status of the assessment.</p>
     * @public
     */
    status?: AssessmentStatus;
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 */
export interface ListAssessmentsResponse {
    /**
     * <p>The metadata that the <code>ListAssessments</code> API returns for each
     *          assessment.</p>
     * @public
     */
    assessmentMetadata?: AssessmentMetadataItem[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListControlDomainInsightsRequest {
    /**
     * <p>The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * <p>A summary of the latest analytics data for a specific control domain.</p>
 *          <p>Control domain insights are grouped by control domain, and ranked by the highest total
 *          count of non-compliant evidence.</p>
 * @public
 */
export interface ControlDomainInsights {
    /**
     * <p>The name of the control domain. </p>
     * @public
     */
    name?: string;
    /**
     * <p>The unique identifier for the control domain. </p>
     * @public
     */
    id?: string;
    /**
     * <p>The number of controls in the control domain that collected non-compliant evidence on
     *          the <code>lastUpdated</code> date. </p>
     * @public
     */
    controlsCountByNoncompliantEvidence?: number;
    /**
     * <p>The total number of controls in the control domain. </p>
     * @public
     */
    totalControlsCount?: number;
    /**
     * <p>A breakdown of the compliance check status for the evidence that’s associated with the
     *          control domain. </p>
     * @public
     */
    evidenceInsights?: EvidenceInsights;
    /**
     * <p>The time when the control domain insights were last updated. </p>
     * @public
     */
    lastUpdated?: Date;
}
/**
 * @public
 */
export interface ListControlDomainInsightsResponse {
    /**
     * <p>The control domain analytics data that the <code>ListControlDomainInsights</code> API
     *          returned. </p>
     * @public
     */
    controlDomainInsights?: ControlDomainInsights[];
    /**
     * <p>The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListControlDomainInsightsByAssessmentRequest {
    /**
     * <p>The unique identifier for the active assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p>The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 */
export interface ListControlDomainInsightsByAssessmentResponse {
    /**
     * <p>The control domain analytics data that the
     *             <code>ListControlDomainInsightsByAssessment</code> API returned. </p>
     * @public
     */
    controlDomainInsights?: ControlDomainInsights[];
    /**
     * <p>The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListControlInsightsByControlDomainRequest {
    /**
     * <p>The unique identifier for the control domain. </p>
     * @public
     */
    controlDomainId: string | undefined;
    /**
     * <p>The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * <p>A summary of the latest analytics data for a specific control. </p>
 *          <p>This data reflects the total counts for the specified control across all active
 *          assessments. Control insights are grouped by control domain, and ranked by the highest
 *          total count of non-compliant evidence.</p>
 * @public
 */
export interface ControlInsightsMetadataItem {
    /**
     * <p>The name of the control. </p>
     * @public
     */
    name?: string;
    /**
     * <p>The unique identifier for the control. </p>
     * @public
     */
    id?: string;
    /**
     * <p>A breakdown of the compliance check status for the evidence that’s associated with the
     *          control. </p>
     * @public
     */
    evidenceInsights?: EvidenceInsights;
    /**
     * <p>The time when the control insights were last updated. </p>
     * @public
     */
    lastUpdated?: Date;
}
/**
 * @public
 */
export interface ListControlInsightsByControlDomainResponse {
    /**
     * <p>The control analytics data that the <code>ListControlInsightsByControlDomain</code> API
     *          returned. </p>
     * @public
     */
    controlInsightsMetadata?: ControlInsightsMetadataItem[];
    /**
     * <p>The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListControlsRequest {
    /**
     * <p> The type of control, such as a standard control or a custom control. </p>
     * @public
     */
    controlType: ControlType | undefined;
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * <p> The metadata that's associated with the standard control or custom control. </p>
 * @public
 */
export interface ControlMetadata {
    /**
     * <p> The Amazon Resource Name (ARN) of the control. </p>
     * @public
     */
    arn?: string;
    /**
     * <p> The unique identifier for the control. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name of the control. </p>
     * @public
     */
    name?: string;
    /**
     * <p> The data source that determines where Audit Manager collects evidence from for the
     *          control. </p>
     * @public
     */
    controlSources?: string;
    /**
     * <p> The time when the control was created. </p>
     * @public
     */
    createdAt?: Date;
    /**
     * <p> The time when the control was most recently updated. </p>
     * @public
     */
    lastUpdatedAt?: Date;
}
/**
 * @public
 */
export interface ListControlsResponse {
    /**
     * <p> A list of metadata that the <code>ListControls</code> API returns for each
     *          control.</p>
     * @public
     */
    controlMetadataList?: ControlMetadata[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListKeywordsForDataSourceRequest {
    /**
     * <p> The control mapping data source that the keywords apply to. </p>
     * @public
     */
    source: SourceType | undefined;
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * @public
 */
export interface ListKeywordsForDataSourceResponse {
    /**
     * <p> The list of keywords for the event mapping source. </p>
     * @public
     */
    keywords?: string[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListNotificationsRequest {
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
    /**
     * <p> Represents the maximum number of results on a page or for an API request call. </p>
     * @public
     */
    maxResults?: number;
}
/**
 * <p> The notification that informs a user of an update in Audit Manager. For
 *          example, this includes the notification that's sent when a control set is delegated for
 *          review. </p>
 * @public
 */
export interface Notification {
    /**
     * <p> The unique identifier for the notification. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The identifier for the assessment. </p>
     * @public
     */
    assessmentId?: string;
    /**
     * <p> The name of the related assessment. </p>
     * @public
     */
    assessmentName?: string;
    /**
     * <p> The identifier for the control set. </p>
     * @public
     */
    controlSetId?: string;
    /**
     * <p> Specifies the name of the control set that the notification is about. </p>
     * @public
     */
    controlSetName?: string;
    /**
     * <p> The description of the notification. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The time when the notification was sent. </p>
     * @public
     */
    eventTime?: Date;
    /**
     * <p> The sender of the notification. </p>
     * @public
     */
    source?: string;
}
/**
 * @public
 */
export interface ListNotificationsResponse {
    /**
     * <p> The returned list of notifications. </p>
     * @public
     */
    notifications?: Notification[];
    /**
     * <p> The pagination token that's used to fetch the next set of results. </p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListTagsForResourceRequest {
    /**
     * <p> The Amazon Resource Name (ARN) of the resource. </p>
     * @public
     */
    resourceArn: string | undefined;
}
/**
 * @public
 */
export interface ListTagsForResourceResponse {
    /**
     * <p> The list of tags that the <code>ListTagsForResource</code> API returned. </p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * @public
 */
export interface RegisterAccountRequest {
    /**
     * <p> The KMS key details. </p>
     * @public
     */
    kmsKey?: string;
    /**
     * <p> The delegated administrator account for Audit Manager. </p>
     * @public
     */
    delegatedAdminAccount?: string;
}
/**
 * @public
 */
export interface RegisterAccountResponse {
    /**
     * <p> The status of the account registration request. </p>
     * @public
     */
    status?: AccountStatus;
}
/**
 * @public
 */
export interface RegisterOrganizationAdminAccountRequest {
    /**
     * <p> The identifier for the delegated administrator account. </p>
     * @public
     */
    adminAccountId: string | undefined;
}
/**
 * @public
 */
export interface RegisterOrganizationAdminAccountResponse {
    /**
     * <p> The identifier for the delegated administrator account. </p>
     * @public
     */
    adminAccountId?: string;
    /**
     * <p> The identifier for the organization. </p>
     * @public
     */
    organizationId?: string;
}
/**
 * @public
 */
export interface StartAssessmentFrameworkShareRequest {
    /**
     * <p> The unique identifier for the custom framework to be shared. </p>
     * @public
     */
    frameworkId: string | undefined;
    /**
     * <p> The Amazon Web Services account of the recipient. </p>
     * @public
     */
    destinationAccount: string | undefined;
    /**
     * <p> The Amazon Web Services Region of the recipient. </p>
     * @public
     */
    destinationRegion: string | undefined;
    /**
     * <p> An optional comment from the sender about the share request. </p>
     * @public
     */
    comment?: string;
}
/**
 * @public
 */
export interface StartAssessmentFrameworkShareResponse {
    /**
     * <p> The share request that's created by the <code>StartAssessmentFrameworkShare</code> API.
     *       </p>
     * @public
     */
    assessmentFrameworkShareRequest?: AssessmentFrameworkShareRequest;
}
/**
 * @public
 */
export interface TagResourceRequest {
    /**
     * <p> The Amazon Resource Name (ARN) of the resource. </p>
     * @public
     */
    resourceArn: string | undefined;
    /**
     * <p> The tags that are associated with the resource. </p>
     * @public
     */
    tags: Record<string, string> | undefined;
}
/**
 * @public
 */
export interface TagResourceResponse {
}
/**
 * @public
 */
export interface UntagResourceRequest {
    /**
     * <p> The Amazon Resource Name (ARN) of the specified resource. </p>
     * @public
     */
    resourceArn: string | undefined;
    /**
     * <p> The name or key of the tag. </p>
     * @public
     */
    tagKeys: string[] | undefined;
}
/**
 * @public
 */
export interface UntagResourceResponse {
}
/**
 * @public
 */
export interface UpdateAssessmentRequest {
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The name of the assessment to be updated. </p>
     * @public
     */
    assessmentName?: string;
    /**
     * <p> The description of the assessment. </p>
     * @public
     */
    assessmentDescription?: string;
    /**
     * <p> The scope of the assessment. </p>
     * @public
     */
    scope: Scope | undefined;
    /**
     * <p> The assessment report storage destination for the assessment that's being updated.
     *       </p>
     * @public
     */
    assessmentReportsDestination?: AssessmentReportsDestination;
    /**
     * <p> The list of roles for the assessment. </p>
     * @public
     */
    roles?: Role[];
}
/**
 * @public
 */
export interface UpdateAssessmentResponse {
    /**
     * <p> The response object for the <code>UpdateAssessment</code> API. This is the name of the
     *          updated assessment.</p>
     * @public
     */
    assessment?: Assessment;
}
/**
 * @public
 */
export interface UpdateAssessmentControlRequest {
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The unique identifier for the control set. </p>
     * @public
     */
    controlSetId: string | undefined;
    /**
     * <p> The unique identifier for the control. </p>
     * @public
     */
    controlId: string | undefined;
    /**
     * <p> The status of the control. </p>
     * @public
     */
    controlStatus?: ControlStatus;
    /**
     * <p> The comment body text for the control. </p>
     * @public
     */
    commentBody?: string;
}
/**
 * @public
 */
export interface UpdateAssessmentControlResponse {
    /**
     * <p> The name of the updated control set that the <code>UpdateAssessmentControl</code> API
     *          returned. </p>
     * @public
     */
    control?: AssessmentControl;
}
/**
 * @public
 */
export interface UpdateAssessmentControlSetStatusRequest {
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The unique identifier for the control set. </p>
     * @public
     */
    controlSetId: string | undefined;
    /**
     * <p> The status of the control set that's being updated. </p>
     * @public
     */
    status: ControlSetStatus | undefined;
    /**
     * <p> The comment that's related to the status update. </p>
     * @public
     */
    comment: string | undefined;
}
/**
 * @public
 */
export interface UpdateAssessmentControlSetStatusResponse {
    /**
     * <p> The name of the updated control set that the
     *             <code>UpdateAssessmentControlSetStatus</code> API returned. </p>
     * @public
     */
    controlSet?: AssessmentControlSet;
}
/**
 * <p> A <code>controlSet</code> entity that represents a collection of controls in Audit Manager. This doesn't contain the control set ID. </p>
 * @public
 */
export interface UpdateAssessmentFrameworkControlSet {
    /**
     * <p> The unique identifier for the control set. </p>
     * @public
     */
    id?: string;
    /**
     * <p> The name of the control set. </p>
     * @public
     */
    name: string | undefined;
    /**
     * <p> The list of controls that are contained within the control set. </p>
     * @public
     */
    controls: CreateAssessmentFrameworkControl[] | undefined;
}
/**
 * @public
 */
export interface UpdateAssessmentFrameworkRequest {
    /**
     * <p> The unique identifier for the framework. </p>
     * @public
     */
    frameworkId: string | undefined;
    /**
     * <p> The name of the framework to be updated. </p>
     * @public
     */
    name: string | undefined;
    /**
     * <p> The description of the updated framework. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The compliance type that the new custom framework supports, such as CIS or HIPAA.
     *       </p>
     * @public
     */
    complianceType?: string;
    /**
     * <p> The control sets that are associated with the framework. </p>
     * @public
     */
    controlSets: UpdateAssessmentFrameworkControlSet[] | undefined;
}
/**
 * @public
 */
export interface UpdateAssessmentFrameworkResponse {
    /**
     * <p> The name of the framework. </p>
     * @public
     */
    framework?: Framework;
}
/**
 * @public
 * @enum
 */
export declare const ShareRequestAction: {
    readonly ACCEPT: "ACCEPT";
    readonly DECLINE: "DECLINE";
    readonly REVOKE: "REVOKE";
};
/**
 * @public
 */
export type ShareRequestAction = (typeof ShareRequestAction)[keyof typeof ShareRequestAction];
/**
 * @public
 */
export interface UpdateAssessmentFrameworkShareRequest {
    /**
     * <p> The unique identifier for the share request. </p>
     * @public
     */
    requestId: string | undefined;
    /**
     * <p>Specifies whether the share request is a sent request or a received request.</p>
     * @public
     */
    requestType: ShareRequestType | undefined;
    /**
     * <p>Specifies the update action for the share request.</p>
     * @public
     */
    action: ShareRequestAction | undefined;
}
/**
 * @public
 */
export interface UpdateAssessmentFrameworkShareResponse {
    /**
     * <p> The updated share request that's returned by the
     *             <code>UpdateAssessmentFrameworkShare</code> operation. </p>
     * @public
     */
    assessmentFrameworkShareRequest?: AssessmentFrameworkShareRequest;
}
/**
 * @public
 */
export interface UpdateAssessmentStatusRequest {
    /**
     * <p> The unique identifier for the assessment. </p>
     * @public
     */
    assessmentId: string | undefined;
    /**
     * <p> The current status of the assessment. </p>
     * @public
     */
    status: AssessmentStatus | undefined;
}
/**
 * @public
 */
export interface UpdateAssessmentStatusResponse {
    /**
     * <p> The name of the updated assessment that the <code>UpdateAssessmentStatus</code> API
     *          returned. </p>
     * @public
     */
    assessment?: Assessment;
}
/**
 * @public
 */
export interface UpdateControlRequest {
    /**
     * <p> The identifier for the control. </p>
     * @public
     */
    controlId: string | undefined;
    /**
     * <p> The name of the updated control. </p>
     * @public
     */
    name: string | undefined;
    /**
     * <p> The optional description of the control. </p>
     * @public
     */
    description?: string;
    /**
     * <p> The steps that you should follow to determine if the control is met. </p>
     * @public
     */
    testingInformation?: string;
    /**
     * <p> The title of the action plan for remediating the control. </p>
     * @public
     */
    actionPlanTitle?: string;
    /**
     * <p> The recommended actions to carry out if the control isn't fulfilled. </p>
     * @public
     */
    actionPlanInstructions?: string;
    /**
     * <p> The data mapping sources for the control. </p>
     * @public
     */
    controlMappingSources: ControlMappingSource[] | undefined;
}
/**
 * @public
 */
export interface UpdateControlResponse {
    /**
     * <p> The name of the updated control set that the <code>UpdateControl</code> API returned.
     *       </p>
     * @public
     */
    control?: Control;
}
/**
 * @public
 */
export interface UpdateSettingsRequest {
    /**
     * <p> The Amazon Simple Notification Service (Amazon SNS) topic that Audit Manager sends
     *          notifications to. </p>
     * @public
     */
    snsTopic?: string;
    /**
     * <p> The default S3 destination bucket for storing assessment reports. </p>
     * @public
     */
    defaultAssessmentReportsDestination?: AssessmentReportsDestination;
    /**
     * <p> A list of the default audit owners. </p>
     * @public
     */
    defaultProcessOwners?: Role[];
    /**
     * <p> The KMS key details. </p>
     * @public
     */
    kmsKey?: string;
    /**
     * <p>Specifies whether the evidence finder feature is enabled. Change this attribute to
     *          enable or disable evidence finder.</p>
     *          <important>
     *             <p>When you use this attribute to disable evidence finder, Audit Manager deletes the
     *             event data store that’s used to query your evidence data. As a result, you can’t
     *             re-enable evidence finder and use the feature again. Your only alternative is to <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeregisterAccount.html">deregister</a> and then <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_RegisterAccount.html">re-register</a>
     *             Audit Manager. </p>
     *          </important>
     * @public
     */
    evidenceFinderEnabled?: boolean;
    /**
     * <p>The deregistration policy for your Audit Manager data. You can
     *          use this attribute to determine how your data is handled when you deregister Audit Manager.</p>
     * @public
     */
    deregistrationPolicy?: DeregistrationPolicy;
    /**
     * <p> The default S3 destination bucket for storing evidence finder exports. </p>
     * @public
     */
    defaultExportDestination?: DefaultExportDestination;
}
/**
 * @public
 */
export interface UpdateSettingsResponse {
    /**
     * <p> The current list of settings. </p>
     * @public
     */
    settings?: Settings;
}
/**
 * @public
 */
export interface ValidateAssessmentReportIntegrityRequest {
    /**
     * <p> The relative path of the Amazon S3 bucket that the assessment report is stored
     *          in. </p>
     * @public
     */
    s3RelativePath: string | undefined;
}
/**
 * @public
 */
export interface ValidateAssessmentReportIntegrityResponse {
    /**
     * <p> Specifies whether the signature key is valid. </p>
     * @public
     */
    signatureValid?: boolean;
    /**
     * <p> The signature algorithm that's used to code sign the assessment report file. </p>
     * @public
     */
    signatureAlgorithm?: string;
    /**
     * <p> The date and time signature that specifies when the assessment report was created.
     *       </p>
     * @public
     */
    signatureDateTime?: string;
    /**
     * <p> The unique identifier for the validation signature key. </p>
     * @public
     */
    signatureKeyId?: string;
    /**
     * <p> Represents any errors that occurred when validating the assessment report. </p>
     * @public
     */
    validationErrors?: string[];
}
/**
 * @internal
 */
export declare const AWSAccountFilterSensitiveLog: (obj: AWSAccount) => any;
/**
 * @internal
 */
export declare const ControlCommentFilterSensitiveLog: (obj: ControlComment) => any;
/**
 * @internal
 */
export declare const AssessmentControlFilterSensitiveLog: (obj: AssessmentControl) => any;
/**
 * @internal
 */
export declare const DelegationFilterSensitiveLog: (obj: Delegation) => any;
/**
 * @internal
 */
export declare const AssessmentControlSetFilterSensitiveLog: (obj: AssessmentControlSet) => any;
/**
 * @internal
 */
export declare const FrameworkMetadataFilterSensitiveLog: (obj: FrameworkMetadata) => any;
/**
 * @internal
 */
export declare const AssessmentFrameworkFilterSensitiveLog: (obj: AssessmentFramework) => any;
/**
 * @internal
 */
export declare const AssessmentReportsDestinationFilterSensitiveLog: (obj: AssessmentReportsDestination) => any;
/**
 * @internal
 */
export declare const ScopeFilterSensitiveLog: (obj: Scope) => any;
/**
 * @internal
 */
export declare const AssessmentMetadataFilterSensitiveLog: (obj: AssessmentMetadata) => any;
/**
 * @internal
 */
export declare const AssessmentFilterSensitiveLog: (obj: Assessment) => any;
/**
 * @internal
 */
export declare const AssessmentFrameworkMetadataFilterSensitiveLog: (obj: AssessmentFrameworkMetadata) => any;
/**
 * @internal
 */
export declare const AssessmentFrameworkShareRequestFilterSensitiveLog: (obj: AssessmentFrameworkShareRequest) => any;
/**
 * @internal
 */
export declare const AssessmentMetadataItemFilterSensitiveLog: (obj: AssessmentMetadataItem) => any;
/**
 * @internal
 */
export declare const AssessmentReportFilterSensitiveLog: (obj: AssessmentReport) => any;
/**
 * @internal
 */
export declare const AssessmentReportMetadataFilterSensitiveLog: (obj: AssessmentReportMetadata) => any;
/**
 * @internal
 */
export declare const CreateDelegationRequestFilterSensitiveLog: (obj: CreateDelegationRequest) => any;
/**
 * @internal
 */
export declare const BatchCreateDelegationByAssessmentRequestFilterSensitiveLog: (obj: BatchCreateDelegationByAssessmentRequest) => any;
/**
 * @internal
 */
export declare const BatchCreateDelegationByAssessmentErrorFilterSensitiveLog: (obj: BatchCreateDelegationByAssessmentError) => any;
/**
 * @internal
 */
export declare const BatchCreateDelegationByAssessmentResponseFilterSensitiveLog: (obj: BatchCreateDelegationByAssessmentResponse) => any;
/**
 * @internal
 */
export declare const BatchDeleteDelegationByAssessmentResponseFilterSensitiveLog: (obj: BatchDeleteDelegationByAssessmentResponse) => any;
/**
 * @internal
 */
export declare const ManualEvidenceFilterSensitiveLog: (obj: ManualEvidence) => any;
/**
 * @internal
 */
export declare const BatchImportEvidenceToAssessmentControlRequestFilterSensitiveLog: (obj: BatchImportEvidenceToAssessmentControlRequest) => any;
/**
 * @internal
 */
export declare const BatchImportEvidenceToAssessmentControlErrorFilterSensitiveLog: (obj: BatchImportEvidenceToAssessmentControlError) => any;
/**
 * @internal
 */
export declare const BatchImportEvidenceToAssessmentControlResponseFilterSensitiveLog: (obj: BatchImportEvidenceToAssessmentControlResponse) => any;
/**
 * @internal
 */
export declare const CreateAssessmentRequestFilterSensitiveLog: (obj: CreateAssessmentRequest) => any;
/**
 * @internal
 */
export declare const CreateAssessmentResponseFilterSensitiveLog: (obj: CreateAssessmentResponse) => any;
/**
 * @internal
 */
export declare const CreateAssessmentFrameworkRequestFilterSensitiveLog: (obj: CreateAssessmentFrameworkRequest) => any;
/**
 * @internal
 */
export declare const ControlMappingSourceFilterSensitiveLog: (obj: ControlMappingSource) => any;
/**
 * @internal
 */
export declare const ControlFilterSensitiveLog: (obj: Control) => any;
/**
 * @internal
 */
export declare const ControlSetFilterSensitiveLog: (obj: ControlSet) => any;
/**
 * @internal
 */
export declare const FrameworkFilterSensitiveLog: (obj: Framework) => any;
/**
 * @internal
 */
export declare const CreateAssessmentFrameworkResponseFilterSensitiveLog: (obj: CreateAssessmentFrameworkResponse) => any;
/**
 * @internal
 */
export declare const CreateAssessmentReportRequestFilterSensitiveLog: (obj: CreateAssessmentReportRequest) => any;
/**
 * @internal
 */
export declare const CreateAssessmentReportResponseFilterSensitiveLog: (obj: CreateAssessmentReportResponse) => any;
/**
 * @internal
 */
export declare const CreateControlMappingSourceFilterSensitiveLog: (obj: CreateControlMappingSource) => any;
/**
 * @internal
 */
export declare const CreateControlRequestFilterSensitiveLog: (obj: CreateControlRequest) => any;
/**
 * @internal
 */
export declare const CreateControlResponseFilterSensitiveLog: (obj: CreateControlResponse) => any;
/**
 * @internal
 */
export declare const GetAssessmentResponseFilterSensitiveLog: (obj: GetAssessmentResponse) => any;
/**
 * @internal
 */
export declare const GetAssessmentFrameworkResponseFilterSensitiveLog: (obj: GetAssessmentFrameworkResponse) => any;
/**
 * @internal
 */
export declare const GetControlResponseFilterSensitiveLog: (obj: GetControlResponse) => any;
/**
 * @internal
 */
export declare const DelegationMetadataFilterSensitiveLog: (obj: DelegationMetadata) => any;
/**
 * @internal
 */
export declare const GetDelegationsResponseFilterSensitiveLog: (obj: GetDelegationsResponse) => any;
/**
 * @internal
 */
export declare const GetEvidenceFileUploadUrlRequestFilterSensitiveLog: (obj: GetEvidenceFileUploadUrlRequest) => any;
/**
 * @internal
 */
export declare const GetEvidenceFileUploadUrlResponseFilterSensitiveLog: (obj: GetEvidenceFileUploadUrlResponse) => any;
/**
 * @internal
 */
export declare const SettingsFilterSensitiveLog: (obj: Settings) => any;
/**
 * @internal
 */
export declare const GetSettingsResponseFilterSensitiveLog: (obj: GetSettingsResponse) => any;
/**
 * @internal
 */
export declare const ListAssessmentFrameworksResponseFilterSensitiveLog: (obj: ListAssessmentFrameworksResponse) => any;
/**
 * @internal
 */
export declare const ListAssessmentFrameworkShareRequestsResponseFilterSensitiveLog: (obj: ListAssessmentFrameworkShareRequestsResponse) => any;
/**
 * @internal
 */
export declare const ListAssessmentReportsResponseFilterSensitiveLog: (obj: ListAssessmentReportsResponse) => any;
/**
 * @internal
 */
export declare const ListAssessmentsResponseFilterSensitiveLog: (obj: ListAssessmentsResponse) => any;
/**
 * @internal
 */
export declare const NotificationFilterSensitiveLog: (obj: Notification) => any;
/**
 * @internal
 */
export declare const ListNotificationsResponseFilterSensitiveLog: (obj: ListNotificationsResponse) => any;
/**
 * @internal
 */
export declare const StartAssessmentFrameworkShareResponseFilterSensitiveLog: (obj: StartAssessmentFrameworkShareResponse) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentRequestFilterSensitiveLog: (obj: UpdateAssessmentRequest) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentResponseFilterSensitiveLog: (obj: UpdateAssessmentResponse) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentControlRequestFilterSensitiveLog: (obj: UpdateAssessmentControlRequest) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentControlResponseFilterSensitiveLog: (obj: UpdateAssessmentControlResponse) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentControlSetStatusRequestFilterSensitiveLog: (obj: UpdateAssessmentControlSetStatusRequest) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentControlSetStatusResponseFilterSensitiveLog: (obj: UpdateAssessmentControlSetStatusResponse) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentFrameworkRequestFilterSensitiveLog: (obj: UpdateAssessmentFrameworkRequest) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentFrameworkResponseFilterSensitiveLog: (obj: UpdateAssessmentFrameworkResponse) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentFrameworkShareResponseFilterSensitiveLog: (obj: UpdateAssessmentFrameworkShareResponse) => any;
/**
 * @internal
 */
export declare const UpdateAssessmentStatusResponseFilterSensitiveLog: (obj: UpdateAssessmentStatusResponse) => any;
/**
 * @internal
 */
export declare const UpdateControlRequestFilterSensitiveLog: (obj: UpdateControlRequest) => any;
/**
 * @internal
 */
export declare const UpdateControlResponseFilterSensitiveLog: (obj: UpdateControlResponse) => any;
/**
 * @internal
 */
export declare const UpdateSettingsRequestFilterSensitiveLog: (obj: UpdateSettingsRequest) => any;
/**
 * @internal
 */
export declare const UpdateSettingsResponseFilterSensitiveLog: (obj: UpdateSettingsResponse) => any;
