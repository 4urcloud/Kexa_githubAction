import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AuditManagerServiceException as __BaseException } from "./AuditManagerServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AccountStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
  readonly PENDING_ACTIVATION: "PENDING_ACTIVATION";
};
export type AccountStatus = (typeof AccountStatus)[keyof typeof AccountStatus];
export declare const ActionEnum: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE: "CREATE";
  readonly DELETE: "DELETE";
  readonly IMPORT_EVIDENCE: "IMPORT_EVIDENCE";
  readonly INACTIVE: "INACTIVE";
  readonly REVIEWED: "REVIEWED";
  readonly UNDER_REVIEW: "UNDER_REVIEW";
  readonly UPDATE_METADATA: "UPDATE_METADATA";
};
export type ActionEnum = (typeof ActionEnum)[keyof typeof ActionEnum];
export interface AWSAccount {
  id?: string;
  emailAddress?: string;
  name?: string;
}
export interface ControlComment {
  authorName?: string;
  commentBody?: string;
  postedDate?: Date;
}
export declare const ControlResponse: {
  readonly AUTOMATE: "AUTOMATE";
  readonly DEFER: "DEFER";
  readonly IGNORE: "IGNORE";
  readonly MANUAL: "MANUAL";
};
export type ControlResponse =
  (typeof ControlResponse)[keyof typeof ControlResponse];
export declare const ControlStatus: {
  readonly INACTIVE: "INACTIVE";
  readonly REVIEWED: "REVIEWED";
  readonly UNDER_REVIEW: "UNDER_REVIEW";
};
export type ControlStatus = (typeof ControlStatus)[keyof typeof ControlStatus];
export interface AssessmentControl {
  id?: string;
  name?: string;
  description?: string;
  status?: ControlStatus;
  response?: ControlResponse;
  comments?: ControlComment[];
  evidenceSources?: string[];
  evidenceCount?: number;
  assessmentReportEvidenceCount?: number;
}
export declare const RoleType: {
  readonly PROCESS_OWNER: "PROCESS_OWNER";
  readonly RESOURCE_OWNER: "RESOURCE_OWNER";
};
export type RoleType = (typeof RoleType)[keyof typeof RoleType];
export declare const DelegationStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly UNDER_REVIEW: "UNDER_REVIEW";
};
export type DelegationStatus =
  (typeof DelegationStatus)[keyof typeof DelegationStatus];
export interface Delegation {
  id?: string;
  assessmentName?: string;
  assessmentId?: string;
  status?: DelegationStatus;
  roleArn?: string;
  roleType?: RoleType;
  creationTime?: Date;
  lastUpdated?: Date;
  controlSetId?: string;
  comment?: string;
  createdBy?: string;
}
export interface Role {
  roleType: RoleType | undefined;
  roleArn: string | undefined;
}
export declare const ControlSetStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly REVIEWED: "REVIEWED";
  readonly UNDER_REVIEW: "UNDER_REVIEW";
};
export type ControlSetStatus =
  (typeof ControlSetStatus)[keyof typeof ControlSetStatus];
export interface AssessmentControlSet {
  id?: string;
  description?: string;
  status?: ControlSetStatus;
  roles?: Role[];
  controls?: AssessmentControl[];
  delegations?: Delegation[];
  systemEvidenceCount?: number;
  manualEvidenceCount?: number;
}
export interface FrameworkMetadata {
  name?: string;
  description?: string;
  logo?: string;
  complianceType?: string;
}
export interface AssessmentFramework {
  id?: string;
  arn?: string;
  metadata?: FrameworkMetadata;
  controlSets?: AssessmentControlSet[];
}
export declare const AssessmentReportDestinationType: {
  readonly S3: "S3";
};
export type AssessmentReportDestinationType =
  (typeof AssessmentReportDestinationType)[keyof typeof AssessmentReportDestinationType];
export interface AssessmentReportsDestination {
  destinationType?: AssessmentReportDestinationType;
  destination?: string;
}
export interface AWSService {
  serviceName?: string;
}
export interface Scope {
  awsAccounts?: AWSAccount[];
  awsServices?: AWSService[];
}
export declare const AssessmentStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly INACTIVE: "INACTIVE";
};
export type AssessmentStatus =
  (typeof AssessmentStatus)[keyof typeof AssessmentStatus];
export interface AssessmentMetadata {
  name?: string;
  id?: string;
  description?: string;
  complianceType?: string;
  status?: AssessmentStatus;
  assessmentReportsDestination?: AssessmentReportsDestination;
  scope?: Scope;
  roles?: Role[];
  delegations?: Delegation[];
  creationTime?: Date;
  lastUpdated?: Date;
}
export interface Assessment {
  arn?: string;
  awsAccount?: AWSAccount;
  metadata?: AssessmentMetadata;
  framework?: AssessmentFramework;
  tags?: Record<string, string>;
}
export interface AssessmentEvidenceFolder {
  name?: string;
  date?: Date;
  assessmentId?: string;
  controlSetId?: string;
  controlId?: string;
  id?: string;
  dataSource?: string;
  author?: string;
  totalEvidence?: number;
  assessmentReportSelectionCount?: number;
  controlName?: string;
  evidenceResourcesIncludedCount?: number;
  evidenceByTypeConfigurationDataCount?: number;
  evidenceByTypeManualCount?: number;
  evidenceByTypeComplianceCheckCount?: number;
  evidenceByTypeComplianceCheckIssuesCount?: number;
  evidenceByTypeUserActivityCount?: number;
  evidenceAwsServiceSourceCount?: number;
}
export declare const FrameworkType: {
  readonly CUSTOM: "Custom";
  readonly STANDARD: "Standard";
};
export type FrameworkType = (typeof FrameworkType)[keyof typeof FrameworkType];
export interface AssessmentFrameworkMetadata {
  arn?: string;
  id?: string;
  type?: FrameworkType;
  name?: string;
  description?: string;
  logo?: string;
  complianceType?: string;
  controlsCount?: number;
  controlSetsCount?: number;
  createdAt?: Date;
  lastUpdatedAt?: Date;
}
export declare const ShareRequestStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DECLINED: "DECLINED";
  readonly EXPIRED: "EXPIRED";
  readonly EXPIRING: "EXPIRING";
  readonly FAILED: "FAILED";
  readonly REPLICATING: "REPLICATING";
  readonly REVOKED: "REVOKED";
  readonly SHARED: "SHARED";
};
export type ShareRequestStatus =
  (typeof ShareRequestStatus)[keyof typeof ShareRequestStatus];
export interface AssessmentFrameworkShareRequest {
  id?: string;
  frameworkId?: string;
  frameworkName?: string;
  frameworkDescription?: string;
  status?: ShareRequestStatus;
  sourceAccount?: string;
  destinationAccount?: string;
  destinationRegion?: string;
  expirationTime?: Date;
  creationTime?: Date;
  lastUpdated?: Date;
  comment?: string;
  standardControlsCount?: number;
  customControlsCount?: number;
  complianceType?: string;
}
export interface AssessmentMetadataItem {
  name?: string;
  id?: string;
  complianceType?: string;
  status?: AssessmentStatus;
  roles?: Role[];
  delegations?: Delegation[];
  creationTime?: Date;
  lastUpdated?: Date;
}
export declare const AssessmentReportStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
};
export type AssessmentReportStatus =
  (typeof AssessmentReportStatus)[keyof typeof AssessmentReportStatus];
export interface AssessmentReport {
  id?: string;
  name?: string;
  description?: string;
  awsAccountId?: string;
  assessmentId?: string;
  assessmentName?: string;
  author?: string;
  status?: AssessmentReportStatus;
  creationTime?: Date;
}
export interface AssessmentReportEvidenceError {
  evidenceId?: string;
  errorCode?: string;
  errorMessage?: string;
}
export interface AssessmentReportMetadata {
  id?: string;
  name?: string;
  description?: string;
  assessmentId?: string;
  assessmentName?: string;
  author?: string;
  status?: AssessmentReportStatus;
  creationTime?: Date;
}
export interface AssociateAssessmentReportEvidenceFolderRequest {
  assessmentId: string | undefined;
  evidenceFolderId: string | undefined;
}
export interface AssociateAssessmentReportEvidenceFolderResponse {}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "cannotParse";
  readonly FIELD_VALIDATION_FAILED: "fieldValidationFailed";
  readonly OTHER: "other";
  readonly UNKNOWN_OPERATION: "unknownOperation";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  reason?: ValidationExceptionReason;
  fields?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface BatchAssociateAssessmentReportEvidenceRequest {
  assessmentId: string | undefined;
  evidenceFolderId: string | undefined;
  evidenceIds: string[] | undefined;
}
export interface BatchAssociateAssessmentReportEvidenceResponse {
  evidenceIds?: string[];
  errors?: AssessmentReportEvidenceError[];
}
export interface CreateDelegationRequest {
  comment?: string;
  controlSetId?: string;
  roleArn?: string;
  roleType?: RoleType;
}
export interface BatchCreateDelegationByAssessmentRequest {
  createDelegationRequests: CreateDelegationRequest[] | undefined;
  assessmentId: string | undefined;
}
export interface BatchCreateDelegationByAssessmentError {
  createDelegationRequest?: CreateDelegationRequest;
  errorCode?: string;
  errorMessage?: string;
}
export interface BatchCreateDelegationByAssessmentResponse {
  delegations?: Delegation[];
  errors?: BatchCreateDelegationByAssessmentError[];
}
export interface BatchDeleteDelegationByAssessmentRequest {
  delegationIds: string[] | undefined;
  assessmentId: string | undefined;
}
export interface BatchDeleteDelegationByAssessmentError {
  delegationId?: string;
  errorCode?: string;
  errorMessage?: string;
}
export interface BatchDeleteDelegationByAssessmentResponse {
  errors?: BatchDeleteDelegationByAssessmentError[];
}
export interface BatchDisassociateAssessmentReportEvidenceRequest {
  assessmentId: string | undefined;
  evidenceFolderId: string | undefined;
  evidenceIds: string[] | undefined;
}
export interface BatchDisassociateAssessmentReportEvidenceResponse {
  evidenceIds?: string[];
  errors?: AssessmentReportEvidenceError[];
}
export interface ManualEvidence {
  s3ResourcePath?: string;
  textResponse?: string;
  evidenceFileName?: string;
}
export interface BatchImportEvidenceToAssessmentControlRequest {
  assessmentId: string | undefined;
  controlSetId: string | undefined;
  controlId: string | undefined;
  manualEvidence: ManualEvidence[] | undefined;
}
export interface BatchImportEvidenceToAssessmentControlError {
  manualEvidence?: ManualEvidence;
  errorCode?: string;
  errorMessage?: string;
}
export interface BatchImportEvidenceToAssessmentControlResponse {
  errors?: BatchImportEvidenceToAssessmentControlError[];
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface CreateAssessmentRequest {
  name: string | undefined;
  description?: string;
  assessmentReportsDestination: AssessmentReportsDestination | undefined;
  scope: Scope | undefined;
  roles: Role[] | undefined;
  frameworkId: string | undefined;
  tags?: Record<string, string>;
}
export interface CreateAssessmentResponse {
  assessment?: Assessment;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface CreateAssessmentFrameworkControl {
  id: string | undefined;
}
export interface CreateAssessmentFrameworkControlSet {
  name: string | undefined;
  controls?: CreateAssessmentFrameworkControl[];
}
export interface CreateAssessmentFrameworkRequest {
  name: string | undefined;
  description?: string;
  complianceType?: string;
  controlSets: CreateAssessmentFrameworkControlSet[] | undefined;
  tags?: Record<string, string>;
}
export declare const SourceFrequency: {
  readonly DAILY: "DAILY";
  readonly MONTHLY: "MONTHLY";
  readonly WEEKLY: "WEEKLY";
};
export type SourceFrequency =
  (typeof SourceFrequency)[keyof typeof SourceFrequency];
export declare const KeywordInputType: {
  readonly INPUT_TEXT: "INPUT_TEXT";
  readonly SELECT_FROM_LIST: "SELECT_FROM_LIST";
  readonly UPLOAD_FILE: "UPLOAD_FILE";
};
export type KeywordInputType =
  (typeof KeywordInputType)[keyof typeof KeywordInputType];
export interface SourceKeyword {
  keywordInputType?: KeywordInputType;
  keywordValue?: string;
}
export declare const SourceSetUpOption: {
  readonly PROCEDURAL_CONTROLS_MAPPING: "Procedural_Controls_Mapping";
  readonly SYSTEM_CONTROLS_MAPPING: "System_Controls_Mapping";
};
export type SourceSetUpOption =
  (typeof SourceSetUpOption)[keyof typeof SourceSetUpOption];
export declare const SourceType: {
  readonly AWS_API_CALL: "AWS_API_Call";
  readonly AWS_CLOUDTRAIL: "AWS_Cloudtrail";
  readonly AWS_CONFIG: "AWS_Config";
  readonly AWS_SECURITY_HUB: "AWS_Security_Hub";
  readonly MANUAL: "MANUAL";
};
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
export interface ControlMappingSource {
  sourceId?: string;
  sourceName?: string;
  sourceDescription?: string;
  sourceSetUpOption?: SourceSetUpOption;
  sourceType?: SourceType;
  sourceKeyword?: SourceKeyword;
  sourceFrequency?: SourceFrequency;
  troubleshootingText?: string;
}
export declare const ControlType: {
  readonly CUSTOM: "Custom";
  readonly STANDARD: "Standard";
};
export type ControlType = (typeof ControlType)[keyof typeof ControlType];
export interface Control {
  arn?: string;
  id?: string;
  type?: ControlType;
  name?: string;
  description?: string;
  testingInformation?: string;
  actionPlanTitle?: string;
  actionPlanInstructions?: string;
  controlSources?: string;
  controlMappingSources?: ControlMappingSource[];
  createdAt?: Date;
  lastUpdatedAt?: Date;
  createdBy?: string;
  lastUpdatedBy?: string;
  tags?: Record<string, string>;
}
export interface ControlSet {
  id?: string;
  name?: string;
  controls?: Control[];
}
export interface Framework {
  arn?: string;
  id?: string;
  name?: string;
  type?: FrameworkType;
  complianceType?: string;
  description?: string;
  logo?: string;
  controlSources?: string;
  controlSets?: ControlSet[];
  createdAt?: Date;
  lastUpdatedAt?: Date;
  createdBy?: string;
  lastUpdatedBy?: string;
  tags?: Record<string, string>;
}
export interface CreateAssessmentFrameworkResponse {
  framework?: Framework;
}
export interface CreateAssessmentReportRequest {
  name: string | undefined;
  description?: string;
  assessmentId: string | undefined;
  queryStatement?: string;
}
export interface CreateAssessmentReportResponse {
  assessmentReport?: AssessmentReport;
}
export interface CreateControlMappingSource {
  sourceName?: string;
  sourceDescription?: string;
  sourceSetUpOption?: SourceSetUpOption;
  sourceType?: SourceType;
  sourceKeyword?: SourceKeyword;
  sourceFrequency?: SourceFrequency;
  troubleshootingText?: string;
}
export interface CreateControlRequest {
  name: string | undefined;
  description?: string;
  testingInformation?: string;
  actionPlanTitle?: string;
  actionPlanInstructions?: string;
  controlMappingSources: CreateControlMappingSource[] | undefined;
  tags?: Record<string, string>;
}
export interface CreateControlResponse {
  control?: Control;
}
export interface DeleteAssessmentRequest {
  assessmentId: string | undefined;
}
export interface DeleteAssessmentResponse {}
export interface DeleteAssessmentFrameworkRequest {
  frameworkId: string | undefined;
}
export interface DeleteAssessmentFrameworkResponse {}
export declare const ShareRequestType: {
  readonly RECEIVED: "RECEIVED";
  readonly SENT: "SENT";
};
export type ShareRequestType =
  (typeof ShareRequestType)[keyof typeof ShareRequestType];
export interface DeleteAssessmentFrameworkShareRequest {
  requestId: string | undefined;
  requestType: ShareRequestType | undefined;
}
export interface DeleteAssessmentFrameworkShareResponse {}
export interface DeleteAssessmentReportRequest {
  assessmentId: string | undefined;
  assessmentReportId: string | undefined;
}
export interface DeleteAssessmentReportResponse {}
export interface DeleteControlRequest {
  controlId: string | undefined;
}
export interface DeleteControlResponse {}
export interface DeregisterAccountRequest {}
export interface DeregisterAccountResponse {
  status?: AccountStatus;
}
export interface DeregisterOrganizationAdminAccountRequest {
  adminAccountId?: string;
}
export interface DeregisterOrganizationAdminAccountResponse {}
export interface DisassociateAssessmentReportEvidenceFolderRequest {
  assessmentId: string | undefined;
  evidenceFolderId: string | undefined;
}
export interface DisassociateAssessmentReportEvidenceFolderResponse {}
export interface GetAccountStatusRequest {}
export interface GetAccountStatusResponse {
  status?: AccountStatus;
}
export interface GetAssessmentRequest {
  assessmentId: string | undefined;
}
export interface GetAssessmentResponse {
  assessment?: Assessment;
  userRole?: Role;
}
export interface GetAssessmentFrameworkRequest {
  frameworkId: string | undefined;
}
export interface GetAssessmentFrameworkResponse {
  framework?: Framework;
}
export interface GetAssessmentReportUrlRequest {
  assessmentReportId: string | undefined;
  assessmentId: string | undefined;
}
export interface URL {
  hyperlinkName?: string;
  link?: string;
}
export interface GetAssessmentReportUrlResponse {
  preSignedUrl?: URL;
}
export interface GetChangeLogsRequest {
  assessmentId: string | undefined;
  controlSetId?: string;
  controlId?: string;
  nextToken?: string;
  maxResults?: number;
}
export declare const ObjectTypeEnum: {
  readonly ASSESSMENT: "ASSESSMENT";
  readonly ASSESSMENT_REPORT: "ASSESSMENT_REPORT";
  readonly CONTROL: "CONTROL";
  readonly CONTROL_SET: "CONTROL_SET";
  readonly DELEGATION: "DELEGATION";
};
export type ObjectTypeEnum =
  (typeof ObjectTypeEnum)[keyof typeof ObjectTypeEnum];
export interface ChangeLog {
  objectType?: ObjectTypeEnum;
  objectName?: string;
  action?: ActionEnum;
  createdAt?: Date;
  createdBy?: string;
}
export interface GetChangeLogsResponse {
  changeLogs?: ChangeLog[];
  nextToken?: string;
}
export interface GetControlRequest {
  controlId: string | undefined;
}
export interface GetControlResponse {
  control?: Control;
}
export interface GetDelegationsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface DelegationMetadata {
  id?: string;
  assessmentName?: string;
  assessmentId?: string;
  status?: DelegationStatus;
  roleArn?: string;
  creationTime?: Date;
  controlSetName?: string;
}
export interface GetDelegationsResponse {
  delegations?: DelegationMetadata[];
  nextToken?: string;
}
export interface GetEvidenceRequest {
  assessmentId: string | undefined;
  controlSetId: string | undefined;
  evidenceFolderId: string | undefined;
  evidenceId: string | undefined;
}
export interface Resource {
  arn?: string;
  value?: string;
  complianceCheck?: string;
}
export interface Evidence {
  dataSource?: string;
  evidenceAwsAccountId?: string;
  time?: Date;
  eventSource?: string;
  eventName?: string;
  evidenceByType?: string;
  resourcesIncluded?: Resource[];
  attributes?: Record<string, string>;
  iamId?: string;
  complianceCheck?: string;
  awsOrganization?: string;
  awsAccountId?: string;
  evidenceFolderId?: string;
  id?: string;
  assessmentReportSelection?: string;
}
export interface GetEvidenceResponse {
  evidence?: Evidence;
}
export interface GetEvidenceByEvidenceFolderRequest {
  assessmentId: string | undefined;
  controlSetId: string | undefined;
  evidenceFolderId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface GetEvidenceByEvidenceFolderResponse {
  evidence?: Evidence[];
  nextToken?: string;
}
export interface GetEvidenceFileUploadUrlRequest {
  fileName: string | undefined;
}
export interface GetEvidenceFileUploadUrlResponse {
  evidenceFileName?: string;
  uploadUrl?: string;
}
export interface GetEvidenceFolderRequest {
  assessmentId: string | undefined;
  controlSetId: string | undefined;
  evidenceFolderId: string | undefined;
}
export interface GetEvidenceFolderResponse {
  evidenceFolder?: AssessmentEvidenceFolder;
}
export interface GetEvidenceFoldersByAssessmentRequest {
  assessmentId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface GetEvidenceFoldersByAssessmentResponse {
  evidenceFolders?: AssessmentEvidenceFolder[];
  nextToken?: string;
}
export interface GetEvidenceFoldersByAssessmentControlRequest {
  assessmentId: string | undefined;
  controlSetId: string | undefined;
  controlId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface GetEvidenceFoldersByAssessmentControlResponse {
  evidenceFolders?: AssessmentEvidenceFolder[];
  nextToken?: string;
}
export interface GetInsightsRequest {}
export interface Insights {
  activeAssessmentsCount?: number;
  noncompliantEvidenceCount?: number;
  compliantEvidenceCount?: number;
  inconclusiveEvidenceCount?: number;
  assessmentControlsCountByNoncompliantEvidence?: number;
  totalAssessmentControlsCount?: number;
  lastUpdated?: Date;
}
export interface GetInsightsResponse {
  insights?: Insights;
}
export interface GetInsightsByAssessmentRequest {
  assessmentId: string | undefined;
}
export interface InsightsByAssessment {
  noncompliantEvidenceCount?: number;
  compliantEvidenceCount?: number;
  inconclusiveEvidenceCount?: number;
  assessmentControlsCountByNoncompliantEvidence?: number;
  totalAssessmentControlsCount?: number;
  lastUpdated?: Date;
}
export interface GetInsightsByAssessmentResponse {
  insights?: InsightsByAssessment;
}
export interface GetOrganizationAdminAccountRequest {}
export interface GetOrganizationAdminAccountResponse {
  adminAccountId?: string;
  organizationId?: string;
}
export interface GetServicesInScopeRequest {}
export interface ServiceMetadata {
  name?: string;
  displayName?: string;
  description?: string;
  category?: string;
}
export interface GetServicesInScopeResponse {
  serviceMetadata?: ServiceMetadata[];
}
export declare const SettingAttribute: {
  readonly ALL: "ALL";
  readonly DEFAULT_ASSESSMENT_REPORTS_DESTINATION: "DEFAULT_ASSESSMENT_REPORTS_DESTINATION";
  readonly DEFAULT_EXPORT_DESTINATION: "DEFAULT_EXPORT_DESTINATION";
  readonly DEFAULT_PROCESS_OWNERS: "DEFAULT_PROCESS_OWNERS";
  readonly DEREGISTRATION_POLICY: "DEREGISTRATION_POLICY";
  readonly EVIDENCE_FINDER_ENABLEMENT: "EVIDENCE_FINDER_ENABLEMENT";
  readonly IS_AWS_ORG_ENABLED: "IS_AWS_ORG_ENABLED";
  readonly SNS_TOPIC: "SNS_TOPIC";
};
export type SettingAttribute =
  (typeof SettingAttribute)[keyof typeof SettingAttribute];
export interface GetSettingsRequest {
  attribute: SettingAttribute | undefined;
}
export declare const ExportDestinationType: {
  readonly S3: "S3";
};
export type ExportDestinationType =
  (typeof ExportDestinationType)[keyof typeof ExportDestinationType];
export interface DefaultExportDestination {
  destinationType?: ExportDestinationType;
  destination?: string;
}
export declare const DeleteResources: {
  readonly ALL: "ALL";
  readonly DEFAULT: "DEFAULT";
};
export type DeleteResources =
  (typeof DeleteResources)[keyof typeof DeleteResources];
export interface DeregistrationPolicy {
  deleteResources?: DeleteResources;
}
export declare const EvidenceFinderBackfillStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NOT_STARTED: "NOT_STARTED";
};
export type EvidenceFinderBackfillStatus =
  (typeof EvidenceFinderBackfillStatus)[keyof typeof EvidenceFinderBackfillStatus];
export declare const EvidenceFinderEnablementStatus: {
  readonly DISABLED: "DISABLED";
  readonly DISABLE_IN_PROGRESS: "DISABLE_IN_PROGRESS";
  readonly ENABLED: "ENABLED";
  readonly ENABLE_IN_PROGRESS: "ENABLE_IN_PROGRESS";
};
export type EvidenceFinderEnablementStatus =
  (typeof EvidenceFinderEnablementStatus)[keyof typeof EvidenceFinderEnablementStatus];
export interface EvidenceFinderEnablement {
  eventDataStoreArn?: string;
  enablementStatus?: EvidenceFinderEnablementStatus;
  backfillStatus?: EvidenceFinderBackfillStatus;
  error?: string;
}
export interface Settings {
  isAwsOrgEnabled?: boolean;
  snsTopic?: string;
  defaultAssessmentReportsDestination?: AssessmentReportsDestination;
  defaultProcessOwners?: Role[];
  kmsKey?: string;
  evidenceFinderEnablement?: EvidenceFinderEnablement;
  deregistrationPolicy?: DeregistrationPolicy;
  defaultExportDestination?: DefaultExportDestination;
}
export interface GetSettingsResponse {
  settings?: Settings;
}
export interface ListAssessmentControlInsightsByControlDomainRequest {
  controlDomainId: string | undefined;
  assessmentId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface EvidenceInsights {
  noncompliantEvidenceCount?: number;
  compliantEvidenceCount?: number;
  inconclusiveEvidenceCount?: number;
}
export interface ControlInsightsMetadataByAssessmentItem {
  name?: string;
  id?: string;
  evidenceInsights?: EvidenceInsights;
  controlSetName?: string;
  lastUpdated?: Date;
}
export interface ListAssessmentControlInsightsByControlDomainResponse {
  controlInsightsByAssessment?: ControlInsightsMetadataByAssessmentItem[];
  nextToken?: string;
}
export interface ListAssessmentFrameworksRequest {
  frameworkType: FrameworkType | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListAssessmentFrameworksResponse {
  frameworkMetadataList?: AssessmentFrameworkMetadata[];
  nextToken?: string;
}
export interface ListAssessmentFrameworkShareRequestsRequest {
  requestType: ShareRequestType | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListAssessmentFrameworkShareRequestsResponse {
  assessmentFrameworkShareRequests?: AssessmentFrameworkShareRequest[];
  nextToken?: string;
}
export interface ListAssessmentReportsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface ListAssessmentReportsResponse {
  assessmentReports?: AssessmentReportMetadata[];
  nextToken?: string;
}
export interface ListAssessmentsRequest {
  status?: AssessmentStatus;
  nextToken?: string;
  maxResults?: number;
}
export interface ListAssessmentsResponse {
  assessmentMetadata?: AssessmentMetadataItem[];
  nextToken?: string;
}
export interface ListControlDomainInsightsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface ControlDomainInsights {
  name?: string;
  id?: string;
  controlsCountByNoncompliantEvidence?: number;
  totalControlsCount?: number;
  evidenceInsights?: EvidenceInsights;
  lastUpdated?: Date;
}
export interface ListControlDomainInsightsResponse {
  controlDomainInsights?: ControlDomainInsights[];
  nextToken?: string;
}
export interface ListControlDomainInsightsByAssessmentRequest {
  assessmentId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListControlDomainInsightsByAssessmentResponse {
  controlDomainInsights?: ControlDomainInsights[];
  nextToken?: string;
}
export interface ListControlInsightsByControlDomainRequest {
  controlDomainId: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ControlInsightsMetadataItem {
  name?: string;
  id?: string;
  evidenceInsights?: EvidenceInsights;
  lastUpdated?: Date;
}
export interface ListControlInsightsByControlDomainResponse {
  controlInsightsMetadata?: ControlInsightsMetadataItem[];
  nextToken?: string;
}
export interface ListControlsRequest {
  controlType: ControlType | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ControlMetadata {
  arn?: string;
  id?: string;
  name?: string;
  controlSources?: string;
  createdAt?: Date;
  lastUpdatedAt?: Date;
}
export interface ListControlsResponse {
  controlMetadataList?: ControlMetadata[];
  nextToken?: string;
}
export interface ListKeywordsForDataSourceRequest {
  source: SourceType | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListKeywordsForDataSourceResponse {
  keywords?: string[];
  nextToken?: string;
}
export interface ListNotificationsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface Notification {
  id?: string;
  assessmentId?: string;
  assessmentName?: string;
  controlSetId?: string;
  controlSetName?: string;
  description?: string;
  eventTime?: Date;
  source?: string;
}
export interface ListNotificationsResponse {
  notifications?: Notification[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface RegisterAccountRequest {
  kmsKey?: string;
  delegatedAdminAccount?: string;
}
export interface RegisterAccountResponse {
  status?: AccountStatus;
}
export interface RegisterOrganizationAdminAccountRequest {
  adminAccountId: string | undefined;
}
export interface RegisterOrganizationAdminAccountResponse {
  adminAccountId?: string;
  organizationId?: string;
}
export interface StartAssessmentFrameworkShareRequest {
  frameworkId: string | undefined;
  destinationAccount: string | undefined;
  destinationRegion: string | undefined;
  comment?: string;
}
export interface StartAssessmentFrameworkShareResponse {
  assessmentFrameworkShareRequest?: AssessmentFrameworkShareRequest;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateAssessmentRequest {
  assessmentId: string | undefined;
  assessmentName?: string;
  assessmentDescription?: string;
  scope: Scope | undefined;
  assessmentReportsDestination?: AssessmentReportsDestination;
  roles?: Role[];
}
export interface UpdateAssessmentResponse {
  assessment?: Assessment;
}
export interface UpdateAssessmentControlRequest {
  assessmentId: string | undefined;
  controlSetId: string | undefined;
  controlId: string | undefined;
  controlStatus?: ControlStatus;
  commentBody?: string;
}
export interface UpdateAssessmentControlResponse {
  control?: AssessmentControl;
}
export interface UpdateAssessmentControlSetStatusRequest {
  assessmentId: string | undefined;
  controlSetId: string | undefined;
  status: ControlSetStatus | undefined;
  comment: string | undefined;
}
export interface UpdateAssessmentControlSetStatusResponse {
  controlSet?: AssessmentControlSet;
}
export interface UpdateAssessmentFrameworkControlSet {
  id?: string;
  name: string | undefined;
  controls: CreateAssessmentFrameworkControl[] | undefined;
}
export interface UpdateAssessmentFrameworkRequest {
  frameworkId: string | undefined;
  name: string | undefined;
  description?: string;
  complianceType?: string;
  controlSets: UpdateAssessmentFrameworkControlSet[] | undefined;
}
export interface UpdateAssessmentFrameworkResponse {
  framework?: Framework;
}
export declare const ShareRequestAction: {
  readonly ACCEPT: "ACCEPT";
  readonly DECLINE: "DECLINE";
  readonly REVOKE: "REVOKE";
};
export type ShareRequestAction =
  (typeof ShareRequestAction)[keyof typeof ShareRequestAction];
export interface UpdateAssessmentFrameworkShareRequest {
  requestId: string | undefined;
  requestType: ShareRequestType | undefined;
  action: ShareRequestAction | undefined;
}
export interface UpdateAssessmentFrameworkShareResponse {
  assessmentFrameworkShareRequest?: AssessmentFrameworkShareRequest;
}
export interface UpdateAssessmentStatusRequest {
  assessmentId: string | undefined;
  status: AssessmentStatus | undefined;
}
export interface UpdateAssessmentStatusResponse {
  assessment?: Assessment;
}
export interface UpdateControlRequest {
  controlId: string | undefined;
  name: string | undefined;
  description?: string;
  testingInformation?: string;
  actionPlanTitle?: string;
  actionPlanInstructions?: string;
  controlMappingSources: ControlMappingSource[] | undefined;
}
export interface UpdateControlResponse {
  control?: Control;
}
export interface UpdateSettingsRequest {
  snsTopic?: string;
  defaultAssessmentReportsDestination?: AssessmentReportsDestination;
  defaultProcessOwners?: Role[];
  kmsKey?: string;
  evidenceFinderEnabled?: boolean;
  deregistrationPolicy?: DeregistrationPolicy;
  defaultExportDestination?: DefaultExportDestination;
}
export interface UpdateSettingsResponse {
  settings?: Settings;
}
export interface ValidateAssessmentReportIntegrityRequest {
  s3RelativePath: string | undefined;
}
export interface ValidateAssessmentReportIntegrityResponse {
  signatureValid?: boolean;
  signatureAlgorithm?: string;
  signatureDateTime?: string;
  signatureKeyId?: string;
  validationErrors?: string[];
}
export declare const AWSAccountFilterSensitiveLog: (obj: AWSAccount) => any;
export declare const ControlCommentFilterSensitiveLog: (
  obj: ControlComment
) => any;
export declare const AssessmentControlFilterSensitiveLog: (
  obj: AssessmentControl
) => any;
export declare const DelegationFilterSensitiveLog: (obj: Delegation) => any;
export declare const AssessmentControlSetFilterSensitiveLog: (
  obj: AssessmentControlSet
) => any;
export declare const FrameworkMetadataFilterSensitiveLog: (
  obj: FrameworkMetadata
) => any;
export declare const AssessmentFrameworkFilterSensitiveLog: (
  obj: AssessmentFramework
) => any;
export declare const AssessmentReportsDestinationFilterSensitiveLog: (
  obj: AssessmentReportsDestination
) => any;
export declare const ScopeFilterSensitiveLog: (obj: Scope) => any;
export declare const AssessmentMetadataFilterSensitiveLog: (
  obj: AssessmentMetadata
) => any;
export declare const AssessmentFilterSensitiveLog: (obj: Assessment) => any;
export declare const AssessmentFrameworkMetadataFilterSensitiveLog: (
  obj: AssessmentFrameworkMetadata
) => any;
export declare const AssessmentFrameworkShareRequestFilterSensitiveLog: (
  obj: AssessmentFrameworkShareRequest
) => any;
export declare const AssessmentMetadataItemFilterSensitiveLog: (
  obj: AssessmentMetadataItem
) => any;
export declare const AssessmentReportFilterSensitiveLog: (
  obj: AssessmentReport
) => any;
export declare const AssessmentReportMetadataFilterSensitiveLog: (
  obj: AssessmentReportMetadata
) => any;
export declare const CreateDelegationRequestFilterSensitiveLog: (
  obj: CreateDelegationRequest
) => any;
export declare const BatchCreateDelegationByAssessmentRequestFilterSensitiveLog: (
  obj: BatchCreateDelegationByAssessmentRequest
) => any;
export declare const BatchCreateDelegationByAssessmentErrorFilterSensitiveLog: (
  obj: BatchCreateDelegationByAssessmentError
) => any;
export declare const BatchCreateDelegationByAssessmentResponseFilterSensitiveLog: (
  obj: BatchCreateDelegationByAssessmentResponse
) => any;
export declare const BatchDeleteDelegationByAssessmentResponseFilterSensitiveLog: (
  obj: BatchDeleteDelegationByAssessmentResponse
) => any;
export declare const ManualEvidenceFilterSensitiveLog: (
  obj: ManualEvidence
) => any;
export declare const BatchImportEvidenceToAssessmentControlRequestFilterSensitiveLog: (
  obj: BatchImportEvidenceToAssessmentControlRequest
) => any;
export declare const BatchImportEvidenceToAssessmentControlErrorFilterSensitiveLog: (
  obj: BatchImportEvidenceToAssessmentControlError
) => any;
export declare const BatchImportEvidenceToAssessmentControlResponseFilterSensitiveLog: (
  obj: BatchImportEvidenceToAssessmentControlResponse
) => any;
export declare const CreateAssessmentRequestFilterSensitiveLog: (
  obj: CreateAssessmentRequest
) => any;
export declare const CreateAssessmentResponseFilterSensitiveLog: (
  obj: CreateAssessmentResponse
) => any;
export declare const CreateAssessmentFrameworkRequestFilterSensitiveLog: (
  obj: CreateAssessmentFrameworkRequest
) => any;
export declare const ControlMappingSourceFilterSensitiveLog: (
  obj: ControlMappingSource
) => any;
export declare const ControlFilterSensitiveLog: (obj: Control) => any;
export declare const ControlSetFilterSensitiveLog: (obj: ControlSet) => any;
export declare const FrameworkFilterSensitiveLog: (obj: Framework) => any;
export declare const CreateAssessmentFrameworkResponseFilterSensitiveLog: (
  obj: CreateAssessmentFrameworkResponse
) => any;
export declare const CreateAssessmentReportRequestFilterSensitiveLog: (
  obj: CreateAssessmentReportRequest
) => any;
export declare const CreateAssessmentReportResponseFilterSensitiveLog: (
  obj: CreateAssessmentReportResponse
) => any;
export declare const CreateControlMappingSourceFilterSensitiveLog: (
  obj: CreateControlMappingSource
) => any;
export declare const CreateControlRequestFilterSensitiveLog: (
  obj: CreateControlRequest
) => any;
export declare const CreateControlResponseFilterSensitiveLog: (
  obj: CreateControlResponse
) => any;
export declare const GetAssessmentResponseFilterSensitiveLog: (
  obj: GetAssessmentResponse
) => any;
export declare const GetAssessmentFrameworkResponseFilterSensitiveLog: (
  obj: GetAssessmentFrameworkResponse
) => any;
export declare const GetControlResponseFilterSensitiveLog: (
  obj: GetControlResponse
) => any;
export declare const DelegationMetadataFilterSensitiveLog: (
  obj: DelegationMetadata
) => any;
export declare const GetDelegationsResponseFilterSensitiveLog: (
  obj: GetDelegationsResponse
) => any;
export declare const GetEvidenceFileUploadUrlRequestFilterSensitiveLog: (
  obj: GetEvidenceFileUploadUrlRequest
) => any;
export declare const GetEvidenceFileUploadUrlResponseFilterSensitiveLog: (
  obj: GetEvidenceFileUploadUrlResponse
) => any;
export declare const SettingsFilterSensitiveLog: (obj: Settings) => any;
export declare const GetSettingsResponseFilterSensitiveLog: (
  obj: GetSettingsResponse
) => any;
export declare const ListAssessmentFrameworksResponseFilterSensitiveLog: (
  obj: ListAssessmentFrameworksResponse
) => any;
export declare const ListAssessmentFrameworkShareRequestsResponseFilterSensitiveLog: (
  obj: ListAssessmentFrameworkShareRequestsResponse
) => any;
export declare const ListAssessmentReportsResponseFilterSensitiveLog: (
  obj: ListAssessmentReportsResponse
) => any;
export declare const ListAssessmentsResponseFilterSensitiveLog: (
  obj: ListAssessmentsResponse
) => any;
export declare const NotificationFilterSensitiveLog: (obj: Notification) => any;
export declare const ListNotificationsResponseFilterSensitiveLog: (
  obj: ListNotificationsResponse
) => any;
export declare const StartAssessmentFrameworkShareResponseFilterSensitiveLog: (
  obj: StartAssessmentFrameworkShareResponse
) => any;
export declare const UpdateAssessmentRequestFilterSensitiveLog: (
  obj: UpdateAssessmentRequest
) => any;
export declare const UpdateAssessmentResponseFilterSensitiveLog: (
  obj: UpdateAssessmentResponse
) => any;
export declare const UpdateAssessmentControlRequestFilterSensitiveLog: (
  obj: UpdateAssessmentControlRequest
) => any;
export declare const UpdateAssessmentControlResponseFilterSensitiveLog: (
  obj: UpdateAssessmentControlResponse
) => any;
export declare const UpdateAssessmentControlSetStatusRequestFilterSensitiveLog: (
  obj: UpdateAssessmentControlSetStatusRequest
) => any;
export declare const UpdateAssessmentControlSetStatusResponseFilterSensitiveLog: (
  obj: UpdateAssessmentControlSetStatusResponse
) => any;
export declare const UpdateAssessmentFrameworkRequestFilterSensitiveLog: (
  obj: UpdateAssessmentFrameworkRequest
) => any;
export declare const UpdateAssessmentFrameworkResponseFilterSensitiveLog: (
  obj: UpdateAssessmentFrameworkResponse
) => any;
export declare const UpdateAssessmentFrameworkShareResponseFilterSensitiveLog: (
  obj: UpdateAssessmentFrameworkShareResponse
) => any;
export declare const UpdateAssessmentStatusResponseFilterSensitiveLog: (
  obj: UpdateAssessmentStatusResponse
) => any;
export declare const UpdateControlRequestFilterSensitiveLog: (
  obj: UpdateControlRequest
) => any;
export declare const UpdateControlResponseFilterSensitiveLog: (
  obj: UpdateControlResponse
) => any;
export declare const UpdateSettingsRequestFilterSensitiveLog: (
  obj: UpdateSettingsRequest
) => any;
export declare const UpdateSettingsResponseFilterSensitiveLog: (
  obj: UpdateSettingsResponse
) => any;
