import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { MTurkServiceException as __BaseException } from "./MTurkServiceException";
export interface AcceptQualificationRequestRequest {
  QualificationRequestId: string | undefined;
  IntegerValue?: number;
}
export interface AcceptQualificationRequestResponse {}
export declare class RequestError extends __BaseException {
  readonly name: "RequestError";
  readonly $fault: "client";
  Message?: string;
  TurkErrorCode?: string;
  constructor(opts: __ExceptionOptionType<RequestError, __BaseException>);
}
export declare class ServiceFault extends __BaseException {
  readonly name: "ServiceFault";
  readonly $fault: "server";
  Message?: string;
  TurkErrorCode?: string;
  constructor(opts: __ExceptionOptionType<ServiceFault, __BaseException>);
}
export interface ApproveAssignmentRequest {
  AssignmentId: string | undefined;
  RequesterFeedback?: string;
  OverrideRejection?: boolean;
}
export interface ApproveAssignmentResponse {}
export declare const AssignmentStatus: {
  readonly Approved: "Approved";
  readonly Rejected: "Rejected";
  readonly Submitted: "Submitted";
};
export type AssignmentStatus =
  (typeof AssignmentStatus)[keyof typeof AssignmentStatus];
export interface Assignment {
  AssignmentId?: string;
  WorkerId?: string;
  HITId?: string;
  AssignmentStatus?: AssignmentStatus;
  AutoApprovalTime?: Date;
  AcceptTime?: Date;
  SubmitTime?: Date;
  ApprovalTime?: Date;
  RejectionTime?: Date;
  Deadline?: Date;
  Answer?: string;
  RequesterFeedback?: string;
}
export interface AssociateQualificationWithWorkerRequest {
  QualificationTypeId: string | undefined;
  WorkerId: string | undefined;
  IntegerValue?: number;
  SendNotification?: boolean;
}
export interface AssociateQualificationWithWorkerResponse {}
export interface BonusPayment {
  WorkerId?: string;
  BonusAmount?: string;
  AssignmentId?: string;
  Reason?: string;
  GrantTime?: Date;
}
export declare const Comparator: {
  readonly DoesNotExist: "DoesNotExist";
  readonly EqualTo: "EqualTo";
  readonly Exists: "Exists";
  readonly GreaterThan: "GreaterThan";
  readonly GreaterThanOrEqualTo: "GreaterThanOrEqualTo";
  readonly In: "In";
  readonly LessThan: "LessThan";
  readonly LessThanOrEqualTo: "LessThanOrEqualTo";
  readonly NotEqualTo: "NotEqualTo";
  readonly NotIn: "NotIn";
};
export type Comparator = (typeof Comparator)[keyof typeof Comparator];
export interface CreateAdditionalAssignmentsForHITRequest {
  HITId: string | undefined;
  NumberOfAdditionalAssignments: number | undefined;
  UniqueRequestToken?: string;
}
export interface CreateAdditionalAssignmentsForHITResponse {}
export interface ParameterMapEntry {
  Key?: string;
  Values?: string[];
}
export interface PolicyParameter {
  Key?: string;
  Values?: string[];
  MapEntries?: ParameterMapEntry[];
}
export interface ReviewPolicy {
  PolicyName: string | undefined;
  Parameters?: PolicyParameter[];
}
export interface HITLayoutParameter {
  Name: string | undefined;
  Value: string | undefined;
}
export declare const HITAccessActions: {
  readonly Accept: "Accept";
  readonly DiscoverPreviewAndAccept: "DiscoverPreviewAndAccept";
  readonly PreviewAndAccept: "PreviewAndAccept";
};
export type HITAccessActions =
  (typeof HITAccessActions)[keyof typeof HITAccessActions];
export interface Locale {
  Country: string | undefined;
  Subdivision?: string;
}
export interface QualificationRequirement {
  QualificationTypeId: string | undefined;
  Comparator: Comparator | undefined;
  IntegerValues?: number[];
  LocaleValues?: Locale[];
  RequiredToPreview?: boolean;
  ActionsGuarded?: HITAccessActions;
}
export interface CreateHITRequest {
  MaxAssignments?: number;
  AutoApprovalDelayInSeconds?: number;
  LifetimeInSeconds: number | undefined;
  AssignmentDurationInSeconds: number | undefined;
  Reward: string | undefined;
  Title: string | undefined;
  Keywords?: string;
  Description: string | undefined;
  Question?: string;
  RequesterAnnotation?: string;
  QualificationRequirements?: QualificationRequirement[];
  UniqueRequestToken?: string;
  AssignmentReviewPolicy?: ReviewPolicy;
  HITReviewPolicy?: ReviewPolicy;
  HITLayoutId?: string;
  HITLayoutParameters?: HITLayoutParameter[];
}
export declare const HITReviewStatus: {
  readonly MarkedForReview: "MarkedForReview";
  readonly NotReviewed: "NotReviewed";
  readonly ReviewedAppropriate: "ReviewedAppropriate";
  readonly ReviewedInappropriate: "ReviewedInappropriate";
};
export type HITReviewStatus =
  (typeof HITReviewStatus)[keyof typeof HITReviewStatus];
export declare const HITStatus: {
  readonly Assignable: "Assignable";
  readonly Disposed: "Disposed";
  readonly Reviewable: "Reviewable";
  readonly Reviewing: "Reviewing";
  readonly Unassignable: "Unassignable";
};
export type HITStatus = (typeof HITStatus)[keyof typeof HITStatus];
export interface HIT {
  HITId?: string;
  HITTypeId?: string;
  HITGroupId?: string;
  HITLayoutId?: string;
  CreationTime?: Date;
  Title?: string;
  Description?: string;
  Question?: string;
  Keywords?: string;
  HITStatus?: HITStatus;
  MaxAssignments?: number;
  Reward?: string;
  AutoApprovalDelayInSeconds?: number;
  Expiration?: Date;
  AssignmentDurationInSeconds?: number;
  RequesterAnnotation?: string;
  QualificationRequirements?: QualificationRequirement[];
  HITReviewStatus?: HITReviewStatus;
  NumberOfAssignmentsPending?: number;
  NumberOfAssignmentsAvailable?: number;
  NumberOfAssignmentsCompleted?: number;
}
export interface CreateHITResponse {
  HIT?: HIT;
}
export interface CreateHITTypeRequest {
  AutoApprovalDelayInSeconds?: number;
  AssignmentDurationInSeconds: number | undefined;
  Reward: string | undefined;
  Title: string | undefined;
  Keywords?: string;
  Description: string | undefined;
  QualificationRequirements?: QualificationRequirement[];
}
export interface CreateHITTypeResponse {
  HITTypeId?: string;
}
export interface CreateHITWithHITTypeRequest {
  HITTypeId: string | undefined;
  MaxAssignments?: number;
  LifetimeInSeconds: number | undefined;
  Question?: string;
  RequesterAnnotation?: string;
  UniqueRequestToken?: string;
  AssignmentReviewPolicy?: ReviewPolicy;
  HITReviewPolicy?: ReviewPolicy;
  HITLayoutId?: string;
  HITLayoutParameters?: HITLayoutParameter[];
}
export interface CreateHITWithHITTypeResponse {
  HIT?: HIT;
}
export declare const QualificationTypeStatus: {
  readonly Active: "Active";
  readonly Inactive: "Inactive";
};
export type QualificationTypeStatus =
  (typeof QualificationTypeStatus)[keyof typeof QualificationTypeStatus];
export interface CreateQualificationTypeRequest {
  Name: string | undefined;
  Keywords?: string;
  Description: string | undefined;
  QualificationTypeStatus: QualificationTypeStatus | undefined;
  RetryDelayInSeconds?: number;
  Test?: string;
  AnswerKey?: string;
  TestDurationInSeconds?: number;
  AutoGranted?: boolean;
  AutoGrantedValue?: number;
}
export interface QualificationType {
  QualificationTypeId?: string;
  CreationTime?: Date;
  Name?: string;
  Description?: string;
  Keywords?: string;
  QualificationTypeStatus?: QualificationTypeStatus;
  Test?: string;
  TestDurationInSeconds?: number;
  AnswerKey?: string;
  RetryDelayInSeconds?: number;
  IsRequestable?: boolean;
  AutoGranted?: boolean;
  AutoGrantedValue?: number;
}
export interface CreateQualificationTypeResponse {
  QualificationType?: QualificationType;
}
export interface CreateWorkerBlockRequest {
  WorkerId: string | undefined;
  Reason: string | undefined;
}
export interface CreateWorkerBlockResponse {}
export interface DeleteHITRequest {
  HITId: string | undefined;
}
export interface DeleteHITResponse {}
export interface DeleteQualificationTypeRequest {
  QualificationTypeId: string | undefined;
}
export interface DeleteQualificationTypeResponse {}
export interface DeleteWorkerBlockRequest {
  WorkerId: string | undefined;
  Reason?: string;
}
export interface DeleteWorkerBlockResponse {}
export interface DisassociateQualificationFromWorkerRequest {
  WorkerId: string | undefined;
  QualificationTypeId: string | undefined;
  Reason?: string;
}
export interface DisassociateQualificationFromWorkerResponse {}
export declare const EventType: {
  readonly AssignmentAbandoned: "AssignmentAbandoned";
  readonly AssignmentAccepted: "AssignmentAccepted";
  readonly AssignmentApproved: "AssignmentApproved";
  readonly AssignmentRejected: "AssignmentRejected";
  readonly AssignmentReturned: "AssignmentReturned";
  readonly AssignmentSubmitted: "AssignmentSubmitted";
  readonly HITCreated: "HITCreated";
  readonly HITDisposed: "HITDisposed";
  readonly HITExpired: "HITExpired";
  readonly HITExtended: "HITExtended";
  readonly HITReviewable: "HITReviewable";
  readonly Ping: "Ping";
};
export type EventType = (typeof EventType)[keyof typeof EventType];
export interface GetAccountBalanceRequest {}
export interface GetAccountBalanceResponse {
  AvailableBalance?: string;
  OnHoldBalance?: string;
}
export interface GetAssignmentRequest {
  AssignmentId: string | undefined;
}
export interface GetAssignmentResponse {
  Assignment?: Assignment;
  HIT?: HIT;
}
export interface GetFileUploadURLRequest {
  AssignmentId: string | undefined;
  QuestionIdentifier: string | undefined;
}
export interface GetFileUploadURLResponse {
  FileUploadURL?: string;
}
export interface GetHITRequest {
  HITId: string | undefined;
}
export interface GetHITResponse {
  HIT?: HIT;
}
export interface GetQualificationScoreRequest {
  QualificationTypeId: string | undefined;
  WorkerId: string | undefined;
}
export declare const QualificationStatus: {
  readonly Granted: "Granted";
  readonly Revoked: "Revoked";
};
export type QualificationStatus =
  (typeof QualificationStatus)[keyof typeof QualificationStatus];
export interface Qualification {
  QualificationTypeId?: string;
  WorkerId?: string;
  GrantTime?: Date;
  IntegerValue?: number;
  LocaleValue?: Locale;
  Status?: QualificationStatus;
}
export interface GetQualificationScoreResponse {
  Qualification?: Qualification;
}
export interface GetQualificationTypeRequest {
  QualificationTypeId: string | undefined;
}
export interface GetQualificationTypeResponse {
  QualificationType?: QualificationType;
}
export interface ListAssignmentsForHITRequest {
  HITId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  AssignmentStatuses?: AssignmentStatus[];
}
export interface ListAssignmentsForHITResponse {
  NextToken?: string;
  NumResults?: number;
  Assignments?: Assignment[];
}
export interface ListBonusPaymentsRequest {
  HITId?: string;
  AssignmentId?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListBonusPaymentsResponse {
  NumResults?: number;
  NextToken?: string;
  BonusPayments?: BonusPayment[];
}
export interface ListHITsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListHITsResponse {
  NextToken?: string;
  NumResults?: number;
  HITs?: HIT[];
}
export interface ListHITsForQualificationTypeRequest {
  QualificationTypeId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListHITsForQualificationTypeResponse {
  NextToken?: string;
  NumResults?: number;
  HITs?: HIT[];
}
export interface ListQualificationRequestsRequest {
  QualificationTypeId?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface QualificationRequest {
  QualificationRequestId?: string;
  QualificationTypeId?: string;
  WorkerId?: string;
  Test?: string;
  Answer?: string;
  SubmitTime?: Date;
}
export interface ListQualificationRequestsResponse {
  NumResults?: number;
  NextToken?: string;
  QualificationRequests?: QualificationRequest[];
}
export interface ListQualificationTypesRequest {
  Query?: string;
  MustBeRequestable: boolean | undefined;
  MustBeOwnedByCaller?: boolean;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListQualificationTypesResponse {
  NumResults?: number;
  NextToken?: string;
  QualificationTypes?: QualificationType[];
}
export declare const ReviewableHITStatus: {
  readonly Reviewable: "Reviewable";
  readonly Reviewing: "Reviewing";
};
export type ReviewableHITStatus =
  (typeof ReviewableHITStatus)[keyof typeof ReviewableHITStatus];
export interface ListReviewableHITsRequest {
  HITTypeId?: string;
  Status?: ReviewableHITStatus;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListReviewableHITsResponse {
  NextToken?: string;
  NumResults?: number;
  HITs?: HIT[];
}
export declare const ReviewPolicyLevel: {
  readonly Assignment: "Assignment";
  readonly HIT: "HIT";
};
export type ReviewPolicyLevel =
  (typeof ReviewPolicyLevel)[keyof typeof ReviewPolicyLevel];
export interface ListReviewPolicyResultsForHITRequest {
  HITId: string | undefined;
  PolicyLevels?: ReviewPolicyLevel[];
  RetrieveActions?: boolean;
  RetrieveResults?: boolean;
  NextToken?: string;
  MaxResults?: number;
}
export declare const ReviewActionStatus: {
  readonly Cancelled: "Cancelled";
  readonly Failed: "Failed";
  readonly Intended: "Intended";
  readonly Succeeded: "Succeeded";
};
export type ReviewActionStatus =
  (typeof ReviewActionStatus)[keyof typeof ReviewActionStatus];
export interface ReviewActionDetail {
  ActionId?: string;
  ActionName?: string;
  TargetId?: string;
  TargetType?: string;
  Status?: ReviewActionStatus;
  CompleteTime?: Date;
  Result?: string;
  ErrorCode?: string;
}
export interface ReviewResultDetail {
  ActionId?: string;
  SubjectId?: string;
  SubjectType?: string;
  QuestionId?: string;
  Key?: string;
  Value?: string;
}
export interface ReviewReport {
  ReviewResults?: ReviewResultDetail[];
  ReviewActions?: ReviewActionDetail[];
}
export interface ListReviewPolicyResultsForHITResponse {
  HITId?: string;
  AssignmentReviewPolicy?: ReviewPolicy;
  HITReviewPolicy?: ReviewPolicy;
  AssignmentReviewReport?: ReviewReport;
  HITReviewReport?: ReviewReport;
  NextToken?: string;
}
export interface ListWorkerBlocksRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface WorkerBlock {
  WorkerId?: string;
  Reason?: string;
}
export interface ListWorkerBlocksResponse {
  NextToken?: string;
  NumResults?: number;
  WorkerBlocks?: WorkerBlock[];
}
export interface ListWorkersWithQualificationTypeRequest {
  QualificationTypeId: string | undefined;
  Status?: QualificationStatus;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListWorkersWithQualificationTypeResponse {
  NextToken?: string;
  NumResults?: number;
  Qualifications?: Qualification[];
}
export interface NotifyWorkersRequest {
  Subject: string | undefined;
  MessageText: string | undefined;
  WorkerIds: string[] | undefined;
}
export declare const NotifyWorkersFailureCode: {
  readonly HardFailure: "HardFailure";
  readonly SoftFailure: "SoftFailure";
};
export type NotifyWorkersFailureCode =
  (typeof NotifyWorkersFailureCode)[keyof typeof NotifyWorkersFailureCode];
export interface NotifyWorkersFailureStatus {
  NotifyWorkersFailureCode?: NotifyWorkersFailureCode;
  NotifyWorkersFailureMessage?: string;
  WorkerId?: string;
}
export interface NotifyWorkersResponse {
  NotifyWorkersFailureStatuses?: NotifyWorkersFailureStatus[];
}
export interface RejectAssignmentRequest {
  AssignmentId: string | undefined;
  RequesterFeedback: string | undefined;
}
export interface RejectAssignmentResponse {}
export interface RejectQualificationRequestRequest {
  QualificationRequestId: string | undefined;
  Reason?: string;
}
export interface RejectQualificationRequestResponse {}
export interface SendBonusRequest {
  WorkerId: string | undefined;
  BonusAmount: string | undefined;
  AssignmentId: string | undefined;
  Reason: string | undefined;
  UniqueRequestToken?: string;
}
export interface SendBonusResponse {}
export declare const NotificationTransport: {
  readonly Email: "Email";
  readonly SNS: "SNS";
  readonly SQS: "SQS";
};
export type NotificationTransport =
  (typeof NotificationTransport)[keyof typeof NotificationTransport];
export interface NotificationSpecification {
  Destination: string | undefined;
  Transport: NotificationTransport | undefined;
  Version: string | undefined;
  EventTypes: EventType[] | undefined;
}
export interface SendTestEventNotificationRequest {
  Notification: NotificationSpecification | undefined;
  TestEventType: EventType | undefined;
}
export interface SendTestEventNotificationResponse {}
export interface UpdateExpirationForHITRequest {
  HITId: string | undefined;
  ExpireAt: Date | undefined;
}
export interface UpdateExpirationForHITResponse {}
export interface UpdateHITReviewStatusRequest {
  HITId: string | undefined;
  Revert?: boolean;
}
export interface UpdateHITReviewStatusResponse {}
export interface UpdateHITTypeOfHITRequest {
  HITId: string | undefined;
  HITTypeId: string | undefined;
}
export interface UpdateHITTypeOfHITResponse {}
export interface UpdateNotificationSettingsRequest {
  HITTypeId: string | undefined;
  Notification?: NotificationSpecification;
  Active?: boolean;
}
export interface UpdateNotificationSettingsResponse {}
export interface UpdateQualificationTypeRequest {
  QualificationTypeId: string | undefined;
  Description?: string;
  QualificationTypeStatus?: QualificationTypeStatus;
  Test?: string;
  AnswerKey?: string;
  TestDurationInSeconds?: number;
  RetryDelayInSeconds?: number;
  AutoGranted?: boolean;
  AutoGrantedValue?: number;
}
export interface UpdateQualificationTypeResponse {
  QualificationType?: QualificationType;
}
