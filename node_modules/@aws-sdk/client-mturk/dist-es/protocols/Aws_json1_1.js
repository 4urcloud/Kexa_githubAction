import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { RequestError, ServiceFault, } from "../models/models_0";
import { MTurkServiceException as __BaseException } from "../models/MTurkServiceException";
export const se_AcceptQualificationRequestCommand = async (input, context) => {
    const headers = sharedHeaders("AcceptQualificationRequest");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ApproveAssignmentCommand = async (input, context) => {
    const headers = sharedHeaders("ApproveAssignment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateQualificationWithWorkerCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateQualificationWithWorker");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAdditionalAssignmentsForHITCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAdditionalAssignmentsForHIT");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateHITCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHIT");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateHITTypeCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHITType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateHITWithHITTypeCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHITWithHITType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateQualificationTypeCommand = async (input, context) => {
    const headers = sharedHeaders("CreateQualificationType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWorkerBlockCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkerBlock");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteHITCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteHIT");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteQualificationTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteQualificationType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWorkerBlockCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWorkerBlock");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateQualificationFromWorkerCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateQualificationFromWorker");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAccountBalanceCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccountBalance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAssignmentCommand = async (input, context) => {
    const headers = sharedHeaders("GetAssignment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetFileUploadURLCommand = async (input, context) => {
    const headers = sharedHeaders("GetFileUploadURL");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetHITCommand = async (input, context) => {
    const headers = sharedHeaders("GetHIT");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetQualificationScoreCommand = async (input, context) => {
    const headers = sharedHeaders("GetQualificationScore");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetQualificationTypeCommand = async (input, context) => {
    const headers = sharedHeaders("GetQualificationType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAssignmentsForHITCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssignmentsForHIT");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBonusPaymentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBonusPayments");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListHITsCommand = async (input, context) => {
    const headers = sharedHeaders("ListHITs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListHITsForQualificationTypeCommand = async (input, context) => {
    const headers = sharedHeaders("ListHITsForQualificationType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListQualificationRequestsCommand = async (input, context) => {
    const headers = sharedHeaders("ListQualificationRequests");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListQualificationTypesCommand = async (input, context) => {
    const headers = sharedHeaders("ListQualificationTypes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListReviewableHITsCommand = async (input, context) => {
    const headers = sharedHeaders("ListReviewableHITs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListReviewPolicyResultsForHITCommand = async (input, context) => {
    const headers = sharedHeaders("ListReviewPolicyResultsForHIT");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWorkerBlocksCommand = async (input, context) => {
    const headers = sharedHeaders("ListWorkerBlocks");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWorkersWithQualificationTypeCommand = async (input, context) => {
    const headers = sharedHeaders("ListWorkersWithQualificationType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_NotifyWorkersCommand = async (input, context) => {
    const headers = sharedHeaders("NotifyWorkers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectAssignmentCommand = async (input, context) => {
    const headers = sharedHeaders("RejectAssignment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectQualificationRequestCommand = async (input, context) => {
    const headers = sharedHeaders("RejectQualificationRequest");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendBonusCommand = async (input, context) => {
    const headers = sharedHeaders("SendBonus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendTestEventNotificationCommand = async (input, context) => {
    const headers = sharedHeaders("SendTestEventNotification");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateExpirationForHITCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateExpirationForHIT");
    let body;
    body = JSON.stringify(se_UpdateExpirationForHITRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateHITReviewStatusCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateHITReviewStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateHITTypeOfHITCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateHITTypeOfHIT");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateNotificationSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateNotificationSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateQualificationTypeCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateQualificationType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AcceptQualificationRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ApproveAssignmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateQualificationWithWorkerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAdditionalAssignmentsForHITCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateHITCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateHITResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateHITTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateHITWithHITTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateHITWithHITTypeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateQualificationTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateQualificationTypeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWorkerBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteHITCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteQualificationTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteWorkerBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateQualificationFromWorkerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAccountBalanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAssignmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAssignmentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetFileUploadURLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetHITCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetHITResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetQualificationScoreCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetQualificationScoreResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetQualificationTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetQualificationTypeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAssignmentsForHITCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAssignmentsForHITResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBonusPaymentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListBonusPaymentsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListHITsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListHITsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListHITsForQualificationTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListHITsForQualificationTypeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListQualificationRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListQualificationRequestsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListQualificationTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListQualificationTypesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListReviewableHITsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListReviewableHITsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListReviewPolicyResultsForHITCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListReviewPolicyResultsForHITResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListWorkerBlocksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListWorkersWithQualificationTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListWorkersWithQualificationTypeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_NotifyWorkersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RejectAssignmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RejectQualificationRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SendBonusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SendTestEventNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateExpirationForHITCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateHITReviewStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateHITTypeOfHITCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateNotificationSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateQualificationTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateQualificationTypeResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "RequestError":
        case "com.amazonaws.mturk#RequestError":
            throw await de_RequestErrorRes(parsedOutput, context);
        case "ServiceFault":
        case "com.amazonaws.mturk#ServiceFault":
            throw await de_ServiceFaultRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RequestErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new RequestError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceFaultRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceFault({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_UpdateExpirationForHITRequest = (input, context) => {
    return take(input, {
        ExpireAt: (_) => Math.round(_.getTime() / 1000),
        HITId: [],
    });
};
const de_Assignment = (output, context) => {
    return take(output, {
        AcceptTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Answer: __expectString,
        ApprovalTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        AssignmentId: __expectString,
        AssignmentStatus: __expectString,
        AutoApprovalTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Deadline: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HITId: __expectString,
        RejectionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RequesterFeedback: __expectString,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WorkerId: __expectString,
    });
};
const de_AssignmentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Assignment(entry, context);
    });
    return retVal;
};
const de_BonusPayment = (output, context) => {
    return take(output, {
        AssignmentId: __expectString,
        BonusAmount: __expectString,
        GrantTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Reason: __expectString,
        WorkerId: __expectString,
    });
};
const de_BonusPaymentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BonusPayment(entry, context);
    });
    return retVal;
};
const de_CreateHITResponse = (output, context) => {
    return take(output, {
        HIT: (_) => de_HIT(_, context),
    });
};
const de_CreateHITWithHITTypeResponse = (output, context) => {
    return take(output, {
        HIT: (_) => de_HIT(_, context),
    });
};
const de_CreateQualificationTypeResponse = (output, context) => {
    return take(output, {
        QualificationType: (_) => de_QualificationType(_, context),
    });
};
const de_GetAssignmentResponse = (output, context) => {
    return take(output, {
        Assignment: (_) => de_Assignment(_, context),
        HIT: (_) => de_HIT(_, context),
    });
};
const de_GetHITResponse = (output, context) => {
    return take(output, {
        HIT: (_) => de_HIT(_, context),
    });
};
const de_GetQualificationScoreResponse = (output, context) => {
    return take(output, {
        Qualification: (_) => de_Qualification(_, context),
    });
};
const de_GetQualificationTypeResponse = (output, context) => {
    return take(output, {
        QualificationType: (_) => de_QualificationType(_, context),
    });
};
const de_HIT = (output, context) => {
    return take(output, {
        AssignmentDurationInSeconds: __expectLong,
        AutoApprovalDelayInSeconds: __expectLong,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Expiration: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HITGroupId: __expectString,
        HITId: __expectString,
        HITLayoutId: __expectString,
        HITReviewStatus: __expectString,
        HITStatus: __expectString,
        HITTypeId: __expectString,
        Keywords: __expectString,
        MaxAssignments: __expectInt32,
        NumberOfAssignmentsAvailable: __expectInt32,
        NumberOfAssignmentsCompleted: __expectInt32,
        NumberOfAssignmentsPending: __expectInt32,
        QualificationRequirements: _json,
        Question: __expectString,
        RequesterAnnotation: __expectString,
        Reward: __expectString,
        Title: __expectString,
    });
};
const de_HITList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HIT(entry, context);
    });
    return retVal;
};
const de_ListAssignmentsForHITResponse = (output, context) => {
    return take(output, {
        Assignments: (_) => de_AssignmentList(_, context),
        NextToken: __expectString,
        NumResults: __expectInt32,
    });
};
const de_ListBonusPaymentsResponse = (output, context) => {
    return take(output, {
        BonusPayments: (_) => de_BonusPaymentList(_, context),
        NextToken: __expectString,
        NumResults: __expectInt32,
    });
};
const de_ListHITsForQualificationTypeResponse = (output, context) => {
    return take(output, {
        HITs: (_) => de_HITList(_, context),
        NextToken: __expectString,
        NumResults: __expectInt32,
    });
};
const de_ListHITsResponse = (output, context) => {
    return take(output, {
        HITs: (_) => de_HITList(_, context),
        NextToken: __expectString,
        NumResults: __expectInt32,
    });
};
const de_ListQualificationRequestsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        NumResults: __expectInt32,
        QualificationRequests: (_) => de_QualificationRequestList(_, context),
    });
};
const de_ListQualificationTypesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        NumResults: __expectInt32,
        QualificationTypes: (_) => de_QualificationTypeList(_, context),
    });
};
const de_ListReviewableHITsResponse = (output, context) => {
    return take(output, {
        HITs: (_) => de_HITList(_, context),
        NextToken: __expectString,
        NumResults: __expectInt32,
    });
};
const de_ListReviewPolicyResultsForHITResponse = (output, context) => {
    return take(output, {
        AssignmentReviewPolicy: _json,
        AssignmentReviewReport: (_) => de_ReviewReport(_, context),
        HITId: __expectString,
        HITReviewPolicy: _json,
        HITReviewReport: (_) => de_ReviewReport(_, context),
        NextToken: __expectString,
    });
};
const de_ListWorkersWithQualificationTypeResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        NumResults: __expectInt32,
        Qualifications: (_) => de_QualificationList(_, context),
    });
};
const de_Qualification = (output, context) => {
    return take(output, {
        GrantTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IntegerValue: __expectInt32,
        LocaleValue: _json,
        QualificationTypeId: __expectString,
        Status: __expectString,
        WorkerId: __expectString,
    });
};
const de_QualificationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Qualification(entry, context);
    });
    return retVal;
};
const de_QualificationRequest = (output, context) => {
    return take(output, {
        Answer: __expectString,
        QualificationRequestId: __expectString,
        QualificationTypeId: __expectString,
        SubmitTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Test: __expectString,
        WorkerId: __expectString,
    });
};
const de_QualificationRequestList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QualificationRequest(entry, context);
    });
    return retVal;
};
const de_QualificationType = (output, context) => {
    return take(output, {
        AnswerKey: __expectString,
        AutoGranted: __expectBoolean,
        AutoGrantedValue: __expectInt32,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        IsRequestable: __expectBoolean,
        Keywords: __expectString,
        Name: __expectString,
        QualificationTypeId: __expectString,
        QualificationTypeStatus: __expectString,
        RetryDelayInSeconds: __expectLong,
        Test: __expectString,
        TestDurationInSeconds: __expectLong,
    });
};
const de_QualificationTypeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QualificationType(entry, context);
    });
    return retVal;
};
const de_ReviewActionDetail = (output, context) => {
    return take(output, {
        ActionId: __expectString,
        ActionName: __expectString,
        CompleteTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ErrorCode: __expectString,
        Result: __expectString,
        Status: __expectString,
        TargetId: __expectString,
        TargetType: __expectString,
    });
};
const de_ReviewActionDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReviewActionDetail(entry, context);
    });
    return retVal;
};
const de_ReviewReport = (output, context) => {
    return take(output, {
        ReviewActions: (_) => de_ReviewActionDetailList(_, context),
        ReviewResults: _json,
    });
};
const de_UpdateQualificationTypeResponse = (output, context) => {
    return take(output, {
        QualificationType: (_) => de_QualificationType(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `MTurkRequesterServiceV20170117.${operation}`,
    };
}
