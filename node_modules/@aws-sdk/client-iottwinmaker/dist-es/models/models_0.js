import { IoTTwinMakerServiceException as __BaseException } from "./IoTTwinMakerServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export const ErrorCode = {
    COMPOSITE_COMPONENT_FAILURE: "COMPOSITE_COMPONENT_FAILURE",
    INTERNAL_FAILURE: "INTERNAL_FAILURE",
    PROCESSING_ERROR: "PROCESSING_ERROR",
    SYNC_CREATING_ERROR: "SYNC_CREATING_ERROR",
    SYNC_DELETING_ERROR: "SYNC_DELETING_ERROR",
    SYNC_INITIALIZING_ERROR: "SYNC_INITIALIZING_ERROR",
    SYNC_PROCESSING_ERROR: "SYNC_PROCESSING_ERROR",
    VALIDATION_ERROR: "VALIDATION_ERROR",
};
export const MetadataTransferJobState = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    COMPLETED: "COMPLETED",
    ERROR: "ERROR",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    VALIDATING: "VALIDATING",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export const Scope = {
    ENTITY: "ENTITY",
    WORKSPACE: "WORKSPACE",
};
export const Type = {
    BOOLEAN: "BOOLEAN",
    DOUBLE: "DOUBLE",
    INTEGER: "INTEGER",
    LIST: "LIST",
    LONG: "LONG",
    MAP: "MAP",
    RELATIONSHIP: "RELATIONSHIP",
    STRING: "STRING",
};
export const GroupType = {
    TABULAR: "TABULAR",
};
export const State = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    ERROR: "ERROR",
    UPDATING: "UPDATING",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export const PropertyUpdateType = {
    CREATE: "CREATE",
    DELETE: "DELETE",
    UPDATE: "UPDATE",
};
export const PropertyGroupUpdateType = {
    CREATE: "CREATE",
    DELETE: "DELETE",
    UPDATE: "UPDATE",
};
export const DestinationType = {
    IOTSITEWISE: "iotsitewise",
    IOTTWINMAKER: "iottwinmaker",
    S3: "s3",
};
export var IotSiteWiseSourceConfigurationFilter;
(function (IotSiteWiseSourceConfigurationFilter) {
    IotSiteWiseSourceConfigurationFilter.visit = (value, visitor) => {
        if (value.filterByAssetModel !== undefined)
            return visitor.filterByAssetModel(value.filterByAssetModel);
        if (value.filterByAsset !== undefined)
            return visitor.filterByAsset(value.filterByAsset);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(IotSiteWiseSourceConfigurationFilter || (IotSiteWiseSourceConfigurationFilter = {}));
export var IotTwinMakerSourceConfigurationFilter;
(function (IotTwinMakerSourceConfigurationFilter) {
    IotTwinMakerSourceConfigurationFilter.visit = (value, visitor) => {
        if (value.filterByComponentType !== undefined)
            return visitor.filterByComponentType(value.filterByComponentType);
        if (value.filterByEntity !== undefined)
            return visitor.filterByEntity(value.filterByEntity);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(IotTwinMakerSourceConfigurationFilter || (IotTwinMakerSourceConfigurationFilter = {}));
export const SourceType = {
    IOTSITEWISE: "iotsitewise",
    IOTTWINMAKER: "iottwinmaker",
    S3: "s3",
};
export const SyncJobState = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    ERROR: "ERROR",
    INITIALIZING: "INITIALIZING",
};
export const ColumnType = {
    EDGE: "EDGE",
    NODE: "NODE",
    VALUE: "VALUE",
};
export class QueryTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "QueryTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "QueryTimeoutException";
        this.$fault = "client";
        this.$retryable = {};
        Object.setPrototypeOf(this, QueryTimeoutException.prototype);
    }
}
export const PricingTier = {
    TIER_1: "TIER_1",
    TIER_2: "TIER_2",
    TIER_3: "TIER_3",
    TIER_4: "TIER_4",
};
export const PricingMode = {
    BASIC: "BASIC",
    STANDARD: "STANDARD",
    TIERED_BUNDLE: "TIERED_BUNDLE",
};
export const UpdateReason = {
    DEFAULT: "DEFAULT",
    ENTITY_COUNT_UPDATE: "ENTITY_COUNT_UPDATE",
    OVERWRITTEN: "OVERWRITTEN",
    PRICING_MODE_UPDATE: "PRICING_MODE_UPDATE",
    PRICING_TIER_UPDATE: "PRICING_TIER_UPDATE",
};
export class ConnectorFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConnectorFailureException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConnectorFailureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConnectorFailureException.prototype);
    }
}
export class ConnectorTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConnectorTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConnectorTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConnectorTimeoutException.prototype);
    }
}
export const Order = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const InterpolationType = {
    LINEAR: "LINEAR",
};
export const OrderByTime = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const SceneErrorCode = {
    MATTERPORT_ERROR: "MATTERPORT_ERROR",
};
export var ListComponentTypesFilter;
(function (ListComponentTypesFilter) {
    ListComponentTypesFilter.visit = (value, visitor) => {
        if (value.extendsFrom !== undefined)
            return visitor.extendsFrom(value.extendsFrom);
        if (value.namespace !== undefined)
            return visitor.namespace(value.namespace);
        if (value.isAbstract !== undefined)
            return visitor.isAbstract(value.isAbstract);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ListComponentTypesFilter || (ListComponentTypesFilter = {}));
export var ListEntitiesFilter;
(function (ListEntitiesFilter) {
    ListEntitiesFilter.visit = (value, visitor) => {
        if (value.parentEntityId !== undefined)
            return visitor.parentEntityId(value.parentEntityId);
        if (value.componentTypeId !== undefined)
            return visitor.componentTypeId(value.componentTypeId);
        if (value.externalId !== undefined)
            return visitor.externalId(value.externalId);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ListEntitiesFilter || (ListEntitiesFilter = {}));
export var ListMetadataTransferJobsFilter;
(function (ListMetadataTransferJobsFilter) {
    ListMetadataTransferJobsFilter.visit = (value, visitor) => {
        if (value.workspaceId !== undefined)
            return visitor.workspaceId(value.workspaceId);
        if (value.state !== undefined)
            return visitor.state(value.state);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ListMetadataTransferJobsFilter || (ListMetadataTransferJobsFilter = {}));
export const SyncResourceType = {
    COMPONENT_TYPE: "COMPONENT_TYPE",
    ENTITY: "ENTITY",
};
export const SyncResourceState = {
    DELETED: "DELETED",
    ERROR: "ERROR",
    INITIALIZING: "INITIALIZING",
    IN_SYNC: "IN_SYNC",
    PROCESSING: "PROCESSING",
};
export var SyncResourceFilter;
(function (SyncResourceFilter) {
    SyncResourceFilter.visit = (value, visitor) => {
        if (value.state !== undefined)
            return visitor.state(value.state);
        if (value.resourceType !== undefined)
            return visitor.resourceType(value.resourceType);
        if (value.resourceId !== undefined)
            return visitor.resourceId(value.resourceId);
        if (value.externalId !== undefined)
            return visitor.externalId(value.externalId);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(SyncResourceFilter || (SyncResourceFilter = {}));
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
export const ComponentUpdateType = {
    CREATE: "CREATE",
    DELETE: "DELETE",
    UPDATE: "UPDATE",
};
export const ParentEntityUpdateType = {
    DELETE: "DELETE",
    UPDATE: "UPDATE",
};
