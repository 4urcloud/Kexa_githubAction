import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DocumentType as __DocumentType } from "@smithy/types";
import { IoTTwinMakerServiceException as __BaseException } from "./IoTTwinMakerServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface EntityPropertyReference {
  componentName?: string;
  componentPath?: string;
  externalIdProperty?: Record<string, string>;
  entityId?: string;
  propertyName: string | undefined;
}
export interface RelationshipValue {
  targetEntityId?: string;
  targetComponentName?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CancelMetadataTransferJobRequest {
  metadataTransferJobId: string | undefined;
}
export interface MetadataTransferJobProgress {
  totalCount?: number;
  succeededCount?: number;
  skippedCount?: number;
  failedCount?: number;
}
export declare const ErrorCode: {
  readonly COMPOSITE_COMPONENT_FAILURE: "COMPOSITE_COMPONENT_FAILURE";
  readonly INTERNAL_FAILURE: "INTERNAL_FAILURE";
  readonly PROCESSING_ERROR: "PROCESSING_ERROR";
  readonly SYNC_CREATING_ERROR: "SYNC_CREATING_ERROR";
  readonly SYNC_DELETING_ERROR: "SYNC_DELETING_ERROR";
  readonly SYNC_INITIALIZING_ERROR: "SYNC_INITIALIZING_ERROR";
  readonly SYNC_PROCESSING_ERROR: "SYNC_PROCESSING_ERROR";
  readonly VALIDATION_ERROR: "VALIDATION_ERROR";
};
export type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];
export interface ErrorDetails {
  code?: ErrorCode;
  message?: string;
}
export declare const MetadataTransferJobState: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly COMPLETED: "COMPLETED";
  readonly ERROR: "ERROR";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly VALIDATING: "VALIDATING";
};
export type MetadataTransferJobState =
  (typeof MetadataTransferJobState)[keyof typeof MetadataTransferJobState];
export interface MetadataTransferJobStatus {
  state?: MetadataTransferJobState;
  error?: ErrorDetails;
  queuedPosition?: number;
}
export interface CancelMetadataTransferJobResponse {
  metadataTransferJobId: string | undefined;
  arn: string | undefined;
  updateDateTime: Date | undefined;
  status: MetadataTransferJobStatus | undefined;
  progress?: MetadataTransferJobProgress;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CompositeComponentTypeRequest {
  componentTypeId?: string;
}
export interface LambdaFunction {
  arn: string | undefined;
}
export interface DataConnector {
  lambda?: LambdaFunction;
  isNative?: boolean;
}
export declare const Scope: {
  readonly ENTITY: "ENTITY";
  readonly WORKSPACE: "WORKSPACE";
};
export type Scope = (typeof Scope)[keyof typeof Scope];
export interface FunctionRequest {
  requiredProperties?: string[];
  scope?: Scope;
  implementedBy?: DataConnector;
}
export interface Relationship {
  targetComponentTypeId?: string;
  relationshipType?: string;
}
export declare const Type: {
  readonly BOOLEAN: "BOOLEAN";
  readonly DOUBLE: "DOUBLE";
  readonly INTEGER: "INTEGER";
  readonly LIST: "LIST";
  readonly LONG: "LONG";
  readonly MAP: "MAP";
  readonly RELATIONSHIP: "RELATIONSHIP";
  readonly STRING: "STRING";
};
export type Type = (typeof Type)[keyof typeof Type];
export declare const GroupType: {
  readonly TABULAR: "TABULAR";
};
export type GroupType = (typeof GroupType)[keyof typeof GroupType];
export interface PropertyGroupRequest {
  groupType?: GroupType;
  propertyNames?: string[];
}
export declare const State: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
  readonly UPDATING: "UPDATING";
};
export type State = (typeof State)[keyof typeof State];
export interface CreateComponentTypeResponse {
  arn: string | undefined;
  creationDateTime: Date | undefined;
  state: State | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare const PropertyUpdateType: {
  readonly CREATE: "CREATE";
  readonly DELETE: "DELETE";
  readonly UPDATE: "UPDATE";
};
export type PropertyUpdateType =
  (typeof PropertyUpdateType)[keyof typeof PropertyUpdateType];
export declare const PropertyGroupUpdateType: {
  readonly CREATE: "CREATE";
  readonly DELETE: "DELETE";
  readonly UPDATE: "UPDATE";
};
export type PropertyGroupUpdateType =
  (typeof PropertyGroupUpdateType)[keyof typeof PropertyGroupUpdateType];
export interface ComponentPropertyGroupRequest {
  groupType?: GroupType;
  propertyNames?: string[];
  updateType?: PropertyGroupUpdateType;
}
export interface CreateEntityResponse {
  entityId: string | undefined;
  arn: string | undefined;
  creationDateTime: Date | undefined;
  state: State | undefined;
}
export interface IotTwinMakerDestinationConfiguration {
  workspace: string | undefined;
}
export interface S3DestinationConfiguration {
  location: string | undefined;
}
export declare const DestinationType: {
  readonly IOTSITEWISE: "iotsitewise";
  readonly IOTTWINMAKER: "iottwinmaker";
  readonly S3: "s3";
};
export type DestinationType =
  (typeof DestinationType)[keyof typeof DestinationType];
export interface DestinationConfiguration {
  type: DestinationType | undefined;
  s3Configuration?: S3DestinationConfiguration;
  iotTwinMakerConfiguration?: IotTwinMakerDestinationConfiguration;
}
export interface FilterByAsset {
  assetId?: string;
  assetExternalId?: string;
  includeOffspring?: boolean;
  includeAssetModel?: boolean;
}
export interface FilterByAssetModel {
  assetModelId?: string;
  assetModelExternalId?: string;
  includeOffspring?: boolean;
  includeAssets?: boolean;
}
export type IotSiteWiseSourceConfigurationFilter =
  | IotSiteWiseSourceConfigurationFilter.FilterByAssetMember
  | IotSiteWiseSourceConfigurationFilter.FilterByAssetModelMember
  | IotSiteWiseSourceConfigurationFilter.$UnknownMember;
export declare namespace IotSiteWiseSourceConfigurationFilter {
  interface FilterByAssetModelMember {
    filterByAssetModel: FilterByAssetModel;
    filterByAsset?: never;
    $unknown?: never;
  }
  interface FilterByAssetMember {
    filterByAssetModel?: never;
    filterByAsset: FilterByAsset;
    $unknown?: never;
  }
  interface $UnknownMember {
    filterByAssetModel?: never;
    filterByAsset?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    filterByAssetModel: (value: FilterByAssetModel) => T;
    filterByAsset: (value: FilterByAsset) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: IotSiteWiseSourceConfigurationFilter,
    visitor: Visitor<T>
  ) => T;
}
export interface IotSiteWiseSourceConfiguration {
  filters?: IotSiteWiseSourceConfigurationFilter[];
}
export interface FilterByComponentType {
  componentTypeId: string | undefined;
}
export interface FilterByEntity {
  entityId: string | undefined;
}
export type IotTwinMakerSourceConfigurationFilter =
  | IotTwinMakerSourceConfigurationFilter.FilterByComponentTypeMember
  | IotTwinMakerSourceConfigurationFilter.FilterByEntityMember
  | IotTwinMakerSourceConfigurationFilter.$UnknownMember;
export declare namespace IotTwinMakerSourceConfigurationFilter {
  interface FilterByComponentTypeMember {
    filterByComponentType: FilterByComponentType;
    filterByEntity?: never;
    $unknown?: never;
  }
  interface FilterByEntityMember {
    filterByComponentType?: never;
    filterByEntity: FilterByEntity;
    $unknown?: never;
  }
  interface $UnknownMember {
    filterByComponentType?: never;
    filterByEntity?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    filterByComponentType: (value: FilterByComponentType) => T;
    filterByEntity: (value: FilterByEntity) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: IotTwinMakerSourceConfigurationFilter,
    visitor: Visitor<T>
  ) => T;
}
export interface IotTwinMakerSourceConfiguration {
  workspace: string | undefined;
  filters?: IotTwinMakerSourceConfigurationFilter[];
}
export interface S3SourceConfiguration {
  location: string | undefined;
}
export declare const SourceType: {
  readonly IOTSITEWISE: "iotsitewise";
  readonly IOTTWINMAKER: "iottwinmaker";
  readonly S3: "s3";
};
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
export interface SourceConfiguration {
  type: SourceType | undefined;
  s3Configuration?: S3SourceConfiguration;
  iotSiteWiseConfiguration?: IotSiteWiseSourceConfiguration;
  iotTwinMakerConfiguration?: IotTwinMakerSourceConfiguration;
}
export interface CreateMetadataTransferJobRequest {
  metadataTransferJobId?: string;
  description?: string;
  sources: SourceConfiguration[] | undefined;
  destination: DestinationConfiguration | undefined;
}
export interface CreateMetadataTransferJobResponse {
  metadataTransferJobId: string | undefined;
  arn: string | undefined;
  creationDateTime: Date | undefined;
  status: MetadataTransferJobStatus | undefined;
}
export interface CreateSceneRequest {
  workspaceId: string | undefined;
  sceneId: string | undefined;
  contentLocation: string | undefined;
  description?: string;
  capabilities?: string[];
  tags?: Record<string, string>;
  sceneMetadata?: Record<string, string>;
}
export interface CreateSceneResponse {
  arn: string | undefined;
  creationDateTime: Date | undefined;
}
export interface CreateSyncJobRequest {
  workspaceId: string | undefined;
  syncSource: string | undefined;
  syncRole: string | undefined;
  tags?: Record<string, string>;
}
export declare const SyncJobState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
  readonly INITIALIZING: "INITIALIZING";
};
export type SyncJobState = (typeof SyncJobState)[keyof typeof SyncJobState];
export interface CreateSyncJobResponse {
  arn: string | undefined;
  creationDateTime: Date | undefined;
  state: SyncJobState | undefined;
}
export interface CreateWorkspaceRequest {
  workspaceId: string | undefined;
  description?: string;
  s3Location?: string;
  role?: string;
  tags?: Record<string, string>;
}
export interface CreateWorkspaceResponse {
  arn: string | undefined;
  creationDateTime: Date | undefined;
}
export interface DeleteComponentTypeRequest {
  workspaceId: string | undefined;
  componentTypeId: string | undefined;
}
export interface DeleteComponentTypeResponse {
  state: State | undefined;
}
export interface DeleteEntityRequest {
  workspaceId: string | undefined;
  entityId: string | undefined;
  isRecursive?: boolean;
}
export interface DeleteEntityResponse {
  state: State | undefined;
}
export interface DeleteSceneRequest {
  workspaceId: string | undefined;
  sceneId: string | undefined;
}
export interface DeleteSceneResponse {}
export interface DeleteSyncJobRequest {
  workspaceId: string | undefined;
  syncSource: string | undefined;
}
export interface DeleteSyncJobResponse {
  state: SyncJobState | undefined;
}
export interface DeleteWorkspaceRequest {
  workspaceId: string | undefined;
}
export interface DeleteWorkspaceResponse {
  message?: string;
}
export interface ExecuteQueryRequest {
  workspaceId: string | undefined;
  queryStatement: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export declare const ColumnType: {
  readonly EDGE: "EDGE";
  readonly NODE: "NODE";
  readonly VALUE: "VALUE";
};
export type ColumnType = (typeof ColumnType)[keyof typeof ColumnType];
export interface ColumnDescription {
  name?: string;
  type?: ColumnType;
}
export interface Row {
  rowData?: __DocumentType[];
}
export interface ExecuteQueryResponse {
  columnDescriptions?: ColumnDescription[];
  rows?: Row[];
  nextToken?: string;
}
export declare class QueryTimeoutException extends __BaseException {
  readonly name: "QueryTimeoutException";
  readonly $fault: "client";
  $retryable: {};
  constructor(
    opts: __ExceptionOptionType<QueryTimeoutException, __BaseException>
  );
}
export interface GetComponentTypeRequest {
  workspaceId: string | undefined;
  componentTypeId: string | undefined;
}
export interface CompositeComponentTypeResponse {
  componentTypeId?: string;
  isInherited?: boolean;
}
export interface FunctionResponse {
  requiredProperties?: string[];
  scope?: Scope;
  implementedBy?: DataConnector;
  isInherited?: boolean;
}
export interface PropertyGroupResponse {
  groupType: GroupType | undefined;
  propertyNames: string[] | undefined;
  isInherited: boolean | undefined;
}
export interface Status {
  state?: State;
  error?: ErrorDetails;
}
export interface GetEntityRequest {
  workspaceId: string | undefined;
  entityId: string | undefined;
}
export interface ComponentPropertyGroupResponse {
  groupType: GroupType | undefined;
  propertyNames: string[] | undefined;
  isInherited: boolean | undefined;
}
export interface ComponentSummary {
  componentName: string | undefined;
  componentTypeId: string | undefined;
  definedIn?: string;
  description?: string;
  propertyGroups?: Record<string, ComponentPropertyGroupResponse>;
  status: Status | undefined;
  syncSource?: string;
  componentPath?: string;
}
export interface GetMetadataTransferJobRequest {
  metadataTransferJobId: string | undefined;
}
export interface GetMetadataTransferJobResponse {
  metadataTransferJobId: string | undefined;
  arn: string | undefined;
  description?: string;
  sources: SourceConfiguration[] | undefined;
  destination: DestinationConfiguration | undefined;
  metadataTransferJobRole: string | undefined;
  reportUrl?: string;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
  status: MetadataTransferJobStatus | undefined;
  progress?: MetadataTransferJobProgress;
}
export interface GetPricingPlanRequest {}
export declare const PricingTier: {
  readonly TIER_1: "TIER_1";
  readonly TIER_2: "TIER_2";
  readonly TIER_3: "TIER_3";
  readonly TIER_4: "TIER_4";
};
export type PricingTier = (typeof PricingTier)[keyof typeof PricingTier];
export interface BundleInformation {
  bundleNames: string[] | undefined;
  pricingTier?: PricingTier;
}
export declare const PricingMode: {
  readonly BASIC: "BASIC";
  readonly STANDARD: "STANDARD";
  readonly TIERED_BUNDLE: "TIERED_BUNDLE";
};
export type PricingMode = (typeof PricingMode)[keyof typeof PricingMode];
export declare const UpdateReason: {
  readonly DEFAULT: "DEFAULT";
  readonly ENTITY_COUNT_UPDATE: "ENTITY_COUNT_UPDATE";
  readonly OVERWRITTEN: "OVERWRITTEN";
  readonly PRICING_MODE_UPDATE: "PRICING_MODE_UPDATE";
  readonly PRICING_TIER_UPDATE: "PRICING_TIER_UPDATE";
};
export type UpdateReason = (typeof UpdateReason)[keyof typeof UpdateReason];
export interface PricingPlan {
  billableEntityCount?: number;
  bundleInformation?: BundleInformation;
  effectiveDateTime: Date | undefined;
  pricingMode: PricingMode | undefined;
  updateDateTime: Date | undefined;
  updateReason: UpdateReason | undefined;
}
export interface GetPricingPlanResponse {
  currentPricingPlan: PricingPlan | undefined;
  pendingPricingPlan?: PricingPlan;
}
export declare class ConnectorFailureException extends __BaseException {
  readonly name: "ConnectorFailureException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ConnectorFailureException, __BaseException>
  );
}
export declare class ConnectorTimeoutException extends __BaseException {
  readonly name: "ConnectorTimeoutException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ConnectorTimeoutException, __BaseException>
  );
}
export declare const Order: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type Order = (typeof Order)[keyof typeof Order];
export interface OrderBy {
  order?: Order;
  propertyName: string | undefined;
}
export declare const InterpolationType: {
  readonly LINEAR: "LINEAR";
};
export type InterpolationType =
  (typeof InterpolationType)[keyof typeof InterpolationType];
export interface InterpolationParameters {
  interpolationType?: InterpolationType;
  intervalInSeconds?: number;
}
export declare const OrderByTime: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type OrderByTime = (typeof OrderByTime)[keyof typeof OrderByTime];
export interface GetSceneRequest {
  workspaceId: string | undefined;
  sceneId: string | undefined;
}
export declare const SceneErrorCode: {
  readonly MATTERPORT_ERROR: "MATTERPORT_ERROR";
};
export type SceneErrorCode =
  (typeof SceneErrorCode)[keyof typeof SceneErrorCode];
export interface SceneError {
  code?: SceneErrorCode;
  message?: string;
}
export interface GetSceneResponse {
  workspaceId: string | undefined;
  sceneId: string | undefined;
  contentLocation: string | undefined;
  arn: string | undefined;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
  description?: string;
  capabilities?: string[];
  sceneMetadata?: Record<string, string>;
  generatedSceneMetadata?: Record<string, string>;
  error?: SceneError;
}
export interface GetSyncJobRequest {
  syncSource: string | undefined;
  workspaceId?: string;
}
export interface SyncJobStatus {
  state?: SyncJobState;
  error?: ErrorDetails;
}
export interface GetSyncJobResponse {
  arn: string | undefined;
  workspaceId: string | undefined;
  syncSource: string | undefined;
  syncRole: string | undefined;
  status: SyncJobStatus | undefined;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
}
export interface GetWorkspaceRequest {
  workspaceId: string | undefined;
}
export interface GetWorkspaceResponse {
  workspaceId: string | undefined;
  arn: string | undefined;
  description?: string;
  linkedServices?: string[];
  s3Location?: string;
  role?: string;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
}
export interface ListComponentsRequest {
  workspaceId: string | undefined;
  entityId: string | undefined;
  componentPath?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface ListComponentsResponse {
  componentSummaries: ComponentSummary[] | undefined;
  nextToken?: string;
}
export type ListComponentTypesFilter =
  | ListComponentTypesFilter.ExtendsFromMember
  | ListComponentTypesFilter.IsAbstractMember
  | ListComponentTypesFilter.NamespaceMember
  | ListComponentTypesFilter.$UnknownMember;
export declare namespace ListComponentTypesFilter {
  interface ExtendsFromMember {
    extendsFrom: string;
    namespace?: never;
    isAbstract?: never;
    $unknown?: never;
  }
  interface NamespaceMember {
    extendsFrom?: never;
    namespace: string;
    isAbstract?: never;
    $unknown?: never;
  }
  interface IsAbstractMember {
    extendsFrom?: never;
    namespace?: never;
    isAbstract: boolean;
    $unknown?: never;
  }
  interface $UnknownMember {
    extendsFrom?: never;
    namespace?: never;
    isAbstract?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    extendsFrom: (value: string) => T;
    namespace: (value: string) => T;
    isAbstract: (value: boolean) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ListComponentTypesFilter, visitor: Visitor<T>) => T;
}
export interface ListComponentTypesRequest {
  workspaceId: string | undefined;
  filters?: ListComponentTypesFilter[];
  nextToken?: string;
  maxResults?: number;
}
export interface ComponentTypeSummary {
  arn: string | undefined;
  componentTypeId: string | undefined;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
  description?: string;
  status?: Status;
  componentTypeName?: string;
}
export interface ListComponentTypesResponse {
  workspaceId: string | undefined;
  componentTypeSummaries: ComponentTypeSummary[] | undefined;
  nextToken?: string;
  maxResults?: number;
}
export type ListEntitiesFilter =
  | ListEntitiesFilter.ComponentTypeIdMember
  | ListEntitiesFilter.ExternalIdMember
  | ListEntitiesFilter.ParentEntityIdMember
  | ListEntitiesFilter.$UnknownMember;
export declare namespace ListEntitiesFilter {
  interface ParentEntityIdMember {
    parentEntityId: string;
    componentTypeId?: never;
    externalId?: never;
    $unknown?: never;
  }
  interface ComponentTypeIdMember {
    parentEntityId?: never;
    componentTypeId: string;
    externalId?: never;
    $unknown?: never;
  }
  interface ExternalIdMember {
    parentEntityId?: never;
    componentTypeId?: never;
    externalId: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    parentEntityId?: never;
    componentTypeId?: never;
    externalId?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    parentEntityId: (value: string) => T;
    componentTypeId: (value: string) => T;
    externalId: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ListEntitiesFilter, visitor: Visitor<T>) => T;
}
export interface ListEntitiesRequest {
  workspaceId: string | undefined;
  filters?: ListEntitiesFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface EntitySummary {
  entityId: string | undefined;
  entityName: string | undefined;
  arn: string | undefined;
  parentEntityId?: string;
  status: Status | undefined;
  description?: string;
  hasChildEntities?: boolean;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
}
export interface ListEntitiesResponse {
  entitySummaries?: EntitySummary[];
  nextToken?: string;
}
export type ListMetadataTransferJobsFilter =
  | ListMetadataTransferJobsFilter.StateMember
  | ListMetadataTransferJobsFilter.WorkspaceIdMember
  | ListMetadataTransferJobsFilter.$UnknownMember;
export declare namespace ListMetadataTransferJobsFilter {
  interface WorkspaceIdMember {
    workspaceId: string;
    state?: never;
    $unknown?: never;
  }
  interface StateMember {
    workspaceId?: never;
    state: MetadataTransferJobState;
    $unknown?: never;
  }
  interface $UnknownMember {
    workspaceId?: never;
    state?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    workspaceId: (value: string) => T;
    state: (value: MetadataTransferJobState) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: ListMetadataTransferJobsFilter,
    visitor: Visitor<T>
  ) => T;
}
export interface ListMetadataTransferJobsRequest {
  sourceType: SourceType | undefined;
  destinationType: DestinationType | undefined;
  filters?: ListMetadataTransferJobsFilter[];
  nextToken?: string;
  maxResults?: number;
}
export interface MetadataTransferJobSummary {
  metadataTransferJobId: string | undefined;
  arn: string | undefined;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
  status: MetadataTransferJobStatus | undefined;
  progress?: MetadataTransferJobProgress;
}
export interface ListMetadataTransferJobsResponse {
  metadataTransferJobSummaries: MetadataTransferJobSummary[] | undefined;
  nextToken?: string;
}
export interface ListPropertiesRequest {
  workspaceId: string | undefined;
  componentName?: string;
  componentPath?: string;
  entityId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListScenesRequest {
  workspaceId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface SceneSummary {
  sceneId: string | undefined;
  contentLocation: string | undefined;
  arn: string | undefined;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
  description?: string;
}
export interface ListScenesResponse {
  sceneSummaries?: SceneSummary[];
  nextToken?: string;
}
export interface ListSyncJobsRequest {
  workspaceId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface SyncJobSummary {
  arn?: string;
  workspaceId?: string;
  syncSource?: string;
  status?: SyncJobStatus;
  creationDateTime?: Date;
  updateDateTime?: Date;
}
export interface ListSyncJobsResponse {
  syncJobSummaries?: SyncJobSummary[];
  nextToken?: string;
}
export declare const SyncResourceType: {
  readonly COMPONENT_TYPE: "COMPONENT_TYPE";
  readonly ENTITY: "ENTITY";
};
export type SyncResourceType =
  (typeof SyncResourceType)[keyof typeof SyncResourceType];
export declare const SyncResourceState: {
  readonly DELETED: "DELETED";
  readonly ERROR: "ERROR";
  readonly INITIALIZING: "INITIALIZING";
  readonly IN_SYNC: "IN_SYNC";
  readonly PROCESSING: "PROCESSING";
};
export type SyncResourceState =
  (typeof SyncResourceState)[keyof typeof SyncResourceState];
export type SyncResourceFilter =
  | SyncResourceFilter.ExternalIdMember
  | SyncResourceFilter.ResourceIdMember
  | SyncResourceFilter.ResourceTypeMember
  | SyncResourceFilter.StateMember
  | SyncResourceFilter.$UnknownMember;
export declare namespace SyncResourceFilter {
  interface StateMember {
    state: SyncResourceState;
    resourceType?: never;
    resourceId?: never;
    externalId?: never;
    $unknown?: never;
  }
  interface ResourceTypeMember {
    state?: never;
    resourceType: SyncResourceType;
    resourceId?: never;
    externalId?: never;
    $unknown?: never;
  }
  interface ResourceIdMember {
    state?: never;
    resourceType?: never;
    resourceId: string;
    externalId?: never;
    $unknown?: never;
  }
  interface ExternalIdMember {
    state?: never;
    resourceType?: never;
    resourceId?: never;
    externalId: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    state?: never;
    resourceType?: never;
    resourceId?: never;
    externalId?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    state: (value: SyncResourceState) => T;
    resourceType: (value: SyncResourceType) => T;
    resourceId: (value: string) => T;
    externalId: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: SyncResourceFilter, visitor: Visitor<T>) => T;
}
export interface ListSyncResourcesRequest {
  workspaceId: string | undefined;
  syncSource: string | undefined;
  filters?: SyncResourceFilter[];
  maxResults?: number;
  nextToken?: string;
}
export interface SyncResourceStatus {
  state?: SyncResourceState;
  error?: ErrorDetails;
}
export interface SyncResourceSummary {
  resourceType?: SyncResourceType;
  externalId?: string;
  resourceId?: string;
  status?: SyncResourceStatus;
  updateDateTime?: Date;
}
export interface ListSyncResourcesResponse {
  syncResources?: SyncResourceSummary[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceARN: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
  nextToken?: string;
}
export interface ListWorkspacesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface WorkspaceSummary {
  workspaceId: string | undefined;
  arn: string | undefined;
  description?: string;
  linkedServices?: string[];
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
}
export interface ListWorkspacesResponse {
  workspaceSummaries?: WorkspaceSummary[];
  nextToken?: string;
}
export interface TagResourceRequest {
  resourceARN: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface UntagResourceRequest {
  resourceARN: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateComponentTypeResponse {
  workspaceId: string | undefined;
  arn: string | undefined;
  componentTypeId: string | undefined;
  state: State | undefined;
}
export declare const ComponentUpdateType: {
  readonly CREATE: "CREATE";
  readonly DELETE: "DELETE";
  readonly UPDATE: "UPDATE";
};
export type ComponentUpdateType =
  (typeof ComponentUpdateType)[keyof typeof ComponentUpdateType];
export declare const ParentEntityUpdateType: {
  readonly DELETE: "DELETE";
  readonly UPDATE: "UPDATE";
};
export type ParentEntityUpdateType =
  (typeof ParentEntityUpdateType)[keyof typeof ParentEntityUpdateType];
export interface ParentEntityUpdateRequest {
  updateType: ParentEntityUpdateType | undefined;
  parentEntityId?: string;
}
export interface UpdateEntityResponse {
  updateDateTime: Date | undefined;
  state: State | undefined;
}
export interface UpdatePricingPlanRequest {
  pricingMode: PricingMode | undefined;
  bundleNames?: string[];
}
export interface UpdatePricingPlanResponse {
  currentPricingPlan: PricingPlan | undefined;
  pendingPricingPlan?: PricingPlan;
}
export interface UpdateSceneRequest {
  workspaceId: string | undefined;
  sceneId: string | undefined;
  contentLocation?: string;
  description?: string;
  capabilities?: string[];
  sceneMetadata?: Record<string, string>;
}
export interface UpdateSceneResponse {
  updateDateTime: Date | undefined;
}
export interface UpdateWorkspaceRequest {
  workspaceId: string | undefined;
  description?: string;
  role?: string;
  s3Location?: string;
}
export interface UpdateWorkspaceResponse {
  updateDateTime: Date | undefined;
}
export interface DataValue {
  booleanValue?: boolean;
  doubleValue?: number;
  integerValue?: number;
  longValue?: number;
  stringValue?: string;
  listValue?: DataValue[];
  mapValue?: Record<string, DataValue>;
  relationshipValue?: RelationshipValue;
  expression?: string;
}
export interface PropertyFilter {
  propertyName?: string;
  operator?: string;
  value?: DataValue;
}
export interface PropertyLatestValue {
  propertyReference: EntityPropertyReference | undefined;
  propertyValue?: DataValue;
}
export interface PropertyValue {
  timestamp?: Date;
  value: DataValue | undefined;
  time?: string;
}
export interface DataType {
  type: Type | undefined;
  nestedType?: DataType;
  allowedValues?: DataValue[];
  unitOfMeasure?: string;
  relationship?: Relationship;
}
export interface GetPropertyValueHistoryRequest {
  workspaceId: string | undefined;
  entityId?: string;
  componentName?: string;
  componentPath?: string;
  componentTypeId?: string;
  selectedProperties: string[] | undefined;
  propertyFilters?: PropertyFilter[];
  startDateTime?: Date;
  endDateTime?: Date;
  interpolation?: InterpolationParameters;
  nextToken?: string;
  maxResults?: number;
  orderByTime?: OrderByTime;
  startTime?: string;
  endTime?: string;
}
export interface PropertyValueEntry {
  entityPropertyReference: EntityPropertyReference | undefined;
  propertyValues?: PropertyValue[];
}
export interface PropertyValueHistory {
  entityPropertyReference: EntityPropertyReference | undefined;
  values?: PropertyValue[];
}
export interface TabularConditions {
  orderBy?: OrderBy[];
  propertyFilters?: PropertyFilter[];
}
export interface BatchPutPropertyError {
  errorCode: string | undefined;
  errorMessage: string | undefined;
  entry: PropertyValueEntry | undefined;
}
export interface GetPropertyValueRequest {
  componentName?: string;
  componentPath?: string;
  componentTypeId?: string;
  entityId?: string;
  selectedProperties: string[] | undefined;
  workspaceId: string | undefined;
  maxResults?: number;
  nextToken?: string;
  propertyGroupName?: string;
  tabularConditions?: TabularConditions;
}
export interface BatchPutPropertyValuesRequest {
  workspaceId: string | undefined;
  entries: PropertyValueEntry[] | undefined;
}
export interface GetPropertyValueHistoryResponse {
  propertyValues: PropertyValueHistory[] | undefined;
  nextToken?: string;
}
export interface BatchPutPropertyErrorEntry {
  errors: BatchPutPropertyError[] | undefined;
}
export interface PropertyDefinitionRequest {
  dataType?: DataType;
  isRequiredInEntity?: boolean;
  isExternalId?: boolean;
  isStoredExternally?: boolean;
  isTimeSeries?: boolean;
  defaultValue?: DataValue;
  configuration?: Record<string, string>;
  displayName?: string;
}
export interface PropertyDefinitionResponse {
  dataType: DataType | undefined;
  isTimeSeries: boolean | undefined;
  isRequiredInEntity: boolean | undefined;
  isExternalId: boolean | undefined;
  isStoredExternally: boolean | undefined;
  isImported: boolean | undefined;
  isFinal: boolean | undefined;
  isInherited: boolean | undefined;
  defaultValue?: DataValue;
  configuration?: Record<string, string>;
  displayName?: string;
}
export interface BatchPutPropertyValuesResponse {
  errorEntries: BatchPutPropertyErrorEntry[] | undefined;
}
export interface GetPropertyValueResponse {
  propertyValues?: Record<string, PropertyLatestValue>;
  nextToken?: string;
  tabularPropertyValues?: Record<string, DataValue>[][];
}
export interface CreateComponentTypeRequest {
  workspaceId: string | undefined;
  isSingleton?: boolean;
  componentTypeId: string | undefined;
  description?: string;
  propertyDefinitions?: Record<string, PropertyDefinitionRequest>;
  extendsFrom?: string[];
  functions?: Record<string, FunctionRequest>;
  tags?: Record<string, string>;
  propertyGroups?: Record<string, PropertyGroupRequest>;
  componentTypeName?: string;
  compositeComponentTypes?: Record<string, CompositeComponentTypeRequest>;
}
export interface GetComponentTypeResponse {
  workspaceId: string | undefined;
  isSingleton?: boolean;
  componentTypeId: string | undefined;
  description?: string;
  propertyDefinitions?: Record<string, PropertyDefinitionResponse>;
  extendsFrom?: string[];
  functions?: Record<string, FunctionResponse>;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
  arn: string | undefined;
  isAbstract?: boolean;
  isSchemaInitialized?: boolean;
  status?: Status;
  propertyGroups?: Record<string, PropertyGroupResponse>;
  syncSource?: string;
  componentTypeName?: string;
  compositeComponentTypes?: Record<string, CompositeComponentTypeResponse>;
}
export interface UpdateComponentTypeRequest {
  workspaceId: string | undefined;
  isSingleton?: boolean;
  componentTypeId: string | undefined;
  description?: string;
  propertyDefinitions?: Record<string, PropertyDefinitionRequest>;
  extendsFrom?: string[];
  functions?: Record<string, FunctionRequest>;
  propertyGroups?: Record<string, PropertyGroupRequest>;
  componentTypeName?: string;
  compositeComponentTypes?: Record<string, CompositeComponentTypeRequest>;
}
export interface PropertyRequest {
  definition?: PropertyDefinitionRequest;
  value?: DataValue;
  updateType?: PropertyUpdateType;
}
export interface PropertyResponse {
  definition?: PropertyDefinitionResponse;
  value?: DataValue;
  areAllPropertyValuesReturned?: boolean;
}
export interface PropertySummary {
  definition?: PropertyDefinitionResponse;
  propertyName: string | undefined;
  value?: DataValue;
  areAllPropertyValuesReturned?: boolean;
}
export interface ComponentRequest {
  description?: string;
  componentTypeId?: string;
  properties?: Record<string, PropertyRequest>;
  propertyGroups?: Record<string, ComponentPropertyGroupRequest>;
}
export interface ComponentResponse {
  componentName?: string;
  description?: string;
  componentTypeId?: string;
  status?: Status;
  definedIn?: string;
  properties?: Record<string, PropertyResponse>;
  propertyGroups?: Record<string, ComponentPropertyGroupResponse>;
  syncSource?: string;
  areAllPropertiesReturned?: boolean;
  compositeComponents?: Record<string, ComponentSummary>;
  areAllCompositeComponentsReturned?: boolean;
}
export interface ComponentUpdateRequest {
  updateType?: ComponentUpdateType;
  description?: string;
  componentTypeId?: string;
  propertyUpdates?: Record<string, PropertyRequest>;
  propertyGroupUpdates?: Record<string, ComponentPropertyGroupRequest>;
}
export interface CompositeComponentRequest {
  description?: string;
  properties?: Record<string, PropertyRequest>;
  propertyGroups?: Record<string, ComponentPropertyGroupRequest>;
}
export interface CompositeComponentUpdateRequest {
  updateType?: ComponentUpdateType;
  description?: string;
  propertyUpdates?: Record<string, PropertyRequest>;
  propertyGroupUpdates?: Record<string, ComponentPropertyGroupRequest>;
}
export interface ListPropertiesResponse {
  propertySummaries: PropertySummary[] | undefined;
  nextToken?: string;
}
export interface GetEntityResponse {
  entityId: string | undefined;
  entityName: string | undefined;
  arn: string | undefined;
  status: Status | undefined;
  workspaceId: string | undefined;
  description?: string;
  components?: Record<string, ComponentResponse>;
  parentEntityId: string | undefined;
  hasChildEntities: boolean | undefined;
  creationDateTime: Date | undefined;
  updateDateTime: Date | undefined;
  syncSource?: string;
  areAllComponentsReturned?: boolean;
}
export interface CreateEntityRequest {
  workspaceId: string | undefined;
  entityId?: string;
  entityName: string | undefined;
  description?: string;
  components?: Record<string, ComponentRequest>;
  compositeComponents?: Record<string, CompositeComponentRequest>;
  parentEntityId?: string;
  tags?: Record<string, string>;
}
export interface UpdateEntityRequest {
  workspaceId: string | undefined;
  entityId: string | undefined;
  entityName?: string;
  description?: string;
  componentUpdates?: Record<string, ComponentUpdateRequest>;
  compositeComponentUpdates?: Record<string, CompositeComponentUpdateRequest>;
  parentEntityUpdate?: ParentEntityUpdateRequest;
}
