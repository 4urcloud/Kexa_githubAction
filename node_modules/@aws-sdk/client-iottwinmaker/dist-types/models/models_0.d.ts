import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DocumentType as __DocumentType } from "@smithy/types";
import { IoTTwinMakerServiceException as __BaseException } from "./IoTTwinMakerServiceException";
/**
 * <p>Access is denied.</p>
 * @public
 */
export declare class AccessDeniedException extends __BaseException {
    readonly name: "AccessDeniedException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
}
/**
 * <p>An object that uniquely identifies an entity property.</p>
 * @public
 */
export interface EntityPropertyReference {
    /**
     * <p>The name of the component.</p>
     * @public
     */
    componentName?: string;
    /**
     * <p>This string specifies the path to the composite component, starting from the top-level component.</p>
     * @public
     */
    componentPath?: string;
    /**
     * <p>A mapping of external IDs to property names. External IDs uniquely identify properties
     *          from external data stores.</p>
     * @public
     */
    externalIdProperty?: Record<string, string>;
    /**
     * <p>The ID of the entity.</p>
     * @public
     */
    entityId?: string;
    /**
     * <p>The name of the property.</p>
     * @public
     */
    propertyName: string | undefined;
}
/**
 * <p>A value that associates a component and an entity.</p>
 * @public
 */
export interface RelationshipValue {
    /**
     * <p>The ID of the target entity associated with this relationship value.</p>
     * @public
     */
    targetEntityId?: string;
    /**
     * <p>The name of the target component associated with the relationship value.</p>
     * @public
     */
    targetComponentName?: string;
}
/**
 * <p>An unexpected error has occurred.</p>
 * @public
 */
export declare class InternalServerException extends __BaseException {
    readonly name: "InternalServerException";
    readonly $fault: "server";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
}
/**
 * <p>The resource wasn't found.</p>
 * @public
 */
export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}
/**
 * <p>The rate exceeds the limit.</p>
 * @public
 */
export declare class ThrottlingException extends __BaseException {
    readonly name: "ThrottlingException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
}
/**
 * <p>Failed</p>
 * @public
 */
export declare class ValidationException extends __BaseException {
    readonly name: "ValidationException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
}
/**
 * @public
 */
export interface CancelMetadataTransferJobRequest {
    /**
     * <p>The metadata transfer job Id.</p>
     * @public
     */
    metadataTransferJobId: string | undefined;
}
/**
 * <p>The metadata transfer job's progress.</p>
 * @public
 */
export interface MetadataTransferJobProgress {
    /**
     * <p>The total count. [of what]</p>
     * @public
     */
    totalCount?: number;
    /**
     * <p>The succeeded count.</p>
     * @public
     */
    succeededCount?: number;
    /**
     * <p>The skipped count.</p>
     * @public
     */
    skippedCount?: number;
    /**
     * <p>The failed count.</p>
     * @public
     */
    failedCount?: number;
}
/**
 * @public
 * @enum
 */
export declare const ErrorCode: {
    readonly COMPOSITE_COMPONENT_FAILURE: "COMPOSITE_COMPONENT_FAILURE";
    readonly INTERNAL_FAILURE: "INTERNAL_FAILURE";
    readonly PROCESSING_ERROR: "PROCESSING_ERROR";
    readonly SYNC_CREATING_ERROR: "SYNC_CREATING_ERROR";
    readonly SYNC_DELETING_ERROR: "SYNC_DELETING_ERROR";
    readonly SYNC_INITIALIZING_ERROR: "SYNC_INITIALIZING_ERROR";
    readonly SYNC_PROCESSING_ERROR: "SYNC_PROCESSING_ERROR";
    readonly VALIDATION_ERROR: "VALIDATION_ERROR";
};
/**
 * @public
 */
export type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];
/**
 * <p>The error details.</p>
 * @public
 */
export interface ErrorDetails {
    /**
     * <p>The error code.</p>
     * @public
     */
    code?: ErrorCode;
    /**
     * <p>The error message.</p>
     * @public
     */
    message?: string;
}
/**
 * @public
 * @enum
 */
export declare const MetadataTransferJobState: {
    readonly CANCELLED: "CANCELLED";
    readonly CANCELLING: "CANCELLING";
    readonly COMPLETED: "COMPLETED";
    readonly ERROR: "ERROR";
    readonly PENDING: "PENDING";
    readonly RUNNING: "RUNNING";
    readonly VALIDATING: "VALIDATING";
};
/**
 * @public
 */
export type MetadataTransferJobState = (typeof MetadataTransferJobState)[keyof typeof MetadataTransferJobState];
/**
 * <p>The metadata transfer job status.</p>
 * @public
 */
export interface MetadataTransferJobStatus {
    /**
     * <p>The metadata transfer job state.</p>
     * @public
     */
    state?: MetadataTransferJobState;
    /**
     * <p>The metadata transfer job error.</p>
     * @public
     */
    error?: ErrorDetails;
    /**
     * <p>The queued position.</p>
     * @public
     */
    queuedPosition?: number;
}
/**
 * @public
 */
export interface CancelMetadataTransferJobResponse {
    /**
     * <p>The metadata transfer job Id.</p>
     * @public
     */
    metadataTransferJobId: string | undefined;
    /**
     * <p>The metadata transfer job ARN.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>Used to update the DateTime property.</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The metadata transfer job's status.</p>
     * @public
     */
    status: MetadataTransferJobStatus | undefined;
    /**
     * <p>The metadata transfer job's progress.</p>
     * @public
     */
    progress?: MetadataTransferJobProgress;
}
/**
 * <p>A conflict occurred.</p>
 * @public
 */
export declare class ConflictException extends __BaseException {
    readonly name: "ConflictException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
/**
 * <p>An object that sets information about the composite component types of a component type.</p>
 * @public
 */
export interface CompositeComponentTypeRequest {
    /**
     * <p>This is the <code>componentTypeId</code> that the <code>compositeComponentType</code> refers to.</p>
     * @public
     */
    componentTypeId?: string;
}
/**
 * <p>The Lambda function.</p>
 * @public
 */
export interface LambdaFunction {
    /**
     * <p>The ARN of the Lambda function.</p>
     * @public
     */
    arn: string | undefined;
}
/**
 * <p>The data connector.</p>
 * @public
 */
export interface DataConnector {
    /**
     * <p>The Lambda function associated with this data connector.</p>
     * @public
     */
    lambda?: LambdaFunction;
    /**
     * <p>A Boolean value that specifies whether the data connector is native to IoT
     *          TwinMaker.</p>
     * @public
     */
    isNative?: boolean;
}
/**
 * @public
 * @enum
 */
export declare const Scope: {
    readonly ENTITY: "ENTITY";
    readonly WORKSPACE: "WORKSPACE";
};
/**
 * @public
 */
export type Scope = (typeof Scope)[keyof typeof Scope];
/**
 * <p>The function request body.</p>
 * @public
 */
export interface FunctionRequest {
    /**
     * <p>The required properties of the function.</p>
     * @public
     */
    requiredProperties?: string[];
    /**
     * <p>The scope of the function.</p>
     * @public
     */
    scope?: Scope;
    /**
     * <p>The data connector.</p>
     * @public
     */
    implementedBy?: DataConnector;
}
/**
 * <p>An object that specifies a relationship with another component type.</p>
 * @public
 */
export interface Relationship {
    /**
     * <p>The ID of the target component type associated with this relationship.</p>
     * @public
     */
    targetComponentTypeId?: string;
    /**
     * <p>The type of the relationship.</p>
     * @public
     */
    relationshipType?: string;
}
/**
 * @public
 * @enum
 */
export declare const Type: {
    readonly BOOLEAN: "BOOLEAN";
    readonly DOUBLE: "DOUBLE";
    readonly INTEGER: "INTEGER";
    readonly LIST: "LIST";
    readonly LONG: "LONG";
    readonly MAP: "MAP";
    readonly RELATIONSHIP: "RELATIONSHIP";
    readonly STRING: "STRING";
};
/**
 * @public
 */
export type Type = (typeof Type)[keyof typeof Type];
/**
 * @public
 * @enum
 */
export declare const GroupType: {
    readonly TABULAR: "TABULAR";
};
/**
 * @public
 */
export type GroupType = (typeof GroupType)[keyof typeof GroupType];
/**
 * <p/>
 * @public
 */
export interface PropertyGroupRequest {
    /**
     * <p>The group type.</p>
     * @public
     */
    groupType?: GroupType;
    /**
     * <p>The names of properties.</p>
     * @public
     */
    propertyNames?: string[];
}
/**
 * @public
 * @enum
 */
export declare const State: {
    readonly ACTIVE: "ACTIVE";
    readonly CREATING: "CREATING";
    readonly DELETING: "DELETING";
    readonly ERROR: "ERROR";
    readonly UPDATING: "UPDATING";
};
/**
 * @public
 */
export type State = (typeof State)[keyof typeof State];
/**
 * @public
 */
export interface CreateComponentTypeResponse {
    /**
     * <p>The ARN of the component type.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The date and time when the entity was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The current state of the component type.</p>
     * @public
     */
    state: State | undefined;
}
/**
 * <p>The service quota was exceeded.</p>
 * @public
 */
export declare class ServiceQuotaExceededException extends __BaseException {
    readonly name: "ServiceQuotaExceededException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
}
/**
 * @public
 * @enum
 */
export declare const PropertyUpdateType: {
    readonly CREATE: "CREATE";
    readonly DELETE: "DELETE";
    readonly UPDATE: "UPDATE";
};
/**
 * @public
 */
export type PropertyUpdateType = (typeof PropertyUpdateType)[keyof typeof PropertyUpdateType];
/**
 * @public
 * @enum
 */
export declare const PropertyGroupUpdateType: {
    readonly CREATE: "CREATE";
    readonly DELETE: "DELETE";
    readonly UPDATE: "UPDATE";
};
/**
 * @public
 */
export type PropertyGroupUpdateType = (typeof PropertyGroupUpdateType)[keyof typeof PropertyGroupUpdateType];
/**
 * <p>The component property group request.</p>
 * @public
 */
export interface ComponentPropertyGroupRequest {
    /**
     * <p>The group type.</p>
     * @public
     */
    groupType?: GroupType;
    /**
     * <p>The property names.</p>
     * @public
     */
    propertyNames?: string[];
    /**
     * <p>The update type.</p>
     * @public
     */
    updateType?: PropertyGroupUpdateType;
}
/**
 * @public
 */
export interface CreateEntityResponse {
    /**
     * <p>The ID of the entity.</p>
     * @public
     */
    entityId: string | undefined;
    /**
     * <p>The ARN of the entity.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The date and time when the entity was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The current state of the entity.</p>
     * @public
     */
    state: State | undefined;
}
/**
 * <p>The metadata transfer job AWS IoT TwinMaker destination configuration.</p>
 * @public
 */
export interface IotTwinMakerDestinationConfiguration {
    /**
     * <p>The IoT TwinMaker workspace.</p>
     * @public
     */
    workspace: string | undefined;
}
/**
 * <p>The S3 destination configuration.</p>
 * @public
 */
export interface S3DestinationConfiguration {
    /**
     * <p>The S3 destination configuration location.</p>
     * @public
     */
    location: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const DestinationType: {
    readonly IOTSITEWISE: "iotsitewise";
    readonly IOTTWINMAKER: "iottwinmaker";
    readonly S3: "s3";
};
/**
 * @public
 */
export type DestinationType = (typeof DestinationType)[keyof typeof DestinationType];
/**
 * <p>The [link to action] metadata transfer job destination configuration.</p>
 * @public
 */
export interface DestinationConfiguration {
    /**
     * <p>The destination type.</p>
     * @public
     */
    type: DestinationType | undefined;
    /**
     * <p>The metadata transfer job S3 configuration. [need to add S3 entity]</p>
     * @public
     */
    s3Configuration?: S3DestinationConfiguration;
    /**
     * <p>The metadata transfer job Amazon Web Services IoT TwinMaker configuration.</p>
     * @public
     */
    iotTwinMakerConfiguration?: IotTwinMakerDestinationConfiguration;
}
/**
 * <p>Filter by asset. [TwinMaker asset]</p>
 * @public
 */
export interface FilterByAsset {
    /**
     * <p>Filter by asset Id.</p>
     * @public
     */
    assetId?: string;
    /**
     * <p>The external-Id property of an asset. </p>
     * @public
     */
    assetExternalId?: string;
    /**
     * <p>Includes sub-assets.[need description hekp for this]</p>
     * @public
     */
    includeOffspring?: boolean;
    /**
     * <p>Boolean to include the asset model.</p>
     * @public
     */
    includeAssetModel?: boolean;
}
/**
 * <p>Filter by asset model.</p>
 * @public
 */
export interface FilterByAssetModel {
    /**
     * <p>The asset model Id.</p>
     * @public
     */
    assetModelId?: string;
    /**
     * <p>The external-Id property of an asset model.</p>
     * @public
     */
    assetModelExternalId?: string;
    /**
     * <p>Include asset offspring. [need desc.]</p>
     * @public
     */
    includeOffspring?: boolean;
    /**
     * <p>Bolean to include assets.</p>
     * @public
     */
    includeAssets?: boolean;
}
/**
 * <p>The AWS IoT SiteWise soucre configuration filter.[need held with desc here]</p>
 * @public
 */
export type IotSiteWiseSourceConfigurationFilter = IotSiteWiseSourceConfigurationFilter.FilterByAssetMember | IotSiteWiseSourceConfigurationFilter.FilterByAssetModelMember | IotSiteWiseSourceConfigurationFilter.$UnknownMember;
/**
 * @public
 */
export declare namespace IotSiteWiseSourceConfigurationFilter {
    /**
     * <p>Filter by asset model.</p>
     * @public
     */
    interface FilterByAssetModelMember {
        filterByAssetModel: FilterByAssetModel;
        filterByAsset?: never;
        $unknown?: never;
    }
    /**
     * <p>Filter by asset.</p>
     * @public
     */
    interface FilterByAssetMember {
        filterByAssetModel?: never;
        filterByAsset: FilterByAsset;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        filterByAssetModel?: never;
        filterByAsset?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        filterByAssetModel: (value: FilterByAssetModel) => T;
        filterByAsset: (value: FilterByAsset) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: IotSiteWiseSourceConfigurationFilter, visitor: Visitor<T>) => T;
}
/**
 * <p>The metadata transfer job AWS IoT SiteWise source configuration.</p>
 * @public
 */
export interface IotSiteWiseSourceConfiguration {
    /**
     * <p>The AWS IoT SiteWise soucre configuration filters.</p>
     * @public
     */
    filters?: IotSiteWiseSourceConfigurationFilter[];
}
/**
 * <p>Filter by component type.</p>
 * @public
 */
export interface FilterByComponentType {
    /**
     * <p>The component type Id.</p>
     * @public
     */
    componentTypeId: string | undefined;
}
/**
 * <p>Vilter by entity.</p>
 * @public
 */
export interface FilterByEntity {
    /**
     * <p>The entity Id.</p>
     * @public
     */
    entityId: string | undefined;
}
/**
 * <p>The metadata transfer job AWS IoT TwinMaker source configuration filter.</p>
 * @public
 */
export type IotTwinMakerSourceConfigurationFilter = IotTwinMakerSourceConfigurationFilter.FilterByComponentTypeMember | IotTwinMakerSourceConfigurationFilter.FilterByEntityMember | IotTwinMakerSourceConfigurationFilter.$UnknownMember;
/**
 * @public
 */
export declare namespace IotTwinMakerSourceConfigurationFilter {
    /**
     * <p>Filter by component type.</p>
     * @public
     */
    interface FilterByComponentTypeMember {
        filterByComponentType: FilterByComponentType;
        filterByEntity?: never;
        $unknown?: never;
    }
    /**
     * <p>Filter by entity.</p>
     * @public
     */
    interface FilterByEntityMember {
        filterByComponentType?: never;
        filterByEntity: FilterByEntity;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        filterByComponentType?: never;
        filterByEntity?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        filterByComponentType: (value: FilterByComponentType) => T;
        filterByEntity: (value: FilterByEntity) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: IotTwinMakerSourceConfigurationFilter, visitor: Visitor<T>) => T;
}
/**
 * <p>The metadata transfer job AWS IoT TwinMaker source configuration.</p>
 * @public
 */
export interface IotTwinMakerSourceConfiguration {
    /**
     * <p>The IoT TwinMaker workspace.</p>
     * @public
     */
    workspace: string | undefined;
    /**
     * <p>The metadata transfer job AWS IoT TwinMaker source configuration filters.</p>
     * @public
     */
    filters?: IotTwinMakerSourceConfigurationFilter[];
}
/**
 * <p>The S3 destination source configuration.</p>
 * @public
 */
export interface S3SourceConfiguration {
    /**
     * <p>The S3 destination source configuration location.</p>
     * @public
     */
    location: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const SourceType: {
    readonly IOTSITEWISE: "iotsitewise";
    readonly IOTTWINMAKER: "iottwinmaker";
    readonly S3: "s3";
};
/**
 * @public
 */
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
/**
 * <p>The source configuration.</p>
 * @public
 */
export interface SourceConfiguration {
    /**
     * <p>The source configuration type.</p>
     * @public
     */
    type: SourceType | undefined;
    /**
     * <p>The source configuration S3 configuration.</p>
     * @public
     */
    s3Configuration?: S3SourceConfiguration;
    /**
     * <p>The source configuration IoT SiteWise configuration.</p>
     * @public
     */
    iotSiteWiseConfiguration?: IotSiteWiseSourceConfiguration;
    /**
     * <p>The source configuration IoT TwinMaker configuration.</p>
     * @public
     */
    iotTwinMakerConfiguration?: IotTwinMakerSourceConfiguration;
}
/**
 * @public
 */
export interface CreateMetadataTransferJobRequest {
    /**
     * <p>The metadata transfer job Id.</p>
     * @public
     */
    metadataTransferJobId?: string;
    /**
     * <p>The metadata transfer job description.</p>
     * @public
     */
    description?: string;
    /**
     * <p>The metadata transfer job sources.</p>
     * @public
     */
    sources: SourceConfiguration[] | undefined;
    /**
     * <p>The metadata transfer job destination.</p>
     * @public
     */
    destination: DestinationConfiguration | undefined;
}
/**
 * @public
 */
export interface CreateMetadataTransferJobResponse {
    /**
     * <p>The metadata transfer job Id.</p>
     * @public
     */
    metadataTransferJobId: string | undefined;
    /**
     * <p>The metadata transfer job ARN.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The The metadata transfer job creation DateTime property.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The metadata transfer job response status.</p>
     * @public
     */
    status: MetadataTransferJobStatus | undefined;
}
/**
 * @public
 */
export interface CreateSceneRequest {
    /**
     * <p>The ID of the workspace that contains the scene.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the scene.</p>
     * @public
     */
    sceneId: string | undefined;
    /**
     * <p>The relative path that specifies the location of the content definition file.</p>
     * @public
     */
    contentLocation: string | undefined;
    /**
     * <p>The description for this scene.</p>
     * @public
     */
    description?: string;
    /**
     * <p>A list of capabilities that the scene uses to render itself.</p>
     * @public
     */
    capabilities?: string[];
    /**
     * <p>Metadata that you can use to manage the scene.</p>
     * @public
     */
    tags?: Record<string, string>;
    /**
     * <p>The request metadata.</p>
     * @public
     */
    sceneMetadata?: Record<string, string>;
}
/**
 * @public
 */
export interface CreateSceneResponse {
    /**
     * <p>The ARN of the scene.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The date and time when the scene was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
}
/**
 * @public
 */
export interface CreateSyncJobRequest {
    /**
     * <p>The workspace ID.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The sync source.</p>
     *          <note>
     *             <p>Currently the only supported syncSoource is <code>SITEWISE </code>.</p>
     *          </note>
     * @public
     */
    syncSource: string | undefined;
    /**
     * <p>The SyncJob IAM role. This IAM role is used by the SyncJob to read from the syncSource,
     *          and create, update, or delete the corresponding resources.</p>
     * @public
     */
    syncRole: string | undefined;
    /**
     * <p>The SyncJob tags.</p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * @public
 * @enum
 */
export declare const SyncJobState: {
    readonly ACTIVE: "ACTIVE";
    readonly CREATING: "CREATING";
    readonly DELETING: "DELETING";
    readonly ERROR: "ERROR";
    readonly INITIALIZING: "INITIALIZING";
};
/**
 * @public
 */
export type SyncJobState = (typeof SyncJobState)[keyof typeof SyncJobState];
/**
 * @public
 */
export interface CreateSyncJobResponse {
    /**
     * <p>The SyncJob ARN.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The date and time for the SyncJob creation.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The SyncJob response state.</p>
     * @public
     */
    state: SyncJobState | undefined;
}
/**
 * @public
 */
export interface CreateWorkspaceRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The description of the workspace.</p>
     * @public
     */
    description?: string;
    /**
     * <p>The ARN of the S3 bucket where resources associated with the workspace are
     *          stored.</p>
     * @public
     */
    s3Location?: string;
    /**
     * <p>The ARN of the execution role associated with the workspace.</p>
     * @public
     */
    role?: string;
    /**
     * <p>Metadata that you can use to manage the workspace</p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * @public
 */
export interface CreateWorkspaceResponse {
    /**
     * <p>The ARN of the workspace.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The date and time when the workspace was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
}
/**
 * @public
 */
export interface DeleteComponentTypeRequest {
    /**
     * <p>The ID of the workspace that contains the component type.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the component type to delete.</p>
     * @public
     */
    componentTypeId: string | undefined;
}
/**
 * @public
 */
export interface DeleteComponentTypeResponse {
    /**
     * <p>The current state of the component type to be deleted.</p>
     * @public
     */
    state: State | undefined;
}
/**
 * @public
 */
export interface DeleteEntityRequest {
    /**
     * <p>The ID of the workspace that contains the entity to delete.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the entity to delete.</p>
     * @public
     */
    entityId: string | undefined;
    /**
     * <p>A Boolean value that specifies whether the operation deletes child entities.</p>
     * @public
     */
    isRecursive?: boolean;
}
/**
 * @public
 */
export interface DeleteEntityResponse {
    /**
     * <p>The current state of the deleted entity.</p>
     * @public
     */
    state: State | undefined;
}
/**
 * @public
 */
export interface DeleteSceneRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the scene to delete.</p>
     * @public
     */
    sceneId: string | undefined;
}
/**
 * @public
 */
export interface DeleteSceneResponse {
}
/**
 * @public
 */
export interface DeleteSyncJobRequest {
    /**
     * <p>The workspace ID.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The sync source.</p>
     *          <note>
     *             <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p>
     *          </note>
     * @public
     */
    syncSource: string | undefined;
}
/**
 * @public
 */
export interface DeleteSyncJobResponse {
    /**
     * <p>The SyncJob response state.</p>
     * @public
     */
    state: SyncJobState | undefined;
}
/**
 * @public
 */
export interface DeleteWorkspaceRequest {
    /**
     * <p>The ID of the workspace to delete.</p>
     * @public
     */
    workspaceId: string | undefined;
}
/**
 * @public
 */
export interface DeleteWorkspaceResponse {
    /**
     * <p>The string that specifies the delete result for the workspace.</p>
     * @public
     */
    message?: string;
}
/**
 * @public
 */
export interface ExecuteQueryRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The query statement.</p>
     * @public
     */
    queryStatement: string | undefined;
    /**
     * <p>The maximum number of results to return at one time. The default is 50.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 * @enum
 */
export declare const ColumnType: {
    readonly EDGE: "EDGE";
    readonly NODE: "NODE";
    readonly VALUE: "VALUE";
};
/**
 * @public
 */
export type ColumnType = (typeof ColumnType)[keyof typeof ColumnType];
/**
 * <p>A description of the column in the query results.</p>
 * @public
 */
export interface ColumnDescription {
    /**
     * <p>The name of the column description.</p>
     * @public
     */
    name?: string;
    /**
     * <p>The type of the column description.</p>
     * @public
     */
    type?: ColumnType;
}
/**
 * <p>Represents a single row in the query results.</p>
 * @public
 */
export interface Row {
    /**
     * <p>The data in a row of query results.</p>
     * @public
     */
    rowData?: __DocumentType[];
}
/**
 * @public
 */
export interface ExecuteQueryResponse {
    /**
     * <p>A list of ColumnDescription objects.</p>
     * @public
     */
    columnDescriptions?: ColumnDescription[];
    /**
     * <p>Represents a single row in the query results.</p>
     * @public
     */
    rows?: Row[];
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * <p>The query timeout exception.</p>
 * @public
 */
export declare class QueryTimeoutException extends __BaseException {
    readonly name: "QueryTimeoutException";
    readonly $fault: "client";
    $retryable: {};
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<QueryTimeoutException, __BaseException>);
}
/**
 * @public
 */
export interface GetComponentTypeRequest {
    /**
     * <p>The ID of the workspace that contains the component type.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId: string | undefined;
}
/**
 * <p>An object that returns information about the composite component types of a component type.</p>
 * @public
 */
export interface CompositeComponentTypeResponse {
    /**
     * <p>This is the <code>componentTypeId</code> that this <code>compositeComponentType</code> refers to.</p>
     * @public
     */
    componentTypeId?: string;
    /**
     * <p>This boolean indicates whether this <code>compositeComponentType</code> is inherited from its parent.</p>
     * @public
     */
    isInherited?: boolean;
}
/**
 * <p>The function response.</p>
 * @public
 */
export interface FunctionResponse {
    /**
     * <p>The required properties of the function.</p>
     * @public
     */
    requiredProperties?: string[];
    /**
     * <p>The scope of the function.</p>
     * @public
     */
    scope?: Scope;
    /**
     * <p>The data connector.</p>
     * @public
     */
    implementedBy?: DataConnector;
    /**
     * <p>Indicates whether this function is inherited.</p>
     * @public
     */
    isInherited?: boolean;
}
/**
 * <p>The property group response</p>
 * @public
 */
export interface PropertyGroupResponse {
    /**
     * <p>The group types.</p>
     * @public
     */
    groupType: GroupType | undefined;
    /**
     * <p>The names of properties.</p>
     * @public
     */
    propertyNames: string[] | undefined;
    /**
     * <p>A Boolean value that specifies whether the property group is inherited from a parent
     *          entity</p>
     * @public
     */
    isInherited: boolean | undefined;
}
/**
 * <p>An object that represents the status of an entity, component, component type, or
 *          workspace.</p>
 * @public
 */
export interface Status {
    /**
     * <p>The current state of the entity, component, component type, or workspace.</p>
     * @public
     */
    state?: State;
    /**
     * <p>The error message.</p>
     * @public
     */
    error?: ErrorDetails;
}
/**
 * @public
 */
export interface GetEntityRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the entity.</p>
     * @public
     */
    entityId: string | undefined;
}
/**
 * <p>The component property group response.</p>
 * @public
 */
export interface ComponentPropertyGroupResponse {
    /**
     * <p>The group type.</p>
     * @public
     */
    groupType: GroupType | undefined;
    /**
     * <p>The names of properties</p>
     * @public
     */
    propertyNames: string[] | undefined;
    /**
     * <p>A Boolean value that specifies whether the property group is inherited from a parent
     *          entity</p>
     * @public
     */
    isInherited: boolean | undefined;
}
/**
 * <p>An object that returns information about a component summary.</p>
 * @public
 */
export interface ComponentSummary {
    /**
     * <p>The name of the component.</p>
     * @public
     */
    componentName: string | undefined;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId: string | undefined;
    /**
     * <p>The name of the property definition set in the request.</p>
     * @public
     */
    definedIn?: string;
    /**
     * <p>The description of the component request.</p>
     * @public
     */
    description?: string;
    /**
     * <p>The property groups.</p>
     * @public
     */
    propertyGroups?: Record<string, ComponentPropertyGroupResponse>;
    /**
     * <p>The status of the component type.</p>
     * @public
     */
    status: Status | undefined;
    /**
     * <p>The <code>syncSource</code> of the sync job, if this entity was created by a sync job.</p>
     * @public
     */
    syncSource?: string;
    /**
     * <p>This string specifies the path to the composite component, starting from the top-level component.</p>
     * @public
     */
    componentPath?: string;
}
/**
 * @public
 */
export interface GetMetadataTransferJobRequest {
    /**
     * <p>The metadata transfer job Id.</p>
     * @public
     */
    metadataTransferJobId: string | undefined;
}
/**
 * @public
 */
export interface GetMetadataTransferJobResponse {
    /**
     * <p>The metadata transfer job Id.</p>
     * @public
     */
    metadataTransferJobId: string | undefined;
    /**
     * <p>The metadata transfer job ARN.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The metadata transfer job description.</p>
     * @public
     */
    description?: string;
    /**
     * <p>The metadata transfer job's sources.</p>
     * @public
     */
    sources: SourceConfiguration[] | undefined;
    /**
     * <p>The metadata transfer job's destination.</p>
     * @public
     */
    destination: DestinationConfiguration | undefined;
    /**
     * <p>The metadata transfer job's role.</p>
     * @public
     */
    metadataTransferJobRole: string | undefined;
    /**
     * <p>The metadata transfer job's report URL.</p>
     * @public
     */
    reportUrl?: string;
    /**
     * <p>The metadata transfer job's creation DateTime property.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The metadata transfer job's update DateTime property.</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The metadata transfer job's status.</p>
     * @public
     */
    status: MetadataTransferJobStatus | undefined;
    /**
     * <p>The metadata transfer job's progress.</p>
     * @public
     */
    progress?: MetadataTransferJobProgress;
}
/**
 * @public
 */
export interface GetPricingPlanRequest {
}
/**
 * @public
 * @enum
 */
export declare const PricingTier: {
    readonly TIER_1: "TIER_1";
    readonly TIER_2: "TIER_2";
    readonly TIER_3: "TIER_3";
    readonly TIER_4: "TIER_4";
};
/**
 * @public
 */
export type PricingTier = (typeof PricingTier)[keyof typeof PricingTier];
/**
 * <p>Information about the pricing bundle.</p>
 * @public
 */
export interface BundleInformation {
    /**
     * <p>The bundle names.</p>
     * @public
     */
    bundleNames: string[] | undefined;
    /**
     * <p>The pricing tier.</p>
     * @public
     */
    pricingTier?: PricingTier;
}
/**
 * @public
 * @enum
 */
export declare const PricingMode: {
    readonly BASIC: "BASIC";
    readonly STANDARD: "STANDARD";
    readonly TIERED_BUNDLE: "TIERED_BUNDLE";
};
/**
 * @public
 */
export type PricingMode = (typeof PricingMode)[keyof typeof PricingMode];
/**
 * @public
 * @enum
 */
export declare const UpdateReason: {
    readonly DEFAULT: "DEFAULT";
    readonly ENTITY_COUNT_UPDATE: "ENTITY_COUNT_UPDATE";
    readonly OVERWRITTEN: "OVERWRITTEN";
    readonly PRICING_MODE_UPDATE: "PRICING_MODE_UPDATE";
    readonly PRICING_TIER_UPDATE: "PRICING_TIER_UPDATE";
};
/**
 * @public
 */
export type UpdateReason = (typeof UpdateReason)[keyof typeof UpdateReason];
/**
 * <p>The pricing plan.</p>
 * @public
 */
export interface PricingPlan {
    /**
     * <p>The billable entity count.</p>
     * @public
     */
    billableEntityCount?: number;
    /**
     * <p>The pricing plan's bundle information.</p>
     * @public
     */
    bundleInformation?: BundleInformation;
    /**
     * <p>The effective date and time of the pricing plan.</p>
     * @public
     */
    effectiveDateTime: Date | undefined;
    /**
     * <p>The pricing mode.</p>
     * @public
     */
    pricingMode: PricingMode | undefined;
    /**
     * <p>The set date and time for updating a pricing plan.</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The update reason for changing a pricing plan.</p>
     * @public
     */
    updateReason: UpdateReason | undefined;
}
/**
 * @public
 */
export interface GetPricingPlanResponse {
    /**
     * <p>The chosen pricing plan for the current billing cycle.</p>
     * @public
     */
    currentPricingPlan: PricingPlan | undefined;
    /**
     * <p>The pending pricing plan.</p>
     * @public
     */
    pendingPricingPlan?: PricingPlan;
}
/**
 * <p>The connector failed.</p>
 * @public
 */
export declare class ConnectorFailureException extends __BaseException {
    readonly name: "ConnectorFailureException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ConnectorFailureException, __BaseException>);
}
/**
 * <p>The connector timed out.</p>
 * @public
 */
export declare class ConnectorTimeoutException extends __BaseException {
    readonly name: "ConnectorTimeoutException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ConnectorTimeoutException, __BaseException>);
}
/**
 * @public
 * @enum
 */
export declare const Order: {
    readonly ASCENDING: "ASCENDING";
    readonly DESCENDING: "DESCENDING";
};
/**
 * @public
 */
export type Order = (typeof Order)[keyof typeof Order];
/**
 * <p>Filter criteria that orders the return output. It can be sorted in ascending or
 *          descending order.</p>
 * @public
 */
export interface OrderBy {
    /**
     * <p>The set order that filters results.</p>
     * @public
     */
    order?: Order;
    /**
     * <p>The property name.</p>
     * @public
     */
    propertyName: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const InterpolationType: {
    readonly LINEAR: "LINEAR";
};
/**
 * @public
 */
export type InterpolationType = (typeof InterpolationType)[keyof typeof InterpolationType];
/**
 * <p>An object that specifies how to interpolate data in a list.</p>
 * @public
 */
export interface InterpolationParameters {
    /**
     * <p>The interpolation type.</p>
     * @public
     */
    interpolationType?: InterpolationType;
    /**
     * <p>The interpolation time interval in seconds.</p>
     * @public
     */
    intervalInSeconds?: number;
}
/**
 * @public
 * @enum
 */
export declare const OrderByTime: {
    readonly ASCENDING: "ASCENDING";
    readonly DESCENDING: "DESCENDING";
};
/**
 * @public
 */
export type OrderByTime = (typeof OrderByTime)[keyof typeof OrderByTime];
/**
 * @public
 */
export interface GetSceneRequest {
    /**
     * <p>The ID of the workspace that contains the scene.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the scene.</p>
     * @public
     */
    sceneId: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const SceneErrorCode: {
    readonly MATTERPORT_ERROR: "MATTERPORT_ERROR";
};
/**
 * @public
 */
export type SceneErrorCode = (typeof SceneErrorCode)[keyof typeof SceneErrorCode];
/**
 * <p>The scene error.</p>
 * @public
 */
export interface SceneError {
    /**
     * <p>The SceneError code.</p>
     * @public
     */
    code?: SceneErrorCode;
    /**
     * <p>The SceneError message.</p>
     * @public
     */
    message?: string;
}
/**
 * @public
 */
export interface GetSceneResponse {
    /**
     * <p>The ID of the workspace that contains the scene.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the scene.</p>
     * @public
     */
    sceneId: string | undefined;
    /**
     * <p>The relative path that specifies the location of the content definition file.</p>
     * @public
     */
    contentLocation: string | undefined;
    /**
     * <p>The ARN of the scene.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The date and time when the scene was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The date and time when the scene was last updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The description of the scene.</p>
     * @public
     */
    description?: string;
    /**
     * <p>A list of capabilities that the scene uses to render.</p>
     * @public
     */
    capabilities?: string[];
    /**
     * <p>The response metadata.</p>
     * @public
     */
    sceneMetadata?: Record<string, string>;
    /**
     * <p>The generated scene metadata.</p>
     * @public
     */
    generatedSceneMetadata?: Record<string, string>;
    /**
     * <p>The SceneResponse error.</p>
     * @public
     */
    error?: SceneError;
}
/**
 * @public
 */
export interface GetSyncJobRequest {
    /**
     * <p>The sync source.</p>
     *          <note>
     *             <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p>
     *          </note>
     * @public
     */
    syncSource: string | undefined;
    /**
     * <p>The workspace ID.</p>
     * @public
     */
    workspaceId?: string;
}
/**
 * <p>The SyncJob status.</p>
 * @public
 */
export interface SyncJobStatus {
    /**
     * <p>The SyncJob status state.</p>
     * @public
     */
    state?: SyncJobState;
    /**
     * <p>The SyncJob error.</p>
     * @public
     */
    error?: ErrorDetails;
}
/**
 * @public
 */
export interface GetSyncJobResponse {
    /**
     * <p>The sync job ARN.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The ID of the workspace that contains the sync job.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The sync soucre.</p>
     *          <note>
     *             <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p>
     *          </note>
     * @public
     */
    syncSource: string | undefined;
    /**
     * <p>The sync IAM role.</p>
     * @public
     */
    syncRole: string | undefined;
    /**
     * <p>The SyncJob response status.</p>
     * @public
     */
    status: SyncJobStatus | undefined;
    /**
     * <p>The creation date and time.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The update date and time.</p>
     * @public
     */
    updateDateTime: Date | undefined;
}
/**
 * @public
 */
export interface GetWorkspaceRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
}
/**
 * @public
 */
export interface GetWorkspaceResponse {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ARN of the workspace.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The description of the workspace.</p>
     * @public
     */
    description?: string;
    /**
     * <p>A list of services that are linked to the workspace.</p>
     * @public
     */
    linkedServices?: string[];
    /**
     * <p>The ARN of the S3 bucket where resources associated with the workspace are
     *          stored.</p>
     * @public
     */
    s3Location?: string;
    /**
     * <p>The ARN of the execution role associated with the workspace.</p>
     * @public
     */
    role?: string;
    /**
     * <p>The date and time when the workspace was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The date and time when the workspace was last updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
}
/**
 * @public
 */
export interface ListComponentsRequest {
    /**
     * <p>The workspace ID.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID for the entity whose metadata (component/properties) is returned by the operation.</p>
     * @public
     */
    entityId: string | undefined;
    /**
     * <p>This string specifies the path to the composite component, starting from the top-level component.</p>
     * @public
     */
    componentPath?: string;
    /**
     * <p>The maximum number of results returned at one time. The default is 25.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListComponentsResponse {
    /**
     * <p>A list of objects that contain information about the components.</p>
     * @public
     */
    componentSummaries: ComponentSummary[] | undefined;
    /**
     * <p>The string that specifies the next page of component results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * <p>An object that filters items in a list of component types.</p>
 *          <note>
 *             <p>Only one object is accepted as a valid input.</p>
 *          </note>
 * @public
 */
export type ListComponentTypesFilter = ListComponentTypesFilter.ExtendsFromMember | ListComponentTypesFilter.IsAbstractMember | ListComponentTypesFilter.NamespaceMember | ListComponentTypesFilter.$UnknownMember;
/**
 * @public
 */
export declare namespace ListComponentTypesFilter {
    /**
     * <p>The component type that the component types in the list extend.</p>
     * @public
     */
    interface ExtendsFromMember {
        extendsFrom: string;
        namespace?: never;
        isAbstract?: never;
        $unknown?: never;
    }
    /**
     * <p>The namespace to which the component types in the list belong.</p>
     * @public
     */
    interface NamespaceMember {
        extendsFrom?: never;
        namespace: string;
        isAbstract?: never;
        $unknown?: never;
    }
    /**
     * <p>A Boolean value that specifies whether the component types in the list are
     *          abstract.</p>
     * @public
     */
    interface IsAbstractMember {
        extendsFrom?: never;
        namespace?: never;
        isAbstract: boolean;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        extendsFrom?: never;
        namespace?: never;
        isAbstract?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        extendsFrom: (value: string) => T;
        namespace: (value: string) => T;
        isAbstract: (value: boolean) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: ListComponentTypesFilter, visitor: Visitor<T>) => T;
}
/**
 * @public
 */
export interface ListComponentTypesRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>A list of objects that filter the request.</p>
     * @public
     */
    filters?: ListComponentTypesFilter[];
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>The maximum number of results to return at one time. The default is 25.</p>
     *          <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
     * @public
     */
    maxResults?: number;
}
/**
 * <p>An object that contains information about a component type.</p>
 * @public
 */
export interface ComponentTypeSummary {
    /**
     * <p>The ARN of the component type.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId: string | undefined;
    /**
     * <p>The date and time when the component type was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The date and time when the component type was last updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The description of the component type.</p>
     * @public
     */
    description?: string;
    /**
     * <p>The current status of the component type.</p>
     * @public
     */
    status?: Status;
    /**
     * <p>The component type name.</p>
     * @public
     */
    componentTypeName?: string;
}
/**
 * @public
 */
export interface ListComponentTypesResponse {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>A list of objects that contain information about the component types.</p>
     * @public
     */
    componentTypeSummaries: ComponentTypeSummary[] | undefined;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>Specifies the maximum number of results to display.</p>
     * @public
     */
    maxResults?: number;
}
/**
 * <p>An object that filters items in a list of entities.</p>
 * @public
 */
export type ListEntitiesFilter = ListEntitiesFilter.ComponentTypeIdMember | ListEntitiesFilter.ExternalIdMember | ListEntitiesFilter.ParentEntityIdMember | ListEntitiesFilter.$UnknownMember;
/**
 * @public
 */
export declare namespace ListEntitiesFilter {
    /**
     * <p>The parent of the entities in the list.</p>
     * @public
     */
    interface ParentEntityIdMember {
        parentEntityId: string;
        componentTypeId?: never;
        externalId?: never;
        $unknown?: never;
    }
    /**
     * <p>The ID of the component type in the entities in the list.</p>
     * @public
     */
    interface ComponentTypeIdMember {
        parentEntityId?: never;
        componentTypeId: string;
        externalId?: never;
        $unknown?: never;
    }
    /**
     * <p>The external-Id property of a component. The external-Id property is the primary key of
     *          an external storage system.</p>
     * @public
     */
    interface ExternalIdMember {
        parentEntityId?: never;
        componentTypeId?: never;
        externalId: string;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        parentEntityId?: never;
        componentTypeId?: never;
        externalId?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        parentEntityId: (value: string) => T;
        componentTypeId: (value: string) => T;
        externalId: (value: string) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: ListEntitiesFilter, visitor: Visitor<T>) => T;
}
/**
 * @public
 */
export interface ListEntitiesRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>A list of objects that filter the request.</p>
     *          <note>
     *             <p>Only one object is accepted as a valid input.</p>
     *          </note>
     * @public
     */
    filters?: ListEntitiesFilter[];
    /**
     * <p>The maximum number of results to return at one time. The default is 25.</p>
     *          <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * <p>An object that contains information about an entity.</p>
 * @public
 */
export interface EntitySummary {
    /**
     * <p>The ID of the entity.</p>
     * @public
     */
    entityId: string | undefined;
    /**
     * <p>The name of the entity.</p>
     * @public
     */
    entityName: string | undefined;
    /**
     * <p>The ARN of the entity.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The ID of the parent entity.</p>
     * @public
     */
    parentEntityId?: string;
    /**
     * <p>The current status of the entity.</p>
     * @public
     */
    status: Status | undefined;
    /**
     * <p>The description of the entity.</p>
     * @public
     */
    description?: string;
    /**
     * <p>An <b>eventual</b> Boolean value that specifies whether the entity has child entities or not.</p>
     * @public
     */
    hasChildEntities?: boolean;
    /**
     * <p>The date and time when the entity was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The last date and time when the entity was updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
}
/**
 * @public
 */
export interface ListEntitiesResponse {
    /**
     * <p>A list of objects that contain information about the entities.</p>
     * @public
     */
    entitySummaries?: EntitySummary[];
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * <p>The ListMetadataTransferJobs filter.</p>
 * @public
 */
export type ListMetadataTransferJobsFilter = ListMetadataTransferJobsFilter.StateMember | ListMetadataTransferJobsFilter.WorkspaceIdMember | ListMetadataTransferJobsFilter.$UnknownMember;
/**
 * @public
 */
export declare namespace ListMetadataTransferJobsFilter {
    /**
     * <p>The workspace Id.</p>
     * @public
     */
    interface WorkspaceIdMember {
        workspaceId: string;
        state?: never;
        $unknown?: never;
    }
    /**
     * <p>The filter state.</p>
     * @public
     */
    interface StateMember {
        workspaceId?: never;
        state: MetadataTransferJobState;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        workspaceId?: never;
        state?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        workspaceId: (value: string) => T;
        state: (value: MetadataTransferJobState) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: ListMetadataTransferJobsFilter, visitor: Visitor<T>) => T;
}
/**
 * @public
 */
export interface ListMetadataTransferJobsRequest {
    /**
     * <p>The metadata transfer job's source type.</p>
     * @public
     */
    sourceType: SourceType | undefined;
    /**
     * <p>The metadata transfer job's destination type.</p>
     * @public
     */
    destinationType: DestinationType | undefined;
    /**
     * <p>An object that filters metadata transfer jobs.</p>
     * @public
     */
    filters?: ListMetadataTransferJobsFilter[];
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>The maximum number of results to return at one time.</p>
     * @public
     */
    maxResults?: number;
}
/**
 * <p>The metadata transfer job summary.</p>
 * @public
 */
export interface MetadataTransferJobSummary {
    /**
     * <p>The metadata transfer job summary Id.</p>
     * @public
     */
    metadataTransferJobId: string | undefined;
    /**
     * <p>The metadata transfer job summary ARN.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The metadata transfer job summary creation DateTime object.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The metadata transfer job summary update DateTime object</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The metadata transfer job summary status.</p>
     * @public
     */
    status: MetadataTransferJobStatus | undefined;
    /**
     * <p>The metadata transfer job summary progess.</p>
     * @public
     */
    progress?: MetadataTransferJobProgress;
}
/**
 * @public
 */
export interface ListMetadataTransferJobsResponse {
    /**
     * <p>The metadata transfer job summaries.</p>
     * @public
     */
    metadataTransferJobSummaries: MetadataTransferJobSummary[] | undefined;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListPropertiesRequest {
    /**
     * <p>The workspace ID.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The name of the component whose properties are returned by the operation.</p>
     * @public
     */
    componentName?: string;
    /**
     * <p>This string specifies the path to the composite component, starting from the top-level component.</p>
     * @public
     */
    componentPath?: string;
    /**
     * <p>The ID for the entity whose metadata (component/properties) is returned by the operation.</p>
     * @public
     */
    entityId: string | undefined;
    /**
     * <p>The maximum number of results returned at one time. The default is 25.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListScenesRequest {
    /**
     * <p>The ID of the workspace that contains the scenes.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>Specifies the maximum number of results to display.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * <p>An object that contains information about a scene.</p>
 * @public
 */
export interface SceneSummary {
    /**
     * <p>The ID of the scene.</p>
     * @public
     */
    sceneId: string | undefined;
    /**
     * <p>The relative path that specifies the location of the content definition file.</p>
     * @public
     */
    contentLocation: string | undefined;
    /**
     * <p>The ARN of the scene.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The date and time when the scene was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The date and time when the scene was last updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The scene description.</p>
     * @public
     */
    description?: string;
}
/**
 * @public
 */
export interface ListScenesResponse {
    /**
     * <p>A list of objects that contain information about the scenes.</p>
     * @public
     */
    sceneSummaries?: SceneSummary[];
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListSyncJobsRequest {
    /**
     * <p>The ID of the workspace that contains the sync job.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The maximum number of results to return at one time. The default is 50.</p>
     *          <p>Valid Range: Minimum value of 0. Maximum value of 200.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * <p>The SyncJob summary.</p>
 * @public
 */
export interface SyncJobSummary {
    /**
     * <p>The SyncJob summary ARN.</p>
     * @public
     */
    arn?: string;
    /**
     * <p>The ID of the workspace that contains the sync job.</p>
     * @public
     */
    workspaceId?: string;
    /**
     * <p>The sync source.</p>
     * @public
     */
    syncSource?: string;
    /**
     * <p>The SyncJob summaries status.</p>
     * @public
     */
    status?: SyncJobStatus;
    /**
     * <p>The creation date and time.</p>
     * @public
     */
    creationDateTime?: Date;
    /**
     * <p>The update date and time.</p>
     * @public
     */
    updateDateTime?: Date;
}
/**
 * @public
 */
export interface ListSyncJobsResponse {
    /**
     * <p>The listed SyncJob summaries.</p>
     * @public
     */
    syncJobSummaries?: SyncJobSummary[];
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 * @enum
 */
export declare const SyncResourceType: {
    readonly COMPONENT_TYPE: "COMPONENT_TYPE";
    readonly ENTITY: "ENTITY";
};
/**
 * @public
 */
export type SyncResourceType = (typeof SyncResourceType)[keyof typeof SyncResourceType];
/**
 * @public
 * @enum
 */
export declare const SyncResourceState: {
    readonly DELETED: "DELETED";
    readonly ERROR: "ERROR";
    readonly INITIALIZING: "INITIALIZING";
    readonly IN_SYNC: "IN_SYNC";
    readonly PROCESSING: "PROCESSING";
};
/**
 * @public
 */
export type SyncResourceState = (typeof SyncResourceState)[keyof typeof SyncResourceState];
/**
 * <p>The sync resource filter.</p>
 * @public
 */
export type SyncResourceFilter = SyncResourceFilter.ExternalIdMember | SyncResourceFilter.ResourceIdMember | SyncResourceFilter.ResourceTypeMember | SyncResourceFilter.StateMember | SyncResourceFilter.$UnknownMember;
/**
 * @public
 */
export declare namespace SyncResourceFilter {
    /**
     * <p>The sync resource filter's state.</p>
     * @public
     */
    interface StateMember {
        state: SyncResourceState;
        resourceType?: never;
        resourceId?: never;
        externalId?: never;
        $unknown?: never;
    }
    /**
     * <p>The sync resource filter resource type</p>
     * @public
     */
    interface ResourceTypeMember {
        state?: never;
        resourceType: SyncResourceType;
        resourceId?: never;
        externalId?: never;
        $unknown?: never;
    }
    /**
     * <p>The sync resource filter resource ID.</p>
     * @public
     */
    interface ResourceIdMember {
        state?: never;
        resourceType?: never;
        resourceId: string;
        externalId?: never;
        $unknown?: never;
    }
    /**
     * <p>The external ID.</p>
     * @public
     */
    interface ExternalIdMember {
        state?: never;
        resourceType?: never;
        resourceId?: never;
        externalId: string;
        $unknown?: never;
    }
    /**
     * @public
     */
    interface $UnknownMember {
        state?: never;
        resourceType?: never;
        resourceId?: never;
        externalId?: never;
        $unknown: [string, any];
    }
    interface Visitor<T> {
        state: (value: SyncResourceState) => T;
        resourceType: (value: SyncResourceType) => T;
        resourceId: (value: string) => T;
        externalId: (value: string) => T;
        _: (name: string, value: any) => T;
    }
    const visit: <T>(value: SyncResourceFilter, visitor: Visitor<T>) => T;
}
/**
 * @public
 */
export interface ListSyncResourcesRequest {
    /**
     * <p>The ID of the workspace that contains the sync job.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The sync source.</p>
     *          <note>
     *             <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p>
     *          </note>
     * @public
     */
    syncSource: string | undefined;
    /**
     * <p>A list of objects that filter the request.</p>
     *          <p>The following filter combinations are supported:</p>
     *          <ul>
     *             <li>
     *                <p>Filter with state</p>
     *             </li>
     *             <li>
     *                <p>Filter with ResourceType and ResourceId</p>
     *             </li>
     *             <li>
     *                <p>Filter with ResourceType and ExternalId</p>
     *             </li>
     *          </ul>
     * @public
     */
    filters?: SyncResourceFilter[];
    /**
     * <p>The maximum number of results to return at one time. The default is 50.</p>
     *          <p>Valid Range: Minimum value of 0. Maximum value of 200.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * <p>The sync resource status.</p>
 * @public
 */
export interface SyncResourceStatus {
    /**
     * <p>The sync resource status state.</p>
     * @public
     */
    state?: SyncResourceState;
    /**
     * <p>The status error.</p>
     * @public
     */
    error?: ErrorDetails;
}
/**
 * <p>The sync resource summary.</p>
 * @public
 */
export interface SyncResourceSummary {
    /**
     * <p>The resource type.</p>
     * @public
     */
    resourceType?: SyncResourceType;
    /**
     * <p>The external ID.</p>
     * @public
     */
    externalId?: string;
    /**
     * <p>The resource ID.</p>
     * @public
     */
    resourceId?: string;
    /**
     * <p>The sync resource summary status.</p>
     * @public
     */
    status?: SyncResourceStatus;
    /**
     * <p>The update date and time.</p>
     * @public
     */
    updateDateTime?: Date;
}
/**
 * @public
 */
export interface ListSyncResourcesResponse {
    /**
     * <p>The sync resources.</p>
     * @public
     */
    syncResources?: SyncResourceSummary[];
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListTagsForResourceRequest {
    /**
     * <p>The ARN of the resource.</p>
     * @public
     */
    resourceARN: string | undefined;
    /**
     * <p>The maximum number of results to return at one time. The default is 25.</p>
     *          <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListTagsForResourceResponse {
    /**
     * <p>Metadata that you can use to manage a resource.</p>
     * @public
     */
    tags?: Record<string, string>;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface ListWorkspacesRequest {
    /**
     * <p>The maximum number of results to return at one time. The default is 25.</p>
     *          <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * <p>An object that contains information about a workspace.</p>
 * @public
 */
export interface WorkspaceSummary {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ARN of the workspace.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The description of the workspace.</p>
     * @public
     */
    description?: string;
    /**
     * <p>A list of services that are linked to the workspace.</p>
     * @public
     */
    linkedServices?: string[];
    /**
     * <p>The date and time when the workspace was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The date and time when the workspace was last updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
}
/**
 * @public
 */
export interface ListWorkspacesResponse {
    /**
     * <p>A list of objects that contain information about the workspaces.</p>
     * @public
     */
    workspaceSummaries?: WorkspaceSummary[];
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface TagResourceRequest {
    /**
     * <p>The ARN of the resource.</p>
     * @public
     */
    resourceARN: string | undefined;
    /**
     * <p>Metadata to add to this resource.</p>
     * @public
     */
    tags: Record<string, string> | undefined;
}
/**
 * @public
 */
export interface TagResourceResponse {
}
/**
 * <p>The number of tags exceeds the limit.</p>
 * @public
 */
export declare class TooManyTagsException extends __BaseException {
    readonly name: "TooManyTagsException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
}
/**
 * @public
 */
export interface UntagResourceRequest {
    /**
     * <p>The ARN of the resource.</p>
     * @public
     */
    resourceARN: string | undefined;
    /**
     * <p>A list of tag key names to remove from the resource. You don't specify the value. Both
     *          the key and its associated value are removed.</p>
     * @public
     */
    tagKeys: string[] | undefined;
}
/**
 * @public
 */
export interface UntagResourceResponse {
}
/**
 * @public
 */
export interface UpdateComponentTypeResponse {
    /**
     * <p>The ID of the workspace that contains the component type.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ARN of the component type.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId: string | undefined;
    /**
     * <p>The current state of the component type.</p>
     * @public
     */
    state: State | undefined;
}
/**
 * @public
 * @enum
 */
export declare const ComponentUpdateType: {
    readonly CREATE: "CREATE";
    readonly DELETE: "DELETE";
    readonly UPDATE: "UPDATE";
};
/**
 * @public
 */
export type ComponentUpdateType = (typeof ComponentUpdateType)[keyof typeof ComponentUpdateType];
/**
 * @public
 * @enum
 */
export declare const ParentEntityUpdateType: {
    readonly DELETE: "DELETE";
    readonly UPDATE: "UPDATE";
};
/**
 * @public
 */
export type ParentEntityUpdateType = (typeof ParentEntityUpdateType)[keyof typeof ParentEntityUpdateType];
/**
 * <p>The parent entity update request.</p>
 * @public
 */
export interface ParentEntityUpdateRequest {
    /**
     * <p>The type of the update.</p>
     * @public
     */
    updateType: ParentEntityUpdateType | undefined;
    /**
     * <p>The ID of the parent entity.</p>
     * @public
     */
    parentEntityId?: string;
}
/**
 * @public
 */
export interface UpdateEntityResponse {
    /**
     * <p>The date and time when the entity was last updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The current state of the entity update.</p>
     * @public
     */
    state: State | undefined;
}
/**
 * @public
 */
export interface UpdatePricingPlanRequest {
    /**
     * <p>The pricing mode.</p>
     * @public
     */
    pricingMode: PricingMode | undefined;
    /**
     * <p>The bundle names.</p>
     * @public
     */
    bundleNames?: string[];
}
/**
 * @public
 */
export interface UpdatePricingPlanResponse {
    /**
     * <p>Update the current pricing plan.</p>
     * @public
     */
    currentPricingPlan: PricingPlan | undefined;
    /**
     * <p>Update the pending pricing plan.</p>
     * @public
     */
    pendingPricingPlan?: PricingPlan;
}
/**
 * @public
 */
export interface UpdateSceneRequest {
    /**
     * <p>The ID of the workspace that contains the scene.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the scene.</p>
     * @public
     */
    sceneId: string | undefined;
    /**
     * <p>The relative path that specifies the location of the content definition file.</p>
     * @public
     */
    contentLocation?: string;
    /**
     * <p>The description of this scene.</p>
     * @public
     */
    description?: string;
    /**
     * <p>A list of capabilities that the scene uses to render.</p>
     * @public
     */
    capabilities?: string[];
    /**
     * <p>The scene metadata.</p>
     * @public
     */
    sceneMetadata?: Record<string, string>;
}
/**
 * @public
 */
export interface UpdateSceneResponse {
    /**
     * <p>The date and time when the scene was last updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
}
/**
 * @public
 */
export interface UpdateWorkspaceRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The description of the workspace.</p>
     * @public
     */
    description?: string;
    /**
     * <p>The ARN of the execution role associated with the workspace.</p>
     * @public
     */
    role?: string;
    /**
     * <p>The ARN of the S3 bucket where resources associated with the workspace are
     *          stored.</p>
     * @public
     */
    s3Location?: string;
}
/**
 * @public
 */
export interface UpdateWorkspaceResponse {
    /**
     * <p>The date and time of the current update.</p>
     * @public
     */
    updateDateTime: Date | undefined;
}
/**
 * <p>An object that specifies a value for a property.</p>
 * @public
 */
export interface DataValue {
    /**
     * <p>A Boolean value.</p>
     * @public
     */
    booleanValue?: boolean;
    /**
     * <p>A double value.</p>
     * @public
     */
    doubleValue?: number;
    /**
     * <p>An integer value.</p>
     * @public
     */
    integerValue?: number;
    /**
     * <p>A long value.</p>
     * @public
     */
    longValue?: number;
    /**
     * <p>A string value.</p>
     * @public
     */
    stringValue?: string;
    /**
     * <p>A list of multiple values.</p>
     * @public
     */
    listValue?: DataValue[];
    /**
     * <p>An object that maps strings to multiple <code>DataValue</code> objects.</p>
     * @public
     */
    mapValue?: Record<string, DataValue>;
    /**
     * <p>A value that relates a component to another component.</p>
     * @public
     */
    relationshipValue?: RelationshipValue;
    /**
     * <p>An expression that produces the value.</p>
     * @public
     */
    expression?: string;
}
/**
 * <p>An object that filters items returned by a property request.</p>
 * @public
 */
export interface PropertyFilter {
    /**
     * <p>The property name associated with this property filter.</p>
     * @public
     */
    propertyName?: string;
    /**
     * <p>The operator associated with this property filter.</p>
     * @public
     */
    operator?: string;
    /**
     * <p>The value associated with this property filter.</p>
     * @public
     */
    value?: DataValue;
}
/**
 * <p>The latest value of the property.</p>
 * @public
 */
export interface PropertyLatestValue {
    /**
     * <p>An object that specifies information about a property.</p>
     * @public
     */
    propertyReference: EntityPropertyReference | undefined;
    /**
     * <p>The value of the property.</p>
     * @public
     */
    propertyValue?: DataValue;
}
/**
 * <p>An object that contains information about a value for a time series property.</p>
 * @public
 */
export interface PropertyValue {
    /**
     * @deprecated
     *
     * <p>The timestamp of a value for a time series property.</p>
     * @public
     */
    timestamp?: Date;
    /**
     * <p>An object that specifies a value for a time series property.</p>
     * @public
     */
    value: DataValue | undefined;
    /**
     * <p>ISO8601 DateTime of a value for a time series property.</p>
     *          <p>The time for when the property value was recorded in ISO 8601 format:
     *             <i>YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]</i>.</p>
     *          <ul>
     *             <li>
     *                <p>
     *                   <i>[YYYY]</i>: year</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>[MM]</i>: month</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>[DD]</i>: day</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>[hh]</i>: hour</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>[mm]</i>: minute</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>[ss]</i>: seconds</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>[.SSSSSSSSS]</i>: additional precision, where precedence is
     *                maintained. For example: [.573123] is equal to 573123000 nanoseconds.</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>Z</i>: default timezone UTC</p>
     *             </li>
     *             <li>
     *                <p>
     *                   <i>± HH:mm</i>: time zone offset in Hours and Minutes.</p>
     *             </li>
     *          </ul>
     *          <p>
     *             <i>Required sub-fields</i>: YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]</p>
     * @public
     */
    time?: string;
}
/**
 * <p>An object that specifies the data type of a property.</p>
 * @public
 */
export interface DataType {
    /**
     * <p>The underlying type of the data type.</p>
     * @public
     */
    type: Type | undefined;
    /**
     * <p>The nested type in the data type.</p>
     * @public
     */
    nestedType?: DataType;
    /**
     * <p>The allowed values for this data type.</p>
     * @public
     */
    allowedValues?: DataValue[];
    /**
     * <p>The unit of measure used in this data type.</p>
     * @public
     */
    unitOfMeasure?: string;
    /**
     * <p>A relationship that associates a component with another component.</p>
     * @public
     */
    relationship?: Relationship;
}
/**
 * @public
 */
export interface GetPropertyValueHistoryRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the entity.</p>
     * @public
     */
    entityId?: string;
    /**
     * <p>The name of the component.</p>
     * @public
     */
    componentName?: string;
    /**
     * <p>This string specifies the path to the composite component, starting from the top-level component.</p>
     * @public
     */
    componentPath?: string;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId?: string;
    /**
     * <p>A list of properties whose value histories the request retrieves.</p>
     * @public
     */
    selectedProperties: string[] | undefined;
    /**
     * <p>A list of objects that filter the property value history request.</p>
     * @public
     */
    propertyFilters?: PropertyFilter[];
    /**
     * @deprecated
     *
     * <p>The date and time of the earliest property value to return.</p>
     * @public
     */
    startDateTime?: Date;
    /**
     * @deprecated
     *
     * <p>The date and time of the latest property value to return.</p>
     * @public
     */
    endDateTime?: Date;
    /**
     * <p>An object that specifies the interpolation type and the interval over which to
     *          interpolate data.</p>
     * @public
     */
    interpolation?: InterpolationParameters;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>The maximum number of results to return at one time. The default is 25.</p>
     *          <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The time direction to use in the result order.</p>
     * @public
     */
    orderByTime?: OrderByTime;
    /**
     * <p>The ISO8601 DateTime of the earliest property value to return.</p>
     *          <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
     * @public
     */
    startTime?: string;
    /**
     * <p>The ISO8601 DateTime of the latest property value to return.</p>
     *          <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>
     * @public
     */
    endTime?: string;
}
/**
 * <p>An object that specifies information about time series property values. This object is
 *          used and consumed by the <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_BatchPutPropertyValues.html">BatchPutPropertyValues</a> action.</p>
 * @public
 */
export interface PropertyValueEntry {
    /**
     * <p>An object that contains information about the entity that has the property.</p>
     * @public
     */
    entityPropertyReference: EntityPropertyReference | undefined;
    /**
     * <p>A list of objects that specify time series property values.</p>
     * @public
     */
    propertyValues?: PropertyValue[];
}
/**
 * <p>The history of values for a time series property.</p>
 * @public
 */
export interface PropertyValueHistory {
    /**
     * <p>An object that uniquely identifies an entity property.</p>
     * @public
     */
    entityPropertyReference: EntityPropertyReference | undefined;
    /**
     * <p>A list of objects that contain information about the values in the history of a time
     *          series property.</p>
     * @public
     */
    values?: PropertyValue[];
}
/**
 * <p>The tabular conditions.</p>
 * @public
 */
export interface TabularConditions {
    /**
     * <p>Filter criteria that orders the output. It can be sorted in ascending or descending
     *          order.</p>
     * @public
     */
    orderBy?: OrderBy[];
    /**
     * <p>You can filter the request using various logical operators and a key-value format. For
     *          example:</p>
     *          <p>
     *             <code>\{"key": "serverType", "value": "webServer"\}</code>
     *          </p>
     * @public
     */
    propertyFilters?: PropertyFilter[];
}
/**
 * <p>An error returned by the <code>BatchPutProperty</code> action.</p>
 * @public
 */
export interface BatchPutPropertyError {
    /**
     * <p>The error code.</p>
     * @public
     */
    errorCode: string | undefined;
    /**
     * <p>The error message.</p>
     * @public
     */
    errorMessage: string | undefined;
    /**
     * <p>An object that contains information about errors returned by the
     *             <code>BatchPutProperty</code> action.</p>
     * @public
     */
    entry: PropertyValueEntry | undefined;
}
/**
 * @public
 */
export interface GetPropertyValueRequest {
    /**
     * <p>The name of the component whose property values the operation returns.</p>
     * @public
     */
    componentName?: string;
    /**
     * <p>This string specifies the path to the composite component, starting from the top-level component.</p>
     * @public
     */
    componentPath?: string;
    /**
     * <p>The ID of the component type whose property values the operation returns.</p>
     * @public
     */
    componentTypeId?: string;
    /**
     * <p>The ID of the entity whose property values the operation returns.</p>
     * @public
     */
    entityId?: string;
    /**
     * <p>The properties whose values the operation returns.</p>
     * @public
     */
    selectedProperties: string[] | undefined;
    /**
     * <p>The ID of the workspace whose values the operation returns.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The maximum number of results to return at one time. The default is 25.</p>
     *          <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
     * @public
     */
    maxResults?: number;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>The property group name.</p>
     * @public
     */
    propertyGroupName?: string;
    /**
     * <p>The tabular conditions.</p>
     * @public
     */
    tabularConditions?: TabularConditions;
}
/**
 * @public
 */
export interface BatchPutPropertyValuesRequest {
    /**
     * <p>The ID of the workspace that contains the properties to set.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>An object that maps strings to the property value entries to set. Each string in the
     *          mapping must be unique to this object.</p>
     * @public
     */
    entries: PropertyValueEntry[] | undefined;
}
/**
 * @public
 */
export interface GetPropertyValueHistoryResponse {
    /**
     * <p>An object that maps strings to the property definitions in the component type. Each
     *          string in the mapping must be unique to this object.</p>
     * @public
     */
    propertyValues: PropertyValueHistory[] | undefined;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * <p>An object that contains information about errors returned by the
 *             <code>BatchPutProperty</code> action.</p>
 * @public
 */
export interface BatchPutPropertyErrorEntry {
    /**
     * <p>A list of objects that contain information about errors returned by the
     *             <code>BatchPutProperty</code> action.</p>
     * @public
     */
    errors: BatchPutPropertyError[] | undefined;
}
/**
 * <p>An object that sets information about a property.</p>
 * @public
 */
export interface PropertyDefinitionRequest {
    /**
     * <p>An object that contains information about the data type.</p>
     * @public
     */
    dataType?: DataType;
    /**
     * <p>A Boolean value that specifies whether the property is required.</p>
     * @public
     */
    isRequiredInEntity?: boolean;
    /**
     * <p>A Boolean value that specifies whether the property ID comes from an external data
     *          store.</p>
     * @public
     */
    isExternalId?: boolean;
    /**
     * <p>A Boolean value that specifies whether the property is stored externally.</p>
     * @public
     */
    isStoredExternally?: boolean;
    /**
     * <p>A Boolean value that specifies whether the property consists of time series data.</p>
     * @public
     */
    isTimeSeries?: boolean;
    /**
     * <p>An object that contains the default value.</p>
     * @public
     */
    defaultValue?: DataValue;
    /**
     * <p>A mapping that specifies configuration information about the property. Use this field to
     *          specify information that you read from and write to an external source.</p>
     * @public
     */
    configuration?: Record<string, string>;
    /**
     * <p>A friendly name for the property.</p>
     * @public
     */
    displayName?: string;
}
/**
 * <p>An object that contains response data from a property definition request.</p>
 * @public
 */
export interface PropertyDefinitionResponse {
    /**
     * <p>An object that contains information about the data type.</p>
     * @public
     */
    dataType: DataType | undefined;
    /**
     * <p>A Boolean value that specifies whether the property consists of time series data.</p>
     * @public
     */
    isTimeSeries: boolean | undefined;
    /**
     * <p>A Boolean value that specifies whether the property is required in an entity.</p>
     * @public
     */
    isRequiredInEntity: boolean | undefined;
    /**
     * <p>A Boolean value that specifies whether the property ID comes from an external data
     *          store.</p>
     * @public
     */
    isExternalId: boolean | undefined;
    /**
     * <p>A Boolean value that specifies whether the property is stored externally.</p>
     * @public
     */
    isStoredExternally: boolean | undefined;
    /**
     * <p>A Boolean value that specifies whether the property definition is imported from an
     *          external data store.</p>
     * @public
     */
    isImported: boolean | undefined;
    /**
     * <p>A Boolean value that specifies whether the property definition can be updated.</p>
     * @public
     */
    isFinal: boolean | undefined;
    /**
     * <p>A Boolean value that specifies whether the property definition is inherited from a
     *          parent entity.</p>
     * @public
     */
    isInherited: boolean | undefined;
    /**
     * <p>An object that contains the default value.</p>
     * @public
     */
    defaultValue?: DataValue;
    /**
     * <p>A mapping that specifies configuration information about the property.</p>
     * @public
     */
    configuration?: Record<string, string>;
    /**
     * <p>A friendly name for the property.</p>
     * @public
     */
    displayName?: string;
}
/**
 * @public
 */
export interface BatchPutPropertyValuesResponse {
    /**
     * <p>Entries that caused errors in the batch put operation.</p>
     * @public
     */
    errorEntries: BatchPutPropertyErrorEntry[] | undefined;
}
/**
 * @public
 */
export interface GetPropertyValueResponse {
    /**
     * <p>An object that maps strings to the properties and latest property values in the
     *          response. Each string in the mapping must be unique to this object.</p>
     * @public
     */
    propertyValues?: Record<string, PropertyLatestValue>;
    /**
     * <p>The string that specifies the next page of results.</p>
     * @public
     */
    nextToken?: string;
    /**
     * <p>A table of property values.</p>
     * @public
     */
    tabularPropertyValues?: Record<string, DataValue>[][];
}
/**
 * @public
 */
export interface CreateComponentTypeRequest {
    /**
     * <p>The ID of the workspace that contains the component type.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>A Boolean value that specifies whether an entity can have more than one component of
     *          this type.</p>
     * @public
     */
    isSingleton?: boolean;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId: string | undefined;
    /**
     * <p>The description of the component type.</p>
     * @public
     */
    description?: string;
    /**
     * <p>An object that maps strings to the property definitions in the component type. Each
     *          string in the mapping must be unique to this object.</p>
     * @public
     */
    propertyDefinitions?: Record<string, PropertyDefinitionRequest>;
    /**
     * <p>Specifies the parent component type to extend.</p>
     * @public
     */
    extendsFrom?: string[];
    /**
     * <p>An object that maps strings to the functions in the component type. Each string in the
     *          mapping must be unique to this object.</p>
     * @public
     */
    functions?: Record<string, FunctionRequest>;
    /**
     * <p>Metadata that you can use to manage the component type.</p>
     * @public
     */
    tags?: Record<string, string>;
    /**
     * <p/>
     * @public
     */
    propertyGroups?: Record<string, PropertyGroupRequest>;
    /**
     * <p>A friendly name for the component type.</p>
     * @public
     */
    componentTypeName?: string;
    /**
     * <p>This is an object that maps strings to <code>compositeComponentTypes</code> of the <code>componentType</code>.
     *           <code>CompositeComponentType</code> is referenced by <code>componentTypeId</code>.</p>
     * @public
     */
    compositeComponentTypes?: Record<string, CompositeComponentTypeRequest>;
}
/**
 * @public
 */
export interface GetComponentTypeResponse {
    /**
     * <p>The ID of the workspace that contains the component type.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>A Boolean value that specifies whether an entity can have more than one component of
     *          this type.</p>
     * @public
     */
    isSingleton?: boolean;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId: string | undefined;
    /**
     * <p>The description of the component type.</p>
     * @public
     */
    description?: string;
    /**
     * <p>An object that maps strings to the property definitions in the component type. Each
     *          string in the mapping must be unique to this object.</p>
     * @public
     */
    propertyDefinitions?: Record<string, PropertyDefinitionResponse>;
    /**
     * <p>The name of the parent component type that this component type extends.</p>
     * @public
     */
    extendsFrom?: string[];
    /**
     * <p>An object that maps strings to the functions in the component type. Each string in the
     *          mapping must be unique to this object.</p>
     * @public
     */
    functions?: Record<string, FunctionResponse>;
    /**
     * <p>The date and time when the component type was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The date and time when the component was last updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The ARN of the component type.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>A Boolean value that specifies whether the component type is abstract.</p>
     * @public
     */
    isAbstract?: boolean;
    /**
     * <p>A Boolean value that specifies whether the component type has a schema initializer and
     *          that the schema initializer has run.</p>
     * @public
     */
    isSchemaInitialized?: boolean;
    /**
     * <p>The current status of the component type.</p>
     * @public
     */
    status?: Status;
    /**
     * <p>The maximum number of results to return at one time. The default is 25.</p>
     *          <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>
     * @public
     */
    propertyGroups?: Record<string, PropertyGroupResponse>;
    /**
     * <p>The syncSource of the SyncJob, if this entity was created by a SyncJob.</p>
     * @public
     */
    syncSource?: string;
    /**
     * <p>The component type name.</p>
     * @public
     */
    componentTypeName?: string;
    /**
     * <p>This is an object that maps strings to <code>compositeComponentTypes</code> of the <code>componentType</code>. <code>CompositeComponentType</code> is referenced by <code>componentTypeId</code>.</p>
     * @public
     */
    compositeComponentTypes?: Record<string, CompositeComponentTypeResponse>;
}
/**
 * @public
 */
export interface UpdateComponentTypeRequest {
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>A Boolean value that specifies whether an entity can have more than one component of
     *          this type.</p>
     * @public
     */
    isSingleton?: boolean;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId: string | undefined;
    /**
     * <p>The description of the component type.</p>
     * @public
     */
    description?: string;
    /**
     * <p>An object that maps strings to the property definitions in the component type. Each
     *          string in the mapping must be unique to this object.</p>
     * @public
     */
    propertyDefinitions?: Record<string, PropertyDefinitionRequest>;
    /**
     * <p>Specifies the component type that this component type extends.</p>
     * @public
     */
    extendsFrom?: string[];
    /**
     * <p>An object that maps strings to the functions in the component type. Each string in the
     *          mapping must be unique to this object.</p>
     * @public
     */
    functions?: Record<string, FunctionRequest>;
    /**
     * <p>The property groups.</p>
     * @public
     */
    propertyGroups?: Record<string, PropertyGroupRequest>;
    /**
     * <p>The component type name.</p>
     * @public
     */
    componentTypeName?: string;
    /**
     * <p>This is an object that maps strings to <code>compositeComponentTypes</code> of the <code>componentType</code>.
     *           <code>CompositeComponentType</code> is referenced by <code>componentTypeId</code>.</p>
     * @public
     */
    compositeComponentTypes?: Record<string, CompositeComponentTypeRequest>;
}
/**
 * <p>An object that sets information about a property.</p>
 * @public
 */
export interface PropertyRequest {
    /**
     * <p>An object that specifies information about a property.</p>
     * @public
     */
    definition?: PropertyDefinitionRequest;
    /**
     * <p>The value of the property.</p>
     * @public
     */
    value?: DataValue;
    /**
     * <p>The update type of the update property request.</p>
     * @public
     */
    updateType?: PropertyUpdateType;
}
/**
 * <p>An object that contains information about a property response.</p>
 * @public
 */
export interface PropertyResponse {
    /**
     * <p>An object that specifies information about a property.</p>
     * @public
     */
    definition?: PropertyDefinitionResponse;
    /**
     * <p>The value of the property.</p>
     * @public
     */
    value?: DataValue;
    /**
     * <p>This flag notes whether all values of a list or map type property are returned in the API response. The maximum number of values per property returned is 50.</p>
     * @public
     */
    areAllPropertyValuesReturned?: boolean;
}
/**
 * <p>This is an object that contains the information of a property.</p>
 * @public
 */
export interface PropertySummary {
    /**
     * <p>This is the schema for the property.</p>
     * @public
     */
    definition?: PropertyDefinitionResponse;
    /**
     * <p>This is the name of the property.</p>
     * @public
     */
    propertyName: string | undefined;
    /**
     * <p>This is the value for the property.</p>
     * @public
     */
    value?: DataValue;
    /**
     * <p>This flag notes whether all values of a list or map type property are returned in the API
     *           response. The maximum number of values per property returned is 50.</p>
     * @public
     */
    areAllPropertyValuesReturned?: boolean;
}
/**
 * <p>An object that sets information about a component type create or update request.</p>
 * @public
 */
export interface ComponentRequest {
    /**
     * <p>The description of the component request.</p>
     * @public
     */
    description?: string;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId?: string;
    /**
     * <p>An object that maps strings to the properties to set in the component type. Each string
     *          in the mapping must be unique to this object.</p>
     * @public
     */
    properties?: Record<string, PropertyRequest>;
    /**
     * <p>The property groups.</p>
     * @public
     */
    propertyGroups?: Record<string, ComponentPropertyGroupRequest>;
}
/**
 * <p>An object that returns information about a component type create or update
 *          request.</p>
 * @public
 */
export interface ComponentResponse {
    /**
     * <p>The name of the component.</p>
     * @public
     */
    componentName?: string;
    /**
     * <p>The description of the component type.</p>
     * @public
     */
    description?: string;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId?: string;
    /**
     * <p>The status of the component type.</p>
     * @public
     */
    status?: Status;
    /**
     * <p>The name of the property definition set in the request.</p>
     * @public
     */
    definedIn?: string;
    /**
     * <p>An object that maps strings to the properties to set in the component type. Each string
     *          in the mapping must be unique to this object.</p>
     * @public
     */
    properties?: Record<string, PropertyResponse>;
    /**
     * <p>The property groups.</p>
     * @public
     */
    propertyGroups?: Record<string, ComponentPropertyGroupResponse>;
    /**
     * <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
     * @public
     */
    syncSource?: string;
    /**
     * <p>This flag notes whether all properties of the component are returned in the API response.
     *           The maximum number of properties returned is 800.</p>
     * @public
     */
    areAllPropertiesReturned?: boolean;
    /**
     * <p>This lists objects that contain information about the <code>compositeComponents</code>.</p>
     * @public
     */
    compositeComponents?: Record<string, ComponentSummary>;
    /**
     * <p>This flag notes whether all <code>compositeComponents</code> are returned in the API
     *           response.</p>
     * @public
     */
    areAllCompositeComponentsReturned?: boolean;
}
/**
 * <p>The component update request.</p>
 * @public
 */
export interface ComponentUpdateRequest {
    /**
     * <p>The update type of the component update request.</p>
     * @public
     */
    updateType?: ComponentUpdateType;
    /**
     * <p>The description of the component type.</p>
     * @public
     */
    description?: string;
    /**
     * <p>The ID of the component type.</p>
     * @public
     */
    componentTypeId?: string;
    /**
     * <p>An object that maps strings to the properties to set in the component type update. Each
     *          string in the mapping must be unique to this object.</p>
     * @public
     */
    propertyUpdates?: Record<string, PropertyRequest>;
    /**
     * <p>The property group updates.</p>
     * @public
     */
    propertyGroupUpdates?: Record<string, ComponentPropertyGroupRequest>;
}
/**
 * <p>An object that sets information about the composite component update request.</p>
 * @public
 */
export interface CompositeComponentRequest {
    /**
     * <p>The description of the component type.</p>
     * @public
     */
    description?: string;
    /**
     * <p>This is an object that maps strings to the properties to set in the component type. Each string in
     *           the mapping must be unique to this object.</p>
     * @public
     */
    properties?: Record<string, PropertyRequest>;
    /**
     * <p>The property groups.</p>
     * @public
     */
    propertyGroups?: Record<string, ComponentPropertyGroupRequest>;
}
/**
 * <p>An object that sets information about the composite component update request.</p>
 * @public
 */
export interface CompositeComponentUpdateRequest {
    /**
     * <p>The update type of the component update request.</p>
     * @public
     */
    updateType?: ComponentUpdateType;
    /**
     * <p>The description of the component type.</p>
     * @public
     */
    description?: string;
    /**
     * <p>An object that maps strings to the properties to set in the component type update. Each string in the mapping must be unique to this object.</p>
     * @public
     */
    propertyUpdates?: Record<string, PropertyRequest>;
    /**
     * <p>The property group updates.</p>
     * @public
     */
    propertyGroupUpdates?: Record<string, ComponentPropertyGroupRequest>;
}
/**
 * @public
 */
export interface ListPropertiesResponse {
    /**
     * <p>A list of objects that contain information about the properties.</p>
     * @public
     */
    propertySummaries: PropertySummary[] | undefined;
    /**
     * <p>The string that specifies the next page of property results.</p>
     * @public
     */
    nextToken?: string;
}
/**
 * @public
 */
export interface GetEntityResponse {
    /**
     * <p>The ID of the entity.</p>
     * @public
     */
    entityId: string | undefined;
    /**
     * <p>The name of the entity.</p>
     * @public
     */
    entityName: string | undefined;
    /**
     * <p>The ARN of the entity.</p>
     * @public
     */
    arn: string | undefined;
    /**
     * <p>The current status of the entity.</p>
     * @public
     */
    status: Status | undefined;
    /**
     * <p>The ID of the workspace.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The description of the entity.</p>
     * @public
     */
    description?: string;
    /**
     * <p>An object that maps strings to the components in the entity. Each string in the mapping
     *          must be unique to this object.</p>
     * @public
     */
    components?: Record<string, ComponentResponse>;
    /**
     * <p>The ID of the parent entity for this entity.</p>
     * @public
     */
    parentEntityId: string | undefined;
    /**
     * <p>A Boolean value that specifies whether the entity has associated child entities.</p>
     * @public
     */
    hasChildEntities: boolean | undefined;
    /**
     * <p>The date and time when the entity was created.</p>
     * @public
     */
    creationDateTime: Date | undefined;
    /**
     * <p>The date and time when the entity was last updated.</p>
     * @public
     */
    updateDateTime: Date | undefined;
    /**
     * <p>The syncSource of the sync job, if this entity was created by a sync job.</p>
     * @public
     */
    syncSource?: string;
    /**
     * <p>This flag notes whether all components are returned in the API response. The maximum number of components returned is 30.</p>
     * @public
     */
    areAllComponentsReturned?: boolean;
}
/**
 * @public
 */
export interface CreateEntityRequest {
    /**
     * <p>The ID of the workspace that contains the entity.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the entity.</p>
     * @public
     */
    entityId?: string;
    /**
     * <p>The name of the entity.</p>
     * @public
     */
    entityName: string | undefined;
    /**
     * <p>The description of the entity.</p>
     * @public
     */
    description?: string;
    /**
     * <p>An object that maps strings to the components in the entity. Each string in the mapping
     *          must be unique to this object.</p>
     * @public
     */
    components?: Record<string, ComponentRequest>;
    /**
     * <p>This is an object that maps strings to <code>compositeComponent</code> updates in the request.
     *           Each key of the map represents the <code>componentPath</code> of the <code>compositeComponent</code>.</p>
     * @public
     */
    compositeComponents?: Record<string, CompositeComponentRequest>;
    /**
     * <p>The ID of the entity's parent entity.</p>
     * @public
     */
    parentEntityId?: string;
    /**
     * <p>Metadata that you can use to manage the entity.</p>
     * @public
     */
    tags?: Record<string, string>;
}
/**
 * @public
 */
export interface UpdateEntityRequest {
    /**
     * <p>The ID of the workspace that contains the entity.</p>
     * @public
     */
    workspaceId: string | undefined;
    /**
     * <p>The ID of the entity.</p>
     * @public
     */
    entityId: string | undefined;
    /**
     * <p>The name of the entity.</p>
     * @public
     */
    entityName?: string;
    /**
     * <p>The description of the entity.</p>
     * @public
     */
    description?: string;
    /**
     * <p>An object that maps strings to the component updates in the request. Each string in the
     *          mapping must be unique to this object.</p>
     * @public
     */
    componentUpdates?: Record<string, ComponentUpdateRequest>;
    /**
     * <p>This is an object that maps strings to <code>compositeComponent</code> updates in the request. Each key
     *           of the map represents the <code>componentPath</code> of the <code>compositeComponent</code>.</p>
     * @public
     */
    compositeComponentUpdates?: Record<string, CompositeComponentUpdateRequest>;
    /**
     * <p>An object that describes the update request for a parent entity.</p>
     * @public
     */
    parentEntityUpdate?: ParentEntityUpdateRequest;
}
