"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AccessDeniedException: () => AccessDeniedException,
  BatchPutPropertyValuesCommand: () => BatchPutPropertyValuesCommand,
  CancelMetadataTransferJobCommand: () => CancelMetadataTransferJobCommand,
  ColumnType: () => ColumnType,
  ComponentUpdateType: () => ComponentUpdateType,
  ConflictException: () => ConflictException,
  ConnectorFailureException: () => ConnectorFailureException,
  ConnectorTimeoutException: () => ConnectorTimeoutException,
  CreateComponentTypeCommand: () => CreateComponentTypeCommand,
  CreateEntityCommand: () => CreateEntityCommand,
  CreateMetadataTransferJobCommand: () => CreateMetadataTransferJobCommand,
  CreateSceneCommand: () => CreateSceneCommand,
  CreateSyncJobCommand: () => CreateSyncJobCommand,
  CreateWorkspaceCommand: () => CreateWorkspaceCommand,
  DeleteComponentTypeCommand: () => DeleteComponentTypeCommand,
  DeleteEntityCommand: () => DeleteEntityCommand,
  DeleteSceneCommand: () => DeleteSceneCommand,
  DeleteSyncJobCommand: () => DeleteSyncJobCommand,
  DeleteWorkspaceCommand: () => DeleteWorkspaceCommand,
  DestinationType: () => DestinationType,
  ErrorCode: () => ErrorCode,
  ExecuteQueryCommand: () => ExecuteQueryCommand,
  GetComponentTypeCommand: () => GetComponentTypeCommand,
  GetEntityCommand: () => GetEntityCommand,
  GetMetadataTransferJobCommand: () => GetMetadataTransferJobCommand,
  GetPricingPlanCommand: () => GetPricingPlanCommand,
  GetPropertyValueCommand: () => GetPropertyValueCommand,
  GetPropertyValueHistoryCommand: () => GetPropertyValueHistoryCommand,
  GetSceneCommand: () => GetSceneCommand,
  GetSyncJobCommand: () => GetSyncJobCommand,
  GetWorkspaceCommand: () => GetWorkspaceCommand,
  GroupType: () => GroupType,
  InternalServerException: () => InternalServerException,
  InterpolationType: () => InterpolationType,
  IoTTwinMaker: () => IoTTwinMaker,
  IoTTwinMakerClient: () => IoTTwinMakerClient,
  IoTTwinMakerServiceException: () => IoTTwinMakerServiceException,
  IotSiteWiseSourceConfigurationFilter: () => IotSiteWiseSourceConfigurationFilter,
  IotTwinMakerSourceConfigurationFilter: () => IotTwinMakerSourceConfigurationFilter,
  ListComponentTypesCommand: () => ListComponentTypesCommand,
  ListComponentTypesFilter: () => ListComponentTypesFilter,
  ListComponentsCommand: () => ListComponentsCommand,
  ListEntitiesCommand: () => ListEntitiesCommand,
  ListEntitiesFilter: () => ListEntitiesFilter,
  ListMetadataTransferJobsCommand: () => ListMetadataTransferJobsCommand,
  ListMetadataTransferJobsFilter: () => ListMetadataTransferJobsFilter,
  ListPropertiesCommand: () => ListPropertiesCommand,
  ListScenesCommand: () => ListScenesCommand,
  ListSyncJobsCommand: () => ListSyncJobsCommand,
  ListSyncResourcesCommand: () => ListSyncResourcesCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListWorkspacesCommand: () => ListWorkspacesCommand,
  MetadataTransferJobState: () => MetadataTransferJobState,
  Order: () => Order,
  OrderByTime: () => OrderByTime,
  ParentEntityUpdateType: () => ParentEntityUpdateType,
  PricingMode: () => PricingMode,
  PricingTier: () => PricingTier,
  PropertyGroupUpdateType: () => PropertyGroupUpdateType,
  PropertyUpdateType: () => PropertyUpdateType,
  QueryTimeoutException: () => QueryTimeoutException,
  ResourceNotFoundException: () => ResourceNotFoundException,
  SceneErrorCode: () => SceneErrorCode,
  Scope: () => Scope,
  ServiceQuotaExceededException: () => ServiceQuotaExceededException,
  SourceType: () => SourceType,
  State: () => State,
  SyncJobState: () => SyncJobState,
  SyncResourceFilter: () => SyncResourceFilter,
  SyncResourceState: () => SyncResourceState,
  SyncResourceType: () => SyncResourceType,
  TagResourceCommand: () => TagResourceCommand,
  ThrottlingException: () => ThrottlingException,
  TooManyTagsException: () => TooManyTagsException,
  Type: () => Type,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateComponentTypeCommand: () => UpdateComponentTypeCommand,
  UpdateEntityCommand: () => UpdateEntityCommand,
  UpdatePricingPlanCommand: () => UpdatePricingPlanCommand,
  UpdateReason: () => UpdateReason,
  UpdateSceneCommand: () => UpdateSceneCommand,
  UpdateWorkspaceCommand: () => UpdateWorkspaceCommand,
  ValidationException: () => ValidationException,
  __Client: () => import_smithy_client.Client,
  paginateExecuteQuery: () => paginateExecuteQuery,
  paginateGetPropertyValue: () => paginateGetPropertyValue,
  paginateGetPropertyValueHistory: () => paginateGetPropertyValueHistory,
  paginateListComponentTypes: () => paginateListComponentTypes,
  paginateListComponents: () => paginateListComponents,
  paginateListEntities: () => paginateListEntities,
  paginateListMetadataTransferJobs: () => paginateListMetadataTransferJobs,
  paginateListProperties: () => paginateListProperties,
  paginateListScenes: () => paginateListScenes,
  paginateListSyncJobs: () => paginateListSyncJobs,
  paginateListSyncResources: () => paginateListSyncResources,
  paginateListWorkspaces: () => paginateListWorkspaces
});
module.exports = __toCommonJS(src_exports);

// src/IoTTwinMakerClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "iottwinmaker"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/IoTTwinMakerClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/IoTTwinMakerClient.ts
var _IoTTwinMakerClient = class _IoTTwinMakerClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultIoTTwinMakerHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_IoTTwinMakerClient, "IoTTwinMakerClient");
var IoTTwinMakerClient = _IoTTwinMakerClient;

// src/IoTTwinMaker.ts


// src/commands/BatchPutPropertyValuesCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");




// src/models/IoTTwinMakerServiceException.ts

var _IoTTwinMakerServiceException = class _IoTTwinMakerServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _IoTTwinMakerServiceException.prototype);
  }
};
__name(_IoTTwinMakerServiceException, "IoTTwinMakerServiceException");
var IoTTwinMakerServiceException = _IoTTwinMakerServiceException;

// src/models/models_0.ts
var _AccessDeniedException = class _AccessDeniedException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    this.name = "AccessDeniedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
  }
};
__name(_AccessDeniedException, "AccessDeniedException");
var AccessDeniedException = _AccessDeniedException;
var _InternalServerException = class _InternalServerException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
  }
};
__name(_InternalServerException, "InternalServerException");
var InternalServerException = _InternalServerException;
var _ResourceNotFoundException = class _ResourceNotFoundException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
__name(_ResourceNotFoundException, "ResourceNotFoundException");
var ResourceNotFoundException = _ResourceNotFoundException;
var _ThrottlingException = class _ThrottlingException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
__name(_ThrottlingException, "ThrottlingException");
var ThrottlingException = _ThrottlingException;
var _ValidationException = class _ValidationException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
__name(_ValidationException, "ValidationException");
var ValidationException = _ValidationException;
var ErrorCode = {
  COMPOSITE_COMPONENT_FAILURE: "COMPOSITE_COMPONENT_FAILURE",
  INTERNAL_FAILURE: "INTERNAL_FAILURE",
  PROCESSING_ERROR: "PROCESSING_ERROR",
  SYNC_CREATING_ERROR: "SYNC_CREATING_ERROR",
  SYNC_DELETING_ERROR: "SYNC_DELETING_ERROR",
  SYNC_INITIALIZING_ERROR: "SYNC_INITIALIZING_ERROR",
  SYNC_PROCESSING_ERROR: "SYNC_PROCESSING_ERROR",
  VALIDATION_ERROR: "VALIDATION_ERROR"
};
var MetadataTransferJobState = {
  CANCELLED: "CANCELLED",
  CANCELLING: "CANCELLING",
  COMPLETED: "COMPLETED",
  ERROR: "ERROR",
  PENDING: "PENDING",
  RUNNING: "RUNNING",
  VALIDATING: "VALIDATING"
};
var _ConflictException = class _ConflictException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
  }
};
__name(_ConflictException, "ConflictException");
var ConflictException = _ConflictException;
var Scope = {
  ENTITY: "ENTITY",
  WORKSPACE: "WORKSPACE"
};
var Type = {
  BOOLEAN: "BOOLEAN",
  DOUBLE: "DOUBLE",
  INTEGER: "INTEGER",
  LIST: "LIST",
  LONG: "LONG",
  MAP: "MAP",
  RELATIONSHIP: "RELATIONSHIP",
  STRING: "STRING"
};
var GroupType = {
  TABULAR: "TABULAR"
};
var State = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  ERROR: "ERROR",
  UPDATING: "UPDATING"
};
var _ServiceQuotaExceededException = class _ServiceQuotaExceededException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ServiceQuotaExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
  }
};
__name(_ServiceQuotaExceededException, "ServiceQuotaExceededException");
var ServiceQuotaExceededException = _ServiceQuotaExceededException;
var PropertyUpdateType = {
  CREATE: "CREATE",
  DELETE: "DELETE",
  UPDATE: "UPDATE"
};
var PropertyGroupUpdateType = {
  CREATE: "CREATE",
  DELETE: "DELETE",
  UPDATE: "UPDATE"
};
var DestinationType = {
  IOTSITEWISE: "iotsitewise",
  IOTTWINMAKER: "iottwinmaker",
  S3: "s3"
};
var IotSiteWiseSourceConfigurationFilter;
((IotSiteWiseSourceConfigurationFilter3) => {
  IotSiteWiseSourceConfigurationFilter3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.filterByAssetModel !== void 0)
      return visitor.filterByAssetModel(value.filterByAssetModel);
    if (value.filterByAsset !== void 0)
      return visitor.filterByAsset(value.filterByAsset);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(IotSiteWiseSourceConfigurationFilter || (IotSiteWiseSourceConfigurationFilter = {}));
var IotTwinMakerSourceConfigurationFilter;
((IotTwinMakerSourceConfigurationFilter3) => {
  IotTwinMakerSourceConfigurationFilter3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.filterByComponentType !== void 0)
      return visitor.filterByComponentType(value.filterByComponentType);
    if (value.filterByEntity !== void 0)
      return visitor.filterByEntity(value.filterByEntity);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(IotTwinMakerSourceConfigurationFilter || (IotTwinMakerSourceConfigurationFilter = {}));
var SourceType = {
  IOTSITEWISE: "iotsitewise",
  IOTTWINMAKER: "iottwinmaker",
  S3: "s3"
};
var SyncJobState = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  ERROR: "ERROR",
  INITIALIZING: "INITIALIZING"
};
var ColumnType = {
  EDGE: "EDGE",
  NODE: "NODE",
  VALUE: "VALUE"
};
var _QueryTimeoutException = class _QueryTimeoutException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "QueryTimeoutException",
      $fault: "client",
      ...opts
    });
    this.name = "QueryTimeoutException";
    this.$fault = "client";
    this.$retryable = {};
    Object.setPrototypeOf(this, _QueryTimeoutException.prototype);
  }
};
__name(_QueryTimeoutException, "QueryTimeoutException");
var QueryTimeoutException = _QueryTimeoutException;
var PricingTier = {
  TIER_1: "TIER_1",
  TIER_2: "TIER_2",
  TIER_3: "TIER_3",
  TIER_4: "TIER_4"
};
var PricingMode = {
  BASIC: "BASIC",
  STANDARD: "STANDARD",
  TIERED_BUNDLE: "TIERED_BUNDLE"
};
var UpdateReason = {
  DEFAULT: "DEFAULT",
  ENTITY_COUNT_UPDATE: "ENTITY_COUNT_UPDATE",
  OVERWRITTEN: "OVERWRITTEN",
  PRICING_MODE_UPDATE: "PRICING_MODE_UPDATE",
  PRICING_TIER_UPDATE: "PRICING_TIER_UPDATE"
};
var _ConnectorFailureException = class _ConnectorFailureException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConnectorFailureException",
      $fault: "client",
      ...opts
    });
    this.name = "ConnectorFailureException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConnectorFailureException.prototype);
  }
};
__name(_ConnectorFailureException, "ConnectorFailureException");
var ConnectorFailureException = _ConnectorFailureException;
var _ConnectorTimeoutException = class _ConnectorTimeoutException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConnectorTimeoutException",
      $fault: "client",
      ...opts
    });
    this.name = "ConnectorTimeoutException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConnectorTimeoutException.prototype);
  }
};
__name(_ConnectorTimeoutException, "ConnectorTimeoutException");
var ConnectorTimeoutException = _ConnectorTimeoutException;
var Order = {
  ASCENDING: "ASCENDING",
  DESCENDING: "DESCENDING"
};
var InterpolationType = {
  LINEAR: "LINEAR"
};
var OrderByTime = {
  ASCENDING: "ASCENDING",
  DESCENDING: "DESCENDING"
};
var SceneErrorCode = {
  MATTERPORT_ERROR: "MATTERPORT_ERROR"
};
var ListComponentTypesFilter;
((ListComponentTypesFilter3) => {
  ListComponentTypesFilter3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.extendsFrom !== void 0)
      return visitor.extendsFrom(value.extendsFrom);
    if (value.namespace !== void 0)
      return visitor.namespace(value.namespace);
    if (value.isAbstract !== void 0)
      return visitor.isAbstract(value.isAbstract);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(ListComponentTypesFilter || (ListComponentTypesFilter = {}));
var ListEntitiesFilter;
((ListEntitiesFilter3) => {
  ListEntitiesFilter3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.parentEntityId !== void 0)
      return visitor.parentEntityId(value.parentEntityId);
    if (value.componentTypeId !== void 0)
      return visitor.componentTypeId(value.componentTypeId);
    if (value.externalId !== void 0)
      return visitor.externalId(value.externalId);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(ListEntitiesFilter || (ListEntitiesFilter = {}));
var ListMetadataTransferJobsFilter;
((ListMetadataTransferJobsFilter3) => {
  ListMetadataTransferJobsFilter3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.workspaceId !== void 0)
      return visitor.workspaceId(value.workspaceId);
    if (value.state !== void 0)
      return visitor.state(value.state);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(ListMetadataTransferJobsFilter || (ListMetadataTransferJobsFilter = {}));
var SyncResourceType = {
  COMPONENT_TYPE: "COMPONENT_TYPE",
  ENTITY: "ENTITY"
};
var SyncResourceState = {
  DELETED: "DELETED",
  ERROR: "ERROR",
  INITIALIZING: "INITIALIZING",
  IN_SYNC: "IN_SYNC",
  PROCESSING: "PROCESSING"
};
var SyncResourceFilter;
((SyncResourceFilter3) => {
  SyncResourceFilter3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.state !== void 0)
      return visitor.state(value.state);
    if (value.resourceType !== void 0)
      return visitor.resourceType(value.resourceType);
    if (value.resourceId !== void 0)
      return visitor.resourceId(value.resourceId);
    if (value.externalId !== void 0)
      return visitor.externalId(value.externalId);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(SyncResourceFilter || (SyncResourceFilter = {}));
var _TooManyTagsException = class _TooManyTagsException extends IoTTwinMakerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTagsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyTagsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyTagsException.prototype);
  }
};
__name(_TooManyTagsException, "TooManyTagsException");
var TooManyTagsException = _TooManyTagsException;
var ComponentUpdateType = {
  CREATE: "CREATE",
  DELETE: "DELETE",
  UPDATE: "UPDATE"
};
var ParentEntityUpdateType = {
  DELETE: "DELETE",
  UPDATE: "UPDATE"
};

// src/protocols/Aws_restJson1.ts
var se_BatchPutPropertyValuesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/entity-properties");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      entries: (_) => se_Entries(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchPutPropertyValuesCommand");
var se_CancelMetadataTransferJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/metadata-transfer-jobs/{metadataTransferJobId}/cancel");
  b.p("metadataTransferJobId", () => input.metadataTransferJobId, "{metadataTransferJobId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CancelMetadataTransferJobCommand");
var se_CreateComponentTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/component-types/{componentTypeId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("componentTypeId", () => input.componentTypeId, "{componentTypeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      componentTypeName: [],
      compositeComponentTypes: (_) => (0, import_smithy_client._json)(_),
      description: [],
      extendsFrom: (_) => (0, import_smithy_client._json)(_),
      functions: (_) => (0, import_smithy_client._json)(_),
      isSingleton: [],
      propertyDefinitions: (_) => se_PropertyDefinitionsRequest(_, context),
      propertyGroups: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateComponentTypeCommand");
var se_CreateEntityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/entities");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      components: (_) => se_ComponentsMapRequest(_, context),
      compositeComponents: (_) => se_CompositeComponentsMapRequest(_, context),
      description: [],
      entityId: [],
      entityName: [],
      parentEntityId: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateEntityCommand");
var se_CreateMetadataTransferJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/metadata-transfer-jobs");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      destination: (_) => (0, import_smithy_client._json)(_),
      metadataTransferJobId: [],
      sources: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateMetadataTransferJobCommand");
var se_CreateSceneCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/scenes");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      capabilities: (_) => (0, import_smithy_client._json)(_),
      contentLocation: [],
      description: [],
      sceneId: [],
      sceneMetadata: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateSceneCommand");
var se_CreateSyncJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/sync-jobs/{syncSource}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("syncSource", () => input.syncSource, "{syncSource}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      syncRole: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateSyncJobCommand");
var se_CreateWorkspaceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      role: [],
      s3Location: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateWorkspaceCommand");
var se_DeleteComponentTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workspaces/{workspaceId}/component-types/{componentTypeId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("componentTypeId", () => input.componentTypeId, "{componentTypeId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteComponentTypeCommand");
var se_DeleteEntityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workspaces/{workspaceId}/entities/{entityId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("entityId", () => input.entityId, "{entityId}", false);
  const query = (0, import_smithy_client.map)({
    [_iR]: [() => input.isRecursive !== void 0, () => input[_iR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteEntityCommand");
var se_DeleteSceneCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workspaces/{workspaceId}/scenes/{sceneId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("sceneId", () => input.sceneId, "{sceneId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteSceneCommand");
var se_DeleteSyncJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workspaces/{workspaceId}/sync-jobs/{syncSource}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("syncSource", () => input.syncSource, "{syncSource}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteSyncJobCommand");
var se_DeleteWorkspaceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workspaces/{workspaceId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteWorkspaceCommand");
var se_ExecuteQueryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/queries/execution");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      queryStatement: [],
      workspaceId: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ExecuteQueryCommand");
var se_GetComponentTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workspaces/{workspaceId}/component-types/{componentTypeId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("componentTypeId", () => input.componentTypeId, "{componentTypeId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetComponentTypeCommand");
var se_GetEntityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workspaces/{workspaceId}/entities/{entityId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("entityId", () => input.entityId, "{entityId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetEntityCommand");
var se_GetMetadataTransferJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/metadata-transfer-jobs/{metadataTransferJobId}");
  b.p("metadataTransferJobId", () => input.metadataTransferJobId, "{metadataTransferJobId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetMetadataTransferJobCommand");
var se_GetPricingPlanCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/pricingplan");
  let body;
  body = "";
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPricingPlanCommand");
var se_GetPropertyValueCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/entity-properties/value");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      componentName: [],
      componentPath: [],
      componentTypeId: [],
      entityId: [],
      maxResults: [],
      nextToken: [],
      propertyGroupName: [],
      selectedProperties: (_) => (0, import_smithy_client._json)(_),
      tabularConditions: (_) => se_TabularConditions(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetPropertyValueCommand");
var se_GetPropertyValueHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/entity-properties/history");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      componentName: [],
      componentPath: [],
      componentTypeId: [],
      endDateTime: (_) => Math.round(_.getTime() / 1e3),
      endTime: [],
      entityId: [],
      interpolation: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: [],
      orderByTime: [],
      propertyFilters: (_) => se_PropertyFilters(_, context),
      selectedProperties: (_) => (0, import_smithy_client._json)(_),
      startDateTime: (_) => Math.round(_.getTime() / 1e3),
      startTime: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetPropertyValueHistoryCommand");
var se_GetSceneCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workspaces/{workspaceId}/scenes/{sceneId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("sceneId", () => input.sceneId, "{sceneId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetSceneCommand");
var se_GetSyncJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/sync-jobs/{syncSource}");
  b.p("syncSource", () => input.syncSource, "{syncSource}", false);
  const query = (0, import_smithy_client.map)({
    [_w]: [, input[_wI]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetSyncJobCommand");
var se_GetWorkspaceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/workspaces/{workspaceId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetWorkspaceCommand");
var se_ListComponentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/entities/{entityId}/components-list");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("entityId", () => input.entityId, "{entityId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      componentPath: [],
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListComponentsCommand");
var se_ListComponentTypesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/component-types-list");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListComponentTypesCommand");
var se_ListEntitiesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/entities-list");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListEntitiesCommand");
var se_ListMetadataTransferJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/metadata-transfer-jobs-list");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      destinationType: [],
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: [],
      sourceType: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListMetadataTransferJobsCommand");
var se_ListPropertiesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/properties-list");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      componentName: [],
      componentPath: [],
      entityId: [],
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListPropertiesCommand");
var se_ListScenesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/scenes-list");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListScenesCommand");
var se_ListSyncJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/sync-jobs-list");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListSyncJobsCommand");
var se_ListSyncResourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/sync-jobs/{syncSource}/resources-list");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("syncSource", () => input.syncSource, "{syncSource}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      filters: (_) => (0, import_smithy_client._json)(_),
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListSyncResourcesCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags-list");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: [],
      resourceARN: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_ListWorkspacesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces-list");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ListWorkspacesCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      resourceARN: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags");
  const query = (0, import_smithy_client.map)({
    [_rARN]: [, (0, import_smithy_client.expectNonNull)(input[_rARN], `resourceARN`)],
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.tagKeys, `tagKeys`) != null,
      () => (input[_tK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateComponentTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/component-types/{componentTypeId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("componentTypeId", () => input.componentTypeId, "{componentTypeId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      componentTypeName: [],
      compositeComponentTypes: (_) => (0, import_smithy_client._json)(_),
      description: [],
      extendsFrom: (_) => (0, import_smithy_client._json)(_),
      functions: (_) => (0, import_smithy_client._json)(_),
      isSingleton: [],
      propertyDefinitions: (_) => se_PropertyDefinitionsRequest(_, context),
      propertyGroups: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateComponentTypeCommand");
var se_UpdateEntityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/entities/{entityId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("entityId", () => input.entityId, "{entityId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      componentUpdates: (_) => se_ComponentUpdatesMapRequest(_, context),
      compositeComponentUpdates: (_) => se_CompositeComponentUpdatesMapRequest(_, context),
      description: [],
      entityName: [],
      parentEntityUpdate: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateEntityCommand");
var se_UpdatePricingPlanCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/pricingplan");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      bundleNames: (_) => (0, import_smithy_client._json)(_),
      pricingMode: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_UpdatePricingPlanCommand");
var se_UpdateSceneCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}/scenes/{sceneId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  b.p("sceneId", () => input.sceneId, "{sceneId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      capabilities: (_) => (0, import_smithy_client._json)(_),
      contentLocation: [],
      description: [],
      sceneMetadata: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateSceneCommand");
var se_UpdateWorkspaceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/workspaces/{workspaceId}");
  b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      role: [],
      s3Location: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateWorkspaceCommand");
var de_BatchPutPropertyValuesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errorEntries: (_) => de_ErrorEntries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchPutPropertyValuesCommand");
var de_CancelMetadataTransferJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    metadataTransferJobId: import_smithy_client.expectString,
    progress: import_smithy_client._json,
    status: import_smithy_client._json,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CancelMetadataTransferJobCommand");
var de_CreateComponentTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    state: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateComponentTypeCommand");
var de_CreateEntityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    entityId: import_smithy_client.expectString,
    state: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateEntityCommand");
var de_CreateMetadataTransferJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    metadataTransferJobId: import_smithy_client.expectString,
    status: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateMetadataTransferJobCommand");
var de_CreateSceneCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateSceneCommand");
var de_CreateSyncJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    state: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateSyncJobCommand");
var de_CreateWorkspaceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateWorkspaceCommand");
var de_DeleteComponentTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    state: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteComponentTypeCommand");
var de_DeleteEntityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    state: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteEntityCommand");
var de_DeleteSceneCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteSceneCommand");
var de_DeleteSyncJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    state: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteSyncJobCommand");
var de_DeleteWorkspaceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteWorkspaceCommand");
var de_ExecuteQueryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    columnDescriptions: import_smithy_client._json,
    nextToken: import_smithy_client.expectString,
    rows: (_) => de_Rows(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ExecuteQueryCommand");
var de_GetComponentTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    componentTypeId: import_smithy_client.expectString,
    componentTypeName: import_smithy_client.expectString,
    compositeComponentTypes: import_smithy_client._json,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    extendsFrom: import_smithy_client._json,
    functions: import_smithy_client._json,
    isAbstract: import_smithy_client.expectBoolean,
    isSchemaInitialized: import_smithy_client.expectBoolean,
    isSingleton: import_smithy_client.expectBoolean,
    propertyDefinitions: (_) => de_PropertyDefinitionsResponse(_, context),
    propertyGroups: import_smithy_client._json,
    status: import_smithy_client._json,
    syncSource: import_smithy_client.expectString,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    workspaceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetComponentTypeCommand");
var de_GetEntityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    areAllComponentsReturned: import_smithy_client.expectBoolean,
    arn: import_smithy_client.expectString,
    components: (_) => de_ComponentsMap(_, context),
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    entityId: import_smithy_client.expectString,
    entityName: import_smithy_client.expectString,
    hasChildEntities: import_smithy_client.expectBoolean,
    parentEntityId: import_smithy_client.expectString,
    status: import_smithy_client._json,
    syncSource: import_smithy_client.expectString,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    workspaceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetEntityCommand");
var de_GetMetadataTransferJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    destination: import_smithy_client._json,
    metadataTransferJobId: import_smithy_client.expectString,
    metadataTransferJobRole: import_smithy_client.expectString,
    progress: import_smithy_client._json,
    reportUrl: import_smithy_client.expectString,
    sources: import_smithy_client._json,
    status: import_smithy_client._json,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetMetadataTransferJobCommand");
var de_GetPricingPlanCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    currentPricingPlan: (_) => de_PricingPlan(_, context),
    pendingPricingPlan: (_) => de_PricingPlan(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPricingPlanCommand");
var de_GetPropertyValueCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    propertyValues: (_) => de_PropertyLatestValueMap(_, context),
    tabularPropertyValues: (_) => de_TabularPropertyValues(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPropertyValueCommand");
var de_GetPropertyValueHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    propertyValues: (_) => de_PropertyValueList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPropertyValueHistoryCommand");
var de_GetSceneCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    capabilities: import_smithy_client._json,
    contentLocation: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    error: import_smithy_client._json,
    generatedSceneMetadata: import_smithy_client._json,
    sceneId: import_smithy_client.expectString,
    sceneMetadata: import_smithy_client._json,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    workspaceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetSceneCommand");
var de_GetSyncJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client._json,
    syncRole: import_smithy_client.expectString,
    syncSource: import_smithy_client.expectString,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    workspaceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetSyncJobCommand");
var de_GetWorkspaceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    linkedServices: import_smithy_client._json,
    role: import_smithy_client.expectString,
    s3Location: import_smithy_client.expectString,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    workspaceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetWorkspaceCommand");
var de_ListComponentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    componentSummaries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListComponentsCommand");
var de_ListComponentTypesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    componentTypeSummaries: (_) => de_ComponentTypeSummaries(_, context),
    maxResults: import_smithy_client.expectInt32,
    nextToken: import_smithy_client.expectString,
    workspaceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListComponentTypesCommand");
var de_ListEntitiesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    entitySummaries: (_) => de_EntitySummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListEntitiesCommand");
var de_ListMetadataTransferJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    metadataTransferJobSummaries: (_) => de_MetadataTransferJobSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListMetadataTransferJobsCommand");
var de_ListPropertiesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    propertySummaries: (_) => de_PropertySummaries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPropertiesCommand");
var de_ListScenesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    sceneSummaries: (_) => de_SceneSummaries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListScenesCommand");
var de_ListSyncJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    syncJobSummaries: (_) => de_SyncJobSummaries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSyncJobsCommand");
var de_ListSyncResourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    syncResources: (_) => de_SyncResourceSummaries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListSyncResourcesCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListWorkspacesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    workspaceSummaries: (_) => de_WorkspaceSummaries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListWorkspacesCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateComponentTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    arn: import_smithy_client.expectString,
    componentTypeId: import_smithy_client.expectString,
    state: import_smithy_client.expectString,
    workspaceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateComponentTypeCommand");
var de_UpdateEntityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    state: import_smithy_client.expectString,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateEntityCommand");
var de_UpdatePricingPlanCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    currentPricingPlan: (_) => de_PricingPlan(_, context),
    pendingPricingPlan: (_) => de_PricingPlan(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdatePricingPlanCommand");
var de_UpdateSceneCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateSceneCommand");
var de_UpdateWorkspaceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateWorkspaceCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServerException":
    case "com.amazonaws.iottwinmaker#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iottwinmaker#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iottwinmaker#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iottwinmaker#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "AccessDeniedException":
    case "com.amazonaws.iottwinmaker#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.iottwinmaker#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.iottwinmaker#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "QueryTimeoutException":
    case "com.amazonaws.iottwinmaker#QueryTimeoutException":
      throw await de_QueryTimeoutExceptionRes(parsedOutput, context);
    case "ConnectorFailureException":
    case "com.amazonaws.iottwinmaker#ConnectorFailureException":
      throw await de_ConnectorFailureExceptionRes(parsedOutput, context);
    case "ConnectorTimeoutException":
    case "com.amazonaws.iottwinmaker#ConnectorTimeoutException":
      throw await de_ConnectorTimeoutExceptionRes(parsedOutput, context);
    case "TooManyTagsException":
    case "com.amazonaws.iottwinmaker#TooManyTagsException":
      throw await de_TooManyTagsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(IoTTwinMakerServiceException);
var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessDeniedExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_ConnectorFailureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConnectorFailureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConnectorFailureExceptionRes");
var de_ConnectorTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConnectorTimeoutException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConnectorTimeoutExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerExceptionRes");
var de_QueryTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new QueryTimeoutException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_QueryTimeoutExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceQuotaExceededExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new TooManyTagsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TooManyTagsExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var se_ComponentRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    componentTypeId: [],
    description: [],
    properties: (_) => se_PropertyRequests(_, context),
    propertyGroups: import_smithy_client._json
  });
}, "se_ComponentRequest");
var se_ComponentsMapRequest = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_ComponentRequest(value, context);
    return acc;
  }, {});
}, "se_ComponentsMapRequest");
var se_ComponentUpdateRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    componentTypeId: [],
    description: [],
    propertyGroupUpdates: import_smithy_client._json,
    propertyUpdates: (_) => se_PropertyRequests(_, context),
    updateType: []
  });
}, "se_ComponentUpdateRequest");
var se_ComponentUpdatesMapRequest = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_ComponentUpdateRequest(value, context);
    return acc;
  }, {});
}, "se_ComponentUpdatesMapRequest");
var se_CompositeComponentRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    description: [],
    properties: (_) => se_PropertyRequests(_, context),
    propertyGroups: import_smithy_client._json
  });
}, "se_CompositeComponentRequest");
var se_CompositeComponentsMapRequest = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_CompositeComponentRequest(value, context);
    return acc;
  }, {});
}, "se_CompositeComponentsMapRequest");
var se_CompositeComponentUpdateRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    description: [],
    propertyGroupUpdates: import_smithy_client._json,
    propertyUpdates: (_) => se_PropertyRequests(_, context),
    updateType: []
  });
}, "se_CompositeComponentUpdateRequest");
var se_CompositeComponentUpdatesMapRequest = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_CompositeComponentUpdateRequest(value, context);
    return acc;
  }, {});
}, "se_CompositeComponentUpdatesMapRequest");
var se_DataType = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    allowedValues: (_) => se_DataValueList(_, context),
    nestedType: (_) => se_DataType(_, context),
    relationship: import_smithy_client._json,
    type: [],
    unitOfMeasure: []
  });
}, "se_DataType");
var se_DataValue = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    booleanValue: [],
    doubleValue: import_smithy_client.serializeFloat,
    expression: [],
    integerValue: [],
    listValue: (_) => se_DataValueList(_, context),
    longValue: [],
    mapValue: (_) => se_DataValueMap(_, context),
    relationshipValue: import_smithy_client._json,
    stringValue: []
  });
}, "se_DataValue");
var se_DataValueList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_DataValue(entry, context);
  });
}, "se_DataValueList");
var se_DataValueMap = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_DataValue(value, context);
    return acc;
  }, {});
}, "se_DataValueMap");
var se_Entries = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_PropertyValueEntry(entry, context);
  });
}, "se_Entries");
var se_PropertyDefinitionRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    configuration: import_smithy_client._json,
    dataType: (_) => se_DataType(_, context),
    defaultValue: (_) => se_DataValue(_, context),
    displayName: [],
    isExternalId: [],
    isRequiredInEntity: [],
    isStoredExternally: [],
    isTimeSeries: []
  });
}, "se_PropertyDefinitionRequest");
var se_PropertyDefinitionsRequest = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_PropertyDefinitionRequest(value, context);
    return acc;
  }, {});
}, "se_PropertyDefinitionsRequest");
var se_PropertyFilter = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    operator: [],
    propertyName: [],
    value: (_) => se_DataValue(_, context)
  });
}, "se_PropertyFilter");
var se_PropertyFilters = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_PropertyFilter(entry, context);
  });
}, "se_PropertyFilters");
var se_PropertyRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    definition: (_) => se_PropertyDefinitionRequest(_, context),
    updateType: [],
    value: (_) => se_DataValue(_, context)
  });
}, "se_PropertyRequest");
var se_PropertyRequests = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_PropertyRequest(value, context);
    return acc;
  }, {});
}, "se_PropertyRequests");
var se_PropertyValue = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    time: [],
    timestamp: (_) => Math.round(_.getTime() / 1e3),
    value: (_) => se_DataValue(_, context)
  });
}, "se_PropertyValue");
var se_PropertyValueEntry = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    entityPropertyReference: import_smithy_client._json,
    propertyValues: (_) => se_PropertyValues(_, context)
  });
}, "se_PropertyValueEntry");
var se_PropertyValues = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_PropertyValue(entry, context);
  });
}, "se_PropertyValues");
var se_TabularConditions = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    orderBy: import_smithy_client._json,
    propertyFilters: (_) => se_PropertyFilters(_, context)
  });
}, "se_TabularConditions");
var de_BatchPutPropertyError = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    entry: (_) => de_PropertyValueEntry(_, context),
    errorCode: import_smithy_client.expectString,
    errorMessage: import_smithy_client.expectString
  });
}, "de_BatchPutPropertyError");
var de_BatchPutPropertyErrorEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    errors: (_) => de_Errors(_, context)
  });
}, "de_BatchPutPropertyErrorEntry");
var de_ComponentResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    areAllCompositeComponentsReturned: import_smithy_client.expectBoolean,
    areAllPropertiesReturned: import_smithy_client.expectBoolean,
    componentName: import_smithy_client.expectString,
    componentTypeId: import_smithy_client.expectString,
    compositeComponents: import_smithy_client._json,
    definedIn: import_smithy_client.expectString,
    description: import_smithy_client.expectString,
    properties: (_) => de_PropertyResponses(_, context),
    propertyGroups: import_smithy_client._json,
    status: import_smithy_client._json,
    syncSource: import_smithy_client.expectString
  });
}, "de_ComponentResponse");
var de_ComponentsMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_ComponentResponse(value, context);
    return acc;
  }, {});
}, "de_ComponentsMap");
var de_ComponentTypeSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ComponentTypeSummary(entry, context);
  });
  return retVal;
}, "de_ComponentTypeSummaries");
var de_ComponentTypeSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    componentTypeId: import_smithy_client.expectString,
    componentTypeName: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    status: import_smithy_client._json,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_ComponentTypeSummary");
var de_DataType = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    allowedValues: (_) => de_DataValueList(_, context),
    nestedType: (_) => de_DataType(_, context),
    relationship: import_smithy_client._json,
    type: import_smithy_client.expectString,
    unitOfMeasure: import_smithy_client.expectString
  });
}, "de_DataType");
var de_DataValue = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    booleanValue: import_smithy_client.expectBoolean,
    doubleValue: import_smithy_client.limitedParseDouble,
    expression: import_smithy_client.expectString,
    integerValue: import_smithy_client.expectInt32,
    listValue: (_) => de_DataValueList(_, context),
    longValue: import_smithy_client.expectLong,
    mapValue: (_) => de_DataValueMap(_, context),
    relationshipValue: import_smithy_client._json,
    stringValue: import_smithy_client.expectString
  });
}, "de_DataValue");
var de_DataValueList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DataValue(entry, context);
  });
  return retVal;
}, "de_DataValueList");
var de_DataValueMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_DataValue(value, context);
    return acc;
  }, {});
}, "de_DataValueMap");
var de_EntitySummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_EntitySummary(entry, context);
  });
  return retVal;
}, "de_EntitySummaries");
var de_EntitySummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    entityId: import_smithy_client.expectString,
    entityName: import_smithy_client.expectString,
    hasChildEntities: import_smithy_client.expectBoolean,
    parentEntityId: import_smithy_client.expectString,
    status: import_smithy_client._json,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_EntitySummary");
var de_ErrorEntries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchPutPropertyErrorEntry(entry, context);
  });
  return retVal;
}, "de_ErrorEntries");
var de_Errors = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchPutPropertyError(entry, context);
  });
  return retVal;
}, "de_Errors");
var de_MetadataTransferJobSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MetadataTransferJobSummary(entry, context);
  });
  return retVal;
}, "de_MetadataTransferJobSummaries");
var de_MetadataTransferJobSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    metadataTransferJobId: import_smithy_client.expectString,
    progress: import_smithy_client._json,
    status: import_smithy_client._json,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_MetadataTransferJobSummary");
var de_PricingPlan = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    billableEntityCount: import_smithy_client.expectLong,
    bundleInformation: import_smithy_client._json,
    effectiveDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    pricingMode: import_smithy_client.expectString,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    updateReason: import_smithy_client.expectString
  });
}, "de_PricingPlan");
var de_PropertyDefinitionResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    configuration: import_smithy_client._json,
    dataType: (_) => de_DataType(_, context),
    defaultValue: (_) => de_DataValue(_, context),
    displayName: import_smithy_client.expectString,
    isExternalId: import_smithy_client.expectBoolean,
    isFinal: import_smithy_client.expectBoolean,
    isImported: import_smithy_client.expectBoolean,
    isInherited: import_smithy_client.expectBoolean,
    isRequiredInEntity: import_smithy_client.expectBoolean,
    isStoredExternally: import_smithy_client.expectBoolean,
    isTimeSeries: import_smithy_client.expectBoolean
  });
}, "de_PropertyDefinitionResponse");
var de_PropertyDefinitionsResponse = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce(
    (acc, [key, value]) => {
      if (value === null) {
        return acc;
      }
      acc[key] = de_PropertyDefinitionResponse(value, context);
      return acc;
    },
    {}
  );
}, "de_PropertyDefinitionsResponse");
var de_PropertyLatestValue = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    propertyReference: import_smithy_client._json,
    propertyValue: (_) => de_DataValue(_, context)
  });
}, "de_PropertyLatestValue");
var de_PropertyLatestValueMap = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_PropertyLatestValue(value, context);
    return acc;
  }, {});
}, "de_PropertyLatestValueMap");
var de_PropertyResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    areAllPropertyValuesReturned: import_smithy_client.expectBoolean,
    definition: (_) => de_PropertyDefinitionResponse(_, context),
    value: (_) => de_DataValue(_, context)
  });
}, "de_PropertyResponse");
var de_PropertyResponses = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_PropertyResponse(value, context);
    return acc;
  }, {});
}, "de_PropertyResponses");
var de_PropertySummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PropertySummary(entry, context);
  });
  return retVal;
}, "de_PropertySummaries");
var de_PropertySummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    areAllPropertyValuesReturned: import_smithy_client.expectBoolean,
    definition: (_) => de_PropertyDefinitionResponse(_, context),
    propertyName: import_smithy_client.expectString,
    value: (_) => de_DataValue(_, context)
  });
}, "de_PropertySummary");
var de_PropertyTableValue = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_DataValue(value, context);
    return acc;
  }, {});
}, "de_PropertyTableValue");
var de_PropertyValue = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    time: import_smithy_client.expectString,
    timestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    value: (_) => de_DataValue(_, context)
  });
}, "de_PropertyValue");
var de_PropertyValueEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    entityPropertyReference: import_smithy_client._json,
    propertyValues: (_) => de_PropertyValues(_, context)
  });
}, "de_PropertyValueEntry");
var de_PropertyValueHistory = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    entityPropertyReference: import_smithy_client._json,
    values: (_) => de_Values(_, context)
  });
}, "de_PropertyValueHistory");
var de_PropertyValueList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PropertyValueHistory(entry, context);
  });
  return retVal;
}, "de_PropertyValueList");
var de_PropertyValues = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PropertyValue(entry, context);
  });
  return retVal;
}, "de_PropertyValues");
var de_QueryResultValue = /* @__PURE__ */ __name((output, context) => {
  return output;
}, "de_QueryResultValue");
var de_Row = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    rowData: (_) => de_RowData(_, context)
  });
}, "de_Row");
var de_RowData = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_QueryResultValue(entry, context);
  });
  return retVal;
}, "de_RowData");
var de_Rows = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Row(entry, context);
  });
  return retVal;
}, "de_Rows");
var de_SceneSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SceneSummary(entry, context);
  });
  return retVal;
}, "de_SceneSummaries");
var de_SceneSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    contentLocation: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    sceneId: import_smithy_client.expectString,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_SceneSummary");
var de_SyncJobSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SyncJobSummary(entry, context);
  });
  return retVal;
}, "de_SyncJobSummaries");
var de_SyncJobSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    status: import_smithy_client._json,
    syncSource: import_smithy_client.expectString,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    workspaceId: import_smithy_client.expectString
  });
}, "de_SyncJobSummary");
var de_SyncResourceSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_SyncResourceSummary(entry, context);
  });
  return retVal;
}, "de_SyncResourceSummaries");
var de_SyncResourceSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    externalId: import_smithy_client.expectString,
    resourceId: import_smithy_client.expectString,
    resourceType: import_smithy_client.expectString,
    status: import_smithy_client._json,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_SyncResourceSummary");
var de_TabularPropertyValue = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PropertyTableValue(entry, context);
  });
  return retVal;
}, "de_TabularPropertyValue");
var de_TabularPropertyValues = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TabularPropertyValue(entry, context);
  });
  return retVal;
}, "de_TabularPropertyValues");
var de_Values = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PropertyValue(entry, context);
  });
  return retVal;
}, "de_Values");
var de_WorkspaceSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_WorkspaceSummary(entry, context);
  });
  return retVal;
}, "de_WorkspaceSummaries");
var de_WorkspaceSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    creationDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    linkedServices: import_smithy_client._json,
    updateDateTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    workspaceId: import_smithy_client.expectString
  });
}, "de_WorkspaceSummary");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _iR = "isRecursive";
var _rARN = "resourceARN";
var _tK = "tagKeys";
var _w = "workspace";
var _wI = "workspaceId";

// src/commands/BatchPutPropertyValuesCommand.ts
var _BatchPutPropertyValuesCommand = class _BatchPutPropertyValuesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "BatchPutPropertyValues", {}).n("IoTTwinMakerClient", "BatchPutPropertyValuesCommand").f(void 0, void 0).ser(se_BatchPutPropertyValuesCommand).de(de_BatchPutPropertyValuesCommand).build() {
};
__name(_BatchPutPropertyValuesCommand, "BatchPutPropertyValuesCommand");
var BatchPutPropertyValuesCommand = _BatchPutPropertyValuesCommand;

// src/commands/CancelMetadataTransferJobCommand.ts




var _CancelMetadataTransferJobCommand = class _CancelMetadataTransferJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "CancelMetadataTransferJob", {}).n("IoTTwinMakerClient", "CancelMetadataTransferJobCommand").f(void 0, void 0).ser(se_CancelMetadataTransferJobCommand).de(de_CancelMetadataTransferJobCommand).build() {
};
__name(_CancelMetadataTransferJobCommand, "CancelMetadataTransferJobCommand");
var CancelMetadataTransferJobCommand = _CancelMetadataTransferJobCommand;

// src/commands/CreateComponentTypeCommand.ts




var _CreateComponentTypeCommand = class _CreateComponentTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "CreateComponentType", {}).n("IoTTwinMakerClient", "CreateComponentTypeCommand").f(void 0, void 0).ser(se_CreateComponentTypeCommand).de(de_CreateComponentTypeCommand).build() {
};
__name(_CreateComponentTypeCommand, "CreateComponentTypeCommand");
var CreateComponentTypeCommand = _CreateComponentTypeCommand;

// src/commands/CreateEntityCommand.ts




var _CreateEntityCommand = class _CreateEntityCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "CreateEntity", {}).n("IoTTwinMakerClient", "CreateEntityCommand").f(void 0, void 0).ser(se_CreateEntityCommand).de(de_CreateEntityCommand).build() {
};
__name(_CreateEntityCommand, "CreateEntityCommand");
var CreateEntityCommand = _CreateEntityCommand;

// src/commands/CreateMetadataTransferJobCommand.ts




var _CreateMetadataTransferJobCommand = class _CreateMetadataTransferJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "CreateMetadataTransferJob", {}).n("IoTTwinMakerClient", "CreateMetadataTransferJobCommand").f(void 0, void 0).ser(se_CreateMetadataTransferJobCommand).de(de_CreateMetadataTransferJobCommand).build() {
};
__name(_CreateMetadataTransferJobCommand, "CreateMetadataTransferJobCommand");
var CreateMetadataTransferJobCommand = _CreateMetadataTransferJobCommand;

// src/commands/CreateSceneCommand.ts




var _CreateSceneCommand = class _CreateSceneCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "CreateScene", {}).n("IoTTwinMakerClient", "CreateSceneCommand").f(void 0, void 0).ser(se_CreateSceneCommand).de(de_CreateSceneCommand).build() {
};
__name(_CreateSceneCommand, "CreateSceneCommand");
var CreateSceneCommand = _CreateSceneCommand;

// src/commands/CreateSyncJobCommand.ts




var _CreateSyncJobCommand = class _CreateSyncJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "CreateSyncJob", {}).n("IoTTwinMakerClient", "CreateSyncJobCommand").f(void 0, void 0).ser(se_CreateSyncJobCommand).de(de_CreateSyncJobCommand).build() {
};
__name(_CreateSyncJobCommand, "CreateSyncJobCommand");
var CreateSyncJobCommand = _CreateSyncJobCommand;

// src/commands/CreateWorkspaceCommand.ts




var _CreateWorkspaceCommand = class _CreateWorkspaceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "CreateWorkspace", {}).n("IoTTwinMakerClient", "CreateWorkspaceCommand").f(void 0, void 0).ser(se_CreateWorkspaceCommand).de(de_CreateWorkspaceCommand).build() {
};
__name(_CreateWorkspaceCommand, "CreateWorkspaceCommand");
var CreateWorkspaceCommand = _CreateWorkspaceCommand;

// src/commands/DeleteComponentTypeCommand.ts




var _DeleteComponentTypeCommand = class _DeleteComponentTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "DeleteComponentType", {}).n("IoTTwinMakerClient", "DeleteComponentTypeCommand").f(void 0, void 0).ser(se_DeleteComponentTypeCommand).de(de_DeleteComponentTypeCommand).build() {
};
__name(_DeleteComponentTypeCommand, "DeleteComponentTypeCommand");
var DeleteComponentTypeCommand = _DeleteComponentTypeCommand;

// src/commands/DeleteEntityCommand.ts




var _DeleteEntityCommand = class _DeleteEntityCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "DeleteEntity", {}).n("IoTTwinMakerClient", "DeleteEntityCommand").f(void 0, void 0).ser(se_DeleteEntityCommand).de(de_DeleteEntityCommand).build() {
};
__name(_DeleteEntityCommand, "DeleteEntityCommand");
var DeleteEntityCommand = _DeleteEntityCommand;

// src/commands/DeleteSceneCommand.ts




var _DeleteSceneCommand = class _DeleteSceneCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "DeleteScene", {}).n("IoTTwinMakerClient", "DeleteSceneCommand").f(void 0, void 0).ser(se_DeleteSceneCommand).de(de_DeleteSceneCommand).build() {
};
__name(_DeleteSceneCommand, "DeleteSceneCommand");
var DeleteSceneCommand = _DeleteSceneCommand;

// src/commands/DeleteSyncJobCommand.ts




var _DeleteSyncJobCommand = class _DeleteSyncJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "DeleteSyncJob", {}).n("IoTTwinMakerClient", "DeleteSyncJobCommand").f(void 0, void 0).ser(se_DeleteSyncJobCommand).de(de_DeleteSyncJobCommand).build() {
};
__name(_DeleteSyncJobCommand, "DeleteSyncJobCommand");
var DeleteSyncJobCommand = _DeleteSyncJobCommand;

// src/commands/DeleteWorkspaceCommand.ts




var _DeleteWorkspaceCommand = class _DeleteWorkspaceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "DeleteWorkspace", {}).n("IoTTwinMakerClient", "DeleteWorkspaceCommand").f(void 0, void 0).ser(se_DeleteWorkspaceCommand).de(de_DeleteWorkspaceCommand).build() {
};
__name(_DeleteWorkspaceCommand, "DeleteWorkspaceCommand");
var DeleteWorkspaceCommand = _DeleteWorkspaceCommand;

// src/commands/ExecuteQueryCommand.ts




var _ExecuteQueryCommand = class _ExecuteQueryCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ExecuteQuery", {}).n("IoTTwinMakerClient", "ExecuteQueryCommand").f(void 0, void 0).ser(se_ExecuteQueryCommand).de(de_ExecuteQueryCommand).build() {
};
__name(_ExecuteQueryCommand, "ExecuteQueryCommand");
var ExecuteQueryCommand = _ExecuteQueryCommand;

// src/commands/GetComponentTypeCommand.ts




var _GetComponentTypeCommand = class _GetComponentTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "GetComponentType", {}).n("IoTTwinMakerClient", "GetComponentTypeCommand").f(void 0, void 0).ser(se_GetComponentTypeCommand).de(de_GetComponentTypeCommand).build() {
};
__name(_GetComponentTypeCommand, "GetComponentTypeCommand");
var GetComponentTypeCommand = _GetComponentTypeCommand;

// src/commands/GetEntityCommand.ts




var _GetEntityCommand = class _GetEntityCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "GetEntity", {}).n("IoTTwinMakerClient", "GetEntityCommand").f(void 0, void 0).ser(se_GetEntityCommand).de(de_GetEntityCommand).build() {
};
__name(_GetEntityCommand, "GetEntityCommand");
var GetEntityCommand = _GetEntityCommand;

// src/commands/GetMetadataTransferJobCommand.ts




var _GetMetadataTransferJobCommand = class _GetMetadataTransferJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "GetMetadataTransferJob", {}).n("IoTTwinMakerClient", "GetMetadataTransferJobCommand").f(void 0, void 0).ser(se_GetMetadataTransferJobCommand).de(de_GetMetadataTransferJobCommand).build() {
};
__name(_GetMetadataTransferJobCommand, "GetMetadataTransferJobCommand");
var GetMetadataTransferJobCommand = _GetMetadataTransferJobCommand;

// src/commands/GetPricingPlanCommand.ts




var _GetPricingPlanCommand = class _GetPricingPlanCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "GetPricingPlan", {}).n("IoTTwinMakerClient", "GetPricingPlanCommand").f(void 0, void 0).ser(se_GetPricingPlanCommand).de(de_GetPricingPlanCommand).build() {
};
__name(_GetPricingPlanCommand, "GetPricingPlanCommand");
var GetPricingPlanCommand = _GetPricingPlanCommand;

// src/commands/GetPropertyValueCommand.ts




var _GetPropertyValueCommand = class _GetPropertyValueCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "GetPropertyValue", {}).n("IoTTwinMakerClient", "GetPropertyValueCommand").f(void 0, void 0).ser(se_GetPropertyValueCommand).de(de_GetPropertyValueCommand).build() {
};
__name(_GetPropertyValueCommand, "GetPropertyValueCommand");
var GetPropertyValueCommand = _GetPropertyValueCommand;

// src/commands/GetPropertyValueHistoryCommand.ts




var _GetPropertyValueHistoryCommand = class _GetPropertyValueHistoryCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "GetPropertyValueHistory", {}).n("IoTTwinMakerClient", "GetPropertyValueHistoryCommand").f(void 0, void 0).ser(se_GetPropertyValueHistoryCommand).de(de_GetPropertyValueHistoryCommand).build() {
};
__name(_GetPropertyValueHistoryCommand, "GetPropertyValueHistoryCommand");
var GetPropertyValueHistoryCommand = _GetPropertyValueHistoryCommand;

// src/commands/GetSceneCommand.ts




var _GetSceneCommand = class _GetSceneCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "GetScene", {}).n("IoTTwinMakerClient", "GetSceneCommand").f(void 0, void 0).ser(se_GetSceneCommand).de(de_GetSceneCommand).build() {
};
__name(_GetSceneCommand, "GetSceneCommand");
var GetSceneCommand = _GetSceneCommand;

// src/commands/GetSyncJobCommand.ts




var _GetSyncJobCommand = class _GetSyncJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "GetSyncJob", {}).n("IoTTwinMakerClient", "GetSyncJobCommand").f(void 0, void 0).ser(se_GetSyncJobCommand).de(de_GetSyncJobCommand).build() {
};
__name(_GetSyncJobCommand, "GetSyncJobCommand");
var GetSyncJobCommand = _GetSyncJobCommand;

// src/commands/GetWorkspaceCommand.ts




var _GetWorkspaceCommand = class _GetWorkspaceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "GetWorkspace", {}).n("IoTTwinMakerClient", "GetWorkspaceCommand").f(void 0, void 0).ser(se_GetWorkspaceCommand).de(de_GetWorkspaceCommand).build() {
};
__name(_GetWorkspaceCommand, "GetWorkspaceCommand");
var GetWorkspaceCommand = _GetWorkspaceCommand;

// src/commands/ListComponentsCommand.ts




var _ListComponentsCommand = class _ListComponentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListComponents", {}).n("IoTTwinMakerClient", "ListComponentsCommand").f(void 0, void 0).ser(se_ListComponentsCommand).de(de_ListComponentsCommand).build() {
};
__name(_ListComponentsCommand, "ListComponentsCommand");
var ListComponentsCommand = _ListComponentsCommand;

// src/commands/ListComponentTypesCommand.ts




var _ListComponentTypesCommand = class _ListComponentTypesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListComponentTypes", {}).n("IoTTwinMakerClient", "ListComponentTypesCommand").f(void 0, void 0).ser(se_ListComponentTypesCommand).de(de_ListComponentTypesCommand).build() {
};
__name(_ListComponentTypesCommand, "ListComponentTypesCommand");
var ListComponentTypesCommand = _ListComponentTypesCommand;

// src/commands/ListEntitiesCommand.ts




var _ListEntitiesCommand = class _ListEntitiesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListEntities", {}).n("IoTTwinMakerClient", "ListEntitiesCommand").f(void 0, void 0).ser(se_ListEntitiesCommand).de(de_ListEntitiesCommand).build() {
};
__name(_ListEntitiesCommand, "ListEntitiesCommand");
var ListEntitiesCommand = _ListEntitiesCommand;

// src/commands/ListMetadataTransferJobsCommand.ts




var _ListMetadataTransferJobsCommand = class _ListMetadataTransferJobsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListMetadataTransferJobs", {}).n("IoTTwinMakerClient", "ListMetadataTransferJobsCommand").f(void 0, void 0).ser(se_ListMetadataTransferJobsCommand).de(de_ListMetadataTransferJobsCommand).build() {
};
__name(_ListMetadataTransferJobsCommand, "ListMetadataTransferJobsCommand");
var ListMetadataTransferJobsCommand = _ListMetadataTransferJobsCommand;

// src/commands/ListPropertiesCommand.ts




var _ListPropertiesCommand = class _ListPropertiesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListProperties", {}).n("IoTTwinMakerClient", "ListPropertiesCommand").f(void 0, void 0).ser(se_ListPropertiesCommand).de(de_ListPropertiesCommand).build() {
};
__name(_ListPropertiesCommand, "ListPropertiesCommand");
var ListPropertiesCommand = _ListPropertiesCommand;

// src/commands/ListScenesCommand.ts




var _ListScenesCommand = class _ListScenesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListScenes", {}).n("IoTTwinMakerClient", "ListScenesCommand").f(void 0, void 0).ser(se_ListScenesCommand).de(de_ListScenesCommand).build() {
};
__name(_ListScenesCommand, "ListScenesCommand");
var ListScenesCommand = _ListScenesCommand;

// src/commands/ListSyncJobsCommand.ts




var _ListSyncJobsCommand = class _ListSyncJobsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListSyncJobs", {}).n("IoTTwinMakerClient", "ListSyncJobsCommand").f(void 0, void 0).ser(se_ListSyncJobsCommand).de(de_ListSyncJobsCommand).build() {
};
__name(_ListSyncJobsCommand, "ListSyncJobsCommand");
var ListSyncJobsCommand = _ListSyncJobsCommand;

// src/commands/ListSyncResourcesCommand.ts




var _ListSyncResourcesCommand = class _ListSyncResourcesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListSyncResources", {}).n("IoTTwinMakerClient", "ListSyncResourcesCommand").f(void 0, void 0).ser(se_ListSyncResourcesCommand).de(de_ListSyncResourcesCommand).build() {
};
__name(_ListSyncResourcesCommand, "ListSyncResourcesCommand");
var ListSyncResourcesCommand = _ListSyncResourcesCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListTagsForResource", {}).n("IoTTwinMakerClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/ListWorkspacesCommand.ts




var _ListWorkspacesCommand = class _ListWorkspacesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "ListWorkspaces", {}).n("IoTTwinMakerClient", "ListWorkspacesCommand").f(void 0, void 0).ser(se_ListWorkspacesCommand).de(de_ListWorkspacesCommand).build() {
};
__name(_ListWorkspacesCommand, "ListWorkspacesCommand");
var ListWorkspacesCommand = _ListWorkspacesCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "TagResource", {}).n("IoTTwinMakerClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "UntagResource", {}).n("IoTTwinMakerClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateComponentTypeCommand.ts




var _UpdateComponentTypeCommand = class _UpdateComponentTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "UpdateComponentType", {}).n("IoTTwinMakerClient", "UpdateComponentTypeCommand").f(void 0, void 0).ser(se_UpdateComponentTypeCommand).de(de_UpdateComponentTypeCommand).build() {
};
__name(_UpdateComponentTypeCommand, "UpdateComponentTypeCommand");
var UpdateComponentTypeCommand = _UpdateComponentTypeCommand;

// src/commands/UpdateEntityCommand.ts




var _UpdateEntityCommand = class _UpdateEntityCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "UpdateEntity", {}).n("IoTTwinMakerClient", "UpdateEntityCommand").f(void 0, void 0).ser(se_UpdateEntityCommand).de(de_UpdateEntityCommand).build() {
};
__name(_UpdateEntityCommand, "UpdateEntityCommand");
var UpdateEntityCommand = _UpdateEntityCommand;

// src/commands/UpdatePricingPlanCommand.ts




var _UpdatePricingPlanCommand = class _UpdatePricingPlanCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "UpdatePricingPlan", {}).n("IoTTwinMakerClient", "UpdatePricingPlanCommand").f(void 0, void 0).ser(se_UpdatePricingPlanCommand).de(de_UpdatePricingPlanCommand).build() {
};
__name(_UpdatePricingPlanCommand, "UpdatePricingPlanCommand");
var UpdatePricingPlanCommand = _UpdatePricingPlanCommand;

// src/commands/UpdateSceneCommand.ts




var _UpdateSceneCommand = class _UpdateSceneCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "UpdateScene", {}).n("IoTTwinMakerClient", "UpdateSceneCommand").f(void 0, void 0).ser(se_UpdateSceneCommand).de(de_UpdateSceneCommand).build() {
};
__name(_UpdateSceneCommand, "UpdateSceneCommand");
var UpdateSceneCommand = _UpdateSceneCommand;

// src/commands/UpdateWorkspaceCommand.ts




var _UpdateWorkspaceCommand = class _UpdateWorkspaceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTTwinMaker", "UpdateWorkspace", {}).n("IoTTwinMakerClient", "UpdateWorkspaceCommand").f(void 0, void 0).ser(se_UpdateWorkspaceCommand).de(de_UpdateWorkspaceCommand).build() {
};
__name(_UpdateWorkspaceCommand, "UpdateWorkspaceCommand");
var UpdateWorkspaceCommand = _UpdateWorkspaceCommand;

// src/IoTTwinMaker.ts
var commands = {
  BatchPutPropertyValuesCommand,
  CancelMetadataTransferJobCommand,
  CreateComponentTypeCommand,
  CreateEntityCommand,
  CreateMetadataTransferJobCommand,
  CreateSceneCommand,
  CreateSyncJobCommand,
  CreateWorkspaceCommand,
  DeleteComponentTypeCommand,
  DeleteEntityCommand,
  DeleteSceneCommand,
  DeleteSyncJobCommand,
  DeleteWorkspaceCommand,
  ExecuteQueryCommand,
  GetComponentTypeCommand,
  GetEntityCommand,
  GetMetadataTransferJobCommand,
  GetPricingPlanCommand,
  GetPropertyValueCommand,
  GetPropertyValueHistoryCommand,
  GetSceneCommand,
  GetSyncJobCommand,
  GetWorkspaceCommand,
  ListComponentsCommand,
  ListComponentTypesCommand,
  ListEntitiesCommand,
  ListMetadataTransferJobsCommand,
  ListPropertiesCommand,
  ListScenesCommand,
  ListSyncJobsCommand,
  ListSyncResourcesCommand,
  ListTagsForResourceCommand,
  ListWorkspacesCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateComponentTypeCommand,
  UpdateEntityCommand,
  UpdatePricingPlanCommand,
  UpdateSceneCommand,
  UpdateWorkspaceCommand
};
var _IoTTwinMaker = class _IoTTwinMaker extends IoTTwinMakerClient {
};
__name(_IoTTwinMaker, "IoTTwinMaker");
var IoTTwinMaker = _IoTTwinMaker;
(0, import_smithy_client.createAggregatedClient)(commands, IoTTwinMaker);

// src/pagination/ExecuteQueryPaginator.ts

var paginateExecuteQuery = (0, import_core.createPaginator)(IoTTwinMakerClient, ExecuteQueryCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/GetPropertyValueHistoryPaginator.ts

var paginateGetPropertyValueHistory = (0, import_core.createPaginator)(IoTTwinMakerClient, GetPropertyValueHistoryCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/GetPropertyValuePaginator.ts

var paginateGetPropertyValue = (0, import_core.createPaginator)(IoTTwinMakerClient, GetPropertyValueCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListComponentTypesPaginator.ts

var paginateListComponentTypes = (0, import_core.createPaginator)(IoTTwinMakerClient, ListComponentTypesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListComponentsPaginator.ts

var paginateListComponents = (0, import_core.createPaginator)(IoTTwinMakerClient, ListComponentsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListEntitiesPaginator.ts

var paginateListEntities = (0, import_core.createPaginator)(IoTTwinMakerClient, ListEntitiesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListMetadataTransferJobsPaginator.ts

var paginateListMetadataTransferJobs = (0, import_core.createPaginator)(IoTTwinMakerClient, ListMetadataTransferJobsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListPropertiesPaginator.ts

var paginateListProperties = (0, import_core.createPaginator)(IoTTwinMakerClient, ListPropertiesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListScenesPaginator.ts

var paginateListScenes = (0, import_core.createPaginator)(IoTTwinMakerClient, ListScenesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListSyncJobsPaginator.ts

var paginateListSyncJobs = (0, import_core.createPaginator)(IoTTwinMakerClient, ListSyncJobsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListSyncResourcesPaginator.ts

var paginateListSyncResources = (0, import_core.createPaginator)(IoTTwinMakerClient, ListSyncResourcesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListWorkspacesPaginator.ts

var paginateListWorkspaces = (0, import_core.createPaginator)(IoTTwinMakerClient, ListWorkspacesCommand, "nextToken", "nextToken", "maxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  IoTTwinMakerServiceException,
  __Client,
  IoTTwinMakerClient,
  IoTTwinMaker,
  $Command,
  BatchPutPropertyValuesCommand,
  CancelMetadataTransferJobCommand,
  CreateComponentTypeCommand,
  CreateEntityCommand,
  CreateMetadataTransferJobCommand,
  CreateSceneCommand,
  CreateSyncJobCommand,
  CreateWorkspaceCommand,
  DeleteComponentTypeCommand,
  DeleteEntityCommand,
  DeleteSceneCommand,
  DeleteSyncJobCommand,
  DeleteWorkspaceCommand,
  ExecuteQueryCommand,
  GetComponentTypeCommand,
  GetEntityCommand,
  GetMetadataTransferJobCommand,
  GetPricingPlanCommand,
  GetPropertyValueCommand,
  GetPropertyValueHistoryCommand,
  GetSceneCommand,
  GetSyncJobCommand,
  GetWorkspaceCommand,
  ListComponentTypesCommand,
  ListComponentsCommand,
  ListEntitiesCommand,
  ListMetadataTransferJobsCommand,
  ListPropertiesCommand,
  ListScenesCommand,
  ListSyncJobsCommand,
  ListSyncResourcesCommand,
  ListTagsForResourceCommand,
  ListWorkspacesCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateComponentTypeCommand,
  UpdateEntityCommand,
  UpdatePricingPlanCommand,
  UpdateSceneCommand,
  UpdateWorkspaceCommand,
  paginateExecuteQuery,
  paginateGetPropertyValueHistory,
  paginateGetPropertyValue,
  paginateListComponentTypes,
  paginateListComponents,
  paginateListEntities,
  paginateListMetadataTransferJobs,
  paginateListProperties,
  paginateListScenes,
  paginateListSyncJobs,
  paginateListSyncResources,
  paginateListWorkspaces,
  AccessDeniedException,
  InternalServerException,
  ResourceNotFoundException,
  ThrottlingException,
  ValidationException,
  ErrorCode,
  MetadataTransferJobState,
  ConflictException,
  Scope,
  Type,
  GroupType,
  State,
  ServiceQuotaExceededException,
  PropertyUpdateType,
  PropertyGroupUpdateType,
  DestinationType,
  IotSiteWiseSourceConfigurationFilter,
  IotTwinMakerSourceConfigurationFilter,
  SourceType,
  SyncJobState,
  ColumnType,
  QueryTimeoutException,
  PricingTier,
  PricingMode,
  UpdateReason,
  ConnectorFailureException,
  ConnectorTimeoutException,
  Order,
  InterpolationType,
  OrderByTime,
  SceneErrorCode,
  ListComponentTypesFilter,
  ListEntitiesFilter,
  ListMetadataTransferJobsFilter,
  SyncResourceType,
  SyncResourceState,
  SyncResourceFilter,
  TooManyTagsException,
  ComponentUpdateType,
  ParentEntityUpdateType
});

