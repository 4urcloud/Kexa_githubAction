import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { DetectiveServiceException as __BaseException } from "./DetectiveServiceException";
export const ErrorCode = {
    InternalError: "INTERNAL_ERROR",
    InvalidGraphArn: "INVALID_GRAPH_ARN",
    InvalidRequestBody: "INVALID_REQUEST_BODY",
};
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.ErrorCode = opts.ErrorCode;
        this.ErrorCodeReason = opts.ErrorCodeReason;
        this.SubErrorCode = opts.SubErrorCode;
        this.SubErrorCodeReason = opts.SubErrorCodeReason;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.ErrorCode = opts.ErrorCode;
        this.ErrorCodeReason = opts.ErrorCodeReason;
    }
}
export const DatasourcePackage = {
    ASFF_SECURITYHUB_FINDING: "ASFF_SECURITYHUB_FINDING",
    DETECTIVE_CORE: "DETECTIVE_CORE",
    EKS_AUDIT: "EKS_AUDIT",
};
export const DatasourcePackageIngestState = {
    DISABLED: "DISABLED",
    STARTED: "STARTED",
    STOPPED: "STOPPED",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.Resources = opts.Resources;
    }
}
export const MemberDisabledReason = {
    VOLUME_TOO_HIGH: "VOLUME_TOO_HIGH",
    VOLUME_UNKNOWN: "VOLUME_UNKNOWN",
};
export const InvitationType = {
    INVITATION: "INVITATION",
    ORGANIZATION: "ORGANIZATION",
};
export const MemberStatus = {
    ACCEPTED_BUT_DISABLED: "ACCEPTED_BUT_DISABLED",
    ENABLED: "ENABLED",
    INVITED: "INVITED",
    VERIFICATION_FAILED: "VERIFICATION_FAILED",
    VERIFICATION_IN_PROGRESS: "VERIFICATION_IN_PROGRESS",
};
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export const EntityType = {
    IAM_ROLE: "IAM_ROLE",
    IAM_USER: "IAM_USER",
};
export const Severity = {
    CRITICAL: "CRITICAL",
    HIGH: "HIGH",
    INFORMATIONAL: "INFORMATIONAL",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
export const State = {
    ACTIVE: "ACTIVE",
    ARCHIVED: "ARCHIVED",
};
export const Status = {
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    SUCCESSFUL: "SUCCESSFUL",
};
export const IndicatorType = {
    FLAGGED_IP_ADDRESS: "FLAGGED_IP_ADDRESS",
    IMPOSSIBLE_TRAVEL: "IMPOSSIBLE_TRAVEL",
    NEW_ASO: "NEW_ASO",
    NEW_GEOLOCATION: "NEW_GEOLOCATION",
    NEW_USER_AGENT: "NEW_USER_AGENT",
    RELATED_FINDING: "RELATED_FINDING",
    RELATED_FINDING_GROUP: "RELATED_FINDING_GROUP",
    TTP_OBSERVED: "TTP_OBSERVED",
};
export const Reason = {
    AWS_THREAT_INTELLIGENCE: "AWS_THREAT_INTELLIGENCE",
};
export const Field = {
    CREATED_TIME: "CREATED_TIME",
    SEVERITY: "SEVERITY",
    STATUS: "STATUS",
};
export const SortOrder = {
    ASC: "ASC",
    DESC: "DESC",
};
export const AccountFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmailAddress && { EmailAddress: SENSITIVE_STRING }),
});
export const CreateMembersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Message && { Message: SENSITIVE_STRING }),
    ...(obj.Accounts && { Accounts: obj.Accounts.map((item) => AccountFilterSensitiveLog(item)) }),
});
export const MemberDetailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EmailAddress && { EmailAddress: SENSITIVE_STRING }),
});
export const CreateMembersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Members && { Members: obj.Members.map((item) => MemberDetailFilterSensitiveLog(item)) }),
});
export const GetMembersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MemberDetails && { MemberDetails: obj.MemberDetails.map((item) => MemberDetailFilterSensitiveLog(item)) }),
});
export const ListInvitationsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Invitations && { Invitations: obj.Invitations.map((item) => MemberDetailFilterSensitiveLog(item)) }),
});
export const ListMembersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MemberDetails && { MemberDetails: obj.MemberDetails.map((item) => MemberDetailFilterSensitiveLog(item)) }),
});
