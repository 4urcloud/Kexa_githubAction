import {
  ExceptionOptionType as __ExceptionOptionType,
  LazyJsonString as __LazyJsonString,
} from "@smithy/smithy-client";
import { GrafanaServiceException as __BaseException } from "./GrafanaServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AccountAccessType: {
  readonly CURRENT_ACCOUNT: "CURRENT_ACCOUNT";
  readonly ORGANIZATION: "ORGANIZATION";
};
export type AccountAccessType =
  (typeof AccountAccessType)[keyof typeof AccountAccessType];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CreateWorkspaceApiKeyRequest {
  keyName: string | undefined;
  keyRole: string | undefined;
  secondsToLive: number | undefined;
  workspaceId: string | undefined;
}
export interface CreateWorkspaceApiKeyResponse {
  keyName: string | undefined;
  key: string | undefined;
  workspaceId: string | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  $retryable: {};
  retryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: string | undefined;
  serviceCode: string | undefined;
  quotaCode: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  $retryable: {};
  serviceCode?: string;
  quotaCode?: string;
  retryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "CANNOT_PARSE";
  readonly FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED";
  readonly OTHER: "OTHER";
  readonly UNKNOWN_OPERATION: "UNKNOWN_OPERATION";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  reason: ValidationExceptionReason | undefined;
  fieldList?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteWorkspaceApiKeyRequest {
  keyName: string | undefined;
  workspaceId: string | undefined;
}
export interface DeleteWorkspaceApiKeyResponse {
  keyName: string | undefined;
  workspaceId: string | undefined;
}
export interface AssertionAttributes {
  name?: string;
  login?: string;
  email?: string;
  groups?: string;
  role?: string;
  org?: string;
}
export declare const LicenseType: {
  readonly ENTERPRISE: "ENTERPRISE";
  readonly ENTERPRISE_FREE_TRIAL: "ENTERPRISE_FREE_TRIAL";
};
export type LicenseType = (typeof LicenseType)[keyof typeof LicenseType];
export interface AssociateLicenseRequest {
  workspaceId: string | undefined;
  licenseType: LicenseType | undefined;
  grafanaToken?: string;
}
export declare const AuthenticationProviderTypes: {
  readonly AWS_SSO: "AWS_SSO";
  readonly SAML: "SAML";
};
export type AuthenticationProviderTypes =
  (typeof AuthenticationProviderTypes)[keyof typeof AuthenticationProviderTypes];
export declare const SamlConfigurationStatus: {
  readonly CONFIGURED: "CONFIGURED";
  readonly NOT_CONFIGURED: "NOT_CONFIGURED";
};
export type SamlConfigurationStatus =
  (typeof SamlConfigurationStatus)[keyof typeof SamlConfigurationStatus];
export interface AuthenticationSummary {
  providers: AuthenticationProviderTypes[] | undefined;
  samlConfigurationStatus?: SamlConfigurationStatus;
}
export declare const DataSourceType: {
  readonly AMAZON_OPENSEARCH_SERVICE: "AMAZON_OPENSEARCH_SERVICE";
  readonly ATHENA: "ATHENA";
  readonly CLOUDWATCH: "CLOUDWATCH";
  readonly PROMETHEUS: "PROMETHEUS";
  readonly REDSHIFT: "REDSHIFT";
  readonly SITEWISE: "SITEWISE";
  readonly TIMESTREAM: "TIMESTREAM";
  readonly TWINMAKER: "TWINMAKER";
  readonly XRAY: "XRAY";
};
export type DataSourceType =
  (typeof DataSourceType)[keyof typeof DataSourceType];
export interface NetworkAccessConfiguration {
  prefixListIds: string[] | undefined;
  vpceIds: string[] | undefined;
}
export declare const NotificationDestinationType: {
  readonly SNS: "SNS";
};
export type NotificationDestinationType =
  (typeof NotificationDestinationType)[keyof typeof NotificationDestinationType];
export declare const PermissionType: {
  readonly CUSTOMER_MANAGED: "CUSTOMER_MANAGED";
  readonly SERVICE_MANAGED: "SERVICE_MANAGED";
};
export type PermissionType =
  (typeof PermissionType)[keyof typeof PermissionType];
export declare const WorkspaceStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly DELETING: "DELETING";
  readonly DELETION_FAILED: "DELETION_FAILED";
  readonly FAILED: "FAILED";
  readonly LICENSE_REMOVAL_FAILED: "LICENSE_REMOVAL_FAILED";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
  readonly UPGRADE_FAILED: "UPGRADE_FAILED";
  readonly UPGRADING: "UPGRADING";
  readonly VERSION_UPDATE_FAILED: "VERSION_UPDATE_FAILED";
  readonly VERSION_UPDATING: "VERSION_UPDATING";
};
export type WorkspaceStatus =
  (typeof WorkspaceStatus)[keyof typeof WorkspaceStatus];
export interface VpcConfiguration {
  securityGroupIds: string[] | undefined;
  subnetIds: string[] | undefined;
}
export interface WorkspaceDescription {
  accountAccessType?: AccountAccessType;
  created: Date | undefined;
  dataSources: DataSourceType[] | undefined;
  description?: string;
  endpoint: string | undefined;
  grafanaVersion: string | undefined;
  id: string | undefined;
  modified: Date | undefined;
  name?: string;
  organizationRoleName?: string;
  notificationDestinations?: NotificationDestinationType[];
  organizationalUnits?: string[];
  permissionType?: PermissionType;
  stackSetName?: string;
  status: WorkspaceStatus | undefined;
  workspaceRoleArn?: string;
  licenseType?: LicenseType;
  freeTrialConsumed?: boolean;
  licenseExpiration?: Date;
  freeTrialExpiration?: Date;
  authentication: AuthenticationSummary | undefined;
  tags?: Record<string, string>;
  vpcConfiguration?: VpcConfiguration;
  networkAccessControl?: NetworkAccessConfiguration;
  grafanaToken?: string;
}
export interface AssociateLicenseResponse {
  workspace: WorkspaceDescription | undefined;
}
export interface DescribeWorkspaceAuthenticationRequest {
  workspaceId: string | undefined;
}
export interface AwsSsoAuthentication {
  ssoClientId?: string;
}
export type IdpMetadata =
  | IdpMetadata.UrlMember
  | IdpMetadata.XmlMember
  | IdpMetadata.$UnknownMember;
export declare namespace IdpMetadata {
  interface UrlMember {
    url: string;
    xml?: never;
    $unknown?: never;
  }
  interface XmlMember {
    url?: never;
    xml: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    url?: never;
    xml?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    url: (value: string) => T;
    xml: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: IdpMetadata, visitor: Visitor<T>) => T;
}
export interface RoleValues {
  editor?: string[];
  admin?: string[];
}
export interface SamlConfiguration {
  idpMetadata: IdpMetadata | undefined;
  assertionAttributes?: AssertionAttributes;
  roleValues?: RoleValues;
  allowedOrganizations?: string[];
  loginValidityDuration?: number;
}
export interface SamlAuthentication {
  status: SamlConfigurationStatus | undefined;
  configuration?: SamlConfiguration;
}
export interface AuthenticationDescription {
  providers: AuthenticationProviderTypes[] | undefined;
  saml?: SamlAuthentication;
  awsSso?: AwsSsoAuthentication;
}
export interface DescribeWorkspaceAuthenticationResponse {
  authentication: AuthenticationDescription | undefined;
}
export interface UpdateWorkspaceAuthenticationRequest {
  workspaceId: string | undefined;
  authenticationProviders: AuthenticationProviderTypes[] | undefined;
  samlConfiguration?: SamlConfiguration;
}
export interface UpdateWorkspaceAuthenticationResponse {
  authentication: AuthenticationDescription | undefined;
}
export interface DescribeWorkspaceConfigurationRequest {
  workspaceId: string | undefined;
}
export interface DescribeWorkspaceConfigurationResponse {
  configuration: __LazyJsonString | string | undefined;
  grafanaVersion?: string;
}
export interface UpdateWorkspaceConfigurationRequest {
  configuration: __LazyJsonString | string | undefined;
  workspaceId: string | undefined;
  grafanaVersion?: string;
}
export interface UpdateWorkspaceConfigurationResponse {}
export interface DisassociateLicenseRequest {
  workspaceId: string | undefined;
  licenseType: LicenseType | undefined;
}
export interface DisassociateLicenseResponse {
  workspace: WorkspaceDescription | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface ListVersionsRequest {
  maxResults?: number;
  nextToken?: string;
  workspaceId?: string;
}
export interface ListVersionsResponse {
  nextToken?: string;
  grafanaVersions?: string[];
}
export declare const UserType: {
  readonly SSO_GROUP: "SSO_GROUP";
  readonly SSO_USER: "SSO_USER";
};
export type UserType = (typeof UserType)[keyof typeof UserType];
export interface ListPermissionsRequest {
  maxResults?: number;
  nextToken?: string;
  userType?: UserType;
  userId?: string;
  groupId?: string;
  workspaceId: string | undefined;
}
export declare const Role: {
  readonly ADMIN: "ADMIN";
  readonly EDITOR: "EDITOR";
  readonly VIEWER: "VIEWER";
};
export type Role = (typeof Role)[keyof typeof Role];
export interface User {
  id: string | undefined;
  type: UserType | undefined;
}
export interface PermissionEntry {
  user: User | undefined;
  role: Role | undefined;
}
export interface ListPermissionsResponse {
  nextToken?: string;
  permissions: PermissionEntry[] | undefined;
}
export declare const UpdateAction: {
  readonly ADD: "ADD";
  readonly REVOKE: "REVOKE";
};
export type UpdateAction = (typeof UpdateAction)[keyof typeof UpdateAction];
export interface UpdateInstruction {
  action: UpdateAction | undefined;
  role: Role | undefined;
  users: User[] | undefined;
}
export interface UpdatePermissionsRequest {
  updateInstructionBatch: UpdateInstruction[] | undefined;
  workspaceId: string | undefined;
}
export interface UpdateError {
  code: number | undefined;
  message: string | undefined;
  causedBy: UpdateInstruction | undefined;
}
export interface UpdatePermissionsResponse {
  errors: UpdateError[] | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface CreateWorkspaceRequest {
  accountAccessType: AccountAccessType | undefined;
  clientToken?: string;
  organizationRoleName?: string;
  permissionType: PermissionType | undefined;
  stackSetName?: string;
  workspaceDataSources?: DataSourceType[];
  workspaceDescription?: string;
  workspaceName?: string;
  workspaceNotificationDestinations?: NotificationDestinationType[];
  workspaceOrganizationalUnits?: string[];
  workspaceRoleArn?: string;
  authenticationProviders: AuthenticationProviderTypes[] | undefined;
  tags?: Record<string, string>;
  vpcConfiguration?: VpcConfiguration;
  configuration?: __LazyJsonString | string;
  networkAccessControl?: NetworkAccessConfiguration;
  grafanaVersion?: string;
}
export interface CreateWorkspaceResponse {
  workspace: WorkspaceDescription | undefined;
}
export interface DeleteWorkspaceRequest {
  workspaceId: string | undefined;
}
export interface DeleteWorkspaceResponse {
  workspace: WorkspaceDescription | undefined;
}
export interface DescribeWorkspaceRequest {
  workspaceId: string | undefined;
}
export interface DescribeWorkspaceResponse {
  workspace: WorkspaceDescription | undefined;
}
export interface ListWorkspacesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface WorkspaceSummary {
  created: Date | undefined;
  description?: string;
  endpoint: string | undefined;
  grafanaVersion: string | undefined;
  id: string | undefined;
  modified: Date | undefined;
  name?: string;
  notificationDestinations?: NotificationDestinationType[];
  status: WorkspaceStatus | undefined;
  authentication: AuthenticationSummary | undefined;
  tags?: Record<string, string>;
  licenseType?: LicenseType;
  grafanaToken?: string;
}
export interface ListWorkspacesResponse {
  workspaces: WorkspaceSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateWorkspaceRequest {
  accountAccessType?: AccountAccessType;
  organizationRoleName?: string;
  permissionType?: PermissionType;
  stackSetName?: string;
  workspaceDataSources?: DataSourceType[];
  workspaceDescription?: string;
  workspaceId: string | undefined;
  workspaceName?: string;
  workspaceNotificationDestinations?: NotificationDestinationType[];
  workspaceOrganizationalUnits?: string[];
  workspaceRoleArn?: string;
  vpcConfiguration?: VpcConfiguration;
  removeVpcConfiguration?: boolean;
  networkAccessControl?: NetworkAccessConfiguration;
  removeNetworkAccessConfiguration?: boolean;
}
export interface UpdateWorkspaceResponse {
  workspace: WorkspaceDescription | undefined;
}
export declare const CreateWorkspaceApiKeyResponseFilterSensitiveLog: (
  obj: CreateWorkspaceApiKeyResponse
) => any;
export declare const WorkspaceDescriptionFilterSensitiveLog: (
  obj: WorkspaceDescription
) => any;
export declare const AssociateLicenseResponseFilterSensitiveLog: (
  obj: AssociateLicenseResponse
) => any;
export declare const RoleValuesFilterSensitiveLog: (obj: RoleValues) => any;
export declare const SamlConfigurationFilterSensitiveLog: (
  obj: SamlConfiguration
) => any;
export declare const SamlAuthenticationFilterSensitiveLog: (
  obj: SamlAuthentication
) => any;
export declare const AuthenticationDescriptionFilterSensitiveLog: (
  obj: AuthenticationDescription
) => any;
export declare const DescribeWorkspaceAuthenticationResponseFilterSensitiveLog: (
  obj: DescribeWorkspaceAuthenticationResponse
) => any;
export declare const UpdateWorkspaceAuthenticationRequestFilterSensitiveLog: (
  obj: UpdateWorkspaceAuthenticationRequest
) => any;
export declare const UpdateWorkspaceAuthenticationResponseFilterSensitiveLog: (
  obj: UpdateWorkspaceAuthenticationResponse
) => any;
export declare const DisassociateLicenseResponseFilterSensitiveLog: (
  obj: DisassociateLicenseResponse
) => any;
export declare const CreateWorkspaceRequestFilterSensitiveLog: (
  obj: CreateWorkspaceRequest
) => any;
export declare const CreateWorkspaceResponseFilterSensitiveLog: (
  obj: CreateWorkspaceResponse
) => any;
export declare const DeleteWorkspaceResponseFilterSensitiveLog: (
  obj: DeleteWorkspaceResponse
) => any;
export declare const DescribeWorkspaceResponseFilterSensitiveLog: (
  obj: DescribeWorkspaceResponse
) => any;
export declare const WorkspaceSummaryFilterSensitiveLog: (
  obj: WorkspaceSummary
) => any;
export declare const ListWorkspacesResponseFilterSensitiveLog: (
  obj: ListWorkspacesResponse
) => any;
export declare const UpdateWorkspaceRequestFilterSensitiveLog: (
  obj: UpdateWorkspaceRequest
) => any;
export declare const UpdateWorkspaceResponseFilterSensitiveLog: (
  obj: UpdateWorkspaceResponse
) => any;
