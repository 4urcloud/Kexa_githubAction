import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AppflowServiceException as __BaseException } from "./AppflowServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AggregationType: {
  readonly NONE: "None";
  readonly SINGLE_FILE: "SingleFile";
};
export type AggregationType =
  (typeof AggregationType)[keyof typeof AggregationType];
export interface AggregationConfig {
  aggregationType?: AggregationType;
  targetFileSize?: number;
}
export declare const AmplitudeConnectorOperator: {
  readonly BETWEEN: "BETWEEN";
};
export type AmplitudeConnectorOperator =
  (typeof AmplitudeConnectorOperator)[keyof typeof AmplitudeConnectorOperator];
export interface AmplitudeConnectorProfileCredentials {
  apiKey: string | undefined;
  secretKey: string | undefined;
}
export interface AmplitudeConnectorProfileProperties {}
export interface AmplitudeMetadata {}
export interface AmplitudeSourceProperties {
  object: string | undefined;
}
export interface ApiKeyCredentials {
  apiKey: string | undefined;
  apiSecretKey?: string;
}
export interface AuthParameter {
  key?: string;
  isRequired?: boolean;
  label?: string;
  description?: string;
  isSensitiveField?: boolean;
  connectorSuppliedValues?: string[];
}
export interface CustomAuthConfig {
  customAuthenticationType?: string;
  authParameters?: AuthParameter[];
}
export declare const OAuth2CustomPropType: {
  readonly AUTH_URL: "AUTH_URL";
  readonly TOKEN_URL: "TOKEN_URL";
};
export type OAuth2CustomPropType =
  (typeof OAuth2CustomPropType)[keyof typeof OAuth2CustomPropType];
export interface OAuth2CustomParameter {
  key?: string;
  isRequired?: boolean;
  label?: string;
  description?: string;
  isSensitiveField?: boolean;
  connectorSuppliedValues?: string[];
  type?: OAuth2CustomPropType;
}
export declare const OAuth2GrantType: {
  readonly AUTHORIZATION_CODE: "AUTHORIZATION_CODE";
  readonly CLIENT_CREDENTIALS: "CLIENT_CREDENTIALS";
  readonly JWT_BEARER: "JWT_BEARER";
};
export type OAuth2GrantType =
  (typeof OAuth2GrantType)[keyof typeof OAuth2GrantType];
export interface OAuth2Defaults {
  oauthScopes?: string[];
  tokenUrls?: string[];
  authCodeUrls?: string[];
  oauth2GrantTypesSupported?: OAuth2GrantType[];
  oauth2CustomProperties?: OAuth2CustomParameter[];
}
export interface AuthenticationConfig {
  isBasicAuthSupported?: boolean;
  isApiKeyAuthSupported?: boolean;
  isOAuth2Supported?: boolean;
  isCustomAuthSupported?: boolean;
  oAuth2Defaults?: OAuth2Defaults;
  customAuthConfigs?: CustomAuthConfig[];
}
export declare const AuthenticationType: {
  readonly APIKEY: "APIKEY";
  readonly BASIC: "BASIC";
  readonly CUSTOM: "CUSTOM";
  readonly OAUTH2: "OAUTH2";
};
export type AuthenticationType =
  (typeof AuthenticationType)[keyof typeof AuthenticationType];
export interface BasicAuthCredentials {
  username: string | undefined;
  password: string | undefined;
}
export interface CancelFlowExecutionsRequest {
  flowName: string | undefined;
  executionIds?: string[];
}
export interface CancelFlowExecutionsResponse {
  invalidExecutions?: string[];
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const CatalogType: {
  readonly GLUE: "GLUE";
};
export type CatalogType = (typeof CatalogType)[keyof typeof CatalogType];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const ConnectionMode: {
  readonly PRIVATE: "Private";
  readonly PUBLIC: "Public";
};
export type ConnectionMode =
  (typeof ConnectionMode)[keyof typeof ConnectionMode];
export declare class ConnectorAuthenticationException extends __BaseException {
  readonly name: "ConnectorAuthenticationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConnectorAuthenticationException,
      __BaseException
    >
  );
}
export interface CustomerProfilesMetadata {}
export interface DatadogMetadata {}
export interface DynatraceMetadata {}
export interface EventBridgeMetadata {}
export interface GoogleAnalyticsMetadata {
  oAuthScopes?: string[];
}
export interface HoneycodeMetadata {
  oAuthScopes?: string[];
}
export interface InforNexusMetadata {}
export interface MarketoMetadata {}
export interface PardotMetadata {}
export interface RedshiftMetadata {}
export interface S3Metadata {}
export declare const SalesforceDataTransferApi: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly BULKV2: "BULKV2";
  readonly REST_SYNC: "REST_SYNC";
};
export type SalesforceDataTransferApi =
  (typeof SalesforceDataTransferApi)[keyof typeof SalesforceDataTransferApi];
export interface SalesforceMetadata {
  oAuthScopes?: string[];
  dataTransferApis?: SalesforceDataTransferApi[];
  oauth2GrantTypesSupported?: OAuth2GrantType[];
}
export interface SAPODataMetadata {}
export interface ServiceNowMetadata {}
export interface SingularMetadata {}
export interface SlackMetadata {
  oAuthScopes?: string[];
}
export interface SnowflakeMetadata {
  supportedRegions?: string[];
}
export interface TrendmicroMetadata {}
export interface UpsolverMetadata {}
export interface VeevaMetadata {}
export interface ZendeskMetadata {
  oAuthScopes?: string[];
}
export interface ConnectorMetadata {
  Amplitude?: AmplitudeMetadata;
  Datadog?: DatadogMetadata;
  Dynatrace?: DynatraceMetadata;
  GoogleAnalytics?: GoogleAnalyticsMetadata;
  InforNexus?: InforNexusMetadata;
  Marketo?: MarketoMetadata;
  Redshift?: RedshiftMetadata;
  S3?: S3Metadata;
  Salesforce?: SalesforceMetadata;
  ServiceNow?: ServiceNowMetadata;
  Singular?: SingularMetadata;
  Slack?: SlackMetadata;
  Snowflake?: SnowflakeMetadata;
  Trendmicro?: TrendmicroMetadata;
  Veeva?: VeevaMetadata;
  Zendesk?: ZendeskMetadata;
  EventBridge?: EventBridgeMetadata;
  Upsolver?: UpsolverMetadata;
  CustomerProfiles?: CustomerProfilesMetadata;
  Honeycode?: HoneycodeMetadata;
  SAPOData?: SAPODataMetadata;
  Pardot?: PardotMetadata;
}
export interface LambdaConnectorProvisioningConfig {
  lambdaArn: string | undefined;
}
export interface ConnectorProvisioningConfig {
  lambda?: LambdaConnectorProvisioningConfig;
}
export declare const ConnectorProvisioningType: {
  readonly LAMBDA: "LAMBDA";
};
export type ConnectorProvisioningType =
  (typeof ConnectorProvisioningType)[keyof typeof ConnectorProvisioningType];
export interface ConnectorRuntimeSetting {
  key?: string;
  dataType?: string;
  isRequired?: boolean;
  label?: string;
  description?: string;
  scope?: string;
  connectorSuppliedValueOptions?: string[];
}
export declare const ConnectorType: {
  readonly AMPLITUDE: "Amplitude";
  readonly CUSTOMCONNECTOR: "CustomConnector";
  readonly CUSTOMERPROFILES: "CustomerProfiles";
  readonly DATADOG: "Datadog";
  readonly DYNATRACE: "Dynatrace";
  readonly EVENTBRIDGE: "EventBridge";
  readonly GOOGLEANALYTICS: "Googleanalytics";
  readonly HONEYCODE: "Honeycode";
  readonly INFORNEXUS: "Infornexus";
  readonly LOOKOUTMETRICS: "LookoutMetrics";
  readonly MARKETO: "Marketo";
  readonly PARDOT: "Pardot";
  readonly REDSHIFT: "Redshift";
  readonly S3: "S3";
  readonly SALESFORCE: "Salesforce";
  readonly SAPODATA: "SAPOData";
  readonly SERVICENOW: "Servicenow";
  readonly SINGULAR: "Singular";
  readonly SLACK: "Slack";
  readonly SNOWFLAKE: "Snowflake";
  readonly TRENDMICRO: "Trendmicro";
  readonly UPSOLVER: "Upsolver";
  readonly VEEVA: "Veeva";
  readonly ZENDESK: "Zendesk";
};
export type ConnectorType = (typeof ConnectorType)[keyof typeof ConnectorType];
export declare const DataTransferApiType: {
  readonly ASYNC: "ASYNC";
  readonly AUTOMATIC: "AUTOMATIC";
  readonly SYNC: "SYNC";
};
export type DataTransferApiType =
  (typeof DataTransferApiType)[keyof typeof DataTransferApiType];
export interface DataTransferApi {
  Name?: string;
  Type?: DataTransferApiType;
}
export declare const SupportedDataTransferType: {
  readonly FILE: "FILE";
  readonly RECORD: "RECORD";
};
export type SupportedDataTransferType =
  (typeof SupportedDataTransferType)[keyof typeof SupportedDataTransferType];
export declare const Operators: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly CONTAINS: "CONTAINS";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NOT_EQUAL_TO: "NOT_EQUAL_TO";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type Operators = (typeof Operators)[keyof typeof Operators];
export declare const ScheduleFrequencyType: {
  readonly BYMINUTE: "BYMINUTE";
  readonly DAILY: "DAILY";
  readonly HOURLY: "HOURLY";
  readonly MONTHLY: "MONTHLY";
  readonly ONCE: "ONCE";
  readonly WEEKLY: "WEEKLY";
};
export type ScheduleFrequencyType =
  (typeof ScheduleFrequencyType)[keyof typeof ScheduleFrequencyType];
export declare const TriggerType: {
  readonly EVENT: "Event";
  readonly ONDEMAND: "OnDemand";
  readonly SCHEDULED: "Scheduled";
};
export type TriggerType = (typeof TriggerType)[keyof typeof TriggerType];
export declare const WriteOperationType: {
  readonly DELETE: "DELETE";
  readonly INSERT: "INSERT";
  readonly UPDATE: "UPDATE";
  readonly UPSERT: "UPSERT";
};
export type WriteOperationType =
  (typeof WriteOperationType)[keyof typeof WriteOperationType];
export interface ConnectorConfiguration {
  canUseAsSource?: boolean;
  canUseAsDestination?: boolean;
  supportedDestinationConnectors?: ConnectorType[];
  supportedSchedulingFrequencies?: ScheduleFrequencyType[];
  isPrivateLinkEnabled?: boolean;
  isPrivateLinkEndpointUrlRequired?: boolean;
  supportedTriggerTypes?: TriggerType[];
  connectorMetadata?: ConnectorMetadata;
  connectorType?: ConnectorType;
  connectorLabel?: string;
  connectorDescription?: string;
  connectorOwner?: string;
  connectorName?: string;
  connectorVersion?: string;
  connectorArn?: string;
  connectorModes?: string[];
  authenticationConfig?: AuthenticationConfig;
  connectorRuntimeSettings?: ConnectorRuntimeSetting[];
  supportedApiVersions?: string[];
  supportedOperators?: Operators[];
  supportedWriteOperations?: WriteOperationType[];
  connectorProvisioningType?: ConnectorProvisioningType;
  connectorProvisioningConfig?: ConnectorProvisioningConfig;
  logoURL?: string;
  registeredAt?: Date;
  registeredBy?: string;
  supportedDataTransferTypes?: SupportedDataTransferType[];
  supportedDataTransferApis?: DataTransferApi[];
}
export interface ConnectorDetail {
  connectorDescription?: string;
  connectorName?: string;
  connectorOwner?: string;
  connectorVersion?: string;
  applicationType?: string;
  connectorType?: ConnectorType;
  connectorLabel?: string;
  registeredAt?: Date;
  registeredBy?: string;
  connectorProvisioningType?: ConnectorProvisioningType;
  connectorModes?: string[];
  supportedDataTransferTypes?: SupportedDataTransferType[];
}
export interface ConnectorEntity {
  name: string | undefined;
  label?: string;
  hasNestedEntities?: boolean;
}
export interface DestinationFieldProperties {
  isCreatable?: boolean;
  isNullable?: boolean;
  isUpsertable?: boolean;
  isUpdatable?: boolean;
  isDefaultedOnCreate?: boolean;
  supportedWriteOperations?: WriteOperationType[];
}
export interface SourceFieldProperties {
  isRetrievable?: boolean;
  isQueryable?: boolean;
  isTimestampFieldForIncrementalQueries?: boolean;
}
export interface Range {
  maximum?: number;
  minimum?: number;
}
export declare const Operator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly CONTAINS: "CONTAINS";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NOT_EQUAL_TO: "NOT_EQUAL_TO";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type Operator = (typeof Operator)[keyof typeof Operator];
export interface FieldTypeDetails {
  fieldType: string | undefined;
  filterOperators: Operator[] | undefined;
  supportedValues?: string[];
  valueRegexPattern?: string;
  supportedDateFormat?: string;
  fieldValueRange?: Range;
  fieldLengthRange?: Range;
}
export interface SupportedFieldTypeDetails {
  v1: FieldTypeDetails | undefined;
}
export interface ConnectorEntityField {
  identifier: string | undefined;
  parentIdentifier?: string;
  label?: string;
  isPrimaryKey?: boolean;
  defaultValue?: string;
  isDeprecated?: boolean;
  supportedFieldTypeDetails?: SupportedFieldTypeDetails;
  description?: string;
  sourceProperties?: SourceFieldProperties;
  destinationProperties?: DestinationFieldProperties;
  customProperties?: Record<string, string>;
}
export interface ConnectorOAuthRequest {
  authCode?: string;
  redirectUri?: string;
}
export declare const DatadogConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type DatadogConnectorOperator =
  (typeof DatadogConnectorOperator)[keyof typeof DatadogConnectorOperator];
export declare const DynatraceConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type DynatraceConnectorOperator =
  (typeof DynatraceConnectorOperator)[keyof typeof DynatraceConnectorOperator];
export declare const GoogleAnalyticsConnectorOperator: {
  readonly BETWEEN: "BETWEEN";
  readonly PROJECTION: "PROJECTION";
};
export type GoogleAnalyticsConnectorOperator =
  (typeof GoogleAnalyticsConnectorOperator)[keyof typeof GoogleAnalyticsConnectorOperator];
export declare const InforNexusConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type InforNexusConnectorOperator =
  (typeof InforNexusConnectorOperator)[keyof typeof InforNexusConnectorOperator];
export declare const MarketoConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly DIVISION: "DIVISION";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly LESS_THAN: "LESS_THAN";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type MarketoConnectorOperator =
  (typeof MarketoConnectorOperator)[keyof typeof MarketoConnectorOperator];
export declare const PardotConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type PardotConnectorOperator =
  (typeof PardotConnectorOperator)[keyof typeof PardotConnectorOperator];
export declare const S3ConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NOT_EQUAL_TO: "NOT_EQUAL_TO";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type S3ConnectorOperator =
  (typeof S3ConnectorOperator)[keyof typeof S3ConnectorOperator];
export declare const SalesforceConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly CONTAINS: "CONTAINS";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NOT_EQUAL_TO: "NOT_EQUAL_TO";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type SalesforceConnectorOperator =
  (typeof SalesforceConnectorOperator)[keyof typeof SalesforceConnectorOperator];
export declare const SAPODataConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly CONTAINS: "CONTAINS";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NOT_EQUAL_TO: "NOT_EQUAL_TO";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type SAPODataConnectorOperator =
  (typeof SAPODataConnectorOperator)[keyof typeof SAPODataConnectorOperator];
export declare const ServiceNowConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly CONTAINS: "CONTAINS";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NOT_EQUAL_TO: "NOT_EQUAL_TO";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type ServiceNowConnectorOperator =
  (typeof ServiceNowConnectorOperator)[keyof typeof ServiceNowConnectorOperator];
export declare const SingularConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type SingularConnectorOperator =
  (typeof SingularConnectorOperator)[keyof typeof SingularConnectorOperator];
export declare const SlackConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type SlackConnectorOperator =
  (typeof SlackConnectorOperator)[keyof typeof SlackConnectorOperator];
export declare const TrendmicroConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type TrendmicroConnectorOperator =
  (typeof TrendmicroConnectorOperator)[keyof typeof TrendmicroConnectorOperator];
export declare const VeevaConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly BETWEEN: "BETWEEN";
  readonly CONTAINS: "CONTAINS";
  readonly DIVISION: "DIVISION";
  readonly EQUAL_TO: "EQUAL_TO";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NOT_EQUAL_TO: "NOT_EQUAL_TO";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type VeevaConnectorOperator =
  (typeof VeevaConnectorOperator)[keyof typeof VeevaConnectorOperator];
export declare const ZendeskConnectorOperator: {
  readonly ADDITION: "ADDITION";
  readonly DIVISION: "DIVISION";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly MASK_ALL: "MASK_ALL";
  readonly MASK_FIRST_N: "MASK_FIRST_N";
  readonly MASK_LAST_N: "MASK_LAST_N";
  readonly MULTIPLICATION: "MULTIPLICATION";
  readonly NO_OP: "NO_OP";
  readonly PROJECTION: "PROJECTION";
  readonly SUBTRACTION: "SUBTRACTION";
  readonly VALIDATE_NON_NEGATIVE: "VALIDATE_NON_NEGATIVE";
  readonly VALIDATE_NON_NULL: "VALIDATE_NON_NULL";
  readonly VALIDATE_NON_ZERO: "VALIDATE_NON_ZERO";
  readonly VALIDATE_NUMERIC: "VALIDATE_NUMERIC";
};
export type ZendeskConnectorOperator =
  (typeof ZendeskConnectorOperator)[keyof typeof ZendeskConnectorOperator];
export interface ConnectorOperator {
  Amplitude?: AmplitudeConnectorOperator;
  Datadog?: DatadogConnectorOperator;
  Dynatrace?: DynatraceConnectorOperator;
  GoogleAnalytics?: GoogleAnalyticsConnectorOperator;
  InforNexus?: InforNexusConnectorOperator;
  Marketo?: MarketoConnectorOperator;
  S3?: S3ConnectorOperator;
  Salesforce?: SalesforceConnectorOperator;
  ServiceNow?: ServiceNowConnectorOperator;
  Singular?: SingularConnectorOperator;
  Slack?: SlackConnectorOperator;
  Trendmicro?: TrendmicroConnectorOperator;
  Veeva?: VeevaConnectorOperator;
  Zendesk?: ZendeskConnectorOperator;
  SAPOData?: SAPODataConnectorOperator;
  CustomConnector?: Operator;
  Pardot?: PardotConnectorOperator;
}
export interface OAuth2Properties {
  tokenUrl: string | undefined;
  oAuth2GrantType: OAuth2GrantType | undefined;
  tokenUrlCustomProperties?: Record<string, string>;
}
export interface CustomConnectorProfileProperties {
  profileProperties?: Record<string, string>;
  oAuth2Properties?: OAuth2Properties;
}
export interface DatadogConnectorProfileProperties {
  instanceUrl: string | undefined;
}
export interface DynatraceConnectorProfileProperties {
  instanceUrl: string | undefined;
}
export interface GoogleAnalyticsConnectorProfileProperties {}
export interface HoneycodeConnectorProfileProperties {}
export interface InforNexusConnectorProfileProperties {
  instanceUrl: string | undefined;
}
export interface MarketoConnectorProfileProperties {
  instanceUrl: string | undefined;
}
export interface PardotConnectorProfileProperties {
  instanceUrl?: string;
  isSandboxEnvironment?: boolean;
  businessUnitId?: string;
}
export interface RedshiftConnectorProfileProperties {
  databaseUrl?: string;
  bucketName: string | undefined;
  bucketPrefix?: string;
  roleArn: string | undefined;
  dataApiRoleArn?: string;
  isRedshiftServerless?: boolean;
  clusterIdentifier?: string;
  workgroupName?: string;
  databaseName?: string;
}
export interface SalesforceConnectorProfileProperties {
  instanceUrl?: string;
  isSandboxEnvironment?: boolean;
  usePrivateLinkForMetadataAndAuthorization?: boolean;
}
export interface OAuthProperties {
  tokenUrl: string | undefined;
  authCodeUrl: string | undefined;
  oAuthScopes: string[] | undefined;
}
export interface SAPODataConnectorProfileProperties {
  applicationHostUrl: string | undefined;
  applicationServicePath: string | undefined;
  portNumber: number | undefined;
  clientNumber: string | undefined;
  logonLanguage?: string;
  privateLinkServiceName?: string;
  oAuthProperties?: OAuthProperties;
  disableSSO?: boolean;
}
export interface ServiceNowConnectorProfileProperties {
  instanceUrl: string | undefined;
}
export interface SingularConnectorProfileProperties {}
export interface SlackConnectorProfileProperties {
  instanceUrl: string | undefined;
}
export interface SnowflakeConnectorProfileProperties {
  warehouse: string | undefined;
  stage: string | undefined;
  bucketName: string | undefined;
  bucketPrefix?: string;
  privateLinkServiceName?: string;
  accountName?: string;
  region?: string;
}
export interface TrendmicroConnectorProfileProperties {}
export interface VeevaConnectorProfileProperties {
  instanceUrl: string | undefined;
}
export interface ZendeskConnectorProfileProperties {
  instanceUrl: string | undefined;
}
export interface ConnectorProfileProperties {
  Amplitude?: AmplitudeConnectorProfileProperties;
  Datadog?: DatadogConnectorProfileProperties;
  Dynatrace?: DynatraceConnectorProfileProperties;
  GoogleAnalytics?: GoogleAnalyticsConnectorProfileProperties;
  Honeycode?: HoneycodeConnectorProfileProperties;
  InforNexus?: InforNexusConnectorProfileProperties;
  Marketo?: MarketoConnectorProfileProperties;
  Redshift?: RedshiftConnectorProfileProperties;
  Salesforce?: SalesforceConnectorProfileProperties;
  ServiceNow?: ServiceNowConnectorProfileProperties;
  Singular?: SingularConnectorProfileProperties;
  Slack?: SlackConnectorProfileProperties;
  Snowflake?: SnowflakeConnectorProfileProperties;
  Trendmicro?: TrendmicroConnectorProfileProperties;
  Veeva?: VeevaConnectorProfileProperties;
  Zendesk?: ZendeskConnectorProfileProperties;
  SAPOData?: SAPODataConnectorProfileProperties;
  CustomConnector?: CustomConnectorProfileProperties;
  Pardot?: PardotConnectorProfileProperties;
}
export declare const PrivateConnectionProvisioningFailureCause: {
  readonly ACCESS_DENIED: "ACCESS_DENIED";
  readonly CONNECTOR_AUTHENTICATION: "CONNECTOR_AUTHENTICATION";
  readonly CONNECTOR_SERVER: "CONNECTOR_SERVER";
  readonly INTERNAL_SERVER: "INTERNAL_SERVER";
  readonly VALIDATION: "VALIDATION";
};
export type PrivateConnectionProvisioningFailureCause =
  (typeof PrivateConnectionProvisioningFailureCause)[keyof typeof PrivateConnectionProvisioningFailureCause];
export declare const PrivateConnectionProvisioningStatus: {
  readonly CREATED: "CREATED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
};
export type PrivateConnectionProvisioningStatus =
  (typeof PrivateConnectionProvisioningStatus)[keyof typeof PrivateConnectionProvisioningStatus];
export interface PrivateConnectionProvisioningState {
  status?: PrivateConnectionProvisioningStatus;
  failureMessage?: string;
  failureCause?: PrivateConnectionProvisioningFailureCause;
}
export interface ConnectorProfile {
  connectorProfileArn?: string;
  connectorProfileName?: string;
  connectorType?: ConnectorType;
  connectorLabel?: string;
  connectionMode?: ConnectionMode;
  credentialsArn?: string;
  connectorProfileProperties?: ConnectorProfileProperties;
  createdAt?: Date;
  lastUpdatedAt?: Date;
  privateConnectionProvisioningState?: PrivateConnectionProvisioningState;
}
export interface CustomAuthCredentials {
  customAuthenticationType: string | undefined;
  credentialsMap?: Record<string, string>;
}
export interface OAuth2Credentials {
  clientId?: string;
  clientSecret?: string;
  accessToken?: string;
  refreshToken?: string;
  oAuthRequest?: ConnectorOAuthRequest;
}
export interface CustomConnectorProfileCredentials {
  authenticationType: AuthenticationType | undefined;
  basic?: BasicAuthCredentials;
  oauth2?: OAuth2Credentials;
  apiKey?: ApiKeyCredentials;
  custom?: CustomAuthCredentials;
}
export interface DatadogConnectorProfileCredentials {
  apiKey: string | undefined;
  applicationKey: string | undefined;
}
export interface DynatraceConnectorProfileCredentials {
  apiToken: string | undefined;
}
export interface GoogleAnalyticsConnectorProfileCredentials {
  clientId: string | undefined;
  clientSecret: string | undefined;
  accessToken?: string;
  refreshToken?: string;
  oAuthRequest?: ConnectorOAuthRequest;
}
export interface HoneycodeConnectorProfileCredentials {
  accessToken?: string;
  refreshToken?: string;
  oAuthRequest?: ConnectorOAuthRequest;
}
export interface InforNexusConnectorProfileCredentials {
  accessKeyId: string | undefined;
  userId: string | undefined;
  secretAccessKey: string | undefined;
  datakey: string | undefined;
}
export interface MarketoConnectorProfileCredentials {
  clientId: string | undefined;
  clientSecret: string | undefined;
  accessToken?: string;
  oAuthRequest?: ConnectorOAuthRequest;
}
export interface PardotConnectorProfileCredentials {
  accessToken?: string;
  refreshToken?: string;
  oAuthRequest?: ConnectorOAuthRequest;
  clientCredentialsArn?: string;
}
export interface RedshiftConnectorProfileCredentials {
  username?: string;
  password?: string;
}
export interface SalesforceConnectorProfileCredentials {
  accessToken?: string;
  refreshToken?: string;
  oAuthRequest?: ConnectorOAuthRequest;
  clientCredentialsArn?: string;
  oAuth2GrantType?: OAuth2GrantType;
  jwtToken?: string;
}
export interface OAuthCredentials {
  clientId: string | undefined;
  clientSecret: string | undefined;
  accessToken?: string;
  refreshToken?: string;
  oAuthRequest?: ConnectorOAuthRequest;
}
export interface SAPODataConnectorProfileCredentials {
  basicAuthCredentials?: BasicAuthCredentials;
  oAuthCredentials?: OAuthCredentials;
}
export interface ServiceNowConnectorProfileCredentials {
  username?: string;
  password?: string;
  oAuth2Credentials?: OAuth2Credentials;
}
export interface SingularConnectorProfileCredentials {
  apiKey: string | undefined;
}
export interface SlackConnectorProfileCredentials {
  clientId: string | undefined;
  clientSecret: string | undefined;
  accessToken?: string;
  oAuthRequest?: ConnectorOAuthRequest;
}
export interface SnowflakeConnectorProfileCredentials {
  username: string | undefined;
  password: string | undefined;
}
export interface TrendmicroConnectorProfileCredentials {
  apiSecretKey: string | undefined;
}
export interface VeevaConnectorProfileCredentials {
  username: string | undefined;
  password: string | undefined;
}
export interface ZendeskConnectorProfileCredentials {
  clientId: string | undefined;
  clientSecret: string | undefined;
  accessToken?: string;
  oAuthRequest?: ConnectorOAuthRequest;
}
export interface ConnectorProfileCredentials {
  Amplitude?: AmplitudeConnectorProfileCredentials;
  Datadog?: DatadogConnectorProfileCredentials;
  Dynatrace?: DynatraceConnectorProfileCredentials;
  GoogleAnalytics?: GoogleAnalyticsConnectorProfileCredentials;
  Honeycode?: HoneycodeConnectorProfileCredentials;
  InforNexus?: InforNexusConnectorProfileCredentials;
  Marketo?: MarketoConnectorProfileCredentials;
  Redshift?: RedshiftConnectorProfileCredentials;
  Salesforce?: SalesforceConnectorProfileCredentials;
  ServiceNow?: ServiceNowConnectorProfileCredentials;
  Singular?: SingularConnectorProfileCredentials;
  Slack?: SlackConnectorProfileCredentials;
  Snowflake?: SnowflakeConnectorProfileCredentials;
  Trendmicro?: TrendmicroConnectorProfileCredentials;
  Veeva?: VeevaConnectorProfileCredentials;
  Zendesk?: ZendeskConnectorProfileCredentials;
  SAPOData?: SAPODataConnectorProfileCredentials;
  CustomConnector?: CustomConnectorProfileCredentials;
  Pardot?: PardotConnectorProfileCredentials;
}
export interface ConnectorProfileConfig {
  connectorProfileProperties: ConnectorProfileProperties | undefined;
  connectorProfileCredentials?: ConnectorProfileCredentials;
}
export declare class ConnectorServerException extends __BaseException {
  readonly name: "ConnectorServerException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ConnectorServerException, __BaseException>
  );
}
export interface CreateConnectorProfileRequest {
  connectorProfileName: string | undefined;
  kmsArn?: string;
  connectorType: ConnectorType | undefined;
  connectorLabel?: string;
  connectionMode: ConnectionMode | undefined;
  connectorProfileConfig: ConnectorProfileConfig | undefined;
  clientToken?: string;
}
export interface CreateConnectorProfileResponse {
  connectorProfileArn?: string;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface ErrorHandlingConfig {
  failOnFirstDestinationError?: boolean;
  bucketPrefix?: string;
  bucketName?: string;
}
export interface CustomConnectorDestinationProperties {
  entityName: string | undefined;
  errorHandlingConfig?: ErrorHandlingConfig;
  writeOperationType?: WriteOperationType;
  idFieldNames?: string[];
  customProperties?: Record<string, string>;
}
export interface CustomerProfilesDestinationProperties {
  domainName: string | undefined;
  objectTypeName?: string;
}
export interface EventBridgeDestinationProperties {
  object: string | undefined;
  errorHandlingConfig?: ErrorHandlingConfig;
}
export interface HoneycodeDestinationProperties {
  object: string | undefined;
  errorHandlingConfig?: ErrorHandlingConfig;
}
export interface LookoutMetricsDestinationProperties {}
export interface MarketoDestinationProperties {
  object: string | undefined;
  errorHandlingConfig?: ErrorHandlingConfig;
}
export interface RedshiftDestinationProperties {
  object: string | undefined;
  intermediateBucketName: string | undefined;
  bucketPrefix?: string;
  errorHandlingConfig?: ErrorHandlingConfig;
}
export declare const FileType: {
  readonly CSV: "CSV";
  readonly JSON: "JSON";
  readonly PARQUET: "PARQUET";
};
export type FileType = (typeof FileType)[keyof typeof FileType];
export declare const PathPrefix: {
  readonly EXECUTION_ID: "EXECUTION_ID";
  readonly SCHEMA_VERSION: "SCHEMA_VERSION";
};
export type PathPrefix = (typeof PathPrefix)[keyof typeof PathPrefix];
export declare const PrefixFormat: {
  readonly DAY: "DAY";
  readonly HOUR: "HOUR";
  readonly MINUTE: "MINUTE";
  readonly MONTH: "MONTH";
  readonly YEAR: "YEAR";
};
export type PrefixFormat = (typeof PrefixFormat)[keyof typeof PrefixFormat];
export declare const PrefixType: {
  readonly FILENAME: "FILENAME";
  readonly PATH: "PATH";
  readonly PATH_AND_FILENAME: "PATH_AND_FILENAME";
};
export type PrefixType = (typeof PrefixType)[keyof typeof PrefixType];
export interface PrefixConfig {
  prefixType?: PrefixType;
  prefixFormat?: PrefixFormat;
  pathPrefixHierarchy?: PathPrefix[];
}
export interface S3OutputFormatConfig {
  fileType?: FileType;
  prefixConfig?: PrefixConfig;
  aggregationConfig?: AggregationConfig;
  preserveSourceDataTyping?: boolean;
}
export interface S3DestinationProperties {
  bucketName: string | undefined;
  bucketPrefix?: string;
  s3OutputFormatConfig?: S3OutputFormatConfig;
}
export interface SalesforceDestinationProperties {
  object: string | undefined;
  idFieldNames?: string[];
  errorHandlingConfig?: ErrorHandlingConfig;
  writeOperationType?: WriteOperationType;
  dataTransferApi?: SalesforceDataTransferApi;
}
export interface SuccessResponseHandlingConfig {
  bucketPrefix?: string;
  bucketName?: string;
}
export interface SAPODataDestinationProperties {
  objectPath: string | undefined;
  successResponseHandlingConfig?: SuccessResponseHandlingConfig;
  idFieldNames?: string[];
  errorHandlingConfig?: ErrorHandlingConfig;
  writeOperationType?: WriteOperationType;
}
export interface SnowflakeDestinationProperties {
  object: string | undefined;
  intermediateBucketName: string | undefined;
  bucketPrefix?: string;
  errorHandlingConfig?: ErrorHandlingConfig;
}
export interface UpsolverS3OutputFormatConfig {
  fileType?: FileType;
  prefixConfig: PrefixConfig | undefined;
  aggregationConfig?: AggregationConfig;
}
export interface UpsolverDestinationProperties {
  bucketName: string | undefined;
  bucketPrefix?: string;
  s3OutputFormatConfig: UpsolverS3OutputFormatConfig | undefined;
}
export interface ZendeskDestinationProperties {
  object: string | undefined;
  idFieldNames?: string[];
  errorHandlingConfig?: ErrorHandlingConfig;
  writeOperationType?: WriteOperationType;
}
export interface DestinationConnectorProperties {
  Redshift?: RedshiftDestinationProperties;
  S3?: S3DestinationProperties;
  Salesforce?: SalesforceDestinationProperties;
  Snowflake?: SnowflakeDestinationProperties;
  EventBridge?: EventBridgeDestinationProperties;
  LookoutMetrics?: LookoutMetricsDestinationProperties;
  Upsolver?: UpsolverDestinationProperties;
  Honeycode?: HoneycodeDestinationProperties;
  CustomerProfiles?: CustomerProfilesDestinationProperties;
  Zendesk?: ZendeskDestinationProperties;
  Marketo?: MarketoDestinationProperties;
  CustomConnector?: CustomConnectorDestinationProperties;
  SAPOData?: SAPODataDestinationProperties;
}
export interface DestinationFlowConfig {
  connectorType: ConnectorType | undefined;
  apiVersion?: string;
  connectorProfileName?: string;
  destinationConnectorProperties: DestinationConnectorProperties | undefined;
}
export interface GlueDataCatalogConfig {
  roleArn: string | undefined;
  databaseName: string | undefined;
  tablePrefix: string | undefined;
}
export interface MetadataCatalogConfig {
  glueDataCatalog?: GlueDataCatalogConfig;
}
export interface IncrementalPullConfig {
  datetimeTypeFieldName?: string;
}
export interface CustomConnectorSourceProperties {
  entityName: string | undefined;
  customProperties?: Record<string, string>;
  dataTransferApi?: DataTransferApi;
}
export interface DatadogSourceProperties {
  object: string | undefined;
}
export interface DynatraceSourceProperties {
  object: string | undefined;
}
export interface GoogleAnalyticsSourceProperties {
  object: string | undefined;
}
export interface InforNexusSourceProperties {
  object: string | undefined;
}
export interface MarketoSourceProperties {
  object: string | undefined;
}
export interface PardotSourceProperties {
  object: string | undefined;
}
export declare const S3InputFileType: {
  readonly CSV: "CSV";
  readonly JSON: "JSON";
};
export type S3InputFileType =
  (typeof S3InputFileType)[keyof typeof S3InputFileType];
export interface S3InputFormatConfig {
  s3InputFileType?: S3InputFileType;
}
export interface S3SourceProperties {
  bucketName: string | undefined;
  bucketPrefix?: string;
  s3InputFormatConfig?: S3InputFormatConfig;
}
export interface SalesforceSourceProperties {
  object: string | undefined;
  enableDynamicFieldUpdate?: boolean;
  includeDeletedRecords?: boolean;
  dataTransferApi?: SalesforceDataTransferApi;
}
export interface SAPODataPaginationConfig {
  maxPageSize: number | undefined;
}
export interface SAPODataParallelismConfig {
  maxParallelism: number | undefined;
}
export interface SAPODataSourceProperties {
  objectPath?: string;
  parallelismConfig?: SAPODataParallelismConfig;
  paginationConfig?: SAPODataPaginationConfig;
}
export interface ServiceNowSourceProperties {
  object: string | undefined;
}
export interface SingularSourceProperties {
  object: string | undefined;
}
export interface SlackSourceProperties {
  object: string | undefined;
}
export interface TrendmicroSourceProperties {
  object: string | undefined;
}
export interface VeevaSourceProperties {
  object: string | undefined;
  documentType?: string;
  includeSourceFiles?: boolean;
  includeRenditions?: boolean;
  includeAllVersions?: boolean;
}
export interface ZendeskSourceProperties {
  object: string | undefined;
}
export interface SourceConnectorProperties {
  Amplitude?: AmplitudeSourceProperties;
  Datadog?: DatadogSourceProperties;
  Dynatrace?: DynatraceSourceProperties;
  GoogleAnalytics?: GoogleAnalyticsSourceProperties;
  InforNexus?: InforNexusSourceProperties;
  Marketo?: MarketoSourceProperties;
  S3?: S3SourceProperties;
  Salesforce?: SalesforceSourceProperties;
  ServiceNow?: ServiceNowSourceProperties;
  Singular?: SingularSourceProperties;
  Slack?: SlackSourceProperties;
  Trendmicro?: TrendmicroSourceProperties;
  Veeva?: VeevaSourceProperties;
  Zendesk?: ZendeskSourceProperties;
  SAPOData?: SAPODataSourceProperties;
  CustomConnector?: CustomConnectorSourceProperties;
  Pardot?: PardotSourceProperties;
}
export interface SourceFlowConfig {
  connectorType: ConnectorType | undefined;
  apiVersion?: string;
  connectorProfileName?: string;
  sourceConnectorProperties: SourceConnectorProperties | undefined;
  incrementalPullConfig?: IncrementalPullConfig;
}
export declare const OperatorPropertiesKeys: {
  readonly CONCAT_FORMAT: "CONCAT_FORMAT";
  readonly DATA_TYPE: "DATA_TYPE";
  readonly DESTINATION_DATA_TYPE: "DESTINATION_DATA_TYPE";
  readonly EXCLUDE_SOURCE_FIELDS_LIST: "EXCLUDE_SOURCE_FIELDS_LIST";
  readonly INCLUDE_NEW_FIELDS: "INCLUDE_NEW_FIELDS";
  readonly LOWER_BOUND: "LOWER_BOUND";
  readonly MASK_LENGTH: "MASK_LENGTH";
  readonly MASK_VALUE: "MASK_VALUE";
  readonly MATH_OPERATION_FIELDS_ORDER: "MATH_OPERATION_FIELDS_ORDER";
  readonly ORDERED_PARTITION_KEYS_LIST: "ORDERED_PARTITION_KEYS_LIST";
  readonly SOURCE_DATA_TYPE: "SOURCE_DATA_TYPE";
  readonly SUBFIELD_CATEGORY_MAP: "SUBFIELD_CATEGORY_MAP";
  readonly TRUNCATE_LENGTH: "TRUNCATE_LENGTH";
  readonly UPPER_BOUND: "UPPER_BOUND";
  readonly VALIDATION_ACTION: "VALIDATION_ACTION";
  readonly VALUE: "VALUE";
  readonly VALUES: "VALUES";
};
export type OperatorPropertiesKeys =
  (typeof OperatorPropertiesKeys)[keyof typeof OperatorPropertiesKeys];
export declare const TaskType: {
  readonly ARITHMETIC: "Arithmetic";
  readonly FILTER: "Filter";
  readonly MAP: "Map";
  readonly MAP_ALL: "Map_all";
  readonly MASK: "Mask";
  readonly MERGE: "Merge";
  readonly PARTITION: "Partition";
  readonly PASSTHROUGH: "Passthrough";
  readonly TRUNCATE: "Truncate";
  readonly VALIDATE: "Validate";
};
export type TaskType = (typeof TaskType)[keyof typeof TaskType];
export interface Task {
  sourceFields: string[] | undefined;
  connectorOperator?: ConnectorOperator;
  destinationField?: string;
  taskType: TaskType | undefined;
  taskProperties?: Partial<Record<OperatorPropertiesKeys, string>>;
}
export declare const DataPullMode: {
  readonly COMPLETE: "Complete";
  readonly INCREMENTAL: "Incremental";
};
export type DataPullMode = (typeof DataPullMode)[keyof typeof DataPullMode];
export interface ScheduledTriggerProperties {
  scheduleExpression: string | undefined;
  dataPullMode?: DataPullMode;
  scheduleStartTime?: Date;
  scheduleEndTime?: Date;
  timezone?: string;
  scheduleOffset?: number;
  firstExecutionFrom?: Date;
  flowErrorDeactivationThreshold?: number;
}
export interface TriggerProperties {
  Scheduled?: ScheduledTriggerProperties;
}
export interface TriggerConfig {
  triggerType: TriggerType | undefined;
  triggerProperties?: TriggerProperties;
}
export interface CreateFlowRequest {
  flowName: string | undefined;
  description?: string;
  kmsArn?: string;
  triggerConfig: TriggerConfig | undefined;
  sourceFlowConfig: SourceFlowConfig | undefined;
  destinationFlowConfigList: DestinationFlowConfig[] | undefined;
  tasks: Task[] | undefined;
  tags?: Record<string, string>;
  metadataCatalogConfig?: MetadataCatalogConfig;
  clientToken?: string;
}
export declare const FlowStatus: {
  readonly ACTIVE: "Active";
  readonly DELETED: "Deleted";
  readonly DEPRECATED: "Deprecated";
  readonly DRAFT: "Draft";
  readonly ERRORED: "Errored";
  readonly SUSPENDED: "Suspended";
};
export type FlowStatus = (typeof FlowStatus)[keyof typeof FlowStatus];
export interface CreateFlowResponse {
  flowArn?: string;
  flowStatus?: FlowStatus;
}
export interface DeleteConnectorProfileRequest {
  connectorProfileName: string | undefined;
  forceDelete?: boolean;
}
export interface DeleteConnectorProfileResponse {}
export interface DeleteFlowRequest {
  flowName: string | undefined;
  forceDelete?: boolean;
}
export interface DeleteFlowResponse {}
export interface DescribeConnectorRequest {
  connectorType: ConnectorType | undefined;
  connectorLabel?: string;
}
export interface DescribeConnectorResponse {
  connectorConfiguration?: ConnectorConfiguration;
}
export interface DescribeConnectorEntityRequest {
  connectorEntityName: string | undefined;
  connectorType?: ConnectorType;
  connectorProfileName?: string;
  apiVersion?: string;
}
export interface DescribeConnectorEntityResponse {
  connectorEntityFields: ConnectorEntityField[] | undefined;
}
export interface DescribeConnectorProfilesRequest {
  connectorProfileNames?: string[];
  connectorType?: ConnectorType;
  connectorLabel?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface DescribeConnectorProfilesResponse {
  connectorProfileDetails?: ConnectorProfile[];
  nextToken?: string;
}
export interface DescribeConnectorsRequest {
  connectorTypes?: ConnectorType[];
  maxResults?: number;
  nextToken?: string;
}
export interface DescribeConnectorsResponse {
  connectorConfigurations?: Partial<
    Record<ConnectorType, ConnectorConfiguration>
  >;
  connectors?: ConnectorDetail[];
  nextToken?: string;
}
export interface DescribeFlowRequest {
  flowName: string | undefined;
}
export declare const ExecutionStatus: {
  readonly CANCELED: "Canceled";
  readonly CANCELSTARTED: "CancelStarted";
  readonly ERROR: "Error";
  readonly INPROGRESS: "InProgress";
  readonly SUCCESSFUL: "Successful";
};
export type ExecutionStatus =
  (typeof ExecutionStatus)[keyof typeof ExecutionStatus];
export interface ExecutionDetails {
  mostRecentExecutionMessage?: string;
  mostRecentExecutionTime?: Date;
  mostRecentExecutionStatus?: ExecutionStatus;
}
export interface RegistrationOutput {
  message?: string;
  result?: string;
  status?: ExecutionStatus;
}
export interface MetadataCatalogDetail {
  catalogType?: CatalogType;
  tableName?: string;
  tableRegistrationOutput?: RegistrationOutput;
  partitionRegistrationOutput?: RegistrationOutput;
}
export interface DescribeFlowResponse {
  flowArn?: string;
  description?: string;
  flowName?: string;
  kmsArn?: string;
  flowStatus?: FlowStatus;
  flowStatusMessage?: string;
  sourceFlowConfig?: SourceFlowConfig;
  destinationFlowConfigList?: DestinationFlowConfig[];
  lastRunExecutionDetails?: ExecutionDetails;
  triggerConfig?: TriggerConfig;
  tasks?: Task[];
  createdAt?: Date;
  lastUpdatedAt?: Date;
  createdBy?: string;
  lastUpdatedBy?: string;
  tags?: Record<string, string>;
  metadataCatalogConfig?: MetadataCatalogConfig;
  lastRunMetadataCatalogDetails?: MetadataCatalogDetail[];
  schemaVersion?: number;
}
export interface DescribeFlowExecutionRecordsRequest {
  flowName: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ErrorInfo {
  putFailuresCount?: number;
  executionMessage?: string;
}
export interface ExecutionResult {
  errorInfo?: ErrorInfo;
  bytesProcessed?: number;
  bytesWritten?: number;
  recordsProcessed?: number;
  numParallelProcesses?: number;
  maxPageSize?: number;
}
export interface ExecutionRecord {
  executionId?: string;
  executionStatus?: ExecutionStatus;
  executionResult?: ExecutionResult;
  startedAt?: Date;
  lastUpdatedAt?: Date;
  dataPullStartTime?: Date;
  dataPullEndTime?: Date;
  metadataCatalogDetails?: MetadataCatalogDetail[];
}
export interface DescribeFlowExecutionRecordsResponse {
  flowExecutions?: ExecutionRecord[];
  nextToken?: string;
}
export interface FlowDefinition {
  flowArn?: string;
  description?: string;
  flowName?: string;
  flowStatus?: FlowStatus;
  sourceConnectorType?: ConnectorType;
  sourceConnectorLabel?: string;
  destinationConnectorType?: ConnectorType;
  destinationConnectorLabel?: string;
  triggerType?: TriggerType;
  createdAt?: Date;
  lastUpdatedAt?: Date;
  createdBy?: string;
  lastUpdatedBy?: string;
  tags?: Record<string, string>;
  lastRunExecutionDetails?: ExecutionDetails;
}
export interface ListConnectorEntitiesRequest {
  connectorProfileName?: string;
  connectorType?: ConnectorType;
  entitiesPath?: string;
  apiVersion?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface ListConnectorEntitiesResponse {
  connectorEntityMap: Record<string, ConnectorEntity[]> | undefined;
  nextToken?: string;
}
export interface ListConnectorsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ListConnectorsResponse {
  connectors?: ConnectorDetail[];
  nextToken?: string;
}
export interface ListFlowsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface ListFlowsResponse {
  flows?: FlowDefinition[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface RegisterConnectorRequest {
  connectorLabel?: string;
  description?: string;
  connectorProvisioningType?: ConnectorProvisioningType;
  connectorProvisioningConfig?: ConnectorProvisioningConfig;
  clientToken?: string;
}
export interface RegisterConnectorResponse {
  connectorArn?: string;
}
export interface ResetConnectorMetadataCacheRequest {
  connectorProfileName?: string;
  connectorType?: ConnectorType;
  connectorEntityName?: string;
  entitiesPath?: string;
  apiVersion?: string;
}
export interface ResetConnectorMetadataCacheResponse {}
export interface StartFlowRequest {
  flowName: string | undefined;
  clientToken?: string;
}
export interface StartFlowResponse {
  flowArn?: string;
  flowStatus?: FlowStatus;
  executionId?: string;
}
export interface StopFlowRequest {
  flowName: string | undefined;
}
export interface StopFlowResponse {
  flowArn?: string;
  flowStatus?: FlowStatus;
}
export declare class UnsupportedOperationException extends __BaseException {
  readonly name: "UnsupportedOperationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnsupportedOperationException, __BaseException>
  );
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UnregisterConnectorRequest {
  connectorLabel: string | undefined;
  forceDelete?: boolean;
}
export interface UnregisterConnectorResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateConnectorProfileRequest {
  connectorProfileName: string | undefined;
  connectionMode: ConnectionMode | undefined;
  connectorProfileConfig: ConnectorProfileConfig | undefined;
  clientToken?: string;
}
export interface UpdateConnectorProfileResponse {
  connectorProfileArn?: string;
}
export interface UpdateConnectorRegistrationRequest {
  connectorLabel: string | undefined;
  description?: string;
  connectorProvisioningConfig?: ConnectorProvisioningConfig;
  clientToken?: string;
}
export interface UpdateConnectorRegistrationResponse {
  connectorArn?: string;
}
export interface UpdateFlowRequest {
  flowName: string | undefined;
  description?: string;
  triggerConfig: TriggerConfig | undefined;
  sourceFlowConfig: SourceFlowConfig | undefined;
  destinationFlowConfigList: DestinationFlowConfig[] | undefined;
  tasks: Task[] | undefined;
  metadataCatalogConfig?: MetadataCatalogConfig;
  clientToken?: string;
}
export interface UpdateFlowResponse {
  flowStatus?: FlowStatus;
}
export declare const AmplitudeConnectorProfileCredentialsFilterSensitiveLog: (
  obj: AmplitudeConnectorProfileCredentials
) => any;
export declare const ApiKeyCredentialsFilterSensitiveLog: (
  obj: ApiKeyCredentials
) => any;
export declare const BasicAuthCredentialsFilterSensitiveLog: (
  obj: BasicAuthCredentials
) => any;
export declare const CustomAuthCredentialsFilterSensitiveLog: (
  obj: CustomAuthCredentials
) => any;
export declare const OAuth2CredentialsFilterSensitiveLog: (
  obj: OAuth2Credentials
) => any;
export declare const CustomConnectorProfileCredentialsFilterSensitiveLog: (
  obj: CustomConnectorProfileCredentials
) => any;
export declare const DatadogConnectorProfileCredentialsFilterSensitiveLog: (
  obj: DatadogConnectorProfileCredentials
) => any;
export declare const GoogleAnalyticsConnectorProfileCredentialsFilterSensitiveLog: (
  obj: GoogleAnalyticsConnectorProfileCredentials
) => any;
export declare const HoneycodeConnectorProfileCredentialsFilterSensitiveLog: (
  obj: HoneycodeConnectorProfileCredentials
) => any;
export declare const InforNexusConnectorProfileCredentialsFilterSensitiveLog: (
  obj: InforNexusConnectorProfileCredentials
) => any;
export declare const MarketoConnectorProfileCredentialsFilterSensitiveLog: (
  obj: MarketoConnectorProfileCredentials
) => any;
export declare const PardotConnectorProfileCredentialsFilterSensitiveLog: (
  obj: PardotConnectorProfileCredentials
) => any;
export declare const RedshiftConnectorProfileCredentialsFilterSensitiveLog: (
  obj: RedshiftConnectorProfileCredentials
) => any;
export declare const SalesforceConnectorProfileCredentialsFilterSensitiveLog: (
  obj: SalesforceConnectorProfileCredentials
) => any;
export declare const OAuthCredentialsFilterSensitiveLog: (
  obj: OAuthCredentials
) => any;
export declare const SAPODataConnectorProfileCredentialsFilterSensitiveLog: (
  obj: SAPODataConnectorProfileCredentials
) => any;
export declare const ServiceNowConnectorProfileCredentialsFilterSensitiveLog: (
  obj: ServiceNowConnectorProfileCredentials
) => any;
export declare const SingularConnectorProfileCredentialsFilterSensitiveLog: (
  obj: SingularConnectorProfileCredentials
) => any;
export declare const SlackConnectorProfileCredentialsFilterSensitiveLog: (
  obj: SlackConnectorProfileCredentials
) => any;
export declare const SnowflakeConnectorProfileCredentialsFilterSensitiveLog: (
  obj: SnowflakeConnectorProfileCredentials
) => any;
export declare const TrendmicroConnectorProfileCredentialsFilterSensitiveLog: (
  obj: TrendmicroConnectorProfileCredentials
) => any;
export declare const VeevaConnectorProfileCredentialsFilterSensitiveLog: (
  obj: VeevaConnectorProfileCredentials
) => any;
export declare const ZendeskConnectorProfileCredentialsFilterSensitiveLog: (
  obj: ZendeskConnectorProfileCredentials
) => any;
export declare const ConnectorProfileCredentialsFilterSensitiveLog: (
  obj: ConnectorProfileCredentials
) => any;
export declare const ConnectorProfileConfigFilterSensitiveLog: (
  obj: ConnectorProfileConfig
) => any;
export declare const CreateConnectorProfileRequestFilterSensitiveLog: (
  obj: CreateConnectorProfileRequest
) => any;
export declare const UpdateConnectorProfileRequestFilterSensitiveLog: (
  obj: UpdateConnectorProfileRequest
) => any;
