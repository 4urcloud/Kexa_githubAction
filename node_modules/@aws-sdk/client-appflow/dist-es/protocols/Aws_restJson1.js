import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AppflowServiceException as __BaseException } from "../models/AppflowServiceException";
import { AccessDeniedException, ConflictException, ConnectorAuthenticationException, ConnectorServerException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, UnsupportedOperationException, ValidationException, } from "../models/models_0";
export const se_CancelFlowExecutionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/cancel-flow-executions");
    let body;
    body = JSON.stringify(take(input, {
        executionIds: (_) => _json(_),
        flowName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateConnectorProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/create-connector-profile");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        connectionMode: [],
        connectorLabel: [],
        connectorProfileConfig: (_) => _json(_),
        connectorProfileName: [],
        connectorType: [],
        kmsArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/create-flow");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        destinationFlowConfigList: (_) => _json(_),
        flowName: [],
        kmsArn: [],
        metadataCatalogConfig: (_) => _json(_),
        sourceFlowConfig: (_) => _json(_),
        tags: (_) => _json(_),
        tasks: (_) => _json(_),
        triggerConfig: (_) => se_TriggerConfig(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteConnectorProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-connector-profile");
    let body;
    body = JSON.stringify(take(input, {
        connectorProfileName: [],
        forceDelete: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/delete-flow");
    let body;
    body = JSON.stringify(take(input, {
        flowName: [],
        forceDelete: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-connector");
    let body;
    body = JSON.stringify(take(input, {
        connectorLabel: [],
        connectorType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeConnectorEntityCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-connector-entity");
    let body;
    body = JSON.stringify(take(input, {
        apiVersion: [],
        connectorEntityName: [],
        connectorProfileName: [],
        connectorType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeConnectorProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-connector-profiles");
    let body;
    body = JSON.stringify(take(input, {
        connectorLabel: [],
        connectorProfileNames: (_) => _json(_),
        connectorType: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeConnectorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-connectors");
    let body;
    body = JSON.stringify(take(input, {
        connectorTypes: (_) => _json(_),
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-flow");
    let body;
    body = JSON.stringify(take(input, {
        flowName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeFlowExecutionRecordsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/describe-flow-execution-records");
    let body;
    body = JSON.stringify(take(input, {
        flowName: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListConnectorEntitiesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-connector-entities");
    let body;
    body = JSON.stringify(take(input, {
        apiVersion: [],
        connectorProfileName: [],
        connectorType: [],
        entitiesPath: [],
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListConnectorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-connectors");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListFlowsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/list-flows");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_RegisterConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/register-connector");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        connectorLabel: [],
        connectorProvisioningConfig: (_) => _json(_),
        connectorProvisioningType: [],
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ResetConnectorMetadataCacheCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/reset-connector-metadata-cache");
    let body;
    body = JSON.stringify(take(input, {
        apiVersion: [],
        connectorEntityName: [],
        connectorProfileName: [],
        connectorType: [],
        entitiesPath: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/start-flow");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        flowName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/stop-flow");
    let body;
    body = JSON.stringify(take(input, {
        flowName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UnregisterConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/unregister-connector");
    let body;
    body = JSON.stringify(take(input, {
        connectorLabel: [],
        forceDelete: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateConnectorProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-connector-profile");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        connectionMode: [],
        connectorProfileConfig: (_) => _json(_),
        connectorProfileName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateConnectorRegistrationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-connector-registration");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        connectorLabel: [],
        connectorProvisioningConfig: (_) => _json(_),
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateFlowCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/update-flow");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        destinationFlowConfigList: (_) => _json(_),
        flowName: [],
        metadataCatalogConfig: (_) => _json(_),
        sourceFlowConfig: (_) => _json(_),
        tasks: (_) => _json(_),
        triggerConfig: (_) => se_TriggerConfig(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CancelFlowExecutionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        invalidExecutions: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConnectorProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorProfileArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        flowArn: __expectString,
        flowStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteConnectorProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorConfiguration: (_) => de_ConnectorConfiguration(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeConnectorEntityCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorEntityFields: (_) => de_ConnectorEntityFieldList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeConnectorProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorProfileDetails: (_) => de_ConnectorProfileDetailList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeConnectorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorConfigurations: (_) => de_ConnectorConfigurationsMap(_, context),
        connectors: (_) => de_ConnectorList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdBy: __expectString,
        description: __expectString,
        destinationFlowConfigList: _json,
        flowArn: __expectString,
        flowName: __expectString,
        flowStatus: __expectString,
        flowStatusMessage: __expectString,
        kmsArn: __expectString,
        lastRunExecutionDetails: (_) => de_ExecutionDetails(_, context),
        lastRunMetadataCatalogDetails: _json,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedBy: __expectString,
        metadataCatalogConfig: _json,
        schemaVersion: __expectLong,
        sourceFlowConfig: _json,
        tags: _json,
        tasks: _json,
        triggerConfig: (_) => de_TriggerConfig(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeFlowExecutionRecordsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        flowExecutions: (_) => de_FlowExecutionList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConnectorEntitiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorEntityMap: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConnectorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectors: (_) => de_ConnectorList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFlowsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        flows: (_) => de_FlowList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RegisterConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ResetConnectorMetadataCacheCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        executionId: __expectString,
        flowArn: __expectString,
        flowStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        flowArn: __expectString,
        flowStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UnregisterConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateConnectorProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorProfileArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateConnectorRegistrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        flowStatus: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.appflow#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.appflow#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.appflow#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.appflow#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.appflow#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.appflow#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ConnectorAuthenticationException":
        case "com.amazonaws.appflow#ConnectorAuthenticationException":
            throw await de_ConnectorAuthenticationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.appflow#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ConnectorServerException":
        case "com.amazonaws.appflow#ConnectorServerException":
            throw await de_ConnectorServerExceptionRes(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.appflow#UnsupportedOperationException":
            throw await de_UnsupportedOperationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConnectorAuthenticationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConnectorAuthenticationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConnectorServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConnectorServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnsupportedOperationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnsupportedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_ScheduledTriggerProperties = (input, context) => {
    return take(input, {
        dataPullMode: [],
        firstExecutionFrom: (_) => Math.round(_.getTime() / 1000),
        flowErrorDeactivationThreshold: [],
        scheduleEndTime: (_) => Math.round(_.getTime() / 1000),
        scheduleExpression: [],
        scheduleOffset: [],
        scheduleStartTime: (_) => Math.round(_.getTime() / 1000),
        timezone: [],
    });
};
const se_TriggerConfig = (input, context) => {
    return take(input, {
        triggerProperties: (_) => se_TriggerProperties(_, context),
        triggerType: [],
    });
};
const se_TriggerProperties = (input, context) => {
    return take(input, {
        Scheduled: (_) => se_ScheduledTriggerProperties(_, context),
    });
};
const de_ConnectorConfiguration = (output, context) => {
    return take(output, {
        authenticationConfig: _json,
        canUseAsDestination: __expectBoolean,
        canUseAsSource: __expectBoolean,
        connectorArn: __expectString,
        connectorDescription: __expectString,
        connectorLabel: __expectString,
        connectorMetadata: _json,
        connectorModes: _json,
        connectorName: __expectString,
        connectorOwner: __expectString,
        connectorProvisioningConfig: _json,
        connectorProvisioningType: __expectString,
        connectorRuntimeSettings: _json,
        connectorType: __expectString,
        connectorVersion: __expectString,
        isPrivateLinkEnabled: __expectBoolean,
        isPrivateLinkEndpointUrlRequired: __expectBoolean,
        logoURL: __expectString,
        registeredAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        registeredBy: __expectString,
        supportedApiVersions: _json,
        supportedDataTransferApis: _json,
        supportedDataTransferTypes: _json,
        supportedDestinationConnectors: _json,
        supportedOperators: _json,
        supportedSchedulingFrequencies: _json,
        supportedTriggerTypes: _json,
        supportedWriteOperations: _json,
    });
};
const de_ConnectorConfigurationsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ConnectorConfiguration(value, context);
        return acc;
    }, {});
};
const de_ConnectorDetail = (output, context) => {
    return take(output, {
        applicationType: __expectString,
        connectorDescription: __expectString,
        connectorLabel: __expectString,
        connectorModes: _json,
        connectorName: __expectString,
        connectorOwner: __expectString,
        connectorProvisioningType: __expectString,
        connectorType: __expectString,
        connectorVersion: __expectString,
        registeredAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        registeredBy: __expectString,
        supportedDataTransferTypes: _json,
    });
};
const de_ConnectorEntityField = (output, context) => {
    return take(output, {
        customProperties: _json,
        defaultValue: __expectString,
        description: __expectString,
        destinationProperties: _json,
        identifier: __expectString,
        isDeprecated: __expectBoolean,
        isPrimaryKey: __expectBoolean,
        label: __expectString,
        parentIdentifier: __expectString,
        sourceProperties: _json,
        supportedFieldTypeDetails: (_) => de_SupportedFieldTypeDetails(_, context),
    });
};
const de_ConnectorEntityFieldList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConnectorEntityField(entry, context);
    });
    return retVal;
};
const de_ConnectorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConnectorDetail(entry, context);
    });
    return retVal;
};
const de_ConnectorProfile = (output, context) => {
    return take(output, {
        connectionMode: __expectString,
        connectorLabel: __expectString,
        connectorProfileArn: __expectString,
        connectorProfileName: __expectString,
        connectorProfileProperties: _json,
        connectorType: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        credentialsArn: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        privateConnectionProvisioningState: _json,
    });
};
const de_ConnectorProfileDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConnectorProfile(entry, context);
    });
    return retVal;
};
const de_ExecutionDetails = (output, context) => {
    return take(output, {
        mostRecentExecutionMessage: __expectString,
        mostRecentExecutionStatus: __expectString,
        mostRecentExecutionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ExecutionRecord = (output, context) => {
    return take(output, {
        dataPullEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        dataPullStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        executionId: __expectString,
        executionResult: _json,
        executionStatus: __expectString,
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        metadataCatalogDetails: _json,
        startedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_FieldTypeDetails = (output, context) => {
    return take(output, {
        fieldLengthRange: (_) => de_Range(_, context),
        fieldType: __expectString,
        fieldValueRange: (_) => de_Range(_, context),
        filterOperators: _json,
        supportedDateFormat: __expectString,
        supportedValues: _json,
        valueRegexPattern: __expectString,
    });
};
const de_FlowDefinition = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdBy: __expectString,
        description: __expectString,
        destinationConnectorLabel: __expectString,
        destinationConnectorType: __expectString,
        flowArn: __expectString,
        flowName: __expectString,
        flowStatus: __expectString,
        lastRunExecutionDetails: (_) => de_ExecutionDetails(_, context),
        lastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastUpdatedBy: __expectString,
        sourceConnectorLabel: __expectString,
        sourceConnectorType: __expectString,
        tags: _json,
        triggerType: __expectString,
    });
};
const de_FlowExecutionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExecutionRecord(entry, context);
    });
    return retVal;
};
const de_FlowList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowDefinition(entry, context);
    });
    return retVal;
};
const de_Range = (output, context) => {
    return take(output, {
        maximum: __limitedParseDouble,
        minimum: __limitedParseDouble,
    });
};
const de_ScheduledTriggerProperties = (output, context) => {
    return take(output, {
        dataPullMode: __expectString,
        firstExecutionFrom: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        flowErrorDeactivationThreshold: __expectInt32,
        scheduleEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        scheduleExpression: __expectString,
        scheduleOffset: __expectLong,
        scheduleStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        timezone: __expectString,
    });
};
const de_SupportedFieldTypeDetails = (output, context) => {
    return take(output, {
        v1: (_) => de_FieldTypeDetails(_, context),
    });
};
const de_TriggerConfig = (output, context) => {
    return take(output, {
        triggerProperties: (_) => de_TriggerProperties(_, context),
        triggerType: __expectString,
    });
};
const de_TriggerProperties = (output, context) => {
    return take(output, {
        Scheduled: (_) => de_ScheduledTriggerProperties(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
