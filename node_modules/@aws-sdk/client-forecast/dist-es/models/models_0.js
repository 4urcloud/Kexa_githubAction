import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { ForecastServiceException as __BaseException } from "./ForecastServiceException";
export const Operation = {
    ADD: "ADD",
    DIVIDE: "DIVIDE",
    MULTIPLY: "MULTIPLY",
    SUBTRACT: "SUBTRACT",
};
export const OptimizationMetric = {
    AverageWeightedQuantileLoss: "AverageWeightedQuantileLoss",
    MAPE: "MAPE",
    MASE: "MASE",
    RMSE: "RMSE",
    WAPE: "WAPE",
};
export const DayOfWeek = {
    FRIDAY: "FRIDAY",
    MONDAY: "MONDAY",
    SATURDAY: "SATURDAY",
    SUNDAY: "SUNDAY",
    THURSDAY: "THURSDAY",
    TUESDAY: "TUESDAY",
    WEDNESDAY: "WEDNESDAY",
};
export const Month = {
    APRIL: "APRIL",
    AUGUST: "AUGUST",
    DECEMBER: "DECEMBER",
    FEBRUARY: "FEBRUARY",
    JANUARY: "JANUARY",
    JULY: "JULY",
    JUNE: "JUNE",
    MARCH: "MARCH",
    MAY: "MAY",
    NOVEMBER: "NOVEMBER",
    OCTOBER: "OCTOBER",
    SEPTEMBER: "SEPTEMBER",
};
export class InvalidInputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const DatasetType = {
    ITEM_METADATA: "ITEM_METADATA",
    RELATED_TIME_SERIES: "RELATED_TIME_SERIES",
    TARGET_TIME_SERIES: "TARGET_TIME_SERIES",
};
export const Domain = {
    CUSTOM: "CUSTOM",
    EC2_CAPACITY: "EC2_CAPACITY",
    INVENTORY_PLANNING: "INVENTORY_PLANNING",
    METRICS: "METRICS",
    RETAIL: "RETAIL",
    WEB_TRAFFIC: "WEB_TRAFFIC",
    WORK_FORCE: "WORK_FORCE",
};
export const AttributeType = {
    FLOAT: "float",
    GEOLOCATION: "geolocation",
    INTEGER: "integer",
    STRING: "string",
    TIMESTAMP: "timestamp",
};
export const ImportMode = {
    FULL: "FULL",
    INCREMENTAL: "INCREMENTAL",
};
export const TimePointGranularity = {
    ALL: "ALL",
    SPECIFIC: "SPECIFIC",
};
export const TimeSeriesGranularity = {
    ALL: "ALL",
    SPECIFIC: "SPECIFIC",
};
export const AutoMLOverrideStrategy = {
    AccuracyOptimized: "AccuracyOptimized",
    LatencyOptimized: "LatencyOptimized",
};
export const FeaturizationMethodName = {
    filling: "filling",
};
export const ScalingType = {
    Auto: "Auto",
    Linear: "Linear",
    Logarithmic: "Logarithmic",
    ReverseLogarithmic: "ReverseLogarithmic",
};
export const Condition = {
    EQUALS: "EQUALS",
    GREATER_THAN: "GREATER_THAN",
    LESS_THAN: "LESS_THAN",
    NOT_EQUALS: "NOT_EQUALS",
};
export const State = {
    Active: "Active",
    Deleted: "Deleted",
};
export const EvaluationType = {
    COMPUTED: "COMPUTED",
    SUMMARY: "SUMMARY",
};
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
export const FilterConditionString = {
    IS: "IS",
    IS_NOT: "IS_NOT",
};
export const TagFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Key && { Key: SENSITIVE_STRING }),
    ...(obj.Value && { Value: SENSITIVE_STRING }),
});
export const CreateAutoPredictorRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateDatasetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateDatasetGroupRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateDatasetImportJobRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateExplainabilityRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateExplainabilityExportRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateForecastRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateForecastExportJobRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateMonitorRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreatePredictorRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreatePredictorBacktestExportJobRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateWhatIfAnalysisRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateWhatIfForecastRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const CreateWhatIfForecastExportRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const TagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: obj.Tags.map((item) => TagFilterSensitiveLog(item)) }),
});
export const UntagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TagKeys && { TagKeys: SENSITIVE_STRING }),
});
