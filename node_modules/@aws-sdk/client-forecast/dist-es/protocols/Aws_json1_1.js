import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { ForecastServiceException as __BaseException } from "../models/ForecastServiceException";
import { InvalidInputException, InvalidNextTokenException, LimitExceededException, ResourceAlreadyExistsException, ResourceInUseException, ResourceNotFoundException, } from "../models/models_0";
export const se_CreateAutoPredictorCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAutoPredictor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatasetGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDatasetGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatasetImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDatasetImportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateExplainabilityCommand = async (input, context) => {
    const headers = sharedHeaders("CreateExplainability");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateExplainabilityExportCommand = async (input, context) => {
    const headers = sharedHeaders("CreateExplainabilityExport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateForecastCommand = async (input, context) => {
    const headers = sharedHeaders("CreateForecast");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateForecastExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateForecastExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateMonitorCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMonitor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePredictorCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePredictor");
    let body;
    body = JSON.stringify(se_CreatePredictorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePredictorBacktestExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePredictorBacktestExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWhatIfAnalysisCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWhatIfAnalysis");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWhatIfForecastCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWhatIfForecast");
    let body;
    body = JSON.stringify(se_CreateWhatIfForecastRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWhatIfForecastExportCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWhatIfForecastExport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDatasetGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDatasetGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDatasetImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDatasetImportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteExplainabilityCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteExplainability");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteExplainabilityExportCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteExplainabilityExport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteForecastCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteForecast");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteForecastExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteForecastExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMonitorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMonitor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePredictorCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePredictor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePredictorBacktestExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePredictorBacktestExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourceTreeCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourceTree");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWhatIfAnalysisCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWhatIfAnalysis");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWhatIfForecastCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWhatIfForecast");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWhatIfForecastExportCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWhatIfForecastExport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAutoPredictorCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAutoPredictor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDatasetGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDatasetImportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeExplainabilityCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeExplainability");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeExplainabilityExportCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeExplainabilityExport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeForecastCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeForecast");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeForecastExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeForecastExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeMonitorCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMonitor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePredictorCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePredictor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePredictorBacktestExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePredictorBacktestExportJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWhatIfAnalysisCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWhatIfAnalysis");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWhatIfForecastCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWhatIfForecast");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeWhatIfForecastExportCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWhatIfForecastExport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAccuracyMetricsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccuracyMetrics");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasetGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetImportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasetImportJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListExplainabilitiesCommand = async (input, context) => {
    const headers = sharedHeaders("ListExplainabilities");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListExplainabilityExportsCommand = async (input, context) => {
    const headers = sharedHeaders("ListExplainabilityExports");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListForecastExportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListForecastExportJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListForecastsCommand = async (input, context) => {
    const headers = sharedHeaders("ListForecasts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMonitorEvaluationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitorEvaluations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMonitorsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPredictorBacktestExportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPredictorBacktestExportJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPredictorsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPredictors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWhatIfAnalysesCommand = async (input, context) => {
    const headers = sharedHeaders("ListWhatIfAnalyses");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWhatIfForecastExportsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWhatIfForecastExports");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWhatIfForecastsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWhatIfForecasts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ResumeResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ResumeResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopResourceCommand = async (input, context) => {
    const headers = sharedHeaders("StopResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDatasetGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDatasetGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateAutoPredictorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDatasetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDatasetImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateExplainabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateExplainabilityExportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateForecastCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateForecastExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateMonitorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePredictorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePredictorBacktestExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWhatIfAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWhatIfForecastCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWhatIfForecastExportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteDatasetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteDatasetImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteExplainabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteExplainabilityExportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteForecastCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteForecastExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteMonitorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeletePredictorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeletePredictorBacktestExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteResourceTreeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteWhatIfAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteWhatIfForecastCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteWhatIfForecastExportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeAutoPredictorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutoPredictorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDatasetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDatasetImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetImportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeExplainabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeExplainabilityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeExplainabilityExportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeExplainabilityExportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeForecastCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeForecastResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeForecastExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeForecastExportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeMonitorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMonitorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribePredictorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePredictorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribePredictorBacktestExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePredictorBacktestExportJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWhatIfAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWhatIfAnalysisResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWhatIfForecastCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWhatIfForecastResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeWhatIfForecastExportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeWhatIfForecastExportResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAccuracyMetricsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAccuracyMetricsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDatasetGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetImportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDatasetImportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDatasetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListExplainabilitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListExplainabilitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListExplainabilityExportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListExplainabilityExportsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListForecastExportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListForecastExportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListForecastsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListForecastsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMonitorEvaluationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMonitorEvaluationsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMonitorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMonitorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPredictorBacktestExportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPredictorBacktestExportJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPredictorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPredictorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListWhatIfAnalysesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListWhatIfAnalysesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListWhatIfForecastExportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListWhatIfForecastExportsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListWhatIfForecastsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListWhatIfForecastsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ResumeResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_StopResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDatasetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.forecast#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.forecast#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.forecast#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.forecast#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.forecast#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.forecast#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_Action = (input, context) => {
    return take(input, {
        AttributeName: [],
        Operation: [],
        Value: __serializeFloat,
    });
};
const se_ContinuousParameterRange = (input, context) => {
    return take(input, {
        MaxValue: __serializeFloat,
        MinValue: __serializeFloat,
        Name: [],
        ScalingType: [],
    });
};
const se_ContinuousParameterRanges = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContinuousParameterRange(entry, context);
    });
};
const se_CreatePredictorRequest = (input, context) => {
    return take(input, {
        AlgorithmArn: [],
        AutoMLOverrideStrategy: [],
        EncryptionConfig: _json,
        EvaluationParameters: _json,
        FeaturizationConfig: _json,
        ForecastHorizon: [],
        ForecastTypes: _json,
        HPOConfig: (_) => se_HyperParameterTuningJobConfig(_, context),
        InputDataConfig: _json,
        OptimizationMetric: [],
        PerformAutoML: [],
        PerformHPO: [],
        PredictorName: [],
        Tags: _json,
        TrainingParameters: _json,
    });
};
const se_CreateWhatIfForecastRequest = (input, context) => {
    return take(input, {
        Tags: _json,
        TimeSeriesReplacementsDataSource: _json,
        TimeSeriesTransformations: (_) => se_TimeSeriesTransformations(_, context),
        WhatIfAnalysisArn: [],
        WhatIfForecastName: [],
    });
};
const se_HyperParameterTuningJobConfig = (input, context) => {
    return take(input, {
        ParameterRanges: (_) => se_ParameterRanges(_, context),
    });
};
const se_ParameterRanges = (input, context) => {
    return take(input, {
        CategoricalParameterRanges: _json,
        ContinuousParameterRanges: (_) => se_ContinuousParameterRanges(_, context),
        IntegerParameterRanges: _json,
    });
};
const se_TimeSeriesTransformation = (input, context) => {
    return take(input, {
        Action: (_) => se_Action(_, context),
        TimeSeriesConditions: _json,
    });
};
const se_TimeSeriesTransformations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TimeSeriesTransformation(entry, context);
    });
};
const de_Action = (output, context) => {
    return take(output, {
        AttributeName: __expectString,
        Operation: __expectString,
        Value: __limitedParseDouble,
    });
};
const de_Baseline = (output, context) => {
    return take(output, {
        PredictorBaseline: (_) => de_PredictorBaseline(_, context),
    });
};
const de_BaselineMetric = (output, context) => {
    return take(output, {
        Name: __expectString,
        Value: __limitedParseDouble,
    });
};
const de_BaselineMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BaselineMetric(entry, context);
    });
    return retVal;
};
const de_ContinuousParameterRange = (output, context) => {
    return take(output, {
        MaxValue: __limitedParseDouble,
        MinValue: __limitedParseDouble,
        Name: __expectString,
        ScalingType: __expectString,
    });
};
const de_ContinuousParameterRanges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContinuousParameterRange(entry, context);
    });
    return retVal;
};
const de_DatasetGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetGroupSummary(entry, context);
    });
    return retVal;
};
const de_DatasetGroupSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetGroupArn: __expectString,
        DatasetGroupName: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DatasetImportJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetImportJobSummary(entry, context);
    });
    return retVal;
};
const de_DatasetImportJobSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSource: _json,
        DatasetImportJobArn: __expectString,
        DatasetImportJobName: __expectString,
        ImportMode: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
    });
};
const de_Datasets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetSummary(entry, context);
    });
    return retVal;
};
const de_DatasetSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetArn: __expectString,
        DatasetName: __expectString,
        DatasetType: __expectString,
        Domain: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeAutoPredictorResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataConfig: _json,
        DatasetImportJobArns: _json,
        EncryptionConfig: _json,
        EstimatedTimeRemainingInMinutes: __expectLong,
        ExplainabilityInfo: _json,
        ForecastDimensions: _json,
        ForecastFrequency: __expectString,
        ForecastHorizon: __expectInt32,
        ForecastTypes: _json,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        MonitorInfo: _json,
        OptimizationMetric: __expectString,
        PredictorArn: __expectString,
        PredictorName: __expectString,
        ReferencePredictorSummary: _json,
        Status: __expectString,
        TimeAlignmentBoundary: _json,
    });
};
const de_DescribeDatasetGroupResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetArns: _json,
        DatasetGroupArn: __expectString,
        DatasetGroupName: __expectString,
        Domain: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_DescribeDatasetImportJobResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSize: __limitedParseDouble,
        DataSource: _json,
        DatasetArn: __expectString,
        DatasetImportJobArn: __expectString,
        DatasetImportJobName: __expectString,
        EstimatedTimeRemainingInMinutes: __expectLong,
        FieldStatistics: (_) => de_FieldStatistics(_, context),
        Format: __expectString,
        GeolocationFormat: __expectString,
        ImportMode: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
        TimeZone: __expectString,
        TimestampFormat: __expectString,
        UseGeolocationForTimeZone: __expectBoolean,
    });
};
const de_DescribeDatasetResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataFrequency: __expectString,
        DatasetArn: __expectString,
        DatasetName: __expectString,
        DatasetType: __expectString,
        Domain: __expectString,
        EncryptionConfig: _json,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Schema: _json,
        Status: __expectString,
    });
};
const de_DescribeExplainabilityExportResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destination: _json,
        ExplainabilityArn: __expectString,
        ExplainabilityExportArn: __expectString,
        ExplainabilityExportName: __expectString,
        Format: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
    });
};
const de_DescribeExplainabilityResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSource: _json,
        EnableVisualization: __expectBoolean,
        EndDateTime: __expectString,
        EstimatedTimeRemainingInMinutes: __expectLong,
        ExplainabilityArn: __expectString,
        ExplainabilityConfig: _json,
        ExplainabilityName: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        ResourceArn: __expectString,
        Schema: _json,
        StartDateTime: __expectString,
        Status: __expectString,
    });
};
const de_DescribeForecastExportJobResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destination: _json,
        ForecastArn: __expectString,
        ForecastExportJobArn: __expectString,
        ForecastExportJobName: __expectString,
        Format: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
    });
};
const de_DescribeForecastResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetGroupArn: __expectString,
        EstimatedTimeRemainingInMinutes: __expectLong,
        ForecastArn: __expectString,
        ForecastName: __expectString,
        ForecastTypes: _json,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        PredictorArn: __expectString,
        Status: __expectString,
        TimeSeriesSelector: _json,
    });
};
const de_DescribeMonitorResponse = (output, context) => {
    return take(output, {
        Baseline: (_) => de_Baseline(_, context),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EstimatedEvaluationTimeRemainingInMinutes: __expectLong,
        LastEvaluationState: __expectString,
        LastEvaluationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        MonitorArn: __expectString,
        MonitorName: __expectString,
        ResourceArn: __expectString,
        Status: __expectString,
    });
};
const de_DescribePredictorBacktestExportJobResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destination: _json,
        Format: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        PredictorArn: __expectString,
        PredictorBacktestExportJobArn: __expectString,
        PredictorBacktestExportJobName: __expectString,
        Status: __expectString,
    });
};
const de_DescribePredictorResponse = (output, context) => {
    return take(output, {
        AlgorithmArn: __expectString,
        AutoMLAlgorithmArns: _json,
        AutoMLOverrideStrategy: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetImportJobArns: _json,
        EncryptionConfig: _json,
        EstimatedTimeRemainingInMinutes: __expectLong,
        EvaluationParameters: _json,
        FeaturizationConfig: _json,
        ForecastHorizon: __expectInt32,
        ForecastTypes: _json,
        HPOConfig: (_) => de_HyperParameterTuningJobConfig(_, context),
        InputDataConfig: _json,
        IsAutoPredictor: __expectBoolean,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        OptimizationMetric: __expectString,
        PerformAutoML: __expectBoolean,
        PerformHPO: __expectBoolean,
        PredictorArn: __expectString,
        PredictorExecutionDetails: (_) => de_PredictorExecutionDetails(_, context),
        PredictorName: __expectString,
        Status: __expectString,
        TrainingParameters: _json,
    });
};
const de_DescribeWhatIfAnalysisResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EstimatedTimeRemainingInMinutes: __expectLong,
        ForecastArn: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
        TimeSeriesSelector: _json,
        WhatIfAnalysisArn: __expectString,
        WhatIfAnalysisName: __expectString,
    });
};
const de_DescribeWhatIfForecastExportResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destination: _json,
        EstimatedTimeRemainingInMinutes: __expectLong,
        Format: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
        WhatIfForecastArns: _json,
        WhatIfForecastExportArn: __expectString,
        WhatIfForecastExportName: __expectString,
    });
};
const de_DescribeWhatIfForecastResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EstimatedTimeRemainingInMinutes: __expectLong,
        ForecastTypes: _json,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
        TimeSeriesReplacementsDataSource: _json,
        TimeSeriesTransformations: (_) => de_TimeSeriesTransformations(_, context),
        WhatIfAnalysisArn: __expectString,
        WhatIfForecastArn: __expectString,
        WhatIfForecastName: __expectString,
    });
};
const de_ErrorMetric = (output, context) => {
    return take(output, {
        ForecastType: __expectString,
        MAPE: __limitedParseDouble,
        MASE: __limitedParseDouble,
        RMSE: __limitedParseDouble,
        WAPE: __limitedParseDouble,
    });
};
const de_ErrorMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ErrorMetric(entry, context);
    });
    return retVal;
};
const de_EvaluationResult = (output, context) => {
    return take(output, {
        AlgorithmArn: __expectString,
        TestWindows: (_) => de_TestWindows(_, context),
    });
};
const de_Explainabilities = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExplainabilitySummary(entry, context);
    });
    return retVal;
};
const de_ExplainabilityExports = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExplainabilityExportSummary(entry, context);
    });
    return retVal;
};
const de_ExplainabilityExportSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destination: _json,
        ExplainabilityExportArn: __expectString,
        ExplainabilityExportName: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
    });
};
const de_ExplainabilitySummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExplainabilityArn: __expectString,
        ExplainabilityConfig: _json,
        ExplainabilityName: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        ResourceArn: __expectString,
        Status: __expectString,
    });
};
const de_FieldStatistics = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_Statistics(value, context);
        return acc;
    }, {});
};
const de_ForecastExportJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ForecastExportJobSummary(entry, context);
    });
    return retVal;
};
const de_ForecastExportJobSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destination: _json,
        ForecastExportJobArn: __expectString,
        ForecastExportJobName: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
    });
};
const de_Forecasts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ForecastSummary(entry, context);
    });
    return retVal;
};
const de_ForecastSummary = (output, context) => {
    return take(output, {
        CreatedUsingAutoPredictor: __expectBoolean,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetGroupArn: __expectString,
        ForecastArn: __expectString,
        ForecastName: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        PredictorArn: __expectString,
        Status: __expectString,
    });
};
const de_GetAccuracyMetricsResponse = (output, context) => {
    return take(output, {
        AutoMLOverrideStrategy: __expectString,
        IsAutoPredictor: __expectBoolean,
        OptimizationMetric: __expectString,
        PredictorEvaluationResults: (_) => de_PredictorEvaluationResults(_, context),
    });
};
const de_HyperParameterTuningJobConfig = (output, context) => {
    return take(output, {
        ParameterRanges: (_) => de_ParameterRanges(_, context),
    });
};
const de_ListDatasetGroupsResponse = (output, context) => {
    return take(output, {
        DatasetGroups: (_) => de_DatasetGroups(_, context),
        NextToken: __expectString,
    });
};
const de_ListDatasetImportJobsResponse = (output, context) => {
    return take(output, {
        DatasetImportJobs: (_) => de_DatasetImportJobs(_, context),
        NextToken: __expectString,
    });
};
const de_ListDatasetsResponse = (output, context) => {
    return take(output, {
        Datasets: (_) => de_Datasets(_, context),
        NextToken: __expectString,
    });
};
const de_ListExplainabilitiesResponse = (output, context) => {
    return take(output, {
        Explainabilities: (_) => de_Explainabilities(_, context),
        NextToken: __expectString,
    });
};
const de_ListExplainabilityExportsResponse = (output, context) => {
    return take(output, {
        ExplainabilityExports: (_) => de_ExplainabilityExports(_, context),
        NextToken: __expectString,
    });
};
const de_ListForecastExportJobsResponse = (output, context) => {
    return take(output, {
        ForecastExportJobs: (_) => de_ForecastExportJobs(_, context),
        NextToken: __expectString,
    });
};
const de_ListForecastsResponse = (output, context) => {
    return take(output, {
        Forecasts: (_) => de_Forecasts(_, context),
        NextToken: __expectString,
    });
};
const de_ListMonitorEvaluationsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PredictorMonitorEvaluations: (_) => de_PredictorMonitorEvaluations(_, context),
    });
};
const de_ListMonitorsResponse = (output, context) => {
    return take(output, {
        Monitors: (_) => de_Monitors(_, context),
        NextToken: __expectString,
    });
};
const de_ListPredictorBacktestExportJobsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PredictorBacktestExportJobs: (_) => de_PredictorBacktestExportJobs(_, context),
    });
};
const de_ListPredictorsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Predictors: (_) => de_Predictors(_, context),
    });
};
const de_ListWhatIfAnalysesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        WhatIfAnalyses: (_) => de_WhatIfAnalyses(_, context),
    });
};
const de_ListWhatIfForecastExportsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        WhatIfForecastExports: (_) => de_WhatIfForecastExports(_, context),
    });
};
const de_ListWhatIfForecastsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        WhatIfForecasts: (_) => de_WhatIfForecasts(_, context),
    });
};
const de_MetricResult = (output, context) => {
    return take(output, {
        MetricName: __expectString,
        MetricValue: __limitedParseDouble,
    });
};
const de_MetricResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricResult(entry, context);
    });
    return retVal;
};
const de_Metrics = (output, context) => {
    return take(output, {
        AverageWeightedQuantileLoss: __limitedParseDouble,
        ErrorMetrics: (_) => de_ErrorMetrics(_, context),
        RMSE: __limitedParseDouble,
        WeightedQuantileLosses: (_) => de_WeightedQuantileLosses(_, context),
    });
};
const de_Monitors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitorSummary(entry, context);
    });
    return retVal;
};
const de_MonitorSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MonitorArn: __expectString,
        MonitorName: __expectString,
        ResourceArn: __expectString,
        Status: __expectString,
    });
};
const de_ParameterRanges = (output, context) => {
    return take(output, {
        CategoricalParameterRanges: _json,
        ContinuousParameterRanges: (_) => de_ContinuousParameterRanges(_, context),
        IntegerParameterRanges: _json,
    });
};
const de_PredictorBacktestExportJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PredictorBacktestExportJobSummary(entry, context);
    });
    return retVal;
};
const de_PredictorBacktestExportJobSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destination: _json,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        PredictorBacktestExportJobArn: __expectString,
        PredictorBacktestExportJobName: __expectString,
        Status: __expectString,
    });
};
const de_PredictorBaseline = (output, context) => {
    return take(output, {
        BaselineMetrics: (_) => de_BaselineMetrics(_, context),
    });
};
const de_PredictorEvaluationResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationResult(entry, context);
    });
    return retVal;
};
const de_PredictorEvent = (output, context) => {
    return take(output, {
        Datetime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Detail: __expectString,
    });
};
const de_PredictorExecution = (output, context) => {
    return take(output, {
        AlgorithmArn: __expectString,
        TestWindows: (_) => de_TestWindowDetails(_, context),
    });
};
const de_PredictorExecutionDetails = (output, context) => {
    return take(output, {
        PredictorExecutions: (_) => de_PredictorExecutions(_, context),
    });
};
const de_PredictorExecutions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PredictorExecution(entry, context);
    });
    return retVal;
};
const de_PredictorMonitorEvaluation = (output, context) => {
    return take(output, {
        EvaluationState: __expectString,
        EvaluationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        MetricResults: (_) => de_MetricResults(_, context),
        MonitorArn: __expectString,
        MonitorDataSource: _json,
        NumItemsEvaluated: __expectLong,
        PredictorEvent: (_) => de_PredictorEvent(_, context),
        ResourceArn: __expectString,
        WindowEndDatetime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        WindowStartDatetime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_PredictorMonitorEvaluations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PredictorMonitorEvaluation(entry, context);
    });
    return retVal;
};
const de_Predictors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PredictorSummary(entry, context);
    });
    return retVal;
};
const de_PredictorSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetGroupArn: __expectString,
        IsAutoPredictor: __expectBoolean,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        PredictorArn: __expectString,
        PredictorName: __expectString,
        ReferencePredictorSummary: _json,
        Status: __expectString,
    });
};
const de_Statistics = (output, context) => {
    return take(output, {
        Avg: __limitedParseDouble,
        Count: __expectInt32,
        CountDistinct: __expectInt32,
        CountDistinctLong: __expectLong,
        CountLong: __expectLong,
        CountNan: __expectInt32,
        CountNanLong: __expectLong,
        CountNull: __expectInt32,
        CountNullLong: __expectLong,
        Max: __expectString,
        Min: __expectString,
        Stddev: __limitedParseDouble,
    });
};
const de_TestWindowDetails = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TestWindowSummary(entry, context);
    });
    return retVal;
};
const de_TestWindows = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WindowSummary(entry, context);
    });
    return retVal;
};
const de_TestWindowSummary = (output, context) => {
    return take(output, {
        Message: __expectString,
        Status: __expectString,
        TestWindowEnd: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TestWindowStart: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_TimeSeriesTransformation = (output, context) => {
    return take(output, {
        Action: (_) => de_Action(_, context),
        TimeSeriesConditions: _json,
    });
};
const de_TimeSeriesTransformations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TimeSeriesTransformation(entry, context);
    });
    return retVal;
};
const de_WeightedQuantileLoss = (output, context) => {
    return take(output, {
        LossValue: __limitedParseDouble,
        Quantile: __limitedParseDouble,
    });
};
const de_WeightedQuantileLosses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WeightedQuantileLoss(entry, context);
    });
    return retVal;
};
const de_WhatIfAnalyses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WhatIfAnalysisSummary(entry, context);
    });
    return retVal;
};
const de_WhatIfAnalysisSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ForecastArn: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
        WhatIfAnalysisArn: __expectString,
        WhatIfAnalysisName: __expectString,
    });
};
const de_WhatIfForecastExports = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WhatIfForecastExportSummary(entry, context);
    });
    return retVal;
};
const de_WhatIfForecastExportSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Destination: _json,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
        WhatIfForecastArns: _json,
        WhatIfForecastExportArn: __expectString,
        WhatIfForecastExportName: __expectString,
    });
};
const de_WhatIfForecasts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WhatIfForecastSummary(entry, context);
    });
    return retVal;
};
const de_WhatIfForecastSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Status: __expectString,
        WhatIfAnalysisArn: __expectString,
        WhatIfForecastArn: __expectString,
        WhatIfForecastName: __expectString,
    });
};
const de_WindowSummary = (output, context) => {
    return take(output, {
        EvaluationType: __expectString,
        ItemCount: __expectInt32,
        Metrics: (_) => de_Metrics(_, context),
        TestWindowEnd: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TestWindowStart: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonForecast.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
