import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ForecastServiceException as __BaseException } from "./ForecastServiceException";
export declare const Operation: {
  readonly ADD: "ADD";
  readonly DIVIDE: "DIVIDE";
  readonly MULTIPLY: "MULTIPLY";
  readonly SUBTRACT: "SUBTRACT";
};
export type Operation = (typeof Operation)[keyof typeof Operation];
export interface Action {
  AttributeName: string | undefined;
  Operation: Operation | undefined;
  Value: number | undefined;
}
export interface AdditionalDataset {
  Name: string | undefined;
  Configuration?: Record<string, string[]>;
}
export interface AttributeConfig {
  AttributeName: string | undefined;
  Transformations: Record<string, string> | undefined;
}
export interface DataConfig {
  DatasetGroupArn: string | undefined;
  AttributeConfigs?: AttributeConfig[];
  AdditionalDatasets?: AdditionalDataset[];
}
export interface EncryptionConfig {
  RoleArn: string | undefined;
  KMSKeyArn: string | undefined;
}
export interface MonitorConfig {
  MonitorName: string | undefined;
}
export declare const OptimizationMetric: {
  readonly AverageWeightedQuantileLoss: "AverageWeightedQuantileLoss";
  readonly MAPE: "MAPE";
  readonly MASE: "MASE";
  readonly RMSE: "RMSE";
  readonly WAPE: "WAPE";
};
export type OptimizationMetric =
  (typeof OptimizationMetric)[keyof typeof OptimizationMetric];
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export declare const DayOfWeek: {
  readonly FRIDAY: "FRIDAY";
  readonly MONDAY: "MONDAY";
  readonly SATURDAY: "SATURDAY";
  readonly SUNDAY: "SUNDAY";
  readonly THURSDAY: "THURSDAY";
  readonly TUESDAY: "TUESDAY";
  readonly WEDNESDAY: "WEDNESDAY";
};
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export declare const Month: {
  readonly APRIL: "APRIL";
  readonly AUGUST: "AUGUST";
  readonly DECEMBER: "DECEMBER";
  readonly FEBRUARY: "FEBRUARY";
  readonly JANUARY: "JANUARY";
  readonly JULY: "JULY";
  readonly JUNE: "JUNE";
  readonly MARCH: "MARCH";
  readonly MAY: "MAY";
  readonly NOVEMBER: "NOVEMBER";
  readonly OCTOBER: "OCTOBER";
  readonly SEPTEMBER: "SEPTEMBER";
};
export type Month = (typeof Month)[keyof typeof Month];
export interface TimeAlignmentBoundary {
  Month?: Month;
  DayOfMonth?: number;
  DayOfWeek?: DayOfWeek;
  Hour?: number;
}
export interface CreateAutoPredictorRequest {
  PredictorName: string | undefined;
  ForecastHorizon?: number;
  ForecastTypes?: string[];
  ForecastDimensions?: string[];
  ForecastFrequency?: string;
  DataConfig?: DataConfig;
  EncryptionConfig?: EncryptionConfig;
  ReferencePredictorArn?: string;
  OptimizationMetric?: OptimizationMetric;
  ExplainPredictor?: boolean;
  Tags?: Tag[];
  MonitorConfig?: MonitorConfig;
  TimeAlignmentBoundary?: TimeAlignmentBoundary;
}
export interface CreateAutoPredictorResponse {
  PredictorArn?: string;
}
export declare class InvalidInputException extends __BaseException {
  readonly name: "InvalidInputException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidInputException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare const DatasetType: {
  readonly ITEM_METADATA: "ITEM_METADATA";
  readonly RELATED_TIME_SERIES: "RELATED_TIME_SERIES";
  readonly TARGET_TIME_SERIES: "TARGET_TIME_SERIES";
};
export type DatasetType = (typeof DatasetType)[keyof typeof DatasetType];
export declare const Domain: {
  readonly CUSTOM: "CUSTOM";
  readonly EC2_CAPACITY: "EC2_CAPACITY";
  readonly INVENTORY_PLANNING: "INVENTORY_PLANNING";
  readonly METRICS: "METRICS";
  readonly RETAIL: "RETAIL";
  readonly WEB_TRAFFIC: "WEB_TRAFFIC";
  readonly WORK_FORCE: "WORK_FORCE";
};
export type Domain = (typeof Domain)[keyof typeof Domain];
export declare const AttributeType: {
  readonly FLOAT: "float";
  readonly GEOLOCATION: "geolocation";
  readonly INTEGER: "integer";
  readonly STRING: "string";
  readonly TIMESTAMP: "timestamp";
};
export type AttributeType = (typeof AttributeType)[keyof typeof AttributeType];
export interface SchemaAttribute {
  AttributeName?: string;
  AttributeType?: AttributeType;
}
export interface Schema {
  Attributes?: SchemaAttribute[];
}
export interface CreateDatasetRequest {
  DatasetName: string | undefined;
  Domain: Domain | undefined;
  DatasetType: DatasetType | undefined;
  DataFrequency?: string;
  Schema: Schema | undefined;
  EncryptionConfig?: EncryptionConfig;
  Tags?: Tag[];
}
export interface CreateDatasetResponse {
  DatasetArn?: string;
}
export interface CreateDatasetGroupRequest {
  DatasetGroupName: string | undefined;
  Domain: Domain | undefined;
  DatasetArns?: string[];
  Tags?: Tag[];
}
export interface CreateDatasetGroupResponse {
  DatasetGroupArn?: string;
}
export interface S3Config {
  Path: string | undefined;
  RoleArn: string | undefined;
  KMSKeyArn?: string;
}
export interface DataSource {
  S3Config: S3Config | undefined;
}
export declare const ImportMode: {
  readonly FULL: "FULL";
  readonly INCREMENTAL: "INCREMENTAL";
};
export type ImportMode = (typeof ImportMode)[keyof typeof ImportMode];
export interface CreateDatasetImportJobRequest {
  DatasetImportJobName: string | undefined;
  DatasetArn: string | undefined;
  DataSource: DataSource | undefined;
  TimestampFormat?: string;
  TimeZone?: string;
  UseGeolocationForTimeZone?: boolean;
  GeolocationFormat?: string;
  Tags?: Tag[];
  Format?: string;
  ImportMode?: ImportMode;
}
export interface CreateDatasetImportJobResponse {
  DatasetImportJobArn?: string;
}
export declare const TimePointGranularity: {
  readonly ALL: "ALL";
  readonly SPECIFIC: "SPECIFIC";
};
export type TimePointGranularity =
  (typeof TimePointGranularity)[keyof typeof TimePointGranularity];
export declare const TimeSeriesGranularity: {
  readonly ALL: "ALL";
  readonly SPECIFIC: "SPECIFIC";
};
export type TimeSeriesGranularity =
  (typeof TimeSeriesGranularity)[keyof typeof TimeSeriesGranularity];
export interface ExplainabilityConfig {
  TimeSeriesGranularity: TimeSeriesGranularity | undefined;
  TimePointGranularity: TimePointGranularity | undefined;
}
export interface CreateExplainabilityRequest {
  ExplainabilityName: string | undefined;
  ResourceArn: string | undefined;
  ExplainabilityConfig: ExplainabilityConfig | undefined;
  DataSource?: DataSource;
  Schema?: Schema;
  EnableVisualization?: boolean;
  StartDateTime?: string;
  EndDateTime?: string;
  Tags?: Tag[];
}
export interface CreateExplainabilityResponse {
  ExplainabilityArn?: string;
}
export interface DataDestination {
  S3Config: S3Config | undefined;
}
export interface CreateExplainabilityExportRequest {
  ExplainabilityExportName: string | undefined;
  ExplainabilityArn: string | undefined;
  Destination: DataDestination | undefined;
  Tags?: Tag[];
  Format?: string;
}
export interface CreateExplainabilityExportResponse {
  ExplainabilityExportArn?: string;
}
export interface TimeSeriesIdentifiers {
  DataSource?: DataSource;
  Schema?: Schema;
  Format?: string;
}
export interface TimeSeriesSelector {
  TimeSeriesIdentifiers?: TimeSeriesIdentifiers;
}
export interface CreateForecastRequest {
  ForecastName: string | undefined;
  PredictorArn: string | undefined;
  ForecastTypes?: string[];
  Tags?: Tag[];
  TimeSeriesSelector?: TimeSeriesSelector;
}
export interface CreateForecastResponse {
  ForecastArn?: string;
}
export interface CreateForecastExportJobRequest {
  ForecastExportJobName: string | undefined;
  ForecastArn: string | undefined;
  Destination: DataDestination | undefined;
  Tags?: Tag[];
  Format?: string;
}
export interface CreateForecastExportJobResponse {
  ForecastExportJobArn?: string;
}
export interface CreateMonitorRequest {
  MonitorName: string | undefined;
  ResourceArn: string | undefined;
  Tags?: Tag[];
}
export interface CreateMonitorResponse {
  MonitorArn?: string;
}
export declare const AutoMLOverrideStrategy: {
  readonly AccuracyOptimized: "AccuracyOptimized";
  readonly LatencyOptimized: "LatencyOptimized";
};
export type AutoMLOverrideStrategy =
  (typeof AutoMLOverrideStrategy)[keyof typeof AutoMLOverrideStrategy];
export interface EvaluationParameters {
  NumberOfBacktestWindows?: number;
  BackTestWindowOffset?: number;
}
export declare const FeaturizationMethodName: {
  readonly filling: "filling";
};
export type FeaturizationMethodName =
  (typeof FeaturizationMethodName)[keyof typeof FeaturizationMethodName];
export interface FeaturizationMethod {
  FeaturizationMethodName: FeaturizationMethodName | undefined;
  FeaturizationMethodParameters?: Record<string, string>;
}
export interface Featurization {
  AttributeName: string | undefined;
  FeaturizationPipeline?: FeaturizationMethod[];
}
export interface FeaturizationConfig {
  ForecastFrequency: string | undefined;
  ForecastDimensions?: string[];
  Featurizations?: Featurization[];
}
export interface CategoricalParameterRange {
  Name: string | undefined;
  Values: string[] | undefined;
}
export declare const ScalingType: {
  readonly Auto: "Auto";
  readonly Linear: "Linear";
  readonly Logarithmic: "Logarithmic";
  readonly ReverseLogarithmic: "ReverseLogarithmic";
};
export type ScalingType = (typeof ScalingType)[keyof typeof ScalingType];
export interface ContinuousParameterRange {
  Name: string | undefined;
  MaxValue: number | undefined;
  MinValue: number | undefined;
  ScalingType?: ScalingType;
}
export interface IntegerParameterRange {
  Name: string | undefined;
  MaxValue: number | undefined;
  MinValue: number | undefined;
  ScalingType?: ScalingType;
}
export interface ParameterRanges {
  CategoricalParameterRanges?: CategoricalParameterRange[];
  ContinuousParameterRanges?: ContinuousParameterRange[];
  IntegerParameterRanges?: IntegerParameterRange[];
}
export interface HyperParameterTuningJobConfig {
  ParameterRanges?: ParameterRanges;
}
export interface SupplementaryFeature {
  Name: string | undefined;
  Value: string | undefined;
}
export interface InputDataConfig {
  DatasetGroupArn: string | undefined;
  SupplementaryFeatures?: SupplementaryFeature[];
}
export interface CreatePredictorRequest {
  PredictorName: string | undefined;
  AlgorithmArn?: string;
  ForecastHorizon: number | undefined;
  ForecastTypes?: string[];
  PerformAutoML?: boolean;
  AutoMLOverrideStrategy?: AutoMLOverrideStrategy;
  PerformHPO?: boolean;
  TrainingParameters?: Record<string, string>;
  EvaluationParameters?: EvaluationParameters;
  HPOConfig?: HyperParameterTuningJobConfig;
  InputDataConfig: InputDataConfig | undefined;
  FeaturizationConfig: FeaturizationConfig | undefined;
  EncryptionConfig?: EncryptionConfig;
  Tags?: Tag[];
  OptimizationMetric?: OptimizationMetric;
}
export interface CreatePredictorResponse {
  PredictorArn?: string;
}
export interface CreatePredictorBacktestExportJobRequest {
  PredictorBacktestExportJobName: string | undefined;
  PredictorArn: string | undefined;
  Destination: DataDestination | undefined;
  Tags?: Tag[];
  Format?: string;
}
export interface CreatePredictorBacktestExportJobResponse {
  PredictorBacktestExportJobArn?: string;
}
export interface CreateWhatIfAnalysisRequest {
  WhatIfAnalysisName: string | undefined;
  ForecastArn: string | undefined;
  TimeSeriesSelector?: TimeSeriesSelector;
  Tags?: Tag[];
}
export interface CreateWhatIfAnalysisResponse {
  WhatIfAnalysisArn?: string;
}
export interface TimeSeriesReplacementsDataSource {
  S3Config: S3Config | undefined;
  Schema: Schema | undefined;
  Format?: string;
  TimestampFormat?: string;
}
export declare const Condition: {
  readonly EQUALS: "EQUALS";
  readonly GREATER_THAN: "GREATER_THAN";
  readonly LESS_THAN: "LESS_THAN";
  readonly NOT_EQUALS: "NOT_EQUALS";
};
export type Condition = (typeof Condition)[keyof typeof Condition];
export interface TimeSeriesCondition {
  AttributeName: string | undefined;
  AttributeValue: string | undefined;
  Condition: Condition | undefined;
}
export interface TimeSeriesTransformation {
  Action?: Action;
  TimeSeriesConditions?: TimeSeriesCondition[];
}
export interface CreateWhatIfForecastRequest {
  WhatIfForecastName: string | undefined;
  WhatIfAnalysisArn: string | undefined;
  TimeSeriesTransformations?: TimeSeriesTransformation[];
  TimeSeriesReplacementsDataSource?: TimeSeriesReplacementsDataSource;
  Tags?: Tag[];
}
export interface CreateWhatIfForecastResponse {
  WhatIfForecastArn?: string;
}
export interface CreateWhatIfForecastExportRequest {
  WhatIfForecastExportName: string | undefined;
  WhatIfForecastArns: string[] | undefined;
  Destination: DataDestination | undefined;
  Tags?: Tag[];
  Format?: string;
}
export interface CreateWhatIfForecastExportResponse {
  WhatIfForecastExportArn?: string;
}
export interface DeleteDatasetRequest {
  DatasetArn: string | undefined;
}
export interface DeleteDatasetGroupRequest {
  DatasetGroupArn: string | undefined;
}
export interface DeleteDatasetImportJobRequest {
  DatasetImportJobArn: string | undefined;
}
export interface DeleteExplainabilityRequest {
  ExplainabilityArn: string | undefined;
}
export interface DeleteExplainabilityExportRequest {
  ExplainabilityExportArn: string | undefined;
}
export interface DeleteForecastRequest {
  ForecastArn: string | undefined;
}
export interface DeleteForecastExportJobRequest {
  ForecastExportJobArn: string | undefined;
}
export interface DeleteMonitorRequest {
  MonitorArn: string | undefined;
}
export interface DeletePredictorRequest {
  PredictorArn: string | undefined;
}
export interface DeletePredictorBacktestExportJobRequest {
  PredictorBacktestExportJobArn: string | undefined;
}
export interface DeleteResourceTreeRequest {
  ResourceArn: string | undefined;
}
export interface DeleteWhatIfAnalysisRequest {
  WhatIfAnalysisArn: string | undefined;
}
export interface DeleteWhatIfForecastRequest {
  WhatIfForecastArn: string | undefined;
}
export interface DeleteWhatIfForecastExportRequest {
  WhatIfForecastExportArn: string | undefined;
}
export interface DescribeAutoPredictorRequest {
  PredictorArn: string | undefined;
}
export interface ExplainabilityInfo {
  ExplainabilityArn?: string;
  Status?: string;
}
export interface MonitorInfo {
  MonitorArn?: string;
  Status?: string;
}
export declare const State: {
  readonly Active: "Active";
  readonly Deleted: "Deleted";
};
export type State = (typeof State)[keyof typeof State];
export interface ReferencePredictorSummary {
  Arn?: string;
  State?: State;
}
export interface DescribeAutoPredictorResponse {
  PredictorArn?: string;
  PredictorName?: string;
  ForecastHorizon?: number;
  ForecastTypes?: string[];
  ForecastFrequency?: string;
  ForecastDimensions?: string[];
  DatasetImportJobArns?: string[];
  DataConfig?: DataConfig;
  EncryptionConfig?: EncryptionConfig;
  ReferencePredictorSummary?: ReferencePredictorSummary;
  EstimatedTimeRemainingInMinutes?: number;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  OptimizationMetric?: OptimizationMetric;
  ExplainabilityInfo?: ExplainabilityInfo;
  MonitorInfo?: MonitorInfo;
  TimeAlignmentBoundary?: TimeAlignmentBoundary;
}
export interface DescribeDatasetRequest {
  DatasetArn: string | undefined;
}
export interface DescribeDatasetResponse {
  DatasetArn?: string;
  DatasetName?: string;
  Domain?: Domain;
  DatasetType?: DatasetType;
  DataFrequency?: string;
  Schema?: Schema;
  EncryptionConfig?: EncryptionConfig;
  Status?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface DescribeDatasetGroupRequest {
  DatasetGroupArn: string | undefined;
}
export interface DescribeDatasetGroupResponse {
  DatasetGroupName?: string;
  DatasetGroupArn?: string;
  DatasetArns?: string[];
  Domain?: Domain;
  Status?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface DescribeDatasetImportJobRequest {
  DatasetImportJobArn: string | undefined;
}
export interface Statistics {
  Count?: number;
  CountDistinct?: number;
  CountNull?: number;
  CountNan?: number;
  Min?: string;
  Max?: string;
  Avg?: number;
  Stddev?: number;
  CountLong?: number;
  CountDistinctLong?: number;
  CountNullLong?: number;
  CountNanLong?: number;
}
export interface DescribeDatasetImportJobResponse {
  DatasetImportJobName?: string;
  DatasetImportJobArn?: string;
  DatasetArn?: string;
  TimestampFormat?: string;
  TimeZone?: string;
  UseGeolocationForTimeZone?: boolean;
  GeolocationFormat?: string;
  DataSource?: DataSource;
  EstimatedTimeRemainingInMinutes?: number;
  FieldStatistics?: Record<string, Statistics>;
  DataSize?: number;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  Format?: string;
  ImportMode?: ImportMode;
}
export interface DescribeExplainabilityRequest {
  ExplainabilityArn: string | undefined;
}
export interface DescribeExplainabilityResponse {
  ExplainabilityArn?: string;
  ExplainabilityName?: string;
  ResourceArn?: string;
  ExplainabilityConfig?: ExplainabilityConfig;
  EnableVisualization?: boolean;
  DataSource?: DataSource;
  Schema?: Schema;
  StartDateTime?: string;
  EndDateTime?: string;
  EstimatedTimeRemainingInMinutes?: number;
  Message?: string;
  Status?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface DescribeExplainabilityExportRequest {
  ExplainabilityExportArn: string | undefined;
}
export interface DescribeExplainabilityExportResponse {
  ExplainabilityExportArn?: string;
  ExplainabilityExportName?: string;
  ExplainabilityArn?: string;
  Destination?: DataDestination;
  Message?: string;
  Status?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  Format?: string;
}
export interface DescribeForecastRequest {
  ForecastArn: string | undefined;
}
export interface DescribeForecastResponse {
  ForecastArn?: string;
  ForecastName?: string;
  ForecastTypes?: string[];
  PredictorArn?: string;
  DatasetGroupArn?: string;
  EstimatedTimeRemainingInMinutes?: number;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  TimeSeriesSelector?: TimeSeriesSelector;
}
export interface DescribeForecastExportJobRequest {
  ForecastExportJobArn: string | undefined;
}
export interface DescribeForecastExportJobResponse {
  ForecastExportJobArn?: string;
  ForecastExportJobName?: string;
  ForecastArn?: string;
  Destination?: DataDestination;
  Message?: string;
  Status?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  Format?: string;
}
export interface DescribeMonitorRequest {
  MonitorArn: string | undefined;
}
export interface BaselineMetric {
  Name?: string;
  Value?: number;
}
export interface PredictorBaseline {
  BaselineMetrics?: BaselineMetric[];
}
export interface Baseline {
  PredictorBaseline?: PredictorBaseline;
}
export interface DescribeMonitorResponse {
  MonitorName?: string;
  MonitorArn?: string;
  ResourceArn?: string;
  Status?: string;
  LastEvaluationTime?: Date;
  LastEvaluationState?: string;
  Baseline?: Baseline;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  EstimatedEvaluationTimeRemainingInMinutes?: number;
}
export interface DescribePredictorRequest {
  PredictorArn: string | undefined;
}
export interface TestWindowSummary {
  TestWindowStart?: Date;
  TestWindowEnd?: Date;
  Status?: string;
  Message?: string;
}
export interface PredictorExecution {
  AlgorithmArn?: string;
  TestWindows?: TestWindowSummary[];
}
export interface PredictorExecutionDetails {
  PredictorExecutions?: PredictorExecution[];
}
export interface DescribePredictorResponse {
  PredictorArn?: string;
  PredictorName?: string;
  AlgorithmArn?: string;
  AutoMLAlgorithmArns?: string[];
  ForecastHorizon?: number;
  ForecastTypes?: string[];
  PerformAutoML?: boolean;
  AutoMLOverrideStrategy?: AutoMLOverrideStrategy;
  PerformHPO?: boolean;
  TrainingParameters?: Record<string, string>;
  EvaluationParameters?: EvaluationParameters;
  HPOConfig?: HyperParameterTuningJobConfig;
  InputDataConfig?: InputDataConfig;
  FeaturizationConfig?: FeaturizationConfig;
  EncryptionConfig?: EncryptionConfig;
  PredictorExecutionDetails?: PredictorExecutionDetails;
  EstimatedTimeRemainingInMinutes?: number;
  IsAutoPredictor?: boolean;
  DatasetImportJobArns?: string[];
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  OptimizationMetric?: OptimizationMetric;
}
export interface DescribePredictorBacktestExportJobRequest {
  PredictorBacktestExportJobArn: string | undefined;
}
export interface DescribePredictorBacktestExportJobResponse {
  PredictorBacktestExportJobArn?: string;
  PredictorBacktestExportJobName?: string;
  PredictorArn?: string;
  Destination?: DataDestination;
  Message?: string;
  Status?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  Format?: string;
}
export interface DescribeWhatIfAnalysisRequest {
  WhatIfAnalysisArn: string | undefined;
}
export interface DescribeWhatIfAnalysisResponse {
  WhatIfAnalysisName?: string;
  WhatIfAnalysisArn?: string;
  ForecastArn?: string;
  EstimatedTimeRemainingInMinutes?: number;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  TimeSeriesSelector?: TimeSeriesSelector;
}
export interface DescribeWhatIfForecastRequest {
  WhatIfForecastArn: string | undefined;
}
export interface DescribeWhatIfForecastResponse {
  WhatIfForecastName?: string;
  WhatIfForecastArn?: string;
  WhatIfAnalysisArn?: string;
  EstimatedTimeRemainingInMinutes?: number;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  TimeSeriesTransformations?: TimeSeriesTransformation[];
  TimeSeriesReplacementsDataSource?: TimeSeriesReplacementsDataSource;
  ForecastTypes?: string[];
}
export interface DescribeWhatIfForecastExportRequest {
  WhatIfForecastExportArn: string | undefined;
}
export interface DescribeWhatIfForecastExportResponse {
  WhatIfForecastExportArn?: string;
  WhatIfForecastExportName?: string;
  WhatIfForecastArns?: string[];
  Destination?: DataDestination;
  Message?: string;
  Status?: string;
  CreationTime?: Date;
  EstimatedTimeRemainingInMinutes?: number;
  LastModificationTime?: Date;
  Format?: string;
}
export interface GetAccuracyMetricsRequest {
  PredictorArn: string | undefined;
}
export declare const EvaluationType: {
  readonly COMPUTED: "COMPUTED";
  readonly SUMMARY: "SUMMARY";
};
export type EvaluationType =
  (typeof EvaluationType)[keyof typeof EvaluationType];
export interface ErrorMetric {
  ForecastType?: string;
  WAPE?: number;
  RMSE?: number;
  MASE?: number;
  MAPE?: number;
}
export interface WeightedQuantileLoss {
  Quantile?: number;
  LossValue?: number;
}
export interface Metrics {
  RMSE?: number;
  WeightedQuantileLosses?: WeightedQuantileLoss[];
  ErrorMetrics?: ErrorMetric[];
  AverageWeightedQuantileLoss?: number;
}
export interface WindowSummary {
  TestWindowStart?: Date;
  TestWindowEnd?: Date;
  ItemCount?: number;
  EvaluationType?: EvaluationType;
  Metrics?: Metrics;
}
export interface EvaluationResult {
  AlgorithmArn?: string;
  TestWindows?: WindowSummary[];
}
export interface GetAccuracyMetricsResponse {
  PredictorEvaluationResults?: EvaluationResult[];
  IsAutoPredictor?: boolean;
  AutoMLOverrideStrategy?: AutoMLOverrideStrategy;
  OptimizationMetric?: OptimizationMetric;
}
export declare class InvalidNextTokenException extends __BaseException {
  readonly name: "InvalidNextTokenException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>
  );
}
export interface ListDatasetGroupsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface DatasetGroupSummary {
  DatasetGroupArn?: string;
  DatasetGroupName?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListDatasetGroupsResponse {
  DatasetGroups?: DatasetGroupSummary[];
  NextToken?: string;
}
export declare const FilterConditionString: {
  readonly IS: "IS";
  readonly IS_NOT: "IS_NOT";
};
export type FilterConditionString =
  (typeof FilterConditionString)[keyof typeof FilterConditionString];
export interface Filter {
  Key: string | undefined;
  Value: string | undefined;
  Condition: FilterConditionString | undefined;
}
export interface ListDatasetImportJobsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface DatasetImportJobSummary {
  DatasetImportJobArn?: string;
  DatasetImportJobName?: string;
  DataSource?: DataSource;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
  ImportMode?: ImportMode;
}
export interface ListDatasetImportJobsResponse {
  DatasetImportJobs?: DatasetImportJobSummary[];
  NextToken?: string;
}
export interface ListDatasetsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface DatasetSummary {
  DatasetArn?: string;
  DatasetName?: string;
  DatasetType?: DatasetType;
  Domain?: Domain;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListDatasetsResponse {
  Datasets?: DatasetSummary[];
  NextToken?: string;
}
export interface ListExplainabilitiesRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface ExplainabilitySummary {
  ExplainabilityArn?: string;
  ExplainabilityName?: string;
  ResourceArn?: string;
  ExplainabilityConfig?: ExplainabilityConfig;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListExplainabilitiesResponse {
  Explainabilities?: ExplainabilitySummary[];
  NextToken?: string;
}
export interface ListExplainabilityExportsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface ExplainabilityExportSummary {
  ExplainabilityExportArn?: string;
  ExplainabilityExportName?: string;
  Destination?: DataDestination;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListExplainabilityExportsResponse {
  ExplainabilityExports?: ExplainabilityExportSummary[];
  NextToken?: string;
}
export interface ListForecastExportJobsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface ForecastExportJobSummary {
  ForecastExportJobArn?: string;
  ForecastExportJobName?: string;
  Destination?: DataDestination;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListForecastExportJobsResponse {
  ForecastExportJobs?: ForecastExportJobSummary[];
  NextToken?: string;
}
export interface ListForecastsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface ForecastSummary {
  ForecastArn?: string;
  ForecastName?: string;
  PredictorArn?: string;
  CreatedUsingAutoPredictor?: boolean;
  DatasetGroupArn?: string;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListForecastsResponse {
  Forecasts?: ForecastSummary[];
  NextToken?: string;
}
export interface ListMonitorEvaluationsRequest {
  NextToken?: string;
  MaxResults?: number;
  MonitorArn: string | undefined;
  Filters?: Filter[];
}
export interface MetricResult {
  MetricName?: string;
  MetricValue?: number;
}
export interface MonitorDataSource {
  DatasetImportJobArn?: string;
  ForecastArn?: string;
  PredictorArn?: string;
}
export interface PredictorEvent {
  Detail?: string;
  Datetime?: Date;
}
export interface PredictorMonitorEvaluation {
  ResourceArn?: string;
  MonitorArn?: string;
  EvaluationTime?: Date;
  EvaluationState?: string;
  WindowStartDatetime?: Date;
  WindowEndDatetime?: Date;
  PredictorEvent?: PredictorEvent;
  MonitorDataSource?: MonitorDataSource;
  MetricResults?: MetricResult[];
  NumItemsEvaluated?: number;
  Message?: string;
}
export interface ListMonitorEvaluationsResponse {
  NextToken?: string;
  PredictorMonitorEvaluations?: PredictorMonitorEvaluation[];
}
export interface ListMonitorsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface MonitorSummary {
  MonitorArn?: string;
  MonitorName?: string;
  ResourceArn?: string;
  Status?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListMonitorsResponse {
  Monitors?: MonitorSummary[];
  NextToken?: string;
}
export interface ListPredictorBacktestExportJobsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface PredictorBacktestExportJobSummary {
  PredictorBacktestExportJobArn?: string;
  PredictorBacktestExportJobName?: string;
  Destination?: DataDestination;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListPredictorBacktestExportJobsResponse {
  PredictorBacktestExportJobs?: PredictorBacktestExportJobSummary[];
  NextToken?: string;
}
export interface ListPredictorsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface PredictorSummary {
  PredictorArn?: string;
  PredictorName?: string;
  DatasetGroupArn?: string;
  IsAutoPredictor?: boolean;
  ReferencePredictorSummary?: ReferencePredictorSummary;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListPredictorsResponse {
  Predictors?: PredictorSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export interface ListWhatIfAnalysesRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface WhatIfAnalysisSummary {
  WhatIfAnalysisArn?: string;
  WhatIfAnalysisName?: string;
  ForecastArn?: string;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListWhatIfAnalysesResponse {
  WhatIfAnalyses?: WhatIfAnalysisSummary[];
  NextToken?: string;
}
export interface ListWhatIfForecastExportsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface WhatIfForecastExportSummary {
  WhatIfForecastExportArn?: string;
  WhatIfForecastArns?: string[];
  WhatIfForecastExportName?: string;
  Destination?: DataDestination;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListWhatIfForecastExportsResponse {
  WhatIfForecastExports?: WhatIfForecastExportSummary[];
  NextToken?: string;
}
export interface ListWhatIfForecastsRequest {
  NextToken?: string;
  MaxResults?: number;
  Filters?: Filter[];
}
export interface WhatIfForecastSummary {
  WhatIfForecastArn?: string;
  WhatIfForecastName?: string;
  WhatIfAnalysisArn?: string;
  Status?: string;
  Message?: string;
  CreationTime?: Date;
  LastModificationTime?: Date;
}
export interface ListWhatIfForecastsResponse {
  WhatIfForecasts?: WhatIfForecastSummary[];
  NextToken?: string;
}
export interface ResumeResourceRequest {
  ResourceArn: string | undefined;
}
export interface StopResourceRequest {
  ResourceArn: string | undefined;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateDatasetGroupRequest {
  DatasetGroupArn: string | undefined;
  DatasetArns: string[] | undefined;
}
export interface UpdateDatasetGroupResponse {}
export declare const TagFilterSensitiveLog: (obj: Tag) => any;
export declare const CreateAutoPredictorRequestFilterSensitiveLog: (
  obj: CreateAutoPredictorRequest
) => any;
export declare const CreateDatasetRequestFilterSensitiveLog: (
  obj: CreateDatasetRequest
) => any;
export declare const CreateDatasetGroupRequestFilterSensitiveLog: (
  obj: CreateDatasetGroupRequest
) => any;
export declare const CreateDatasetImportJobRequestFilterSensitiveLog: (
  obj: CreateDatasetImportJobRequest
) => any;
export declare const CreateExplainabilityRequestFilterSensitiveLog: (
  obj: CreateExplainabilityRequest
) => any;
export declare const CreateExplainabilityExportRequestFilterSensitiveLog: (
  obj: CreateExplainabilityExportRequest
) => any;
export declare const CreateForecastRequestFilterSensitiveLog: (
  obj: CreateForecastRequest
) => any;
export declare const CreateForecastExportJobRequestFilterSensitiveLog: (
  obj: CreateForecastExportJobRequest
) => any;
export declare const CreateMonitorRequestFilterSensitiveLog: (
  obj: CreateMonitorRequest
) => any;
export declare const CreatePredictorRequestFilterSensitiveLog: (
  obj: CreatePredictorRequest
) => any;
export declare const CreatePredictorBacktestExportJobRequestFilterSensitiveLog: (
  obj: CreatePredictorBacktestExportJobRequest
) => any;
export declare const CreateWhatIfAnalysisRequestFilterSensitiveLog: (
  obj: CreateWhatIfAnalysisRequest
) => any;
export declare const CreateWhatIfForecastRequestFilterSensitiveLog: (
  obj: CreateWhatIfForecastRequest
) => any;
export declare const CreateWhatIfForecastExportRequestFilterSensitiveLog: (
  obj: CreateWhatIfForecastExportRequest
) => any;
export declare const ListTagsForResourceResponseFilterSensitiveLog: (
  obj: ListTagsForResourceResponse
) => any;
export declare const TagResourceRequestFilterSensitiveLog: (
  obj: TagResourceRequest
) => any;
export declare const UntagResourceRequestFilterSensitiveLog: (
  obj: UntagResourceRequest
) => any;
