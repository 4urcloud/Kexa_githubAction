import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { BackupServiceException as __BaseException } from "../models/BackupServiceException";
import { AlreadyExistsException, ConflictException, DependencyFailureException, InvalidParameterValueException, InvalidRequestException, InvalidResourceStateException, LimitExceededException, MissingParameterValueException, ResourceNotFoundException, ServiceUnavailableException, } from "../models/models_0";
export const se_CancelLegalHoldCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/legal-holds/{LegalHoldId}");
    b.p("LegalHoldId", () => input.LegalHoldId, "{LegalHoldId}", false);
    const query = map({
        [_cD]: [, __expectNonNull(input[_CD], `CancelDescription`)],
        [_rRID]: [() => input.RetainRecordInDays !== void 0, () => input[_RRID].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_CreateBackupPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup/plans");
    let body;
    body = JSON.stringify(take(input, {
        BackupPlan: (_) => _json(_),
        BackupPlanTags: (_) => _json(_),
        CreatorRequestId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateBackupSelectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup/plans/{BackupPlanId}/selections");
    b.p("BackupPlanId", () => input.BackupPlanId, "{BackupPlanId}", false);
    let body;
    body = JSON.stringify(take(input, {
        BackupSelection: (_) => _json(_),
        CreatorRequestId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateBackupVaultCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup-vaults/{BackupVaultName}");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    body = JSON.stringify(take(input, {
        BackupVaultTags: (_) => _json(_),
        CreatorRequestId: [],
        EncryptionKeyArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateFrameworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/audit/frameworks");
    let body;
    body = JSON.stringify(take(input, {
        FrameworkControls: (_) => _json(_),
        FrameworkDescription: [],
        FrameworkName: [],
        FrameworkTags: (_) => _json(_),
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLegalHoldCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/legal-holds");
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        IdempotencyToken: [],
        RecoveryPointSelection: (_) => se_RecoveryPointSelection(_, context),
        Tags: (_) => _json(_),
        Title: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLogicallyAirGappedBackupVaultCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/logically-air-gapped-backup-vaults/{BackupVaultName}");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    body = JSON.stringify(take(input, {
        BackupVaultTags: (_) => _json(_),
        CreatorRequestId: [],
        MaxRetentionDays: [],
        MinRetentionDays: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateReportPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/audit/report-plans");
    let body;
    body = JSON.stringify(take(input, {
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ReportDeliveryChannel: (_) => _json(_),
        ReportPlanDescription: [],
        ReportPlanName: [],
        ReportPlanTags: (_) => _json(_),
        ReportSetting: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRestoreTestingPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restore-testing/plans");
    let body;
    body = JSON.stringify(take(input, {
        CreatorRequestId: [],
        RestoreTestingPlan: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_CreateRestoreTestingSelectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restore-testing/plans/{RestoreTestingPlanName}/selections");
    b.p("RestoreTestingPlanName", () => input.RestoreTestingPlanName, "{RestoreTestingPlanName}", false);
    let body;
    body = JSON.stringify(take(input, {
        CreatorRequestId: [],
        RestoreTestingSelection: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackupPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/plans/{BackupPlanId}");
    b.p("BackupPlanId", () => input.BackupPlanId, "{BackupPlanId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackupSelectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/plans/{BackupPlanId}/selections/{SelectionId}");
    b.p("BackupPlanId", () => input.BackupPlanId, "{BackupPlanId}", false);
    b.p("SelectionId", () => input.SelectionId, "{SelectionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackupVaultCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackupVaultAccessPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/access-policy");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackupVaultLockConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/vault-lock");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteBackupVaultNotificationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/notification-configuration");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteFrameworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/frameworks/{FrameworkName}");
    b.p("FrameworkName", () => input.FrameworkName, "{FrameworkName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRecoveryPointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/recovery-points/{RecoveryPointArn}");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    b.p("RecoveryPointArn", () => input.RecoveryPointArn, "{RecoveryPointArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteReportPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/report-plans/{ReportPlanName}");
    b.p("ReportPlanName", () => input.ReportPlanName, "{ReportPlanName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRestoreTestingPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-testing/plans/{RestoreTestingPlanName}");
    b.p("RestoreTestingPlanName", () => input.RestoreTestingPlanName, "{RestoreTestingPlanName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteRestoreTestingSelectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-testing/plans/{RestoreTestingPlanName}/selections/{RestoreTestingSelectionName}");
    b.p("RestoreTestingPlanName", () => input.RestoreTestingPlanName, "{RestoreTestingPlanName}", false);
    b.p("RestoreTestingSelectionName", () => input.RestoreTestingSelectionName, "{RestoreTestingSelectionName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeBackupJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-jobs/{BackupJobId}");
    b.p("BackupJobId", () => input.BackupJobId, "{BackupJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeBackupVaultCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    const query = map({
        [_bVAI]: [, input[_BVAI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeCopyJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/copy-jobs/{CopyJobId}");
    b.p("CopyJobId", () => input.CopyJobId, "{CopyJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeFrameworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/frameworks/{FrameworkName}");
    b.p("FrameworkName", () => input.FrameworkName, "{FrameworkName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeGlobalSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-settings");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeProtectedResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resources/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRecoveryPointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/recovery-points/{RecoveryPointArn}");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    b.p("RecoveryPointArn", () => input.RecoveryPointArn, "{RecoveryPointArn}", false);
    const query = map({
        [_bVAI]: [, input[_BVAI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeRegionSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account-settings");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeReportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/report-jobs/{ReportJobId}");
    b.p("ReportJobId", () => input.ReportJobId, "{ReportJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeReportPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/report-plans/{ReportPlanName}");
    b.p("ReportPlanName", () => input.ReportPlanName, "{ReportPlanName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRestoreJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-jobs/{RestoreJobId}");
    b.p("RestoreJobId", () => input.RestoreJobId, "{RestoreJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DisassociateRecoveryPointCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/recovery-points/{RecoveryPointArn}/disassociate");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    b.p("RecoveryPointArn", () => input.RecoveryPointArn, "{RecoveryPointArn}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateRecoveryPointFromParentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/recovery-points/{RecoveryPointArn}/parentAssociation");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    b.p("RecoveryPointArn", () => input.RecoveryPointArn, "{RecoveryPointArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_ExportBackupPlanTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/plans/{BackupPlanId}/toTemplate");
    b.p("BackupPlanId", () => input.BackupPlanId, "{BackupPlanId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBackupPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/plans/{BackupPlanId}");
    b.p("BackupPlanId", () => input.BackupPlanId, "{BackupPlanId}", false);
    const query = map({
        [_vI]: [, input[_VI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetBackupPlanFromJSONCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup/template/json/toPlan");
    let body;
    body = JSON.stringify(take(input, {
        BackupPlanTemplateJson: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetBackupPlanFromTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/template/plans/{BackupPlanTemplateId}/toPlan");
    b.p("BackupPlanTemplateId", () => input.BackupPlanTemplateId, "{BackupPlanTemplateId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBackupSelectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/plans/{BackupPlanId}/selections/{SelectionId}");
    b.p("BackupPlanId", () => input.BackupPlanId, "{BackupPlanId}", false);
    b.p("SelectionId", () => input.SelectionId, "{SelectionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBackupVaultAccessPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/access-policy");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetBackupVaultNotificationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/notification-configuration");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetLegalHoldCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/legal-holds/{LegalHoldId}");
    b.p("LegalHoldId", () => input.LegalHoldId, "{LegalHoldId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRecoveryPointRestoreMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/recovery-points/{RecoveryPointArn}/restore-metadata");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    b.p("RecoveryPointArn", () => input.RecoveryPointArn, "{RecoveryPointArn}", false);
    const query = map({
        [_bVAI]: [, input[_BVAI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetRestoreJobMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-jobs/{RestoreJobId}/metadata");
    b.p("RestoreJobId", () => input.RestoreJobId, "{RestoreJobId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRestoreTestingInferredMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-testing/inferred-metadata");
    const query = map({
        [_BVAI]: [, input[_BVAI]],
        [_BVN]: [, __expectNonNull(input[_BVN], `BackupVaultName`)],
        [_RPA]: [, __expectNonNull(input[_RPA], `RecoveryPointArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetRestoreTestingPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-testing/plans/{RestoreTestingPlanName}");
    b.p("RestoreTestingPlanName", () => input.RestoreTestingPlanName, "{RestoreTestingPlanName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRestoreTestingSelectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-testing/plans/{RestoreTestingPlanName}/selections/{RestoreTestingSelectionName}");
    b.p("RestoreTestingPlanName", () => input.RestoreTestingPlanName, "{RestoreTestingPlanName}", false);
    b.p("RestoreTestingSelectionName", () => input.RestoreTestingSelectionName, "{RestoreTestingSelectionName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSupportedResourceTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/supported-resource-types");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListBackupJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-jobs");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_rA]: [, input[_BRA]],
        [_s]: [, input[_BS]],
        [_bVN]: [, input[_BBVN]],
        [_cB]: [() => input.ByCreatedBefore !== void 0, () => (input[_BCB].toISOString().split(".")[0] + "Z").toString()],
        [_cA]: [() => input.ByCreatedAfter !== void 0, () => (input[_BCA].toISOString().split(".")[0] + "Z").toString()],
        [_rT]: [, input[_BRT]],
        [_aI]: [, input[_BAI]],
        [_cAo]: [
            () => input.ByCompleteAfter !== void 0,
            () => (input[_BCAy].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_cBo]: [
            () => input.ByCompleteBefore !== void 0,
            () => (input[_BCBy].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_pJI]: [, input[_BPJI]],
        [_mC]: [, input[_BMC]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBackupJobSummariesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/backup-job-summaries");
    const query = map({
        [_AI]: [, input[_AI]],
        [_S]: [, input[_S]],
        [_RT]: [, input[_RT]],
        [_MC]: [, input[_MC]],
        [_AP]: [, input[_AP]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBackupPlansCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/plans");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_iD]: [() => input.IncludeDeleted !== void 0, () => input[_ID].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBackupPlanTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/template/plans");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBackupPlanVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/plans/{BackupPlanId}/versions");
    b.p("BackupPlanId", () => input.BackupPlanId, "{BackupPlanId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBackupSelectionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup/plans/{BackupPlanId}/selections");
    b.p("BackupPlanId", () => input.BackupPlanId, "{BackupPlanId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListBackupVaultsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults");
    const query = map({
        [_vT]: [, input[_BVT]],
        [_sh]: [() => input.ByShared !== void 0, () => input[_BSy].toString()],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCopyJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/copy-jobs");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_rA]: [, input[_BRA]],
        [_s]: [, input[_BS]],
        [_cB]: [() => input.ByCreatedBefore !== void 0, () => (input[_BCB].toISOString().split(".")[0] + "Z").toString()],
        [_cA]: [() => input.ByCreatedAfter !== void 0, () => (input[_BCA].toISOString().split(".")[0] + "Z").toString()],
        [_rT]: [, input[_BRT]],
        [_dVA]: [, input[_BDVA]],
        [_aI]: [, input[_BAI]],
        [_cBo]: [
            () => input.ByCompleteBefore !== void 0,
            () => (input[_BCBy].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_cAo]: [
            () => input.ByCompleteAfter !== void 0,
            () => (input[_BCAy].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_pJI]: [, input[_BPJI]],
        [_mC]: [, input[_BMC]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCopyJobSummariesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/copy-job-summaries");
    const query = map({
        [_AI]: [, input[_AI]],
        [_S]: [, input[_S]],
        [_RT]: [, input[_RT]],
        [_MC]: [, input[_MC]],
        [_AP]: [, input[_AP]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFrameworksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/frameworks");
    const query = map({
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListLegalHoldsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/legal-holds");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProtectedResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resources");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProtectedResourcesByBackupVaultCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/resources");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    const query = map({
        [_bVAI]: [, input[_BVAI]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRecoveryPointsByBackupVaultCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-vaults/{BackupVaultName}/recovery-points");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    const query = map({
        [_bVAI]: [, input[_BVAI]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_rA]: [, input[_BRA]],
        [_rT]: [, input[_BRT]],
        [_bPI]: [, input[_BBPI]],
        [_cB]: [() => input.ByCreatedBefore !== void 0, () => (input[_BCB].toISOString().split(".")[0] + "Z").toString()],
        [_cA]: [() => input.ByCreatedAfter !== void 0, () => (input[_BCA].toISOString().split(".")[0] + "Z").toString()],
        [_pRPA]: [, input[_BPRPA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRecoveryPointsByLegalHoldCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/legal-holds/{LegalHoldId}/recovery-points");
    b.p("LegalHoldId", () => input.LegalHoldId, "{LegalHoldId}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRecoveryPointsByResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resources/{ResourceArn}/recovery-points");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_mBAWSBO]: [() => input.ManagedByAWSBackupOnly !== void 0, () => input[_MBAWSBO].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListReportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/report-jobs");
    const query = map({
        [_RPN]: [, input[_BRPN]],
        [_CB]: [
            () => input.ByCreationBefore !== void 0,
            () => (input[_BCByr].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_CA]: [
            () => input.ByCreationAfter !== void 0,
            () => (input[_BCAyr].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_St]: [, input[_BSyt]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListReportPlansCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/report-plans");
    const query = map({
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRestoreJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-jobs");
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_aI]: [, input[_BAI]],
        [_rT]: [, input[_BRT]],
        [_cB]: [() => input.ByCreatedBefore !== void 0, () => (input[_BCB].toISOString().split(".")[0] + "Z").toString()],
        [_cA]: [() => input.ByCreatedAfter !== void 0, () => (input[_BCA].toISOString().split(".")[0] + "Z").toString()],
        [_st]: [, input[_BSyt]],
        [_cBo]: [
            () => input.ByCompleteBefore !== void 0,
            () => (input[_BCBy].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_cAo]: [
            () => input.ByCompleteAfter !== void 0,
            () => (input[_BCAy].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_rTPA]: [, input[_BRTPA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRestoreJobsByProtectedResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resources/{ResourceArn}/restore-jobs");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_st]: [, input[_BSyt]],
        [_rPCDA]: [
            () => input.ByRecoveryPointCreationDateAfter !== void 0,
            () => (input[_BRPCDA].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_rPCDB]: [
            () => input.ByRecoveryPointCreationDateBefore !== void 0,
            () => (input[_BRPCDB].toISOString().split(".")[0] + "Z").toString(),
        ],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRestoreJobSummariesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/audit/restore-job-summaries");
    const query = map({
        [_AI]: [, input[_AI]],
        [_S]: [, input[_S]],
        [_RT]: [, input[_RT]],
        [_AP]: [, input[_AP]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRestoreTestingPlansCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-testing/plans");
    const query = map({
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRestoreTestingSelectionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/restore-testing/plans/{RestoreTestingPlanName}/selections");
    b.p("RestoreTestingPlanName", () => input.RestoreTestingPlanName, "{RestoreTestingPlanName}", false);
    const query = map({
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutBackupVaultAccessPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup-vaults/{BackupVaultName}/access-policy");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    body = JSON.stringify(take(input, {
        Policy: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutBackupVaultLockConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup-vaults/{BackupVaultName}/vault-lock");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    body = JSON.stringify(take(input, {
        ChangeableForDays: [],
        MaxRetentionDays: [],
        MinRetentionDays: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutBackupVaultNotificationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup-vaults/{BackupVaultName}/notification-configuration");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    let body;
    body = JSON.stringify(take(input, {
        BackupVaultEvents: (_) => _json(_),
        SNSTopicArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutRestoreValidationResultCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restore-jobs/{RestoreJobId}/validations");
    b.p("RestoreJobId", () => input.RestoreJobId, "{RestoreJobId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ValidationStatus: [],
        ValidationStatusMessage: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartBackupJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup-jobs");
    let body;
    body = JSON.stringify(take(input, {
        BackupOptions: (_) => _json(_),
        BackupVaultName: [],
        CompleteWindowMinutes: [],
        IamRoleArn: [],
        IdempotencyToken: [],
        Lifecycle: (_) => _json(_),
        RecoveryPointTags: (_) => _json(_),
        ResourceArn: [],
        StartWindowMinutes: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartCopyJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/copy-jobs");
    let body;
    body = JSON.stringify(take(input, {
        DestinationBackupVaultArn: [],
        IamRoleArn: [],
        IdempotencyToken: [],
        Lifecycle: (_) => _json(_),
        RecoveryPointArn: [],
        SourceBackupVaultName: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartReportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/audit/report-jobs/{ReportPlanName}");
    b.p("ReportPlanName", () => input.ReportPlanName, "{ReportPlanName}", false);
    let body;
    body = JSON.stringify(take(input, {
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartRestoreJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restore-jobs");
    let body;
    body = JSON.stringify(take(input, {
        CopySourceTagsToRestoredResource: [],
        IamRoleArn: [],
        IdempotencyToken: [],
        Metadata: (_) => _json(_),
        RecoveryPointArn: [],
        ResourceType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StopBackupJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/backup-jobs/{BackupJobId}");
    b.p("BackupJobId", () => input.BackupJobId, "{BackupJobId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/untag/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        TagKeyList: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateBackupPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup/plans/{BackupPlanId}");
    b.p("BackupPlanId", () => input.BackupPlanId, "{BackupPlanId}", false);
    let body;
    body = JSON.stringify(take(input, {
        BackupPlan: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateFrameworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/audit/frameworks/{FrameworkName}");
    b.p("FrameworkName", () => input.FrameworkName, "{FrameworkName}", false);
    let body;
    body = JSON.stringify(take(input, {
        FrameworkControls: (_) => _json(_),
        FrameworkDescription: [],
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateGlobalSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-settings");
    let body;
    body = JSON.stringify(take(input, {
        GlobalSettings: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRecoveryPointLifecycleCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/backup-vaults/{BackupVaultName}/recovery-points/{RecoveryPointArn}");
    b.p("BackupVaultName", () => input.BackupVaultName, "{BackupVaultName}", false);
    b.p("RecoveryPointArn", () => input.RecoveryPointArn, "{RecoveryPointArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Lifecycle: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateRegionSettingsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/account-settings");
    let body;
    body = JSON.stringify(take(input, {
        ResourceTypeManagementPreference: (_) => _json(_),
        ResourceTypeOptInPreference: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateReportPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/audit/report-plans/{ReportPlanName}");
    b.p("ReportPlanName", () => input.ReportPlanName, "{ReportPlanName}", false);
    let body;
    body = JSON.stringify(take(input, {
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ReportDeliveryChannel: (_) => _json(_),
        ReportPlanDescription: [],
        ReportSetting: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRestoreTestingPlanCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restore-testing/plans/{RestoreTestingPlanName}");
    b.p("RestoreTestingPlanName", () => input.RestoreTestingPlanName, "{RestoreTestingPlanName}", false);
    let body;
    body = JSON.stringify(take(input, {
        RestoreTestingPlan: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateRestoreTestingSelectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/restore-testing/plans/{RestoreTestingPlanName}/selections/{RestoreTestingSelectionName}");
    b.p("RestoreTestingPlanName", () => input.RestoreTestingPlanName, "{RestoreTestingPlanName}", false);
    b.p("RestoreTestingSelectionName", () => input.RestoreTestingSelectionName, "{RestoreTestingSelectionName}", false);
    let body;
    body = JSON.stringify(take(input, {
        RestoreTestingSelection: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_CancelLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateBackupPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdvancedBackupSettings: _json,
        BackupPlanArn: __expectString,
        BackupPlanId: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VersionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBackupSelectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupPlanId: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SelectionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateBackupVaultCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupVaultArn: __expectString,
        BackupVaultName: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateFrameworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        FrameworkArn: __expectString,
        FrameworkName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LegalHoldArn: __expectString,
        LegalHoldId: __expectString,
        RecoveryPointSelection: (_) => de_RecoveryPointSelection(_, context),
        Status: __expectString,
        Title: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLogicallyAirGappedBackupVaultCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupVaultArn: __expectString,
        BackupVaultName: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VaultState: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateReportPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReportPlanArn: __expectString,
        ReportPlanName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRestoreTestingPlanCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RestoreTestingPlanArn: __expectString,
        RestoreTestingPlanName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRestoreTestingSelectionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RestoreTestingPlanArn: __expectString,
        RestoreTestingPlanName: __expectString,
        RestoreTestingSelectionName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBackupPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupPlanArn: __expectString,
        BackupPlanId: __expectString,
        DeletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VersionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteBackupSelectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteBackupVaultCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteBackupVaultAccessPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteBackupVaultLockConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteBackupVaultNotificationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteFrameworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRecoveryPointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteReportPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRestoreTestingPlanCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRestoreTestingSelectionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeBackupJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountId: __expectString,
        BackupJobId: __expectString,
        BackupOptions: _json,
        BackupSizeInBytes: __expectLong,
        BackupType: __expectString,
        BackupVaultArn: __expectString,
        BackupVaultName: __expectString,
        BytesTransferred: __expectLong,
        ChildJobsInState: _json,
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: _json,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExpectedCompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IamRoleArn: __expectString,
        InitiationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IsParent: __expectBoolean,
        MessageCategory: __expectString,
        NumberOfChildJobs: __expectLong,
        ParentJobId: __expectString,
        PercentDone: __expectString,
        RecoveryPointArn: __expectString,
        ResourceArn: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
        StartBy: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        StatusMessage: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeBackupVaultCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupVaultArn: __expectString,
        BackupVaultName: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        EncryptionKeyArn: __expectString,
        LockDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Locked: __expectBoolean,
        MaxRetentionDays: __expectLong,
        MinRetentionDays: __expectLong,
        NumberOfRecoveryPoints: __expectLong,
        VaultType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeCopyJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CopyJob: (_) => de_CopyJob(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeFrameworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeploymentStatus: __expectString,
        FrameworkArn: __expectString,
        FrameworkControls: _json,
        FrameworkDescription: __expectString,
        FrameworkName: __expectString,
        FrameworkStatus: __expectString,
        IdempotencyToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeGlobalSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GlobalSettings: _json,
        LastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeProtectedResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LastBackupTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastBackupVaultArn: __expectString,
        LastRecoveryPointArn: __expectString,
        LatestRestoreExecutionTimeMinutes: __expectLong,
        LatestRestoreJobCreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestRestoreRecoveryPointCreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ResourceArn: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRecoveryPointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupSizeInBytes: __expectLong,
        BackupVaultArn: __expectString,
        BackupVaultName: __expectString,
        CalculatedLifecycle: (_) => de_CalculatedLifecycle(_, context),
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CompositeMemberIdentifier: __expectString,
        CreatedBy: _json,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EncryptionKeyArn: __expectString,
        IamRoleArn: __expectString,
        IsEncrypted: __expectBoolean,
        IsParent: __expectBoolean,
        LastRestoreTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Lifecycle: _json,
        ParentRecoveryPointArn: __expectString,
        RecoveryPointArn: __expectString,
        ResourceArn: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
        SourceBackupVaultArn: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
        StorageClass: __expectString,
        VaultType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRegionSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ResourceTypeManagementPreference: _json,
        ResourceTypeOptInPreference: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeReportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ReportJob: (_) => de_ReportJob(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeReportPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ReportPlan: (_) => de_ReportPlan(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRestoreJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AccountId: __expectString,
        BackupSizeInBytes: __expectLong,
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: _json,
        CreatedResourceArn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionStatus: __expectString,
        DeletionStatusMessage: __expectString,
        ExpectedCompletionTimeMinutes: __expectLong,
        IamRoleArn: __expectString,
        PercentDone: __expectString,
        RecoveryPointArn: __expectString,
        RecoveryPointCreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ResourceType: __expectString,
        RestoreJobId: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
        ValidationStatus: __expectString,
        ValidationStatusMessage: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateRecoveryPointCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DisassociateRecoveryPointFromParentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_ExportBackupPlanTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupPlanTemplateJson: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackupPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdvancedBackupSettings: _json,
        BackupPlan: _json,
        BackupPlanArn: __expectString,
        BackupPlanId: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        DeletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VersionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackupPlanFromJSONCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupPlan: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackupPlanFromTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupPlanDocument: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackupSelectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupPlanId: __expectString,
        BackupSelection: _json,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        SelectionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackupVaultAccessPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupVaultArn: __expectString,
        BackupVaultName: __expectString,
        Policy: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetBackupVaultNotificationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupVaultArn: __expectString,
        BackupVaultEvents: _json,
        BackupVaultName: __expectString,
        SNSTopicArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CancelDescription: __expectString,
        CancellationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LegalHoldArn: __expectString,
        LegalHoldId: __expectString,
        RecoveryPointSelection: (_) => de_RecoveryPointSelection(_, context),
        RetainRecordUntil: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        Title: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRecoveryPointRestoreMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupVaultArn: __expectString,
        RecoveryPointArn: __expectString,
        ResourceType: __expectString,
        RestoreMetadata: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRestoreJobMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Metadata: _json,
        RestoreJobId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRestoreTestingInferredMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InferredMetadata: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRestoreTestingPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RestoreTestingPlan: (_) => de_RestoreTestingPlanForGet(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRestoreTestingSelectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RestoreTestingSelection: (_) => de_RestoreTestingSelectionForGet(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSupportedResourceTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ResourceTypes: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBackupJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupJobs: (_) => de_BackupJobsList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBackupJobSummariesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AggregationPeriod: __expectString,
        BackupJobSummaries: (_) => de_BackupJobSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBackupPlansCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupPlansList: (_) => de_BackupPlansList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBackupPlanTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupPlanTemplatesList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBackupPlanVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupPlanVersionsList: (_) => de_BackupPlanVersionsList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBackupSelectionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupSelectionsList: (_) => de_BackupSelectionsList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBackupVaultsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupVaultList: (_) => de_BackupVaultList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCopyJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CopyJobs: (_) => de_CopyJobsList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCopyJobSummariesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AggregationPeriod: __expectString,
        CopyJobSummaries: (_) => de_CopyJobSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFrameworksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Frameworks: (_) => de_FrameworkList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListLegalHoldsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LegalHolds: (_) => de_LegalHoldsList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProtectedResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Results: (_) => de_ProtectedResourcesList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProtectedResourcesByBackupVaultCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Results: (_) => de_ProtectedResourcesList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecoveryPointsByBackupVaultCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RecoveryPoints: (_) => de_RecoveryPointByBackupVaultList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecoveryPointsByLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RecoveryPoints: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecoveryPointsByResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RecoveryPoints: (_) => de_RecoveryPointByResourceList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListReportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ReportJobs: (_) => de_ReportJobList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListReportPlansCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        ReportPlans: (_) => de_ReportPlanList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRestoreJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RestoreJobs: (_) => de_RestoreJobsList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRestoreJobsByProtectedResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RestoreJobs: (_) => de_RestoreJobsList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRestoreJobSummariesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AggregationPeriod: __expectString,
        NextToken: __expectString,
        RestoreJobSummaries: (_) => de_RestoreJobSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRestoreTestingPlansCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RestoreTestingPlans: (_) => de_RestoreTestingPlans(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRestoreTestingSelectionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RestoreTestingSelections: (_) => de_RestoreTestingSelections(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutBackupVaultAccessPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutBackupVaultLockConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutBackupVaultNotificationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_PutRestoreValidationResultCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartBackupJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupJobId: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IsParent: __expectBoolean,
        RecoveryPointArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartCopyJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CopyJobId: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IsParent: __expectBoolean,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartReportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ReportJobId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartRestoreJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RestoreJobId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopBackupJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateBackupPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AdvancedBackupSettings: _json,
        BackupPlanArn: __expectString,
        BackupPlanId: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VersionId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateFrameworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FrameworkArn: __expectString,
        FrameworkName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateGlobalSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateRecoveryPointLifecycleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BackupVaultArn: __expectString,
        CalculatedLifecycle: (_) => de_CalculatedLifecycle(_, context),
        Lifecycle: _json,
        RecoveryPointArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRegionSettingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateReportPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReportPlanArn: __expectString,
        ReportPlanName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRestoreTestingPlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RestoreTestingPlanArn: __expectString,
        RestoreTestingPlanName: __expectString,
        UpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateRestoreTestingSelectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RestoreTestingPlanArn: __expectString,
        RestoreTestingPlanName: __expectString,
        RestoreTestingSelectionName: __expectString,
        UpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterValueException":
        case "com.amazonaws.backup#InvalidParameterValueException":
            throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
        case "InvalidResourceStateException":
        case "com.amazonaws.backup#InvalidResourceStateException":
            throw await de_InvalidResourceStateExceptionRes(parsedOutput, context);
        case "MissingParameterValueException":
        case "com.amazonaws.backup#MissingParameterValueException":
            throw await de_MissingParameterValueExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.backup#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.backup#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.backup#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.backup#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.backup#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.backup#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "DependencyFailureException":
        case "com.amazonaws.backup#DependencyFailureException":
            throw await de_DependencyFailureExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Arn: __expectString,
        Code: __expectString,
        Context: __expectString,
        CreatorRequestId: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Context: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_DependencyFailureExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Context: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new DependencyFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidParameterValueExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Context: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Context: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InvalidResourceStateExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Context: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InvalidResourceStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Context: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_MissingParameterValueExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Context: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new MissingParameterValueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Context: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Code: __expectString,
        Context: __expectString,
        Message: __expectString,
        Type: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_DateRange = (input, context) => {
    return take(input, {
        FromDate: (_) => Math.round(_.getTime() / 1000),
        ToDate: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_RecoveryPointSelection = (input, context) => {
    return take(input, {
        DateRange: (_) => se_DateRange(_, context),
        ResourceIdentifiers: _json,
        VaultNames: _json,
    });
};
const de_BackupJob = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        BackupJobId: __expectString,
        BackupOptions: _json,
        BackupSizeInBytes: __expectLong,
        BackupType: __expectString,
        BackupVaultArn: __expectString,
        BackupVaultName: __expectString,
        BytesTransferred: __expectLong,
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: _json,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExpectedCompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IamRoleArn: __expectString,
        InitiationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IsParent: __expectBoolean,
        MessageCategory: __expectString,
        ParentJobId: __expectString,
        PercentDone: __expectString,
        RecoveryPointArn: __expectString,
        ResourceArn: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
        StartBy: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
        StatusMessage: __expectString,
    });
};
const de_BackupJobsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackupJob(entry, context);
    });
    return retVal;
};
const de_BackupJobSummary = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Count: __expectInt32,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MessageCategory: __expectString,
        Region: __expectString,
        ResourceType: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
    });
};
const de_BackupJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackupJobSummary(entry, context);
    });
    return retVal;
};
const de_BackupPlansList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackupPlansListMember(entry, context);
    });
    return retVal;
};
const de_BackupPlansListMember = (output, context) => {
    return take(output, {
        AdvancedBackupSettings: _json,
        BackupPlanArn: __expectString,
        BackupPlanId: __expectString,
        BackupPlanName: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        DeletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VersionId: __expectString,
    });
};
const de_BackupPlanVersionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackupPlansListMember(entry, context);
    });
    return retVal;
};
const de_BackupSelectionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackupSelectionsListMember(entry, context);
    });
    return retVal;
};
const de_BackupSelectionsListMember = (output, context) => {
    return take(output, {
        BackupPlanId: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        IamRoleArn: __expectString,
        SelectionId: __expectString,
        SelectionName: __expectString,
    });
};
const de_BackupVaultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BackupVaultListMember(entry, context);
    });
    return retVal;
};
const de_BackupVaultListMember = (output, context) => {
    return take(output, {
        BackupVaultArn: __expectString,
        BackupVaultName: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        EncryptionKeyArn: __expectString,
        LockDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Locked: __expectBoolean,
        MaxRetentionDays: __expectLong,
        MinRetentionDays: __expectLong,
        NumberOfRecoveryPoints: __expectLong,
    });
};
const de_CalculatedLifecycle = (output, context) => {
    return take(output, {
        DeleteAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MoveToColdStorageAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_CopyJob = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        BackupSizeInBytes: __expectLong,
        ChildJobsInState: _json,
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CompositeMemberIdentifier: __expectString,
        CopyJobId: __expectString,
        CreatedBy: _json,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DestinationBackupVaultArn: __expectString,
        DestinationRecoveryPointArn: __expectString,
        IamRoleArn: __expectString,
        IsParent: __expectBoolean,
        MessageCategory: __expectString,
        NumberOfChildJobs: __expectLong,
        ParentJobId: __expectString,
        ResourceArn: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
        SourceBackupVaultArn: __expectString,
        SourceRecoveryPointArn: __expectString,
        State: __expectString,
        StatusMessage: __expectString,
    });
};
const de_CopyJobsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CopyJob(entry, context);
    });
    return retVal;
};
const de_CopyJobSummary = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Count: __expectInt32,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MessageCategory: __expectString,
        Region: __expectString,
        ResourceType: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
    });
};
const de_CopyJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CopyJobSummary(entry, context);
    });
    return retVal;
};
const de_DateRange = (output, context) => {
    return take(output, {
        FromDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ToDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Framework = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeploymentStatus: __expectString,
        FrameworkArn: __expectString,
        FrameworkDescription: __expectString,
        FrameworkName: __expectString,
        NumberOfControls: __expectInt32,
    });
};
const de_FrameworkList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Framework(entry, context);
    });
    return retVal;
};
const de_LegalHold = (output, context) => {
    return take(output, {
        CancellationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        LegalHoldArn: __expectString,
        LegalHoldId: __expectString,
        Status: __expectString,
        Title: __expectString,
    });
};
const de_LegalHoldsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LegalHold(entry, context);
    });
    return retVal;
};
const de_ProtectedResource = (output, context) => {
    return take(output, {
        LastBackupTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastBackupVaultArn: __expectString,
        LastRecoveryPointArn: __expectString,
        ResourceArn: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
    });
};
const de_ProtectedResourcesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProtectedResource(entry, context);
    });
    return retVal;
};
const de_RecoveryPointByBackupVault = (output, context) => {
    return take(output, {
        BackupSizeInBytes: __expectLong,
        BackupVaultArn: __expectString,
        BackupVaultName: __expectString,
        CalculatedLifecycle: (_) => de_CalculatedLifecycle(_, context),
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CompositeMemberIdentifier: __expectString,
        CreatedBy: _json,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EncryptionKeyArn: __expectString,
        IamRoleArn: __expectString,
        IsEncrypted: __expectBoolean,
        IsParent: __expectBoolean,
        LastRestoreTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Lifecycle: _json,
        ParentRecoveryPointArn: __expectString,
        RecoveryPointArn: __expectString,
        ResourceArn: __expectString,
        ResourceName: __expectString,
        ResourceType: __expectString,
        SourceBackupVaultArn: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
        VaultType: __expectString,
    });
};
const de_RecoveryPointByBackupVaultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecoveryPointByBackupVault(entry, context);
    });
    return retVal;
};
const de_RecoveryPointByResource = (output, context) => {
    return take(output, {
        BackupSizeBytes: __expectLong,
        BackupVaultName: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EncryptionKeyArn: __expectString,
        IsParent: __expectBoolean,
        ParentRecoveryPointArn: __expectString,
        RecoveryPointArn: __expectString,
        ResourceName: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
        VaultType: __expectString,
    });
};
const de_RecoveryPointByResourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecoveryPointByResource(entry, context);
    });
    return retVal;
};
const de_RecoveryPointSelection = (output, context) => {
    return take(output, {
        DateRange: (_) => de_DateRange(_, context),
        ResourceIdentifiers: _json,
        VaultNames: _json,
    });
};
const de_ReportJob = (output, context) => {
    return take(output, {
        CompletionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReportDestination: _json,
        ReportJobId: __expectString,
        ReportPlanArn: __expectString,
        ReportTemplate: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
    });
};
const de_ReportJobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReportJob(entry, context);
    });
    return retVal;
};
const de_ReportPlan = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeploymentStatus: __expectString,
        LastAttemptedExecutionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastSuccessfulExecutionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReportDeliveryChannel: _json,
        ReportPlanArn: __expectString,
        ReportPlanDescription: __expectString,
        ReportPlanName: __expectString,
        ReportSetting: _json,
    });
};
const de_ReportPlanList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReportPlan(entry, context);
    });
    return retVal;
};
const de_RestoreJobsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RestoreJobsListMember(entry, context);
    });
    return retVal;
};
const de_RestoreJobsListMember = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        BackupSizeInBytes: __expectLong,
        CompletionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedBy: _json,
        CreatedResourceArn: __expectString,
        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionStatus: __expectString,
        DeletionStatusMessage: __expectString,
        ExpectedCompletionTimeMinutes: __expectLong,
        IamRoleArn: __expectString,
        PercentDone: __expectString,
        RecoveryPointArn: __expectString,
        RecoveryPointCreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ResourceType: __expectString,
        RestoreJobId: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
        ValidationStatus: __expectString,
        ValidationStatusMessage: __expectString,
    });
};
const de_RestoreJobSummary = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Count: __expectInt32,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Region: __expectString,
        ResourceType: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
    });
};
const de_RestoreJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RestoreJobSummary(entry, context);
    });
    return retVal;
};
const de_RestoreTestingPlanForGet = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        LastExecutionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RecoveryPointSelection: _json,
        RestoreTestingPlanArn: __expectString,
        RestoreTestingPlanName: __expectString,
        ScheduleExpression: __expectString,
        ScheduleExpressionTimezone: __expectString,
        StartWindowHours: __expectInt32,
    });
};
const de_RestoreTestingPlanForList = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastExecutionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RestoreTestingPlanArn: __expectString,
        RestoreTestingPlanName: __expectString,
        ScheduleExpression: __expectString,
        ScheduleExpressionTimezone: __expectString,
        StartWindowHours: __expectInt32,
    });
};
const de_RestoreTestingPlans = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RestoreTestingPlanForList(entry, context);
    });
    return retVal;
};
const de_RestoreTestingSelectionForGet = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatorRequestId: __expectString,
        IamRoleArn: __expectString,
        ProtectedResourceArns: _json,
        ProtectedResourceConditions: _json,
        ProtectedResourceType: __expectString,
        RestoreMetadataOverrides: _json,
        RestoreTestingPlanName: __expectString,
        RestoreTestingSelectionName: __expectString,
        ValidationWindowHours: __expectInt32,
    });
};
const de_RestoreTestingSelectionForList = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IamRoleArn: __expectString,
        ProtectedResourceType: __expectString,
        RestoreTestingPlanName: __expectString,
        RestoreTestingSelectionName: __expectString,
        ValidationWindowHours: __expectInt32,
    });
};
const de_RestoreTestingSelections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RestoreTestingSelectionForList(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _AI = "AccountId";
const _AP = "AggregationPeriod";
const _BAI = "ByAccountId";
const _BBPI = "ByBackupPlanId";
const _BBVN = "ByBackupVaultName";
const _BCA = "ByCreatedAfter";
const _BCAy = "ByCompleteAfter";
const _BCAyr = "ByCreationAfter";
const _BCB = "ByCreatedBefore";
const _BCBy = "ByCompleteBefore";
const _BCByr = "ByCreationBefore";
const _BDVA = "ByDestinationVaultArn";
const _BMC = "ByMessageCategory";
const _BPJI = "ByParentJobId";
const _BPRPA = "ByParentRecoveryPointArn";
const _BRA = "ByResourceArn";
const _BRPCDA = "ByRecoveryPointCreationDateAfter";
const _BRPCDB = "ByRecoveryPointCreationDateBefore";
const _BRPN = "ByReportPlanName";
const _BRT = "ByResourceType";
const _BRTPA = "ByRestoreTestingPlanArn";
const _BS = "ByState";
const _BSy = "ByShared";
const _BSyt = "ByStatus";
const _BVAI = "BackupVaultAccountId";
const _BVN = "BackupVaultName";
const _BVT = "ByVaultType";
const _CA = "CreationAfter";
const _CB = "CreationBefore";
const _CD = "CancelDescription";
const _ID = "IncludeDeleted";
const _MBAWSBO = "ManagedByAWSBackupOnly";
const _MC = "MessageCategory";
const _MR = "MaxResults";
const _NT = "NextToken";
const _RPA = "RecoveryPointArn";
const _RPN = "ReportPlanName";
const _RRID = "RetainRecordInDays";
const _RT = "ResourceType";
const _S = "State";
const _St = "Status";
const _VI = "VersionId";
const _aI = "accountId";
const _bPI = "backupPlanId";
const _bVAI = "backupVaultAccountId";
const _bVN = "backupVaultName";
const _cA = "createdAfter";
const _cAo = "completeAfter";
const _cB = "createdBefore";
const _cBo = "completeBefore";
const _cD = "cancelDescription";
const _dVA = "destinationVaultArn";
const _iD = "includeDeleted";
const _mBAWSBO = "managedByAWSBackupOnly";
const _mC = "messageCategory";
const _mR = "maxResults";
const _nT = "nextToken";
const _pJI = "parentJobId";
const _pRPA = "parentRecoveryPointArn";
const _rA = "resourceArn";
const _rPCDA = "recoveryPointCreationDateAfter";
const _rPCDB = "recoveryPointCreationDateBefore";
const _rRID = "retainRecordInDays";
const _rT = "resourceType";
const _rTPA = "restoreTestingPlanArn";
const _s = "state";
const _sh = "shared";
const _st = "status";
const _vI = "versionId";
const _vT = "vaultType";
