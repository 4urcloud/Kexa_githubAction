import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { BackupServiceException as __BaseException } from "./BackupServiceException";
export const AggregationPeriod = {
    FOURTEEN_DAYS: "FOURTEEN_DAYS",
    ONE_DAY: "ONE_DAY",
    SEVEN_DAYS: "SEVEN_DAYS",
};
export class AlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.CreatorRequestId = opts.CreatorRequestId;
        this.Arn = opts.Arn;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export const BackupJobState = {
    ABORTED: "ABORTED",
    ABORTING: "ABORTING",
    COMPLETED: "COMPLETED",
    CREATED: "CREATED",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    PARTIAL: "PARTIAL",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
};
export const BackupJobStatus = {
    ABORTED: "ABORTED",
    ABORTING: "ABORTING",
    AGGREGATE_ALL: "AGGREGATE_ALL",
    ANY: "ANY",
    COMPLETED: "COMPLETED",
    CREATED: "CREATED",
    EXPIRED: "EXPIRED",
    FAILED: "FAILED",
    PARTIAL: "PARTIAL",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
};
export const ConditionType = {
    STRINGEQUALS: "STRINGEQUALS",
};
export const BackupVaultEvent = {
    BACKUP_JOB_COMPLETED: "BACKUP_JOB_COMPLETED",
    BACKUP_JOB_EXPIRED: "BACKUP_JOB_EXPIRED",
    BACKUP_JOB_FAILED: "BACKUP_JOB_FAILED",
    BACKUP_JOB_STARTED: "BACKUP_JOB_STARTED",
    BACKUP_JOB_SUCCESSFUL: "BACKUP_JOB_SUCCESSFUL",
    BACKUP_PLAN_CREATED: "BACKUP_PLAN_CREATED",
    BACKUP_PLAN_MODIFIED: "BACKUP_PLAN_MODIFIED",
    COPY_JOB_FAILED: "COPY_JOB_FAILED",
    COPY_JOB_STARTED: "COPY_JOB_STARTED",
    COPY_JOB_SUCCESSFUL: "COPY_JOB_SUCCESSFUL",
    RECOVERY_POINT_MODIFIED: "RECOVERY_POINT_MODIFIED",
    RESTORE_JOB_COMPLETED: "RESTORE_JOB_COMPLETED",
    RESTORE_JOB_FAILED: "RESTORE_JOB_FAILED",
    RESTORE_JOB_STARTED: "RESTORE_JOB_STARTED",
    RESTORE_JOB_SUCCESSFUL: "RESTORE_JOB_SUCCESSFUL",
    S3_BACKUP_OBJECT_FAILED: "S3_BACKUP_OBJECT_FAILED",
    S3_RESTORE_OBJECT_FAILED: "S3_RESTORE_OBJECT_FAILED",
};
export class InvalidParameterValueException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export class InvalidResourceStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidResourceStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidResourceStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceStateException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export class MissingParameterValueException extends __BaseException {
    constructor(opts) {
        super({
            name: "MissingParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "MissingParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingParameterValueException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export const CopyJobState = {
    COMPLETED: "COMPLETED",
    CREATED: "CREATED",
    FAILED: "FAILED",
    PARTIAL: "PARTIAL",
    RUNNING: "RUNNING",
};
export const CopyJobStatus = {
    ABORTED: "ABORTED",
    ABORTING: "ABORTING",
    AGGREGATE_ALL: "AGGREGATE_ALL",
    ANY: "ANY",
    COMPLETED: "COMPLETED",
    COMPLETING: "COMPLETING",
    CREATED: "CREATED",
    FAILED: "FAILED",
    FAILING: "FAILING",
    PARTIAL: "PARTIAL",
    RUNNING: "RUNNING",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export const LegalHoldStatus = {
    ACTIVE: "ACTIVE",
    CANCELED: "CANCELED",
    CANCELING: "CANCELING",
    CREATING: "CREATING",
};
export const VaultState = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    FAILED: "FAILED",
};
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export const RestoreTestingRecoveryPointSelectionAlgorithm = {
    LATEST_WITHIN_WINDOW: "LATEST_WITHIN_WINDOW",
    RANDOM_WITHIN_WINDOW: "RANDOM_WITHIN_WINDOW",
};
export const RestoreTestingRecoveryPointType = {
    CONTINUOUS: "CONTINUOUS",
    SNAPSHOT: "SNAPSHOT",
};
export class DependencyFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "DependencyFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "DependencyFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, DependencyFailureException.prototype);
        this.Code = opts.Code;
        this.Message = opts.Message;
        this.Type = opts.Type;
        this.Context = opts.Context;
    }
}
export const VaultType = {
    BACKUP_VAULT: "BACKUP_VAULT",
    LOGICALLY_AIR_GAPPED_BACKUP_VAULT: "LOGICALLY_AIR_GAPPED_BACKUP_VAULT",
};
export const RecoveryPointStatus = {
    COMPLETED: "COMPLETED",
    DELETING: "DELETING",
    EXPIRED: "EXPIRED",
    PARTIAL: "PARTIAL",
};
export const StorageClass = {
    COLD: "COLD",
    DELETED: "DELETED",
    WARM: "WARM",
};
export const RestoreDeletionStatus = {
    DELETING: "DELETING",
    FAILED: "FAILED",
    SUCCESSFUL: "SUCCESSFUL",
};
export const RestoreJobStatus = {
    ABORTED: "ABORTED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
};
export const RestoreValidationStatus = {
    FAILED: "FAILED",
    SUCCESSFUL: "SUCCESSFUL",
    TIMED_OUT: "TIMED_OUT",
    VALIDATING: "VALIDATING",
};
export const RestoreJobState = {
    ABORTED: "ABORTED",
    AGGREGATE_ALL: "AGGREGATE_ALL",
    ANY: "ANY",
    COMPLETED: "COMPLETED",
    CREATED: "CREATED",
    FAILED: "FAILED",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
};
export const BackupRuleFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RecoveryPointTags && { RecoveryPointTags: SENSITIVE_STRING }),
});
export const BackupPlanFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Rules && { Rules: obj.Rules.map((item) => BackupRuleFilterSensitiveLog(item)) }),
});
export const BackupRuleInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RecoveryPointTags && { RecoveryPointTags: SENSITIVE_STRING }),
});
export const BackupPlanInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Rules && { Rules: obj.Rules.map((item) => BackupRuleInputFilterSensitiveLog(item)) }),
});
export const CreateBackupPlanInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackupPlan && { BackupPlan: BackupPlanInputFilterSensitiveLog(obj.BackupPlan) }),
    ...(obj.BackupPlanTags && { BackupPlanTags: SENSITIVE_STRING }),
});
export const CreateBackupVaultInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackupVaultTags && { BackupVaultTags: SENSITIVE_STRING }),
});
export const CreateLegalHoldInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: SENSITIVE_STRING }),
});
export const CreateLogicallyAirGappedBackupVaultInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackupVaultTags && { BackupVaultTags: SENSITIVE_STRING }),
});
export const CreateRestoreTestingPlanInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: SENSITIVE_STRING }),
});
export const RestoreTestingSelectionForCreateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RestoreMetadataOverrides && { RestoreMetadataOverrides: SENSITIVE_STRING }),
});
export const CreateRestoreTestingSelectionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RestoreTestingSelection && {
        RestoreTestingSelection: RestoreTestingSelectionForCreateFilterSensitiveLog(obj.RestoreTestingSelection),
    }),
});
export const GetBackupPlanOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackupPlan && { BackupPlan: BackupPlanFilterSensitiveLog(obj.BackupPlan) }),
});
export const GetBackupPlanFromJSONOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackupPlan && { BackupPlan: BackupPlanFilterSensitiveLog(obj.BackupPlan) }),
});
export const GetBackupPlanFromTemplateOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackupPlanDocument && { BackupPlanDocument: BackupPlanFilterSensitiveLog(obj.BackupPlanDocument) }),
});
export const GetRecoveryPointRestoreMetadataOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RestoreMetadata && { RestoreMetadata: SENSITIVE_STRING }),
});
export const GetRestoreJobMetadataOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Metadata && { Metadata: SENSITIVE_STRING }),
});
export const RestoreTestingSelectionForGetFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RestoreMetadataOverrides && { RestoreMetadataOverrides: SENSITIVE_STRING }),
});
export const GetRestoreTestingSelectionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RestoreTestingSelection && {
        RestoreTestingSelection: RestoreTestingSelectionForGetFilterSensitiveLog(obj.RestoreTestingSelection),
    }),
});
export const ListTagsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: SENSITIVE_STRING }),
});
export const StartBackupJobInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RecoveryPointTags && { RecoveryPointTags: SENSITIVE_STRING }),
});
export const StartRestoreJobInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Metadata && { Metadata: SENSITIVE_STRING }),
});
export const TagResourceInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Tags && { Tags: SENSITIVE_STRING }),
});
export const UntagResourceInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TagKeyList && { TagKeyList: SENSITIVE_STRING }),
});
export const UpdateBackupPlanInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BackupPlan && { BackupPlan: BackupPlanInputFilterSensitiveLog(obj.BackupPlan) }),
});
export const RestoreTestingSelectionForUpdateFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RestoreMetadataOverrides && { RestoreMetadataOverrides: SENSITIVE_STRING }),
});
export const UpdateRestoreTestingSelectionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RestoreTestingSelection && {
        RestoreTestingSelection: RestoreTestingSelectionForUpdateFilterSensitiveLog(obj.RestoreTestingSelection),
    }),
});
