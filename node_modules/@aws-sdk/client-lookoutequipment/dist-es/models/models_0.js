import { LookoutEquipmentServiceException as __BaseException } from "./LookoutEquipmentServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const AutoPromotionResult = {
    MODEL_NOT_PROMOTED: "MODEL_NOT_PROMOTED",
    MODEL_PROMOTED: "MODEL_PROMOTED",
    RETRAINING_CANCELLED: "RETRAINING_CANCELLED",
    RETRAINING_CUSTOMER_ERROR: "RETRAINING_CUSTOMER_ERROR",
    RETRAINING_INTERNAL_ERROR: "RETRAINING_INTERNAL_ERROR",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export const DatasetStatus = {
    ACTIVE: "ACTIVE",
    CREATED: "CREATED",
    IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS",
    INGESTION_IN_PROGRESS: "INGESTION_IN_PROGRESS",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const DataUploadFrequency = {
    PT10M: "PT10M",
    PT15M: "PT15M",
    PT1H: "PT1H",
    PT30M: "PT30M",
    PT5M: "PT5M",
};
export const ModelQuality = {
    CANNOT_DETERMINE_QUALITY: "CANNOT_DETERMINE_QUALITY",
    POOR_QUALITY_DETECTED: "POOR_QUALITY_DETECTED",
    QUALITY_THRESHOLD_MET: "QUALITY_THRESHOLD_MET",
};
export const InferenceSchedulerStatus = {
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const LabelRating = {
    ANOMALY: "ANOMALY",
    NEUTRAL: "NEUTRAL",
    NO_ANOMALY: "NO_ANOMALY",
};
export const TargetSamplingRate = {
    PT10M: "PT10M",
    PT10S: "PT10S",
    PT15M: "PT15M",
    PT15S: "PT15S",
    PT1H: "PT1H",
    PT1M: "PT1M",
    PT1S: "PT1S",
    PT30M: "PT30M",
    PT30S: "PT30S",
    PT5M: "PT5M",
    PT5S: "PT5S",
};
export const ModelStatus = {
    FAILED: "FAILED",
    IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCESS: "SUCCESS",
};
export const ModelPromoteMode = {
    MANAGED: "MANAGED",
    MANUAL: "MANUAL",
};
export const RetrainingSchedulerStatus = {
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
export const IngestionJobStatus = {
    FAILED: "FAILED",
    IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCESS: "SUCCESS",
};
export const LatestInferenceResult = {
    ANOMALOUS: "ANOMALOUS",
    NORMAL: "NORMAL",
};
export const ModelVersionStatus = {
    CANCELED: "CANCELED",
    FAILED: "FAILED",
    IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCESS: "SUCCESS",
};
export const ModelVersionSourceType = {
    IMPORT: "IMPORT",
    RETRAINING: "RETRAINING",
    TRAINING: "TRAINING",
};
export const InferenceDataImportStrategy = {
    ADD_WHEN_EMPTY: "ADD_WHEN_EMPTY",
    NO_IMPORT: "NO_IMPORT",
    OVERWRITE: "OVERWRITE",
};
export const InferenceExecutionStatus = {
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    SUCCESS: "SUCCESS",
};
export const StatisticalIssueStatus = {
    NO_ISSUE_DETECTED: "NO_ISSUE_DETECTED",
    POTENTIAL_ISSUE_DETECTED: "POTENTIAL_ISSUE_DETECTED",
};
export const Monotonicity = {
    DECREASING: "DECREASING",
    INCREASING: "INCREASING",
    STATIC: "STATIC",
};
