import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, LazyJsonString as __LazyJsonString, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { LookoutEquipmentServiceException as __BaseException } from "../models/LookoutEquipmentServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_CreateDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataset");
    let body;
    body = JSON.stringify(se_CreateDatasetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateInferenceSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInferenceScheduler");
    let body;
    body = JSON.stringify(se_CreateInferenceSchedulerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLabelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLabel");
    let body;
    body = JSON.stringify(se_CreateLabelRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateLabelGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLabelGroup");
    let body;
    body = JSON.stringify(se_CreateLabelGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateModelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModel");
    let body;
    body = JSON.stringify(se_CreateModelRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRetrainingSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRetrainingScheduler");
    let body;
    body = JSON.stringify(se_CreateRetrainingSchedulerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteInferenceSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInferenceScheduler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLabelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLabel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLabelGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLabelGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteModelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRetrainingSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRetrainingScheduler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDataIngestionJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataIngestionJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInferenceSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInferenceScheduler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLabelCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLabel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLabelGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLabelGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeModelVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRetrainingSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRetrainingScheduler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("ImportDataset");
    let body;
    body = JSON.stringify(se_ImportDatasetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportModelVersionCommand = async (input, context) => {
    const headers = sharedHeaders("ImportModelVersion");
    let body;
    body = JSON.stringify(se_ImportModelVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDataIngestionJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataIngestionJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInferenceEventsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceEvents");
    let body;
    body = JSON.stringify(se_ListInferenceEventsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInferenceExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceExecutions");
    let body;
    body = JSON.stringify(se_ListInferenceExecutionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInferenceSchedulersCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceSchedulers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLabelGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLabelGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLabels");
    let body;
    body = JSON.stringify(se_ListLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModels");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListModelVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelVersions");
    let body;
    body = JSON.stringify(se_ListModelVersionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRetrainingSchedulersCommand = async (input, context) => {
    const headers = sharedHeaders("ListRetrainingSchedulers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSensorStatisticsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSensorStatistics");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(se_PutResourcePolicyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartDataIngestionJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartDataIngestionJob");
    let body;
    body = JSON.stringify(se_StartDataIngestionJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartInferenceSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("StartInferenceScheduler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartRetrainingSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("StartRetrainingScheduler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopInferenceSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("StopInferenceScheduler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopRetrainingSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("StopRetrainingScheduler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateActiveModelVersionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateActiveModelVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateInferenceSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateInferenceScheduler");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateLabelGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateLabelGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateModelCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRetrainingSchedulerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRetrainingScheduler");
    let body;
    body = JSON.stringify(se_UpdateRetrainingSchedulerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateInferenceSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateLabelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateLabelGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRetrainingSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteInferenceSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteLabelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteLabelGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteRetrainingSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeDataIngestionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDataIngestionJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeInferenceSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInferenceSchedulerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeLabelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLabelResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeLabelGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeLabelGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeModelVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelVersionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeResourcePolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRetrainingSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRetrainingSchedulerResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportModelVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDataIngestionJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDatasetsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListInferenceEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListInferenceEventsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListInferenceExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListInferenceExecutionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListInferenceSchedulersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListLabelGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListLabelGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListLabelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListModelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListModelVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListModelVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRetrainingSchedulersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListRetrainingSchedulersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSensorStatisticsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSensorStatisticsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartDataIngestionJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartInferenceSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartRetrainingSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopInferenceSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopRetrainingSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateActiveModelVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateInferenceSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UpdateLabelGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UpdateModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UpdateRetrainingSchedulerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lookoutequipment#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.lookoutequipment#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.lookoutequipment#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.lookoutequipment#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.lookoutequipment#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.lookoutequipment#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lookoutequipment#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateDatasetRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DatasetName: [],
        DatasetSchema: (_) => se_DatasetSchema(_, context),
        ServerSideKmsKeyId: [],
        Tags: _json,
    });
};
const se_CreateInferenceSchedulerRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataDelayOffsetInMinutes: [],
        DataInputConfiguration: _json,
        DataOutputConfiguration: _json,
        DataUploadFrequency: [],
        InferenceSchedulerName: [],
        ModelName: [],
        RoleArn: [],
        ServerSideKmsKeyId: [],
        Tags: _json,
    });
};
const se_CreateLabelGroupRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        FaultCodes: _json,
        LabelGroupName: [],
        Tags: _json,
    });
};
const se_CreateLabelRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        EndTime: (_) => Math.round(_.getTime() / 1000),
        Equipment: [],
        FaultCode: [],
        LabelGroupName: [],
        Notes: [],
        Rating: [],
        StartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_CreateModelRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DataPreProcessingConfiguration: _json,
        DatasetName: [],
        DatasetSchema: (_) => se_DatasetSchema(_, context),
        EvaluationDataEndTime: (_) => Math.round(_.getTime() / 1000),
        EvaluationDataStartTime: (_) => Math.round(_.getTime() / 1000),
        LabelsInputConfiguration: _json,
        ModelDiagnosticsOutputConfiguration: _json,
        ModelName: [],
        OffCondition: [],
        RoleArn: [],
        ServerSideKmsKeyId: [],
        Tags: _json,
        TrainingDataEndTime: (_) => Math.round(_.getTime() / 1000),
        TrainingDataStartTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_CreateRetrainingSchedulerRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        LookbackWindow: [],
        ModelName: [],
        PromoteMode: [],
        RetrainingFrequency: [],
        RetrainingStartDate: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_DatasetSchema = (input, context) => {
    return take(input, {
        InlineDataSchema: __LazyJsonString.fromObject,
    });
};
const se_ImportDatasetRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DatasetName: [],
        ServerSideKmsKeyId: [],
        SourceDatasetArn: [],
        Tags: _json,
    });
};
const se_ImportModelVersionRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DatasetName: [],
        InferenceDataImportStrategy: [],
        LabelsInputConfiguration: _json,
        ModelName: [],
        RoleArn: [],
        ServerSideKmsKeyId: [],
        SourceModelVersionArn: [],
        Tags: _json,
    });
};
const se_ListInferenceEventsRequest = (input, context) => {
    return take(input, {
        InferenceSchedulerName: [],
        IntervalEndTime: (_) => Math.round(_.getTime() / 1000),
        IntervalStartTime: (_) => Math.round(_.getTime() / 1000),
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListInferenceExecutionsRequest = (input, context) => {
    return take(input, {
        DataEndTimeBefore: (_) => Math.round(_.getTime() / 1000),
        DataStartTimeAfter: (_) => Math.round(_.getTime() / 1000),
        InferenceSchedulerName: [],
        MaxResults: [],
        NextToken: [],
        Status: [],
    });
};
const se_ListLabelsRequest = (input, context) => {
    return take(input, {
        Equipment: [],
        FaultCode: [],
        IntervalEndTime: (_) => Math.round(_.getTime() / 1000),
        IntervalStartTime: (_) => Math.round(_.getTime() / 1000),
        LabelGroupName: [],
        MaxResults: [],
        NextToken: [],
    });
};
const se_ListModelVersionsRequest = (input, context) => {
    return take(input, {
        CreatedAtEndTime: (_) => Math.round(_.getTime() / 1000),
        CreatedAtStartTime: (_) => Math.round(_.getTime() / 1000),
        MaxModelVersion: [],
        MaxResults: [],
        MinModelVersion: [],
        ModelName: [],
        NextToken: [],
        SourceType: [],
        Status: [],
    });
};
const se_PutResourcePolicyRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        PolicyRevisionId: [],
        ResourceArn: [],
        ResourcePolicy: [],
    });
};
const se_StartDataIngestionJobRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DatasetName: [],
        IngestionInputConfiguration: _json,
        RoleArn: [],
    });
};
const se_UpdateRetrainingSchedulerRequest = (input, context) => {
    return take(input, {
        LookbackWindow: [],
        ModelName: [],
        PromoteMode: [],
        RetrainingFrequency: [],
        RetrainingStartDate: (_) => Math.round(_.getTime() / 1000),
    });
};
const de_CountPercent = (output, context) => {
    return take(output, {
        Count: __expectInt32,
        Percentage: __limitedParseFloat32,
    });
};
const de_DatasetSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetSummary(entry, context);
    });
    return retVal;
};
const de_DatasetSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetArn: __expectString,
        DatasetName: __expectString,
        Status: __expectString,
    });
};
const de_DescribeDataIngestionJobResponse = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataQualitySummary: _json,
        DataStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetArn: __expectString,
        FailedReason: __expectString,
        IngestedDataSize: __expectLong,
        IngestedFilesSummary: _json,
        IngestionInputConfiguration: _json,
        JobId: __expectString,
        RoleArn: __expectString,
        SourceDatasetArn: __expectString,
        Status: __expectString,
        StatusDetail: __expectString,
    });
};
const de_DescribeDatasetResponse = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataQualitySummary: _json,
        DataStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetArn: __expectString,
        DatasetName: __expectString,
        IngestedFilesSummary: _json,
        IngestionInputConfiguration: _json,
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RoleArn: __expectString,
        Schema: (_) => new __LazyJsonString(_),
        ServerSideKmsKeyId: __expectString,
        SourceDatasetArn: __expectString,
        Status: __expectString,
    });
};
const de_DescribeInferenceSchedulerResponse = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataDelayOffsetInMinutes: __expectLong,
        DataInputConfiguration: _json,
        DataOutputConfiguration: _json,
        DataUploadFrequency: __expectString,
        InferenceSchedulerArn: __expectString,
        InferenceSchedulerName: __expectString,
        LatestInferenceResult: __expectString,
        ModelArn: __expectString,
        ModelName: __expectString,
        RoleArn: __expectString,
        ServerSideKmsKeyId: __expectString,
        Status: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeLabelGroupResponse = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FaultCodes: _json,
        LabelGroupArn: __expectString,
        LabelGroupName: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeLabelResponse = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Equipment: __expectString,
        FaultCode: __expectString,
        LabelGroupArn: __expectString,
        LabelGroupName: __expectString,
        LabelId: __expectString,
        Notes: __expectString,
        Rating: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeModelResponse = (output, context) => {
    return take(output, {
        AccumulatedInferenceDataEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        AccumulatedInferenceDataStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ActiveModelVersion: __expectLong,
        ActiveModelVersionArn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataPreProcessingConfiguration: _json,
        DatasetArn: __expectString,
        DatasetName: __expectString,
        EvaluationDataEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EvaluationDataStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailedReason: __expectString,
        ImportJobEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImportJobStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LabelsInputConfiguration: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestScheduledRetrainingAvailableDataInDays: __expectInt32,
        LatestScheduledRetrainingFailedReason: __expectString,
        LatestScheduledRetrainingModelVersion: __expectLong,
        LatestScheduledRetrainingStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestScheduledRetrainingStatus: __expectString,
        ModelArn: __expectString,
        ModelDiagnosticsOutputConfiguration: _json,
        ModelMetrics: (_) => new __LazyJsonString(_),
        ModelName: __expectString,
        ModelQuality: __expectString,
        ModelVersionActivatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextScheduledRetrainingStartDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OffCondition: __expectString,
        PreviousActiveModelVersion: __expectLong,
        PreviousActiveModelVersionArn: __expectString,
        PreviousModelVersionActivatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PriorModelMetrics: (_) => new __LazyJsonString(_),
        RetrainingSchedulerStatus: __expectString,
        RoleArn: __expectString,
        Schema: (_) => new __LazyJsonString(_),
        ServerSideKmsKeyId: __expectString,
        SourceModelVersionArn: __expectString,
        Status: __expectString,
        TrainingDataEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingDataStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingExecutionEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingExecutionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeModelVersionResponse = (output, context) => {
    return take(output, {
        AutoPromotionResult: __expectString,
        AutoPromotionResultReason: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataPreProcessingConfiguration: _json,
        DatasetArn: __expectString,
        DatasetName: __expectString,
        EvaluationDataEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EvaluationDataStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailedReason: __expectString,
        ImportJobEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImportJobStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ImportedDataSizeInBytes: __expectLong,
        LabelsInputConfiguration: _json,
        LastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelArn: __expectString,
        ModelDiagnosticsOutputConfiguration: _json,
        ModelDiagnosticsResultsObject: _json,
        ModelMetrics: __expectString,
        ModelName: __expectString,
        ModelQuality: __expectString,
        ModelVersion: __expectLong,
        ModelVersionArn: __expectString,
        OffCondition: __expectString,
        PriorModelMetrics: __expectString,
        RetrainingAvailableDataInDays: __expectInt32,
        RoleArn: __expectString,
        Schema: __expectString,
        ServerSideKmsKeyId: __expectString,
        SourceModelVersionArn: __expectString,
        SourceType: __expectString,
        Status: __expectString,
        TrainingDataEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingDataStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingExecutionEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TrainingExecutionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DescribeResourcePolicyResponse = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PolicyRevisionId: __expectString,
        ResourcePolicy: __expectString,
    });
};
const de_DescribeRetrainingSchedulerResponse = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LookbackWindow: __expectString,
        ModelArn: __expectString,
        ModelName: __expectString,
        PromoteMode: __expectString,
        RetrainingFrequency: __expectString,
        RetrainingStartDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_InferenceEventSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceEventSummary(entry, context);
    });
    return retVal;
};
const de_InferenceEventSummary = (output, context) => {
    return take(output, {
        Diagnostics: __expectString,
        EventDurationInSeconds: __expectLong,
        EventEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EventStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InferenceSchedulerArn: __expectString,
        InferenceSchedulerName: __expectString,
    });
};
const de_InferenceExecutionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceExecutionSummary(entry, context);
    });
    return retVal;
};
const de_InferenceExecutionSummary = (output, context) => {
    return take(output, {
        CustomerResultObject: _json,
        DataEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataInputConfiguration: _json,
        DataOutputConfiguration: _json,
        DataStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailedReason: __expectString,
        InferenceSchedulerArn: __expectString,
        InferenceSchedulerName: __expectString,
        ModelArn: __expectString,
        ModelName: __expectString,
        ModelVersion: __expectLong,
        ModelVersionArn: __expectString,
        ScheduledStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_LabelGroupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LabelGroupSummary(entry, context);
    });
    return retVal;
};
const de_LabelGroupSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LabelGroupArn: __expectString,
        LabelGroupName: __expectString,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_LabelSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LabelSummary(entry, context);
    });
    return retVal;
};
const de_LabelSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Equipment: __expectString,
        FaultCode: __expectString,
        LabelGroupArn: __expectString,
        LabelGroupName: __expectString,
        LabelId: __expectString,
        Rating: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ListDatasetsResponse = (output, context) => {
    return take(output, {
        DatasetSummaries: (_) => de_DatasetSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListInferenceEventsResponse = (output, context) => {
    return take(output, {
        InferenceEventSummaries: (_) => de_InferenceEventSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListInferenceExecutionsResponse = (output, context) => {
    return take(output, {
        InferenceExecutionSummaries: (_) => de_InferenceExecutionSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListLabelGroupsResponse = (output, context) => {
    return take(output, {
        LabelGroupSummaries: (_) => de_LabelGroupSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListLabelsResponse = (output, context) => {
    return take(output, {
        LabelSummaries: (_) => de_LabelSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelsResponse = (output, context) => {
    return take(output, {
        ModelSummaries: (_) => de_ModelSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListModelVersionsResponse = (output, context) => {
    return take(output, {
        ModelVersionSummaries: (_) => de_ModelVersionSummaries(_, context),
        NextToken: __expectString,
    });
};
const de_ListRetrainingSchedulersResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        RetrainingSchedulerSummaries: (_) => de_RetrainingSchedulerSummaries(_, context),
    });
};
const de_ListSensorStatisticsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        SensorStatisticsSummaries: (_) => de_SensorStatisticsSummaries(_, context),
    });
};
const de_ModelSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelSummary(entry, context);
    });
    return retVal;
};
const de_ModelSummary = (output, context) => {
    return take(output, {
        ActiveModelVersion: __expectLong,
        ActiveModelVersionArn: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetArn: __expectString,
        DatasetName: __expectString,
        LatestScheduledRetrainingModelVersion: __expectLong,
        LatestScheduledRetrainingStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LatestScheduledRetrainingStatus: __expectString,
        ModelArn: __expectString,
        ModelDiagnosticsOutputConfiguration: _json,
        ModelName: __expectString,
        ModelQuality: __expectString,
        NextScheduledRetrainingStartDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RetrainingSchedulerStatus: __expectString,
        Status: __expectString,
    });
};
const de_ModelVersionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelVersionSummary(entry, context);
    });
    return retVal;
};
const de_ModelVersionSummary = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ModelArn: __expectString,
        ModelName: __expectString,
        ModelQuality: __expectString,
        ModelVersion: __expectLong,
        ModelVersionArn: __expectString,
        SourceType: __expectString,
        Status: __expectString,
    });
};
const de_RetrainingSchedulerSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RetrainingSchedulerSummary(entry, context);
    });
    return retVal;
};
const de_RetrainingSchedulerSummary = (output, context) => {
    return take(output, {
        LookbackWindow: __expectString,
        ModelArn: __expectString,
        ModelName: __expectString,
        RetrainingFrequency: __expectString,
        RetrainingStartDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_SensorStatisticsSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SensorStatisticsSummary(entry, context);
    });
    return retVal;
};
const de_SensorStatisticsSummary = (output, context) => {
    return take(output, {
        CategoricalValues: _json,
        ComponentName: __expectString,
        DataEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataExists: __expectBoolean,
        DataStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DuplicateTimestamps: (_) => de_CountPercent(_, context),
        InvalidDateEntries: (_) => de_CountPercent(_, context),
        InvalidValues: (_) => de_CountPercent(_, context),
        LargeTimestampGaps: _json,
        MissingValues: (_) => de_CountPercent(_, context),
        MonotonicValues: _json,
        MultipleOperatingModes: _json,
        SensorName: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `AWSLookoutEquipmentFrontendService.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
