import {
  ExceptionOptionType as __ExceptionOptionType,
  LazyJsonString as __LazyJsonString,
} from "@smithy/smithy-client";
import { LookoutEquipmentServiceException as __BaseException } from "./LookoutEquipmentServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AutoPromotionResult: {
  readonly MODEL_NOT_PROMOTED: "MODEL_NOT_PROMOTED";
  readonly MODEL_PROMOTED: "MODEL_PROMOTED";
  readonly RETRAINING_CANCELLED: "RETRAINING_CANCELLED";
  readonly RETRAINING_CUSTOMER_ERROR: "RETRAINING_CUSTOMER_ERROR";
  readonly RETRAINING_INTERNAL_ERROR: "RETRAINING_INTERNAL_ERROR";
};
export type AutoPromotionResult =
  (typeof AutoPromotionResult)[keyof typeof AutoPromotionResult];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface DatasetSchema {
  InlineDataSchema?: __LazyJsonString | string;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateDatasetRequest {
  DatasetName: string | undefined;
  DatasetSchema?: DatasetSchema;
  ServerSideKmsKeyId?: string;
  ClientToken?: string;
  Tags?: Tag[];
}
export declare const DatasetStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATED: "CREATED";
  readonly IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS";
  readonly INGESTION_IN_PROGRESS: "INGESTION_IN_PROGRESS";
};
export type DatasetStatus = (typeof DatasetStatus)[keyof typeof DatasetStatus];
export interface CreateDatasetResponse {
  DatasetName?: string;
  DatasetArn?: string;
  Status?: DatasetStatus;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface InferenceInputNameConfiguration {
  TimestampFormat?: string;
  ComponentTimestampDelimiter?: string;
}
export interface InferenceS3InputConfiguration {
  Bucket: string | undefined;
  Prefix?: string;
}
export interface InferenceInputConfiguration {
  S3InputConfiguration?: InferenceS3InputConfiguration;
  InputTimeZoneOffset?: string;
  InferenceInputNameConfiguration?: InferenceInputNameConfiguration;
}
export interface InferenceS3OutputConfiguration {
  Bucket: string | undefined;
  Prefix?: string;
}
export interface InferenceOutputConfiguration {
  S3OutputConfiguration: InferenceS3OutputConfiguration | undefined;
  KmsKeyId?: string;
}
export declare const DataUploadFrequency: {
  readonly PT10M: "PT10M";
  readonly PT15M: "PT15M";
  readonly PT1H: "PT1H";
  readonly PT30M: "PT30M";
  readonly PT5M: "PT5M";
};
export type DataUploadFrequency =
  (typeof DataUploadFrequency)[keyof typeof DataUploadFrequency];
export interface CreateInferenceSchedulerRequest {
  ModelName: string | undefined;
  InferenceSchedulerName: string | undefined;
  DataDelayOffsetInMinutes?: number;
  DataUploadFrequency: DataUploadFrequency | undefined;
  DataInputConfiguration: InferenceInputConfiguration | undefined;
  DataOutputConfiguration: InferenceOutputConfiguration | undefined;
  RoleArn: string | undefined;
  ServerSideKmsKeyId?: string;
  ClientToken?: string;
  Tags?: Tag[];
}
export declare const ModelQuality: {
  readonly CANNOT_DETERMINE_QUALITY: "CANNOT_DETERMINE_QUALITY";
  readonly POOR_QUALITY_DETECTED: "POOR_QUALITY_DETECTED";
  readonly QUALITY_THRESHOLD_MET: "QUALITY_THRESHOLD_MET";
};
export type ModelQuality = (typeof ModelQuality)[keyof typeof ModelQuality];
export declare const InferenceSchedulerStatus: {
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type InferenceSchedulerStatus =
  (typeof InferenceSchedulerStatus)[keyof typeof InferenceSchedulerStatus];
export interface CreateInferenceSchedulerResponse {
  InferenceSchedulerArn?: string;
  InferenceSchedulerName?: string;
  Status?: InferenceSchedulerStatus;
  ModelQuality?: ModelQuality;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare const LabelRating: {
  readonly ANOMALY: "ANOMALY";
  readonly NEUTRAL: "NEUTRAL";
  readonly NO_ANOMALY: "NO_ANOMALY";
};
export type LabelRating = (typeof LabelRating)[keyof typeof LabelRating];
export interface CreateLabelRequest {
  LabelGroupName: string | undefined;
  StartTime: Date | undefined;
  EndTime: Date | undefined;
  Rating: LabelRating | undefined;
  FaultCode?: string;
  Notes?: string;
  Equipment?: string;
  ClientToken?: string;
}
export interface CreateLabelResponse {
  LabelId?: string;
}
export interface CreateLabelGroupRequest {
  LabelGroupName: string | undefined;
  FaultCodes?: string[];
  ClientToken?: string;
  Tags?: Tag[];
}
export interface CreateLabelGroupResponse {
  LabelGroupName?: string;
  LabelGroupArn?: string;
}
export declare const TargetSamplingRate: {
  readonly PT10M: "PT10M";
  readonly PT10S: "PT10S";
  readonly PT15M: "PT15M";
  readonly PT15S: "PT15S";
  readonly PT1H: "PT1H";
  readonly PT1M: "PT1M";
  readonly PT1S: "PT1S";
  readonly PT30M: "PT30M";
  readonly PT30S: "PT30S";
  readonly PT5M: "PT5M";
  readonly PT5S: "PT5S";
};
export type TargetSamplingRate =
  (typeof TargetSamplingRate)[keyof typeof TargetSamplingRate];
export interface DataPreProcessingConfiguration {
  TargetSamplingRate?: TargetSamplingRate;
}
export interface LabelsS3InputConfiguration {
  Bucket: string | undefined;
  Prefix?: string;
}
export interface LabelsInputConfiguration {
  S3InputConfiguration?: LabelsS3InputConfiguration;
  LabelGroupName?: string;
}
export interface ModelDiagnosticsS3OutputConfiguration {
  Bucket: string | undefined;
  Prefix?: string;
}
export interface ModelDiagnosticsOutputConfiguration {
  S3OutputConfiguration: ModelDiagnosticsS3OutputConfiguration | undefined;
  KmsKeyId?: string;
}
export interface CreateModelRequest {
  ModelName: string | undefined;
  DatasetName: string | undefined;
  DatasetSchema?: DatasetSchema;
  LabelsInputConfiguration?: LabelsInputConfiguration;
  ClientToken?: string;
  TrainingDataStartTime?: Date;
  TrainingDataEndTime?: Date;
  EvaluationDataStartTime?: Date;
  EvaluationDataEndTime?: Date;
  RoleArn?: string;
  DataPreProcessingConfiguration?: DataPreProcessingConfiguration;
  ServerSideKmsKeyId?: string;
  Tags?: Tag[];
  OffCondition?: string;
  ModelDiagnosticsOutputConfiguration?: ModelDiagnosticsOutputConfiguration;
}
export declare const ModelStatus: {
  readonly FAILED: "FAILED";
  readonly IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCESS: "SUCCESS";
};
export type ModelStatus = (typeof ModelStatus)[keyof typeof ModelStatus];
export interface CreateModelResponse {
  ModelArn?: string;
  Status?: ModelStatus;
}
export declare const ModelPromoteMode: {
  readonly MANAGED: "MANAGED";
  readonly MANUAL: "MANUAL";
};
export type ModelPromoteMode =
  (typeof ModelPromoteMode)[keyof typeof ModelPromoteMode];
export interface CreateRetrainingSchedulerRequest {
  ModelName: string | undefined;
  RetrainingStartDate?: Date;
  RetrainingFrequency: string | undefined;
  LookbackWindow: string | undefined;
  PromoteMode?: ModelPromoteMode;
  ClientToken?: string;
}
export declare const RetrainingSchedulerStatus: {
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
};
export type RetrainingSchedulerStatus =
  (typeof RetrainingSchedulerStatus)[keyof typeof RetrainingSchedulerStatus];
export interface CreateRetrainingSchedulerResponse {
  ModelName?: string;
  ModelArn?: string;
  Status?: RetrainingSchedulerStatus;
}
export interface DeleteDatasetRequest {
  DatasetName: string | undefined;
}
export interface DeleteInferenceSchedulerRequest {
  InferenceSchedulerName: string | undefined;
}
export interface DeleteLabelRequest {
  LabelGroupName: string | undefined;
  LabelId: string | undefined;
}
export interface DeleteLabelGroupRequest {
  LabelGroupName: string | undefined;
}
export interface DeleteModelRequest {
  ModelName: string | undefined;
}
export interface DeleteResourcePolicyRequest {
  ResourceArn: string | undefined;
}
export interface DeleteRetrainingSchedulerRequest {
  ModelName: string | undefined;
}
export interface DescribeDataIngestionJobRequest {
  JobId: string | undefined;
}
export interface DuplicateTimestamps {
  TotalNumberOfDuplicateTimestamps: number | undefined;
}
export interface MissingCompleteSensorData {
  AffectedSensorCount: number | undefined;
}
export interface SensorsWithShortDateRange {
  AffectedSensorCount: number | undefined;
}
export interface InsufficientSensorData {
  MissingCompleteSensorData: MissingCompleteSensorData | undefined;
  SensorsWithShortDateRange: SensorsWithShortDateRange | undefined;
}
export interface InvalidSensorData {
  AffectedSensorCount: number | undefined;
  TotalNumberOfInvalidValues: number | undefined;
}
export interface MissingSensorData {
  AffectedSensorCount: number | undefined;
  TotalNumberOfMissingValues: number | undefined;
}
export interface UnsupportedTimestamps {
  TotalNumberOfUnsupportedTimestamps: number | undefined;
}
export interface DataQualitySummary {
  InsufficientSensorData: InsufficientSensorData | undefined;
  MissingSensorData: MissingSensorData | undefined;
  InvalidSensorData: InvalidSensorData | undefined;
  UnsupportedTimestamps: UnsupportedTimestamps | undefined;
  DuplicateTimestamps: DuplicateTimestamps | undefined;
}
export interface S3Object {
  Bucket: string | undefined;
  Key: string | undefined;
}
export interface IngestedFilesSummary {
  TotalNumberOfFiles: number | undefined;
  IngestedNumberOfFiles: number | undefined;
  DiscardedFiles?: S3Object[];
}
export interface IngestionS3InputConfiguration {
  Bucket: string | undefined;
  Prefix?: string;
  KeyPattern?: string;
}
export interface IngestionInputConfiguration {
  S3InputConfiguration: IngestionS3InputConfiguration | undefined;
}
export declare const IngestionJobStatus: {
  readonly FAILED: "FAILED";
  readonly IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCESS: "SUCCESS";
};
export type IngestionJobStatus =
  (typeof IngestionJobStatus)[keyof typeof IngestionJobStatus];
export interface DescribeDataIngestionJobResponse {
  JobId?: string;
  DatasetArn?: string;
  IngestionInputConfiguration?: IngestionInputConfiguration;
  RoleArn?: string;
  CreatedAt?: Date;
  Status?: IngestionJobStatus;
  FailedReason?: string;
  DataQualitySummary?: DataQualitySummary;
  IngestedFilesSummary?: IngestedFilesSummary;
  StatusDetail?: string;
  IngestedDataSize?: number;
  DataStartTime?: Date;
  DataEndTime?: Date;
  SourceDatasetArn?: string;
}
export interface DescribeDatasetRequest {
  DatasetName: string | undefined;
}
export interface DescribeDatasetResponse {
  DatasetName?: string;
  DatasetArn?: string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  Status?: DatasetStatus;
  Schema?: __LazyJsonString | string;
  ServerSideKmsKeyId?: string;
  IngestionInputConfiguration?: IngestionInputConfiguration;
  DataQualitySummary?: DataQualitySummary;
  IngestedFilesSummary?: IngestedFilesSummary;
  RoleArn?: string;
  DataStartTime?: Date;
  DataEndTime?: Date;
  SourceDatasetArn?: string;
}
export interface DescribeInferenceSchedulerRequest {
  InferenceSchedulerName: string | undefined;
}
export declare const LatestInferenceResult: {
  readonly ANOMALOUS: "ANOMALOUS";
  readonly NORMAL: "NORMAL";
};
export type LatestInferenceResult =
  (typeof LatestInferenceResult)[keyof typeof LatestInferenceResult];
export interface DescribeInferenceSchedulerResponse {
  ModelArn?: string;
  ModelName?: string;
  InferenceSchedulerName?: string;
  InferenceSchedulerArn?: string;
  Status?: InferenceSchedulerStatus;
  DataDelayOffsetInMinutes?: number;
  DataUploadFrequency?: DataUploadFrequency;
  CreatedAt?: Date;
  UpdatedAt?: Date;
  DataInputConfiguration?: InferenceInputConfiguration;
  DataOutputConfiguration?: InferenceOutputConfiguration;
  RoleArn?: string;
  ServerSideKmsKeyId?: string;
  LatestInferenceResult?: LatestInferenceResult;
}
export interface DescribeLabelRequest {
  LabelGroupName: string | undefined;
  LabelId: string | undefined;
}
export interface DescribeLabelResponse {
  LabelGroupName?: string;
  LabelGroupArn?: string;
  LabelId?: string;
  StartTime?: Date;
  EndTime?: Date;
  Rating?: LabelRating;
  FaultCode?: string;
  Notes?: string;
  Equipment?: string;
  CreatedAt?: Date;
}
export interface DescribeLabelGroupRequest {
  LabelGroupName: string | undefined;
}
export interface DescribeLabelGroupResponse {
  LabelGroupName?: string;
  LabelGroupArn?: string;
  FaultCodes?: string[];
  CreatedAt?: Date;
  UpdatedAt?: Date;
}
export interface DescribeModelRequest {
  ModelName: string | undefined;
}
export declare const ModelVersionStatus: {
  readonly CANCELED: "CANCELED";
  readonly FAILED: "FAILED";
  readonly IMPORT_IN_PROGRESS: "IMPORT_IN_PROGRESS";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCESS: "SUCCESS";
};
export type ModelVersionStatus =
  (typeof ModelVersionStatus)[keyof typeof ModelVersionStatus];
export interface DescribeModelResponse {
  ModelName?: string;
  ModelArn?: string;
  DatasetName?: string;
  DatasetArn?: string;
  Schema?: __LazyJsonString | string;
  LabelsInputConfiguration?: LabelsInputConfiguration;
  TrainingDataStartTime?: Date;
  TrainingDataEndTime?: Date;
  EvaluationDataStartTime?: Date;
  EvaluationDataEndTime?: Date;
  RoleArn?: string;
  DataPreProcessingConfiguration?: DataPreProcessingConfiguration;
  Status?: ModelStatus;
  TrainingExecutionStartTime?: Date;
  TrainingExecutionEndTime?: Date;
  FailedReason?: string;
  ModelMetrics?: __LazyJsonString | string;
  LastUpdatedTime?: Date;
  CreatedAt?: Date;
  ServerSideKmsKeyId?: string;
  OffCondition?: string;
  SourceModelVersionArn?: string;
  ImportJobStartTime?: Date;
  ImportJobEndTime?: Date;
  ActiveModelVersion?: number;
  ActiveModelVersionArn?: string;
  ModelVersionActivatedAt?: Date;
  PreviousActiveModelVersion?: number;
  PreviousActiveModelVersionArn?: string;
  PreviousModelVersionActivatedAt?: Date;
  PriorModelMetrics?: __LazyJsonString | string;
  LatestScheduledRetrainingFailedReason?: string;
  LatestScheduledRetrainingStatus?: ModelVersionStatus;
  LatestScheduledRetrainingModelVersion?: number;
  LatestScheduledRetrainingStartTime?: Date;
  LatestScheduledRetrainingAvailableDataInDays?: number;
  NextScheduledRetrainingStartDate?: Date;
  AccumulatedInferenceDataStartTime?: Date;
  AccumulatedInferenceDataEndTime?: Date;
  RetrainingSchedulerStatus?: RetrainingSchedulerStatus;
  ModelDiagnosticsOutputConfiguration?: ModelDiagnosticsOutputConfiguration;
  ModelQuality?: ModelQuality;
}
export interface DescribeModelVersionRequest {
  ModelName: string | undefined;
  ModelVersion: number | undefined;
}
export declare const ModelVersionSourceType: {
  readonly IMPORT: "IMPORT";
  readonly RETRAINING: "RETRAINING";
  readonly TRAINING: "TRAINING";
};
export type ModelVersionSourceType =
  (typeof ModelVersionSourceType)[keyof typeof ModelVersionSourceType];
export interface DescribeModelVersionResponse {
  ModelName?: string;
  ModelArn?: string;
  ModelVersion?: number;
  ModelVersionArn?: string;
  Status?: ModelVersionStatus;
  SourceType?: ModelVersionSourceType;
  DatasetName?: string;
  DatasetArn?: string;
  Schema?: string;
  LabelsInputConfiguration?: LabelsInputConfiguration;
  TrainingDataStartTime?: Date;
  TrainingDataEndTime?: Date;
  EvaluationDataStartTime?: Date;
  EvaluationDataEndTime?: Date;
  RoleArn?: string;
  DataPreProcessingConfiguration?: DataPreProcessingConfiguration;
  TrainingExecutionStartTime?: Date;
  TrainingExecutionEndTime?: Date;
  FailedReason?: string;
  ModelMetrics?: string;
  LastUpdatedTime?: Date;
  CreatedAt?: Date;
  ServerSideKmsKeyId?: string;
  OffCondition?: string;
  SourceModelVersionArn?: string;
  ImportJobStartTime?: Date;
  ImportJobEndTime?: Date;
  ImportedDataSizeInBytes?: number;
  PriorModelMetrics?: string;
  RetrainingAvailableDataInDays?: number;
  AutoPromotionResult?: AutoPromotionResult;
  AutoPromotionResultReason?: string;
  ModelDiagnosticsOutputConfiguration?: ModelDiagnosticsOutputConfiguration;
  ModelDiagnosticsResultsObject?: S3Object;
  ModelQuality?: ModelQuality;
}
export interface DescribeResourcePolicyRequest {
  ResourceArn: string | undefined;
}
export interface DescribeResourcePolicyResponse {
  PolicyRevisionId?: string;
  ResourcePolicy?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface DescribeRetrainingSchedulerRequest {
  ModelName: string | undefined;
}
export interface DescribeRetrainingSchedulerResponse {
  ModelName?: string;
  ModelArn?: string;
  RetrainingStartDate?: Date;
  RetrainingFrequency?: string;
  LookbackWindow?: string;
  Status?: RetrainingSchedulerStatus;
  PromoteMode?: ModelPromoteMode;
  CreatedAt?: Date;
  UpdatedAt?: Date;
}
export interface ImportDatasetRequest {
  SourceDatasetArn: string | undefined;
  DatasetName?: string;
  ClientToken?: string;
  ServerSideKmsKeyId?: string;
  Tags?: Tag[];
}
export interface ImportDatasetResponse {
  DatasetName?: string;
  DatasetArn?: string;
  Status?: DatasetStatus;
  JobId?: string;
}
export declare const InferenceDataImportStrategy: {
  readonly ADD_WHEN_EMPTY: "ADD_WHEN_EMPTY";
  readonly NO_IMPORT: "NO_IMPORT";
  readonly OVERWRITE: "OVERWRITE";
};
export type InferenceDataImportStrategy =
  (typeof InferenceDataImportStrategy)[keyof typeof InferenceDataImportStrategy];
export interface ImportModelVersionRequest {
  SourceModelVersionArn: string | undefined;
  ModelName?: string;
  DatasetName: string | undefined;
  LabelsInputConfiguration?: LabelsInputConfiguration;
  ClientToken?: string;
  RoleArn?: string;
  ServerSideKmsKeyId?: string;
  Tags?: Tag[];
  InferenceDataImportStrategy?: InferenceDataImportStrategy;
}
export interface ImportModelVersionResponse {
  ModelName?: string;
  ModelArn?: string;
  ModelVersionArn?: string;
  ModelVersion?: number;
  Status?: ModelVersionStatus;
}
export interface ListDataIngestionJobsRequest {
  DatasetName?: string;
  NextToken?: string;
  MaxResults?: number;
  Status?: IngestionJobStatus;
}
export interface DataIngestionJobSummary {
  JobId?: string;
  DatasetName?: string;
  DatasetArn?: string;
  IngestionInputConfiguration?: IngestionInputConfiguration;
  Status?: IngestionJobStatus;
}
export interface ListDataIngestionJobsResponse {
  NextToken?: string;
  DataIngestionJobSummaries?: DataIngestionJobSummary[];
}
export interface ListDatasetsRequest {
  NextToken?: string;
  MaxResults?: number;
  DatasetNameBeginsWith?: string;
}
export interface DatasetSummary {
  DatasetName?: string;
  DatasetArn?: string;
  Status?: DatasetStatus;
  CreatedAt?: Date;
}
export interface ListDatasetsResponse {
  NextToken?: string;
  DatasetSummaries?: DatasetSummary[];
}
export interface ListInferenceEventsRequest {
  NextToken?: string;
  MaxResults?: number;
  InferenceSchedulerName: string | undefined;
  IntervalStartTime: Date | undefined;
  IntervalEndTime: Date | undefined;
}
export interface InferenceEventSummary {
  InferenceSchedulerArn?: string;
  InferenceSchedulerName?: string;
  EventStartTime?: Date;
  EventEndTime?: Date;
  Diagnostics?: string;
  EventDurationInSeconds?: number;
}
export interface ListInferenceEventsResponse {
  NextToken?: string;
  InferenceEventSummaries?: InferenceEventSummary[];
}
export declare const InferenceExecutionStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCESS: "SUCCESS";
};
export type InferenceExecutionStatus =
  (typeof InferenceExecutionStatus)[keyof typeof InferenceExecutionStatus];
export interface ListInferenceExecutionsRequest {
  NextToken?: string;
  MaxResults?: number;
  InferenceSchedulerName: string | undefined;
  DataStartTimeAfter?: Date;
  DataEndTimeBefore?: Date;
  Status?: InferenceExecutionStatus;
}
export interface InferenceExecutionSummary {
  ModelName?: string;
  ModelArn?: string;
  InferenceSchedulerName?: string;
  InferenceSchedulerArn?: string;
  ScheduledStartTime?: Date;
  DataStartTime?: Date;
  DataEndTime?: Date;
  DataInputConfiguration?: InferenceInputConfiguration;
  DataOutputConfiguration?: InferenceOutputConfiguration;
  CustomerResultObject?: S3Object;
  Status?: InferenceExecutionStatus;
  FailedReason?: string;
  ModelVersion?: number;
  ModelVersionArn?: string;
}
export interface ListInferenceExecutionsResponse {
  NextToken?: string;
  InferenceExecutionSummaries?: InferenceExecutionSummary[];
}
export interface ListInferenceSchedulersRequest {
  NextToken?: string;
  MaxResults?: number;
  InferenceSchedulerNameBeginsWith?: string;
  ModelName?: string;
  Status?: InferenceSchedulerStatus;
}
export interface InferenceSchedulerSummary {
  ModelName?: string;
  ModelArn?: string;
  InferenceSchedulerName?: string;
  InferenceSchedulerArn?: string;
  Status?: InferenceSchedulerStatus;
  DataDelayOffsetInMinutes?: number;
  DataUploadFrequency?: DataUploadFrequency;
  LatestInferenceResult?: LatestInferenceResult;
}
export interface ListInferenceSchedulersResponse {
  NextToken?: string;
  InferenceSchedulerSummaries?: InferenceSchedulerSummary[];
}
export interface ListLabelGroupsRequest {
  LabelGroupNameBeginsWith?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface LabelGroupSummary {
  LabelGroupName?: string;
  LabelGroupArn?: string;
  CreatedAt?: Date;
  UpdatedAt?: Date;
}
export interface ListLabelGroupsResponse {
  NextToken?: string;
  LabelGroupSummaries?: LabelGroupSummary[];
}
export interface ListLabelsRequest {
  LabelGroupName: string | undefined;
  IntervalStartTime?: Date;
  IntervalEndTime?: Date;
  FaultCode?: string;
  Equipment?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface LabelSummary {
  LabelGroupName?: string;
  LabelId?: string;
  LabelGroupArn?: string;
  StartTime?: Date;
  EndTime?: Date;
  Rating?: LabelRating;
  FaultCode?: string;
  Equipment?: string;
  CreatedAt?: Date;
}
export interface ListLabelsResponse {
  NextToken?: string;
  LabelSummaries?: LabelSummary[];
}
export interface ListModelsRequest {
  NextToken?: string;
  MaxResults?: number;
  Status?: ModelStatus;
  ModelNameBeginsWith?: string;
  DatasetNameBeginsWith?: string;
}
export interface ModelSummary {
  ModelName?: string;
  ModelArn?: string;
  DatasetName?: string;
  DatasetArn?: string;
  Status?: ModelStatus;
  CreatedAt?: Date;
  ActiveModelVersion?: number;
  ActiveModelVersionArn?: string;
  LatestScheduledRetrainingStatus?: ModelVersionStatus;
  LatestScheduledRetrainingModelVersion?: number;
  LatestScheduledRetrainingStartTime?: Date;
  NextScheduledRetrainingStartDate?: Date;
  RetrainingSchedulerStatus?: RetrainingSchedulerStatus;
  ModelDiagnosticsOutputConfiguration?: ModelDiagnosticsOutputConfiguration;
  ModelQuality?: ModelQuality;
}
export interface ListModelsResponse {
  NextToken?: string;
  ModelSummaries?: ModelSummary[];
}
export interface ListModelVersionsRequest {
  ModelName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  Status?: ModelVersionStatus;
  SourceType?: ModelVersionSourceType;
  CreatedAtEndTime?: Date;
  CreatedAtStartTime?: Date;
  MaxModelVersion?: number;
  MinModelVersion?: number;
}
export interface ModelVersionSummary {
  ModelName?: string;
  ModelArn?: string;
  ModelVersion?: number;
  ModelVersionArn?: string;
  CreatedAt?: Date;
  Status?: ModelVersionStatus;
  SourceType?: ModelVersionSourceType;
  ModelQuality?: ModelQuality;
}
export interface ListModelVersionsResponse {
  NextToken?: string;
  ModelVersionSummaries?: ModelVersionSummary[];
}
export interface ListRetrainingSchedulersRequest {
  ModelNameBeginsWith?: string;
  Status?: RetrainingSchedulerStatus;
  NextToken?: string;
  MaxResults?: number;
}
export interface RetrainingSchedulerSummary {
  ModelName?: string;
  ModelArn?: string;
  Status?: RetrainingSchedulerStatus;
  RetrainingStartDate?: Date;
  RetrainingFrequency?: string;
  LookbackWindow?: string;
}
export interface ListRetrainingSchedulersResponse {
  RetrainingSchedulerSummaries?: RetrainingSchedulerSummary[];
  NextToken?: string;
}
export interface ListSensorStatisticsRequest {
  DatasetName: string | undefined;
  IngestionJobId?: string;
  MaxResults?: number;
  NextToken?: string;
}
export declare const StatisticalIssueStatus: {
  readonly NO_ISSUE_DETECTED: "NO_ISSUE_DETECTED";
  readonly POTENTIAL_ISSUE_DETECTED: "POTENTIAL_ISSUE_DETECTED";
};
export type StatisticalIssueStatus =
  (typeof StatisticalIssueStatus)[keyof typeof StatisticalIssueStatus];
export interface CategoricalValues {
  Status: StatisticalIssueStatus | undefined;
  NumberOfCategory?: number;
}
export interface CountPercent {
  Count: number | undefined;
  Percentage: number | undefined;
}
export interface LargeTimestampGaps {
  Status: StatisticalIssueStatus | undefined;
  NumberOfLargeTimestampGaps?: number;
  MaxTimestampGapInDays?: number;
}
export declare const Monotonicity: {
  readonly DECREASING: "DECREASING";
  readonly INCREASING: "INCREASING";
  readonly STATIC: "STATIC";
};
export type Monotonicity = (typeof Monotonicity)[keyof typeof Monotonicity];
export interface MonotonicValues {
  Status: StatisticalIssueStatus | undefined;
  Monotonicity?: Monotonicity;
}
export interface MultipleOperatingModes {
  Status: StatisticalIssueStatus | undefined;
}
export interface SensorStatisticsSummary {
  ComponentName?: string;
  SensorName?: string;
  DataExists?: boolean;
  MissingValues?: CountPercent;
  InvalidValues?: CountPercent;
  InvalidDateEntries?: CountPercent;
  DuplicateTimestamps?: CountPercent;
  CategoricalValues?: CategoricalValues;
  MultipleOperatingModes?: MultipleOperatingModes;
  LargeTimestampGaps?: LargeTimestampGaps;
  MonotonicValues?: MonotonicValues;
  DataStartTime?: Date;
  DataEndTime?: Date;
}
export interface ListSensorStatisticsResponse {
  SensorStatisticsSummaries?: SensorStatisticsSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export interface PutResourcePolicyRequest {
  ResourceArn: string | undefined;
  ResourcePolicy: string | undefined;
  PolicyRevisionId?: string;
  ClientToken?: string;
}
export interface PutResourcePolicyResponse {
  ResourceArn?: string;
  PolicyRevisionId?: string;
}
export interface StartDataIngestionJobRequest {
  DatasetName: string | undefined;
  IngestionInputConfiguration: IngestionInputConfiguration | undefined;
  RoleArn: string | undefined;
  ClientToken?: string;
}
export interface StartDataIngestionJobResponse {
  JobId?: string;
  Status?: IngestionJobStatus;
}
export interface StartInferenceSchedulerRequest {
  InferenceSchedulerName: string | undefined;
}
export interface StartInferenceSchedulerResponse {
  ModelArn?: string;
  ModelName?: string;
  InferenceSchedulerName?: string;
  InferenceSchedulerArn?: string;
  Status?: InferenceSchedulerStatus;
}
export interface StartRetrainingSchedulerRequest {
  ModelName: string | undefined;
}
export interface StartRetrainingSchedulerResponse {
  ModelName?: string;
  ModelArn?: string;
  Status?: RetrainingSchedulerStatus;
}
export interface StopInferenceSchedulerRequest {
  InferenceSchedulerName: string | undefined;
}
export interface StopInferenceSchedulerResponse {
  ModelArn?: string;
  ModelName?: string;
  InferenceSchedulerName?: string;
  InferenceSchedulerArn?: string;
  Status?: InferenceSchedulerStatus;
}
export interface StopRetrainingSchedulerRequest {
  ModelName: string | undefined;
}
export interface StopRetrainingSchedulerResponse {
  ModelName?: string;
  ModelArn?: string;
  Status?: RetrainingSchedulerStatus;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateActiveModelVersionRequest {
  ModelName: string | undefined;
  ModelVersion: number | undefined;
}
export interface UpdateActiveModelVersionResponse {
  ModelName?: string;
  ModelArn?: string;
  CurrentActiveVersion?: number;
  PreviousActiveVersion?: number;
  CurrentActiveVersionArn?: string;
  PreviousActiveVersionArn?: string;
}
export interface UpdateInferenceSchedulerRequest {
  InferenceSchedulerName: string | undefined;
  DataDelayOffsetInMinutes?: number;
  DataUploadFrequency?: DataUploadFrequency;
  DataInputConfiguration?: InferenceInputConfiguration;
  DataOutputConfiguration?: InferenceOutputConfiguration;
  RoleArn?: string;
}
export interface UpdateLabelGroupRequest {
  LabelGroupName: string | undefined;
  FaultCodes?: string[];
}
export interface UpdateModelRequest {
  ModelName: string | undefined;
  LabelsInputConfiguration?: LabelsInputConfiguration;
  RoleArn?: string;
  ModelDiagnosticsOutputConfiguration?: ModelDiagnosticsOutputConfiguration;
}
export interface UpdateRetrainingSchedulerRequest {
  ModelName: string | undefined;
  RetrainingStartDate?: Date;
  RetrainingFrequency?: string;
  LookbackWindow?: string;
  PromoteMode?: ModelPromoteMode;
}
