import { SMSServiceException as __BaseException } from "./SMSServiceException";
export const AppLaunchConfigurationStatus = {
    Configured: "CONFIGURED",
    NotConfigured: "NOT_CONFIGURED",
};
export const AppLaunchStatus = {
    ConfigurationInProgress: "CONFIGURATION_IN_PROGRESS",
    ConfigurationInvalid: "CONFIGURATION_INVALID",
    DeltaLaunchFailed: "DELTA_LAUNCH_FAILED",
    DeltaLaunchInProgress: "DELTA_LAUNCH_IN_PROGRESS",
    LaunchFailed: "LAUNCH_FAILED",
    LaunchInProgress: "LAUNCH_IN_PROGRESS",
    LaunchPending: "LAUNCH_PENDING",
    Launched: "LAUNCHED",
    PartiallyLaunched: "PARTIALLY_LAUNCHED",
    ReadyForConfiguration: "READY_FOR_CONFIGURATION",
    ReadyForLaunch: "READY_FOR_LAUNCH",
    TerminateFailed: "TERMINATE_FAILED",
    TerminateInProgress: "TERMINATE_IN_PROGRESS",
    Terminated: "TERMINATED",
    ValidationInProgress: "VALIDATION_IN_PROGRESS",
};
export const AppReplicationConfigurationStatus = {
    Configured: "CONFIGURED",
    NotConfigured: "NOT_CONFIGURED",
};
export const AppReplicationStatus = {
    ConfigurationInProgress: "CONFIGURATION_IN_PROGRESS",
    ConfigurationInvalid: "CONFIGURATION_INVALID",
    DeltaReplicated: "DELTA_REPLICATED",
    DeltaReplicationFailed: "DELTA_REPLICATION_FAILED",
    DeltaReplicationInProgress: "DELTA_REPLICATION_IN_PROGRESS",
    PartiallyReplicated: "PARTIALLY_REPLICATED",
    ReadyForConfiguration: "READY_FOR_CONFIGURATION",
    ReadyForReplication: "READY_FOR_REPLICATION",
    Replicated: "REPLICATED",
    ReplicationFailed: "REPLICATION_FAILED",
    ReplicationInProgress: "REPLICATION_IN_PROGRESS",
    ReplicationPending: "REPLICATION_PENDING",
    ReplicationStopFailed: "REPLICATION_STOP_FAILED",
    ReplicationStopped: "REPLICATION_STOPPED",
    ReplicationStopping: "REPLICATION_STOPPING",
    ValidationInProgress: "VALIDATION_IN_PROGRESS",
};
export const AppStatus = {
    Active: "ACTIVE",
    Creating: "CREATING",
    DELETE_FAILED: "DELETE_FAILED",
    Deleted: "DELETED",
    Deleting: "DELETING",
    Updating: "UPDATING",
};
export const AppValidationStrategy = {
    SSM: "SSM",
};
export const ScriptType = {
    POWERSHELL_SCRIPT: "POWERSHELL_SCRIPT",
    SHELL_SCRIPT: "SHELL_SCRIPT",
};
export const ServerType = {
    VirtualMachine: "VIRTUAL_MACHINE",
};
export const VmManagerType = {
    hyperVManager: "HYPERV-MANAGER",
    scvmm: "SCVMM",
    vSphere: "VSPHERE",
};
export class InternalError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalError.prototype);
    }
}
export class InvalidParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
export class MissingRequiredParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "MissingRequiredParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "MissingRequiredParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingRequiredParameterException.prototype);
    }
}
export class OperationNotPermittedException extends __BaseException {
    constructor(opts) {
        super({
            name: "OperationNotPermittedException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationNotPermittedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationNotPermittedException.prototype);
    }
}
export class UnauthorizedOperationException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnauthorizedOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedOperationException.prototype);
    }
}
export const LicenseType = {
    AWS: "AWS",
    BYOL: "BYOL",
};
export class NoConnectorsAvailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "NoConnectorsAvailableException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoConnectorsAvailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoConnectorsAvailableException.prototype);
    }
}
export class ReplicationJobAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ReplicationJobAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReplicationJobAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplicationJobAlreadyExistsException.prototype);
    }
}
export class ServerCannotBeReplicatedException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServerCannotBeReplicatedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServerCannotBeReplicatedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServerCannotBeReplicatedException.prototype);
    }
}
export class TemporarilyUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "TemporarilyUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "TemporarilyUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, TemporarilyUnavailableException.prototype);
    }
}
export class ReplicationJobNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ReplicationJobNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReplicationJobNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplicationJobNotFoundException.prototype);
    }
}
export const OutputFormat = {
    JSON: "JSON",
    YAML: "YAML",
};
export const ServerValidationStrategy = {
    USERDATA: "USERDATA",
};
export const ValidationStatus = {
    Failed: "FAILED",
    InProgress: "IN_PROGRESS",
    Pending: "PENDING",
    ReadyForValidation: "READY_FOR_VALIDATION",
    Succeeded: "SUCCEEDED",
};
export const ConnectorCapability = {
    hyperVManager: "HYPERV-MANAGER",
    scvmm: "SCVMM",
    smsOptimized: "SMS_OPTIMIZED",
    snapshotBatching: "SNAPSHOT_BATCHING",
    vSphere: "VSPHERE",
};
export const ConnectorStatus = {
    Healthy: "HEALTHY",
    Unhealthy: "UNHEALTHY",
};
export const ReplicationRunState = {
    Active: "ACTIVE",
    Completed: "COMPLETED",
    Deleted: "DELETED",
    Deleting: "DELETING",
    Failed: "FAILED",
    Missed: "MISSED",
    Pending: "PENDING",
};
export const ReplicationRunType = {
    Automatic: "AUTOMATIC",
    OnDemand: "ON_DEMAND",
};
export const ReplicationJobState = {
    Active: "ACTIVE",
    Completed: "COMPLETED",
    Deleted: "DELETED",
    Deleting: "DELETING",
    Failed: "FAILED",
    Failing: "FAILING",
    PausedOnFailure: "PAUSED_ON_FAILURE",
    Pending: "PENDING",
};
export const ServerCatalogStatus = {
    Available: "AVAILABLE",
    Deleted: "DELETED",
    Expired: "EXPIRED",
    Importing: "IMPORTING",
    NotImported: "NOT_IMPORTED",
};
export class DryRunOperationException extends __BaseException {
    constructor(opts) {
        super({
            name: "DryRunOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "DryRunOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DryRunOperationException.prototype);
    }
}
export class ReplicationRunLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ReplicationRunLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReplicationRunLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplicationRunLimitExceededException.prototype);
    }
}
