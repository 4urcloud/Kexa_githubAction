import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { DryRunOperationException, InternalError, InvalidParameterException, MissingRequiredParameterException, NoConnectorsAvailableException, OperationNotPermittedException, ReplicationJobAlreadyExistsException, ReplicationJobNotFoundException, ReplicationRunLimitExceededException, ServerCannotBeReplicatedException, TemporarilyUnavailableException, UnauthorizedOperationException, } from "../models/models_0";
import { SMSServiceException as __BaseException } from "../models/SMSServiceException";
export const se_CreateAppCommand = async (input, context) => {
    const headers = sharedHeaders("CreateApp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateReplicationJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateReplicationJob");
    let body;
    body = JSON.stringify(se_CreateReplicationJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAppCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteApp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAppLaunchConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAppLaunchConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAppReplicationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAppReplicationConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAppValidationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAppValidationConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteReplicationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteReplicationJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteServerCatalogCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteServerCatalog");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateConnectorCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateConnector");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GenerateChangeSetCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateChangeSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GenerateTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAppCommand = async (input, context) => {
    const headers = sharedHeaders("GetApp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAppLaunchConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetAppLaunchConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAppReplicationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetAppReplicationConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAppValidationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetAppValidationConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAppValidationOutputCommand = async (input, context) => {
    const headers = sharedHeaders("GetAppValidationOutput");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetConnectorsCommand = async (input, context) => {
    const headers = sharedHeaders("GetConnectors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetReplicationJobsCommand = async (input, context) => {
    const headers = sharedHeaders("GetReplicationJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetReplicationRunsCommand = async (input, context) => {
    const headers = sharedHeaders("GetReplicationRuns");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServersCommand = async (input, context) => {
    const headers = sharedHeaders("GetServers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportAppCatalogCommand = async (input, context) => {
    const headers = sharedHeaders("ImportAppCatalog");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportServerCatalogCommand = async (input, context) => {
    const headers = sharedHeaders("ImportServerCatalog");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_LaunchAppCommand = async (input, context) => {
    const headers = sharedHeaders("LaunchApp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAppsCommand = async (input, context) => {
    const headers = sharedHeaders("ListApps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_NotifyAppValidationOutputCommand = async (input, context) => {
    const headers = sharedHeaders("NotifyAppValidationOutput");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutAppLaunchConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutAppLaunchConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutAppReplicationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutAppReplicationConfiguration");
    let body;
    body = JSON.stringify(se_PutAppReplicationConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutAppValidationConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutAppValidationConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartAppReplicationCommand = async (input, context) => {
    const headers = sharedHeaders("StartAppReplication");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartOnDemandAppReplicationCommand = async (input, context) => {
    const headers = sharedHeaders("StartOnDemandAppReplication");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartOnDemandReplicationRunCommand = async (input, context) => {
    const headers = sharedHeaders("StartOnDemandReplicationRun");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopAppReplicationCommand = async (input, context) => {
    const headers = sharedHeaders("StopAppReplication");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TerminateAppCommand = async (input, context) => {
    const headers = sharedHeaders("TerminateApp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAppCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateApp");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateReplicationJobCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateReplicationJob");
    let body;
    body = JSON.stringify(se_UpdateReplicationJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAppResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateReplicationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAppLaunchConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAppReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAppValidationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteReplicationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteServerCatalogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateConnectorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GenerateChangeSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GenerateTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAppResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAppLaunchConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAppReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAppReplicationConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAppValidationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAppValidationOutputCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAppValidationOutputResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetConnectorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetConnectorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetReplicationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetReplicationJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetReplicationRunsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetReplicationRunsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportAppCatalogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportServerCatalogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_LaunchAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAppsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAppsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_NotifyAppValidationOutputCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutAppLaunchConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutAppReplicationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutAppValidationConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartAppReplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartOnDemandAppReplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartOnDemandReplicationRunCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopAppReplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TerminateAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateAppResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateReplicationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalError":
        case "com.amazonaws.sms#InternalError":
            throw await de_InternalErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.sms#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "MissingRequiredParameterException":
        case "com.amazonaws.sms#MissingRequiredParameterException":
            throw await de_MissingRequiredParameterExceptionRes(parsedOutput, context);
        case "OperationNotPermittedException":
        case "com.amazonaws.sms#OperationNotPermittedException":
            throw await de_OperationNotPermittedExceptionRes(parsedOutput, context);
        case "UnauthorizedOperationException":
        case "com.amazonaws.sms#UnauthorizedOperationException":
            throw await de_UnauthorizedOperationExceptionRes(parsedOutput, context);
        case "NoConnectorsAvailableException":
        case "com.amazonaws.sms#NoConnectorsAvailableException":
            throw await de_NoConnectorsAvailableExceptionRes(parsedOutput, context);
        case "ReplicationJobAlreadyExistsException":
        case "com.amazonaws.sms#ReplicationJobAlreadyExistsException":
            throw await de_ReplicationJobAlreadyExistsExceptionRes(parsedOutput, context);
        case "ServerCannotBeReplicatedException":
        case "com.amazonaws.sms#ServerCannotBeReplicatedException":
            throw await de_ServerCannotBeReplicatedExceptionRes(parsedOutput, context);
        case "TemporarilyUnavailableException":
        case "com.amazonaws.sms#TemporarilyUnavailableException":
            throw await de_TemporarilyUnavailableExceptionRes(parsedOutput, context);
        case "ReplicationJobNotFoundException":
        case "com.amazonaws.sms#ReplicationJobNotFoundException":
            throw await de_ReplicationJobNotFoundExceptionRes(parsedOutput, context);
        case "DryRunOperationException":
        case "com.amazonaws.sms#DryRunOperationException":
            throw await de_DryRunOperationExceptionRes(parsedOutput, context);
        case "ReplicationRunLimitExceededException":
        case "com.amazonaws.sms#ReplicationRunLimitExceededException":
            throw await de_ReplicationRunLimitExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DryRunOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DryRunOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MissingRequiredParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MissingRequiredParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NoConnectorsAvailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NoConnectorsAvailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationNotPermittedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OperationNotPermittedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ReplicationJobAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ReplicationJobAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ReplicationJobNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ReplicationJobNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ReplicationRunLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ReplicationRunLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServerCannotBeReplicatedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServerCannotBeReplicatedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TemporarilyUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TemporarilyUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnauthorizedOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnauthorizedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateReplicationJobRequest = (input, context) => {
    return take(input, {
        description: [],
        encrypted: [],
        frequency: [],
        kmsKeyId: [],
        licenseType: [],
        numberOfRecentAmisToKeep: [],
        roleName: [],
        runOnce: [],
        seedReplicationTime: (_) => Math.round(_.getTime() / 1000),
        serverId: [],
    });
};
const se_PutAppReplicationConfigurationRequest = (input, context) => {
    return take(input, {
        appId: [],
        serverGroupReplicationConfigurations: (_) => se_ServerGroupReplicationConfigurations(_, context),
    });
};
const se_ServerGroupReplicationConfiguration = (input, context) => {
    return take(input, {
        serverGroupId: [],
        serverReplicationConfigurations: (_) => se_ServerReplicationConfigurations(_, context),
    });
};
const se_ServerGroupReplicationConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ServerGroupReplicationConfiguration(entry, context);
    });
};
const se_ServerReplicationConfiguration = (input, context) => {
    return take(input, {
        server: _json,
        serverReplicationParameters: (_) => se_ServerReplicationParameters(_, context),
    });
};
const se_ServerReplicationConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ServerReplicationConfiguration(entry, context);
    });
};
const se_ServerReplicationParameters = (input, context) => {
    return take(input, {
        encrypted: [],
        frequency: [],
        kmsKeyId: [],
        licenseType: [],
        numberOfRecentAmisToKeep: [],
        runOnce: [],
        seedTime: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_UpdateReplicationJobRequest = (input, context) => {
    return take(input, {
        description: [],
        encrypted: [],
        frequency: [],
        kmsKeyId: [],
        licenseType: [],
        nextReplicationRunStartTime: (_) => Math.round(_.getTime() / 1000),
        numberOfRecentAmisToKeep: [],
        replicationJobId: [],
        roleName: [],
    });
};
const de_Apps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppSummary(entry, context);
    });
    return retVal;
};
const de_AppSummary = (output, context) => {
    return take(output, {
        appId: __expectString,
        creationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        importedAppId: __expectString,
        lastModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        latestReplicationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        launchConfigurationStatus: __expectString,
        launchDetails: (_) => de_LaunchDetails(_, context),
        launchStatus: __expectString,
        launchStatusMessage: __expectString,
        name: __expectString,
        replicationConfigurationStatus: __expectString,
        replicationStatus: __expectString,
        replicationStatusMessage: __expectString,
        roleName: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        totalServerGroups: __expectInt32,
        totalServers: __expectInt32,
    });
};
const de_Connector = (output, context) => {
    return take(output, {
        associatedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        capabilityList: _json,
        connectorId: __expectString,
        ipAddress: __expectString,
        macAddress: __expectString,
        status: __expectString,
        version: __expectString,
        vmManagerId: __expectString,
        vmManagerName: __expectString,
        vmManagerType: __expectString,
    });
};
const de_ConnectorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Connector(entry, context);
    });
    return retVal;
};
const de_CreateAppResponse = (output, context) => {
    return take(output, {
        appSummary: (_) => de_AppSummary(_, context),
        serverGroups: _json,
        tags: _json,
    });
};
const de_GetAppReplicationConfigurationResponse = (output, context) => {
    return take(output, {
        serverGroupReplicationConfigurations: (_) => de_ServerGroupReplicationConfigurations(_, context),
    });
};
const de_GetAppResponse = (output, context) => {
    return take(output, {
        appSummary: (_) => de_AppSummary(_, context),
        serverGroups: _json,
        tags: _json,
    });
};
const de_GetAppValidationOutputResponse = (output, context) => {
    return take(output, {
        validationOutputList: (_) => de_ValidationOutputList(_, context),
    });
};
const de_GetConnectorsResponse = (output, context) => {
    return take(output, {
        connectorList: (_) => de_ConnectorList(_, context),
        nextToken: __expectString,
    });
};
const de_GetReplicationJobsResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        replicationJobList: (_) => de_ReplicationJobList(_, context),
    });
};
const de_GetReplicationRunsResponse = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        replicationJob: (_) => de_ReplicationJob(_, context),
        replicationRunList: (_) => de_ReplicationRunList(_, context),
    });
};
const de_GetServersResponse = (output, context) => {
    return take(output, {
        lastModifiedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        nextToken: __expectString,
        serverCatalogStatus: __expectString,
        serverList: _json,
    });
};
const de_LaunchDetails = (output, context) => {
    return take(output, {
        latestLaunchTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        stackId: __expectString,
        stackName: __expectString,
    });
};
const de_ListAppsResponse = (output, context) => {
    return take(output, {
        apps: (_) => de_Apps(_, context),
        nextToken: __expectString,
    });
};
const de_ReplicationJob = (output, context) => {
    return take(output, {
        description: __expectString,
        encrypted: __expectBoolean,
        frequency: __expectInt32,
        kmsKeyId: __expectString,
        latestAmiId: __expectString,
        licenseType: __expectString,
        nextReplicationRunStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        numberOfRecentAmisToKeep: __expectInt32,
        replicationJobId: __expectString,
        replicationRunList: (_) => de_ReplicationRunList(_, context),
        roleName: __expectString,
        runOnce: __expectBoolean,
        seedReplicationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        serverId: __expectString,
        serverType: __expectString,
        state: __expectString,
        statusMessage: __expectString,
        vmServer: _json,
    });
};
const de_ReplicationJobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplicationJob(entry, context);
    });
    return retVal;
};
const de_ReplicationRun = (output, context) => {
    return take(output, {
        amiId: __expectString,
        completedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        encrypted: __expectBoolean,
        kmsKeyId: __expectString,
        replicationRunId: __expectString,
        scheduledStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        stageDetails: _json,
        state: __expectString,
        statusMessage: __expectString,
        type: __expectString,
    });
};
const de_ReplicationRunList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplicationRun(entry, context);
    });
    return retVal;
};
const de_ServerGroupReplicationConfiguration = (output, context) => {
    return take(output, {
        serverGroupId: __expectString,
        serverReplicationConfigurations: (_) => de_ServerReplicationConfigurations(_, context),
    });
};
const de_ServerGroupReplicationConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServerGroupReplicationConfiguration(entry, context);
    });
    return retVal;
};
const de_ServerReplicationConfiguration = (output, context) => {
    return take(output, {
        server: _json,
        serverReplicationParameters: (_) => de_ServerReplicationParameters(_, context),
    });
};
const de_ServerReplicationConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServerReplicationConfiguration(entry, context);
    });
    return retVal;
};
const de_ServerReplicationParameters = (output, context) => {
    return take(output, {
        encrypted: __expectBoolean,
        frequency: __expectInt32,
        kmsKeyId: __expectString,
        licenseType: __expectString,
        numberOfRecentAmisToKeep: __expectInt32,
        runOnce: __expectBoolean,
        seedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_UpdateAppResponse = (output, context) => {
    return take(output, {
        appSummary: (_) => de_AppSummary(_, context),
        serverGroups: _json,
        tags: _json,
    });
};
const de_ValidationOutput = (output, context) => {
    return take(output, {
        appValidationOutput: _json,
        latestValidationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        serverValidationOutput: _json,
        status: __expectString,
        statusMessage: __expectString,
        validationId: __expectString,
    });
};
const de_ValidationOutputList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidationOutput(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSServerMigrationService_V2016_10_24.${operation}`,
    };
}
