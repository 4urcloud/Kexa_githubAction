import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { ProtonServiceException as __BaseException } from "../models/ProtonServiceException";
export const se_AcceptEnvironmentAccountConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("AcceptEnvironmentAccountConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelComponentDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("CancelComponentDeployment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelEnvironmentDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("CancelEnvironmentDeployment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelServiceInstanceDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("CancelServiceInstanceDeployment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelServicePipelineDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("CancelServicePipelineDeployment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateComponentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateComponent");
    let body;
    body = JSON.stringify(se_CreateComponentInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEnvironmentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEnvironment");
    let body;
    body = JSON.stringify(se_CreateEnvironmentInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEnvironmentAccountConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEnvironmentAccountConnection");
    let body;
    body = JSON.stringify(se_CreateEnvironmentAccountConnectionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEnvironmentTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEnvironmentTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEnvironmentTemplateVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEnvironmentTemplateVersion");
    let body;
    body = JSON.stringify(se_CreateEnvironmentTemplateVersionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRepository");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateServiceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateService");
    let body;
    body = JSON.stringify(se_CreateServiceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateServiceInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateServiceInstance");
    let body;
    body = JSON.stringify(se_CreateServiceInstanceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateServiceSyncConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateServiceSyncConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateServiceTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("CreateServiceTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateServiceTemplateVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateServiceTemplateVersion");
    let body;
    body = JSON.stringify(se_CreateServiceTemplateVersionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTemplateSyncConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTemplateSyncConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteComponentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteComponent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDeployment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEnvironmentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEnvironment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEnvironmentAccountConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEnvironmentAccountConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEnvironmentTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEnvironmentTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEnvironmentTemplateVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEnvironmentTemplateVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRepository");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteServiceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteServiceSyncConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteServiceSyncConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteServiceTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteServiceTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteServiceTemplateVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteServiceTemplateVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTemplateSyncConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTemplateSyncConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAccountSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAccountSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetComponentCommand = async (input, context) => {
    const headers = sharedHeaders("GetComponent");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDeploymentCommand = async (input, context) => {
    const headers = sharedHeaders("GetDeployment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEnvironmentCommand = async (input, context) => {
    const headers = sharedHeaders("GetEnvironment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEnvironmentAccountConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetEnvironmentAccountConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEnvironmentTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("GetEnvironmentTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEnvironmentTemplateVersionCommand = async (input, context) => {
    const headers = sharedHeaders("GetEnvironmentTemplateVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("GetRepository");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRepositorySyncStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetRepositorySyncStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourcesSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcesSummary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceCommand = async (input, context) => {
    const headers = sharedHeaders("GetService");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("GetServiceInstance");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceInstanceSyncStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetServiceInstanceSyncStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceSyncBlockerSummaryCommand = async (input, context) => {
    const headers = sharedHeaders("GetServiceSyncBlockerSummary");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceSyncConfigCommand = async (input, context) => {
    const headers = sharedHeaders("GetServiceSyncConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("GetServiceTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetServiceTemplateVersionCommand = async (input, context) => {
    const headers = sharedHeaders("GetServiceTemplateVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTemplateSyncConfigCommand = async (input, context) => {
    const headers = sharedHeaders("GetTemplateSyncConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTemplateSyncStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetTemplateSyncStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListComponentOutputsCommand = async (input, context) => {
    const headers = sharedHeaders("ListComponentOutputs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListComponentProvisionedResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListComponentProvisionedResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListComponentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListComponents");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDeploymentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDeployments");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEnvironmentAccountConnectionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEnvironmentAccountConnections");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEnvironmentOutputsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEnvironmentOutputs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEnvironmentProvisionedResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListEnvironmentProvisionedResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEnvironmentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEnvironments");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEnvironmentTemplatesCommand = async (input, context) => {
    const headers = sharedHeaders("ListEnvironmentTemplates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEnvironmentTemplateVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEnvironmentTemplateVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRepositoriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListRepositories");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRepositorySyncDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRepositorySyncDefinitions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServiceInstanceOutputsCommand = async (input, context) => {
    const headers = sharedHeaders("ListServiceInstanceOutputs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServiceInstanceProvisionedResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListServiceInstanceProvisionedResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServiceInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("ListServiceInstances");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServicePipelineOutputsCommand = async (input, context) => {
    const headers = sharedHeaders("ListServicePipelineOutputs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServicePipelineProvisionedResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListServicePipelineProvisionedResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListServices");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServiceTemplatesCommand = async (input, context) => {
    const headers = sharedHeaders("ListServiceTemplates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListServiceTemplateVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListServiceTemplateVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_NotifyResourceDeploymentStatusChangeCommand = async (input, context) => {
    const headers = sharedHeaders("NotifyResourceDeploymentStatusChange");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RejectEnvironmentAccountConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("RejectEnvironmentAccountConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAccountSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAccountSettings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateComponentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateComponent");
    let body;
    body = JSON.stringify(se_UpdateComponentInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEnvironmentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEnvironment");
    let body;
    body = JSON.stringify(se_UpdateEnvironmentInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEnvironmentAccountConnectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEnvironmentAccountConnection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEnvironmentTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEnvironmentTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEnvironmentTemplateVersionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEnvironmentTemplateVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateServiceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateService");
    let body;
    body = JSON.stringify(se_UpdateServiceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateServiceInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateServiceInstance");
    let body;
    body = JSON.stringify(se_UpdateServiceInstanceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateServicePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateServicePipeline");
    let body;
    body = JSON.stringify(se_UpdateServicePipelineInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateServiceSyncBlockerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateServiceSyncBlocker");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateServiceSyncConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateServiceSyncConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateServiceTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateServiceTemplate");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateServiceTemplateVersionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateServiceTemplateVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTemplateSyncConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTemplateSyncConfig");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AcceptEnvironmentAccountConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AcceptEnvironmentAccountConnectionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelComponentDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelComponentDeploymentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelEnvironmentDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelEnvironmentDeploymentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelServiceInstanceDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelServiceInstanceDeploymentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelServicePipelineDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelServicePipelineDeploymentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateComponentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateEnvironmentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEnvironmentAccountConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateEnvironmentAccountConnectionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEnvironmentTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateEnvironmentTemplateOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEnvironmentTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateEnvironmentTemplateVersionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateServiceInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceInstanceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateServiceSyncConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateServiceTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceTemplateOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateServiceTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateServiceTemplateVersionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTemplateSyncConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteComponentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDeploymentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteEnvironmentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteEnvironmentAccountConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteEnvironmentAccountConnectionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteEnvironmentTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteEnvironmentTemplateOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteEnvironmentTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteEnvironmentTemplateVersionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteServiceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteServiceSyncConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteServiceTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteServiceTemplateOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteServiceTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteServiceTemplateVersionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTemplateSyncConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAccountSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetComponentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDeploymentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEnvironmentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEnvironmentAccountConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEnvironmentAccountConnectionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEnvironmentTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEnvironmentTemplateOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEnvironmentTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEnvironmentTemplateVersionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRepositorySyncStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRepositorySyncStatusOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourcesSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceInstanceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceInstanceSyncStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceInstanceSyncStatusOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceSyncBlockerSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceSyncBlockerSummaryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceSyncConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceTemplateOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetServiceTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetServiceTemplateVersionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTemplateSyncConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTemplateSyncStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTemplateSyncStatusOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListComponentOutputsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListComponentProvisionedResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListComponentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListComponentsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDeploymentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListDeploymentsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEnvironmentAccountConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEnvironmentAccountConnectionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEnvironmentOutputsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEnvironmentProvisionedResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEnvironmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEnvironmentsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEnvironmentTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEnvironmentTemplatesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEnvironmentTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEnvironmentTemplateVersionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRepositoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRepositorySyncDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServiceInstanceOutputsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServiceInstanceProvisionedResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServiceInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServiceInstancesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServicePipelineOutputsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServicePipelineProvisionedResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServicesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServiceTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServiceTemplatesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListServiceTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListServiceTemplateVersionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_NotifyResourceDeploymentStatusChangeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RejectEnvironmentAccountConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RejectEnvironmentAccountConnectionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAccountSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateComponentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateEnvironmentOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEnvironmentAccountConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateEnvironmentAccountConnectionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEnvironmentTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateEnvironmentTemplateOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEnvironmentTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateEnvironmentTemplateVersionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateServiceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateServiceInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateServiceInstanceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateServicePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateServicePipelineOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateServiceSyncBlockerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateServiceSyncBlockerOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateServiceSyncConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateServiceTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateServiceTemplateOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateServiceTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateServiceTemplateVersionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateTemplateSyncConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.proton#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.proton#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.proton#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.proton#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.proton#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.proton#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.proton#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateComponentInput = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        environmentName: [],
        manifest: [],
        name: [],
        serviceInstanceName: [],
        serviceName: [],
        serviceSpec: [],
        tags: _json,
        templateFile: [],
    });
};
const se_CreateEnvironmentAccountConnectionInput = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        codebuildRoleArn: [],
        componentRoleArn: [],
        environmentName: [],
        managementAccountId: [],
        roleArn: [],
        tags: _json,
    });
};
const se_CreateEnvironmentInput = (input, context) => {
    return take(input, {
        codebuildRoleArn: [],
        componentRoleArn: [],
        description: [],
        environmentAccountConnectionId: [],
        name: [],
        protonServiceRoleArn: [],
        provisioningRepository: _json,
        spec: [],
        tags: _json,
        templateMajorVersion: [],
        templateMinorVersion: [],
        templateName: [],
    });
};
const se_CreateEnvironmentTemplateVersionInput = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        majorVersion: [],
        source: _json,
        tags: _json,
        templateName: [],
    });
};
const se_CreateServiceInput = (input, context) => {
    return take(input, {
        branchName: [],
        description: [],
        name: [],
        repositoryConnectionArn: [],
        repositoryId: [],
        spec: [],
        tags: _json,
        templateMajorVersion: [],
        templateMinorVersion: [],
        templateName: [],
    });
};
const se_CreateServiceInstanceInput = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        name: [],
        serviceName: [],
        spec: [],
        tags: _json,
        templateMajorVersion: [],
        templateMinorVersion: [],
    });
};
const se_CreateServiceTemplateVersionInput = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        compatibleEnvironmentTemplates: _json,
        description: [],
        majorVersion: [],
        source: _json,
        supportedComponentSources: _json,
        tags: _json,
        templateName: [],
    });
};
const se_UpdateComponentInput = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        deploymentType: [],
        description: [],
        name: [],
        serviceInstanceName: [],
        serviceName: [],
        serviceSpec: [],
        templateFile: [],
    });
};
const se_UpdateEnvironmentInput = (input, context) => {
    return take(input, {
        codebuildRoleArn: [],
        componentRoleArn: [],
        deploymentType: [],
        description: [],
        environmentAccountConnectionId: [],
        name: [],
        protonServiceRoleArn: [],
        provisioningRepository: _json,
        spec: [],
        templateMajorVersion: [],
        templateMinorVersion: [],
    });
};
const se_UpdateServiceInput = (input, context) => {
    return take(input, {
        description: [],
        name: [],
        spec: [],
    });
};
const se_UpdateServiceInstanceInput = (input, context) => {
    return take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        deploymentType: [],
        name: [],
        serviceName: [],
        spec: [],
        templateMajorVersion: [],
        templateMinorVersion: [],
    });
};
const se_UpdateServicePipelineInput = (input, context) => {
    return take(input, {
        deploymentType: [],
        serviceName: [],
        spec: [],
        templateMajorVersion: [],
        templateMinorVersion: [],
    });
};
const de_AcceptEnvironmentAccountConnectionOutput = (output, context) => {
    return take(output, {
        environmentAccountConnection: (_) => de_EnvironmentAccountConnection(_, context),
    });
};
const de_CancelComponentDeploymentOutput = (output, context) => {
    return take(output, {
        component: (_) => de_Component(_, context),
    });
};
const de_CancelEnvironmentDeploymentOutput = (output, context) => {
    return take(output, {
        environment: (_) => de_Environment(_, context),
    });
};
const de_CancelServiceInstanceDeploymentOutput = (output, context) => {
    return take(output, {
        serviceInstance: (_) => de_ServiceInstance(_, context),
    });
};
const de_CancelServicePipelineDeploymentOutput = (output, context) => {
    return take(output, {
        pipeline: (_) => de_ServicePipeline(_, context),
    });
};
const de_Component = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStatus: __expectString,
        deploymentStatusMessage: __expectString,
        description: __expectString,
        environmentName: __expectString,
        lastAttemptedDeploymentId: __expectString,
        lastClientRequestToken: __expectString,
        lastDeploymentAttemptedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDeploymentSucceededAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastSucceededDeploymentId: __expectString,
        name: __expectString,
        serviceInstanceName: __expectString,
        serviceName: __expectString,
        serviceSpec: __expectString,
    });
};
const de_ComponentState = (output, context) => {
    return take(output, {
        serviceInstanceName: __expectString,
        serviceName: __expectString,
        serviceSpec: __expectString,
        templateFile: __expectString,
    });
};
const de_ComponentSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStatus: __expectString,
        deploymentStatusMessage: __expectString,
        environmentName: __expectString,
        lastAttemptedDeploymentId: __expectString,
        lastDeploymentAttemptedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDeploymentSucceededAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastSucceededDeploymentId: __expectString,
        name: __expectString,
        serviceInstanceName: __expectString,
        serviceName: __expectString,
    });
};
const de_ComponentSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComponentSummary(entry, context);
    });
    return retVal;
};
const de_CreateComponentOutput = (output, context) => {
    return take(output, {
        component: (_) => de_Component(_, context),
    });
};
const de_CreateEnvironmentAccountConnectionOutput = (output, context) => {
    return take(output, {
        environmentAccountConnection: (_) => de_EnvironmentAccountConnection(_, context),
    });
};
const de_CreateEnvironmentOutput = (output, context) => {
    return take(output, {
        environment: (_) => de_Environment(_, context),
    });
};
const de_CreateEnvironmentTemplateOutput = (output, context) => {
    return take(output, {
        environmentTemplate: (_) => de_EnvironmentTemplate(_, context),
    });
};
const de_CreateEnvironmentTemplateVersionOutput = (output, context) => {
    return take(output, {
        environmentTemplateVersion: (_) => de_EnvironmentTemplateVersion(_, context),
    });
};
const de_CreateServiceInstanceOutput = (output, context) => {
    return take(output, {
        serviceInstance: (_) => de_ServiceInstance(_, context),
    });
};
const de_CreateServiceOutput = (output, context) => {
    return take(output, {
        service: (_) => de_Service(_, context),
    });
};
const de_CreateServiceTemplateOutput = (output, context) => {
    return take(output, {
        serviceTemplate: (_) => de_ServiceTemplate(_, context),
    });
};
const de_CreateServiceTemplateVersionOutput = (output, context) => {
    return take(output, {
        serviceTemplateVersion: (_) => de_ServiceTemplateVersion(_, context),
    });
};
const de_DeleteComponentOutput = (output, context) => {
    return take(output, {
        component: (_) => de_Component(_, context),
    });
};
const de_DeleteDeploymentOutput = (output, context) => {
    return take(output, {
        deployment: (_) => de_Deployment(_, context),
    });
};
const de_DeleteEnvironmentAccountConnectionOutput = (output, context) => {
    return take(output, {
        environmentAccountConnection: (_) => de_EnvironmentAccountConnection(_, context),
    });
};
const de_DeleteEnvironmentOutput = (output, context) => {
    return take(output, {
        environment: (_) => de_Environment(_, context),
    });
};
const de_DeleteEnvironmentTemplateOutput = (output, context) => {
    return take(output, {
        environmentTemplate: (_) => de_EnvironmentTemplate(_, context),
    });
};
const de_DeleteEnvironmentTemplateVersionOutput = (output, context) => {
    return take(output, {
        environmentTemplateVersion: (_) => de_EnvironmentTemplateVersion(_, context),
    });
};
const de_DeleteServiceOutput = (output, context) => {
    return take(output, {
        service: (_) => de_Service(_, context),
    });
};
const de_DeleteServiceTemplateOutput = (output, context) => {
    return take(output, {
        serviceTemplate: (_) => de_ServiceTemplate(_, context),
    });
};
const de_DeleteServiceTemplateVersionOutput = (output, context) => {
    return take(output, {
        serviceTemplateVersion: (_) => de_ServiceTemplateVersion(_, context),
    });
};
const de_Deployment = (output, context) => {
    return take(output, {
        arn: __expectString,
        completedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        componentName: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStatus: __expectString,
        deploymentStatusMessage: __expectString,
        environmentName: __expectString,
        id: __expectString,
        initialState: (_) => de_DeploymentState(__expectUnion(_), context),
        lastAttemptedDeploymentId: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastSucceededDeploymentId: __expectString,
        serviceInstanceName: __expectString,
        serviceName: __expectString,
        targetArn: __expectString,
        targetResourceCreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        targetResourceType: __expectString,
        targetState: (_) => de_DeploymentState(__expectUnion(_), context),
    });
};
const de_DeploymentState = (output, context) => {
    if (output.component != null) {
        return {
            component: de_ComponentState(output.component, context),
        };
    }
    if (output.environment != null) {
        return {
            environment: de_EnvironmentState(output.environment, context),
        };
    }
    if (output.serviceInstance != null) {
        return {
            serviceInstance: de_ServiceInstanceState(output.serviceInstance, context),
        };
    }
    if (output.servicePipeline != null) {
        return {
            servicePipeline: de_ServicePipelineState(output.servicePipeline, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_DeploymentSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        completedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        componentName: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStatus: __expectString,
        environmentName: __expectString,
        id: __expectString,
        lastAttemptedDeploymentId: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastSucceededDeploymentId: __expectString,
        serviceInstanceName: __expectString,
        serviceName: __expectString,
        targetArn: __expectString,
        targetResourceCreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        targetResourceType: __expectString,
    });
};
const de_DeploymentSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentSummary(entry, context);
    });
    return retVal;
};
const de_Environment = (output, context) => {
    return take(output, {
        arn: __expectString,
        codebuildRoleArn: __expectString,
        componentRoleArn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStatus: __expectString,
        deploymentStatusMessage: __expectString,
        description: __expectString,
        environmentAccountConnectionId: __expectString,
        environmentAccountId: __expectString,
        lastAttemptedDeploymentId: __expectString,
        lastDeploymentAttemptedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDeploymentSucceededAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastSucceededDeploymentId: __expectString,
        name: __expectString,
        protonServiceRoleArn: __expectString,
        provisioning: __expectString,
        provisioningRepository: _json,
        spec: __expectString,
        templateMajorVersion: __expectString,
        templateMinorVersion: __expectString,
        templateName: __expectString,
    });
};
const de_EnvironmentAccountConnection = (output, context) => {
    return take(output, {
        arn: __expectString,
        codebuildRoleArn: __expectString,
        componentRoleArn: __expectString,
        environmentAccountId: __expectString,
        environmentName: __expectString,
        id: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        managementAccountId: __expectString,
        requestedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        roleArn: __expectString,
        status: __expectString,
    });
};
const de_EnvironmentAccountConnectionSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        componentRoleArn: __expectString,
        environmentAccountId: __expectString,
        environmentName: __expectString,
        id: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        managementAccountId: __expectString,
        requestedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        roleArn: __expectString,
        status: __expectString,
    });
};
const de_EnvironmentAccountConnectionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentAccountConnectionSummary(entry, context);
    });
    return retVal;
};
const de_EnvironmentState = (output, context) => {
    return take(output, {
        spec: __expectString,
        templateMajorVersion: __expectString,
        templateMinorVersion: __expectString,
        templateName: __expectString,
    });
};
const de_EnvironmentSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        componentRoleArn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStatus: __expectString,
        deploymentStatusMessage: __expectString,
        description: __expectString,
        environmentAccountConnectionId: __expectString,
        environmentAccountId: __expectString,
        lastAttemptedDeploymentId: __expectString,
        lastDeploymentAttemptedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDeploymentSucceededAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastSucceededDeploymentId: __expectString,
        name: __expectString,
        protonServiceRoleArn: __expectString,
        provisioning: __expectString,
        templateMajorVersion: __expectString,
        templateMinorVersion: __expectString,
        templateName: __expectString,
    });
};
const de_EnvironmentSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentSummary(entry, context);
    });
    return retVal;
};
const de_EnvironmentTemplate = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        displayName: __expectString,
        encryptionKey: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        provisioning: __expectString,
        recommendedVersion: __expectString,
    });
};
const de_EnvironmentTemplateSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        displayName: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        provisioning: __expectString,
        recommendedVersion: __expectString,
    });
};
const de_EnvironmentTemplateSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentTemplateSummary(entry, context);
    });
    return retVal;
};
const de_EnvironmentTemplateVersion = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        majorVersion: __expectString,
        minorVersion: __expectString,
        recommendedMinorVersion: __expectString,
        schema: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        templateName: __expectString,
    });
};
const de_EnvironmentTemplateVersionSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        majorVersion: __expectString,
        minorVersion: __expectString,
        recommendedMinorVersion: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        templateName: __expectString,
    });
};
const de_EnvironmentTemplateVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentTemplateVersionSummary(entry, context);
    });
    return retVal;
};
const de_GetComponentOutput = (output, context) => {
    return take(output, {
        component: (_) => de_Component(_, context),
    });
};
const de_GetDeploymentOutput = (output, context) => {
    return take(output, {
        deployment: (_) => de_Deployment(_, context),
    });
};
const de_GetEnvironmentAccountConnectionOutput = (output, context) => {
    return take(output, {
        environmentAccountConnection: (_) => de_EnvironmentAccountConnection(_, context),
    });
};
const de_GetEnvironmentOutput = (output, context) => {
    return take(output, {
        environment: (_) => de_Environment(_, context),
    });
};
const de_GetEnvironmentTemplateOutput = (output, context) => {
    return take(output, {
        environmentTemplate: (_) => de_EnvironmentTemplate(_, context),
    });
};
const de_GetEnvironmentTemplateVersionOutput = (output, context) => {
    return take(output, {
        environmentTemplateVersion: (_) => de_EnvironmentTemplateVersion(_, context),
    });
};
const de_GetRepositorySyncStatusOutput = (output, context) => {
    return take(output, {
        latestSync: (_) => de_RepositorySyncAttempt(_, context),
    });
};
const de_GetServiceInstanceOutput = (output, context) => {
    return take(output, {
        serviceInstance: (_) => de_ServiceInstance(_, context),
    });
};
const de_GetServiceInstanceSyncStatusOutput = (output, context) => {
    return take(output, {
        desiredState: _json,
        latestSuccessfulSync: (_) => de_ResourceSyncAttempt(_, context),
        latestSync: (_) => de_ResourceSyncAttempt(_, context),
    });
};
const de_GetServiceOutput = (output, context) => {
    return take(output, {
        service: (_) => de_Service(_, context),
    });
};
const de_GetServiceSyncBlockerSummaryOutput = (output, context) => {
    return take(output, {
        serviceSyncBlockerSummary: (_) => de_ServiceSyncBlockerSummary(_, context),
    });
};
const de_GetServiceTemplateOutput = (output, context) => {
    return take(output, {
        serviceTemplate: (_) => de_ServiceTemplate(_, context),
    });
};
const de_GetServiceTemplateVersionOutput = (output, context) => {
    return take(output, {
        serviceTemplateVersion: (_) => de_ServiceTemplateVersion(_, context),
    });
};
const de_GetTemplateSyncStatusOutput = (output, context) => {
    return take(output, {
        desiredState: _json,
        latestSuccessfulSync: (_) => de_ResourceSyncAttempt(_, context),
        latestSync: (_) => de_ResourceSyncAttempt(_, context),
    });
};
const de_LatestSyncBlockers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SyncBlocker(entry, context);
    });
    return retVal;
};
const de_ListComponentsOutput = (output, context) => {
    return take(output, {
        components: (_) => de_ComponentSummaryList(_, context),
        nextToken: __expectString,
    });
};
const de_ListDeploymentsOutput = (output, context) => {
    return take(output, {
        deployments: (_) => de_DeploymentSummaryList(_, context),
        nextToken: __expectString,
    });
};
const de_ListEnvironmentAccountConnectionsOutput = (output, context) => {
    return take(output, {
        environmentAccountConnections: (_) => de_EnvironmentAccountConnectionSummaryList(_, context),
        nextToken: __expectString,
    });
};
const de_ListEnvironmentsOutput = (output, context) => {
    return take(output, {
        environments: (_) => de_EnvironmentSummaryList(_, context),
        nextToken: __expectString,
    });
};
const de_ListEnvironmentTemplatesOutput = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        templates: (_) => de_EnvironmentTemplateSummaryList(_, context),
    });
};
const de_ListEnvironmentTemplateVersionsOutput = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        templateVersions: (_) => de_EnvironmentTemplateVersionSummaryList(_, context),
    });
};
const de_ListServiceInstancesOutput = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        serviceInstances: (_) => de_ServiceInstanceSummaryList(_, context),
    });
};
const de_ListServicesOutput = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        services: (_) => de_ServiceSummaryList(_, context),
    });
};
const de_ListServiceTemplatesOutput = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        templates: (_) => de_ServiceTemplateSummaryList(_, context),
    });
};
const de_ListServiceTemplateVersionsOutput = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        templateVersions: (_) => de_ServiceTemplateVersionSummaryList(_, context),
    });
};
const de_RejectEnvironmentAccountConnectionOutput = (output, context) => {
    return take(output, {
        environmentAccountConnection: (_) => de_EnvironmentAccountConnection(_, context),
    });
};
const de_RepositorySyncAttempt = (output, context) => {
    return take(output, {
        events: (_) => de_RepositorySyncEvents(_, context),
        startedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
    });
};
const de_RepositorySyncEvent = (output, context) => {
    return take(output, {
        event: __expectString,
        externalId: __expectString,
        time: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        type: __expectString,
    });
};
const de_RepositorySyncEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RepositorySyncEvent(entry, context);
    });
    return retVal;
};
const de_ResourceSyncAttempt = (output, context) => {
    return take(output, {
        events: (_) => de_ResourceSyncEvents(_, context),
        initialRevision: _json,
        startedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: __expectString,
        target: __expectString,
        targetRevision: _json,
    });
};
const de_ResourceSyncEvent = (output, context) => {
    return take(output, {
        event: __expectString,
        externalId: __expectString,
        time: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        type: __expectString,
    });
};
const de_ResourceSyncEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceSyncEvent(entry, context);
    });
    return retVal;
};
const de_Service = (output, context) => {
    return take(output, {
        arn: __expectString,
        branchName: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        pipeline: (_) => de_ServicePipeline(_, context),
        repositoryConnectionArn: __expectString,
        repositoryId: __expectString,
        spec: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        templateName: __expectString,
    });
};
const de_ServiceInstance = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStatus: __expectString,
        deploymentStatusMessage: __expectString,
        environmentName: __expectString,
        lastAttemptedDeploymentId: __expectString,
        lastClientRequestToken: __expectString,
        lastDeploymentAttemptedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDeploymentSucceededAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastSucceededDeploymentId: __expectString,
        name: __expectString,
        serviceName: __expectString,
        spec: __expectString,
        templateMajorVersion: __expectString,
        templateMinorVersion: __expectString,
        templateName: __expectString,
    });
};
const de_ServiceInstanceState = (output, context) => {
    return take(output, {
        lastSuccessfulComponentDeploymentIds: _json,
        lastSuccessfulEnvironmentDeploymentId: __expectString,
        lastSuccessfulServicePipelineDeploymentId: __expectString,
        spec: __expectString,
        templateMajorVersion: __expectString,
        templateMinorVersion: __expectString,
        templateName: __expectString,
    });
};
const de_ServiceInstanceSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStatus: __expectString,
        deploymentStatusMessage: __expectString,
        environmentName: __expectString,
        lastAttemptedDeploymentId: __expectString,
        lastDeploymentAttemptedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDeploymentSucceededAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastSucceededDeploymentId: __expectString,
        name: __expectString,
        serviceName: __expectString,
        templateMajorVersion: __expectString,
        templateMinorVersion: __expectString,
        templateName: __expectString,
    });
};
const de_ServiceInstanceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceInstanceSummary(entry, context);
    });
    return retVal;
};
const de_ServicePipeline = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentStatus: __expectString,
        deploymentStatusMessage: __expectString,
        lastAttemptedDeploymentId: __expectString,
        lastDeploymentAttemptedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastDeploymentSucceededAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastSucceededDeploymentId: __expectString,
        spec: __expectString,
        templateMajorVersion: __expectString,
        templateMinorVersion: __expectString,
        templateName: __expectString,
    });
};
const de_ServicePipelineState = (output, context) => {
    return take(output, {
        spec: __expectString,
        templateMajorVersion: __expectString,
        templateMinorVersion: __expectString,
        templateName: __expectString,
    });
};
const de_ServiceSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        templateName: __expectString,
    });
};
const de_ServiceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceSummary(entry, context);
    });
    return retVal;
};
const de_ServiceSyncBlockerSummary = (output, context) => {
    return take(output, {
        latestBlockers: (_) => de_LatestSyncBlockers(_, context),
        serviceInstanceName: __expectString,
        serviceName: __expectString,
    });
};
const de_ServiceTemplate = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        displayName: __expectString,
        encryptionKey: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        pipelineProvisioning: __expectString,
        recommendedVersion: __expectString,
    });
};
const de_ServiceTemplateSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        displayName: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        pipelineProvisioning: __expectString,
        recommendedVersion: __expectString,
    });
};
const de_ServiceTemplateSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceTemplateSummary(entry, context);
    });
    return retVal;
};
const de_ServiceTemplateVersion = (output, context) => {
    return take(output, {
        arn: __expectString,
        compatibleEnvironmentTemplates: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        majorVersion: __expectString,
        minorVersion: __expectString,
        recommendedMinorVersion: __expectString,
        schema: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        supportedComponentSources: _json,
        templateName: __expectString,
    });
};
const de_ServiceTemplateVersionSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        majorVersion: __expectString,
        minorVersion: __expectString,
        recommendedMinorVersion: __expectString,
        status: __expectString,
        statusMessage: __expectString,
        templateName: __expectString,
    });
};
const de_ServiceTemplateVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceTemplateVersionSummary(entry, context);
    });
    return retVal;
};
const de_SyncBlocker = (output, context) => {
    return take(output, {
        contexts: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdReason: __expectString,
        id: __expectString,
        resolvedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        resolvedReason: __expectString,
        status: __expectString,
        type: __expectString,
    });
};
const de_UpdateComponentOutput = (output, context) => {
    return take(output, {
        component: (_) => de_Component(_, context),
    });
};
const de_UpdateEnvironmentAccountConnectionOutput = (output, context) => {
    return take(output, {
        environmentAccountConnection: (_) => de_EnvironmentAccountConnection(_, context),
    });
};
const de_UpdateEnvironmentOutput = (output, context) => {
    return take(output, {
        environment: (_) => de_Environment(_, context),
    });
};
const de_UpdateEnvironmentTemplateOutput = (output, context) => {
    return take(output, {
        environmentTemplate: (_) => de_EnvironmentTemplate(_, context),
    });
};
const de_UpdateEnvironmentTemplateVersionOutput = (output, context) => {
    return take(output, {
        environmentTemplateVersion: (_) => de_EnvironmentTemplateVersion(_, context),
    });
};
const de_UpdateServiceInstanceOutput = (output, context) => {
    return take(output, {
        serviceInstance: (_) => de_ServiceInstance(_, context),
    });
};
const de_UpdateServiceOutput = (output, context) => {
    return take(output, {
        service: (_) => de_Service(_, context),
    });
};
const de_UpdateServicePipelineOutput = (output, context) => {
    return take(output, {
        pipeline: (_) => de_ServicePipeline(_, context),
    });
};
const de_UpdateServiceSyncBlockerOutput = (output, context) => {
    return take(output, {
        serviceInstanceName: __expectString,
        serviceName: __expectString,
        serviceSyncBlocker: (_) => de_SyncBlocker(_, context),
    });
};
const de_UpdateServiceTemplateOutput = (output, context) => {
    return take(output, {
        serviceTemplate: (_) => de_ServiceTemplate(_, context),
    });
};
const de_UpdateServiceTemplateVersionOutput = (output, context) => {
    return take(output, {
        serviceTemplateVersion: (_) => de_ServiceTemplateVersion(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `AwsProton20200720.${operation}`,
    };
}
