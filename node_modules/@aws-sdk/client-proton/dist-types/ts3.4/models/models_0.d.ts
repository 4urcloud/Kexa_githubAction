import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ProtonServiceException as __BaseException } from "./ProtonServiceException";
export interface AcceptEnvironmentAccountConnectionInput {
  id: string | undefined;
}
export declare const EnvironmentAccountConnectionStatus: {
  readonly CONNECTED: "CONNECTED";
  readonly PENDING: "PENDING";
  readonly REJECTED: "REJECTED";
};
export type EnvironmentAccountConnectionStatus =
  (typeof EnvironmentAccountConnectionStatus)[keyof typeof EnvironmentAccountConnectionStatus];
export interface EnvironmentAccountConnection {
  id: string | undefined;
  arn: string | undefined;
  managementAccountId: string | undefined;
  environmentAccountId: string | undefined;
  roleArn: string | undefined;
  environmentName: string | undefined;
  requestedAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  status: EnvironmentAccountConnectionStatus | undefined;
  componentRoleArn?: string;
  codebuildRoleArn?: string;
}
export interface AcceptEnvironmentAccountConnectionOutput {
  environmentAccountConnection: EnvironmentAccountConnection | undefined;
}
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  $retryable: {};
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  $retryable: {
    throttling: boolean;
  };
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const RepositoryProvider: {
  readonly BITBUCKET: "BITBUCKET";
  readonly GITHUB: "GITHUB";
  readonly GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE";
};
export type RepositoryProvider =
  (typeof RepositoryProvider)[keyof typeof RepositoryProvider];
export interface RepositoryBranch {
  arn: string | undefined;
  provider: RepositoryProvider | undefined;
  name: string | undefined;
  branch: string | undefined;
}
export interface AccountSettings {
  pipelineServiceRoleArn?: string;
  pipelineProvisioningRepository?: RepositoryBranch;
  pipelineCodebuildRoleArn?: string;
}
export interface GetAccountSettingsInput {}
export interface GetAccountSettingsOutput {
  accountSettings?: AccountSettings;
}
export interface RepositoryBranchInput {
  provider: RepositoryProvider | undefined;
  name: string | undefined;
  branch: string | undefined;
}
export interface UpdateAccountSettingsInput {
  pipelineServiceRoleArn?: string;
  pipelineProvisioningRepository?: RepositoryBranchInput;
  deletePipelineProvisioningRepository?: boolean;
  pipelineCodebuildRoleArn?: string;
}
export interface UpdateAccountSettingsOutput {
  accountSettings: AccountSettings | undefined;
}
export interface CancelComponentDeploymentInput {
  componentName: string | undefined;
}
export declare const DeploymentStatus: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCELLING: "CANCELLING";
  readonly DELETE_COMPLETE: "DELETE_COMPLETE";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type DeploymentStatus =
  (typeof DeploymentStatus)[keyof typeof DeploymentStatus];
export interface Component {
  name: string | undefined;
  description?: string;
  arn: string | undefined;
  environmentName: string | undefined;
  serviceName?: string;
  serviceInstanceName?: string;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  lastDeploymentAttemptedAt?: Date;
  lastDeploymentSucceededAt?: Date;
  deploymentStatus: DeploymentStatus | undefined;
  deploymentStatusMessage?: string;
  serviceSpec?: string;
  lastClientRequestToken?: string;
  lastAttemptedDeploymentId?: string;
  lastSucceededDeploymentId?: string;
}
export interface CancelComponentDeploymentOutput {
  component: Component | undefined;
}
export interface CancelEnvironmentDeploymentInput {
  environmentName: string | undefined;
}
export declare const Provisioning: {
  readonly CUSTOMER_MANAGED: "CUSTOMER_MANAGED";
};
export type Provisioning = (typeof Provisioning)[keyof typeof Provisioning];
export interface Environment {
  name: string | undefined;
  description?: string;
  createdAt: Date | undefined;
  lastDeploymentAttemptedAt: Date | undefined;
  lastDeploymentSucceededAt: Date | undefined;
  arn: string | undefined;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion: string | undefined;
  deploymentStatus: DeploymentStatus | undefined;
  deploymentStatusMessage?: string;
  protonServiceRoleArn?: string;
  environmentAccountConnectionId?: string;
  environmentAccountId?: string;
  spec?: string;
  provisioning?: Provisioning;
  provisioningRepository?: RepositoryBranch;
  componentRoleArn?: string;
  codebuildRoleArn?: string;
  lastAttemptedDeploymentId?: string;
  lastSucceededDeploymentId?: string;
}
export interface CancelEnvironmentDeploymentOutput {
  environment: Environment | undefined;
}
export interface CancelServiceInstanceDeploymentInput {
  serviceInstanceName: string | undefined;
  serviceName: string | undefined;
}
export interface ServiceInstance {
  name: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastDeploymentAttemptedAt: Date | undefined;
  lastDeploymentSucceededAt: Date | undefined;
  serviceName: string | undefined;
  environmentName: string | undefined;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion: string | undefined;
  deploymentStatus: DeploymentStatus | undefined;
  deploymentStatusMessage?: string;
  spec?: string;
  lastClientRequestToken?: string;
  lastAttemptedDeploymentId?: string;
  lastSucceededDeploymentId?: string;
}
export interface CancelServiceInstanceDeploymentOutput {
  serviceInstance: ServiceInstance | undefined;
}
export interface CancelServicePipelineDeploymentInput {
  serviceName: string | undefined;
}
export interface ServicePipeline {
  arn: string | undefined;
  createdAt: Date | undefined;
  lastDeploymentAttemptedAt: Date | undefined;
  lastDeploymentSucceededAt: Date | undefined;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion: string | undefined;
  deploymentStatus: DeploymentStatus | undefined;
  deploymentStatusMessage?: string;
  spec?: string;
  lastAttemptedDeploymentId?: string;
  lastSucceededDeploymentId?: string;
}
export interface CancelServicePipelineDeploymentOutput {
  pipeline: ServicePipeline | undefined;
}
export interface ListComponentOutputsInput {
  componentName: string | undefined;
  nextToken?: string;
  deploymentId?: string;
}
export interface Output {
  key?: string;
  valueString?: string;
}
export interface ListComponentOutputsOutput {
  nextToken?: string;
  outputs: Output[] | undefined;
}
export interface ListComponentProvisionedResourcesInput {
  componentName: string | undefined;
  nextToken?: string;
}
export declare const ProvisionedResourceEngine: {
  readonly CLOUDFORMATION: "CLOUDFORMATION";
  readonly TERRAFORM: "TERRAFORM";
};
export type ProvisionedResourceEngine =
  (typeof ProvisionedResourceEngine)[keyof typeof ProvisionedResourceEngine];
export interface ProvisionedResource {
  name?: string;
  identifier?: string;
  provisioningEngine?: ProvisionedResourceEngine;
}
export interface ListComponentProvisionedResourcesOutput {
  nextToken?: string;
  provisionedResources: ProvisionedResource[] | undefined;
}
export interface Tag {
  key: string | undefined;
  value: string | undefined;
}
export interface CreateComponentInput {
  name: string | undefined;
  description?: string;
  serviceName?: string;
  serviceInstanceName?: string;
  environmentName?: string;
  templateFile: string | undefined;
  manifest: string | undefined;
  serviceSpec?: string;
  tags?: Tag[];
  clientToken?: string;
}
export interface CreateComponentOutput {
  component: Component | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface DeleteComponentInput {
  name: string | undefined;
}
export interface DeleteComponentOutput {
  component?: Component;
}
export interface GetComponentInput {
  name: string | undefined;
}
export interface GetComponentOutput {
  component?: Component;
}
export interface ListComponentsInput {
  nextToken?: string;
  environmentName?: string;
  serviceName?: string;
  serviceInstanceName?: string;
  maxResults?: number;
}
export interface ComponentSummary {
  name: string | undefined;
  arn: string | undefined;
  environmentName: string | undefined;
  serviceName?: string;
  serviceInstanceName?: string;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  lastDeploymentAttemptedAt?: Date;
  lastDeploymentSucceededAt?: Date;
  deploymentStatus: DeploymentStatus | undefined;
  deploymentStatusMessage?: string;
  lastAttemptedDeploymentId?: string;
  lastSucceededDeploymentId?: string;
}
export interface ListComponentsOutput {
  nextToken?: string;
  components: ComponentSummary[] | undefined;
}
export declare const ComponentDeploymentUpdateType: {
  readonly CURRENT_VERSION: "CURRENT_VERSION";
  readonly NONE: "NONE";
};
export type ComponentDeploymentUpdateType =
  (typeof ComponentDeploymentUpdateType)[keyof typeof ComponentDeploymentUpdateType];
export interface UpdateComponentInput {
  name: string | undefined;
  deploymentType: ComponentDeploymentUpdateType | undefined;
  description?: string;
  serviceName?: string;
  serviceInstanceName?: string;
  serviceSpec?: string;
  templateFile?: string;
  clientToken?: string;
}
export interface UpdateComponentOutput {
  component: Component | undefined;
}
export interface DeleteDeploymentInput {
  id: string | undefined;
}
export interface ComponentState {
  serviceName?: string;
  serviceInstanceName?: string;
  serviceSpec?: string;
  templateFile?: string;
}
export interface EnvironmentState {
  spec?: string;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion: string | undefined;
}
export interface ServiceInstanceState {
  spec: string | undefined;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion: string | undefined;
  lastSuccessfulComponentDeploymentIds?: string[];
  lastSuccessfulEnvironmentDeploymentId?: string;
  lastSuccessfulServicePipelineDeploymentId?: string;
}
export interface ServicePipelineState {
  spec?: string;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion: string | undefined;
}
export type DeploymentState =
  | DeploymentState.ComponentMember
  | DeploymentState.EnvironmentMember
  | DeploymentState.ServiceInstanceMember
  | DeploymentState.ServicePipelineMember
  | DeploymentState.$UnknownMember;
export declare namespace DeploymentState {
  interface ServiceInstanceMember {
    serviceInstance: ServiceInstanceState;
    environment?: never;
    servicePipeline?: never;
    component?: never;
    $unknown?: never;
  }
  interface EnvironmentMember {
    serviceInstance?: never;
    environment: EnvironmentState;
    servicePipeline?: never;
    component?: never;
    $unknown?: never;
  }
  interface ServicePipelineMember {
    serviceInstance?: never;
    environment?: never;
    servicePipeline: ServicePipelineState;
    component?: never;
    $unknown?: never;
  }
  interface ComponentMember {
    serviceInstance?: never;
    environment?: never;
    servicePipeline?: never;
    component: ComponentState;
    $unknown?: never;
  }
  interface $UnknownMember {
    serviceInstance?: never;
    environment?: never;
    servicePipeline?: never;
    component?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    serviceInstance: (value: ServiceInstanceState) => T;
    environment: (value: EnvironmentState) => T;
    servicePipeline: (value: ServicePipelineState) => T;
    component: (value: ComponentState) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: DeploymentState, visitor: Visitor<T>) => T;
}
export declare const DeploymentTargetResourceType: {
  readonly COMPONENT: "COMPONENT";
  readonly ENVIRONMENT: "ENVIRONMENT";
  readonly SERVICE_INSTANCE: "SERVICE_INSTANCE";
  readonly SERVICE_PIPELINE: "SERVICE_PIPELINE";
};
export type DeploymentTargetResourceType =
  (typeof DeploymentTargetResourceType)[keyof typeof DeploymentTargetResourceType];
export interface Deployment {
  id: string | undefined;
  arn: string | undefined;
  targetArn: string | undefined;
  targetResourceCreatedAt: Date | undefined;
  targetResourceType: DeploymentTargetResourceType | undefined;
  environmentName: string | undefined;
  serviceName?: string;
  serviceInstanceName?: string;
  componentName?: string;
  deploymentStatus: DeploymentStatus | undefined;
  deploymentStatusMessage?: string;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  completedAt?: Date;
  lastAttemptedDeploymentId?: string;
  lastSucceededDeploymentId?: string;
  initialState?: DeploymentState;
  targetState?: DeploymentState;
}
export interface DeleteDeploymentOutput {
  deployment?: Deployment;
}
export interface GetDeploymentInput {
  id: string | undefined;
  environmentName?: string;
  serviceName?: string;
  serviceInstanceName?: string;
  componentName?: string;
}
export interface GetDeploymentOutput {
  deployment?: Deployment;
}
export interface ListDeploymentsInput {
  nextToken?: string;
  environmentName?: string;
  serviceName?: string;
  serviceInstanceName?: string;
  componentName?: string;
  maxResults?: number;
}
export interface DeploymentSummary {
  id: string | undefined;
  arn: string | undefined;
  targetArn: string | undefined;
  targetResourceCreatedAt: Date | undefined;
  targetResourceType: DeploymentTargetResourceType | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  completedAt?: Date;
  environmentName: string | undefined;
  serviceName?: string;
  serviceInstanceName?: string;
  componentName?: string;
  lastAttemptedDeploymentId?: string;
  lastSucceededDeploymentId?: string;
  deploymentStatus: DeploymentStatus | undefined;
}
export interface ListDeploymentsOutput {
  nextToken?: string;
  deployments: DeploymentSummary[] | undefined;
}
export interface CreateEnvironmentAccountConnectionInput {
  clientToken?: string;
  managementAccountId: string | undefined;
  roleArn?: string;
  environmentName: string | undefined;
  tags?: Tag[];
  componentRoleArn?: string;
  codebuildRoleArn?: string;
}
export interface CreateEnvironmentAccountConnectionOutput {
  environmentAccountConnection: EnvironmentAccountConnection | undefined;
}
export interface DeleteEnvironmentAccountConnectionInput {
  id: string | undefined;
}
export interface DeleteEnvironmentAccountConnectionOutput {
  environmentAccountConnection?: EnvironmentAccountConnection;
}
export interface GetEnvironmentAccountConnectionInput {
  id: string | undefined;
}
export interface GetEnvironmentAccountConnectionOutput {
  environmentAccountConnection: EnvironmentAccountConnection | undefined;
}
export declare const EnvironmentAccountConnectionRequesterAccountType: {
  readonly ENVIRONMENT_ACCOUNT: "ENVIRONMENT_ACCOUNT";
  readonly MANAGEMENT_ACCOUNT: "MANAGEMENT_ACCOUNT";
};
export type EnvironmentAccountConnectionRequesterAccountType =
  (typeof EnvironmentAccountConnectionRequesterAccountType)[keyof typeof EnvironmentAccountConnectionRequesterAccountType];
export interface ListEnvironmentAccountConnectionsInput {
  requestedBy: EnvironmentAccountConnectionRequesterAccountType | undefined;
  environmentName?: string;
  statuses?: EnvironmentAccountConnectionStatus[];
  nextToken?: string;
  maxResults?: number;
}
export interface EnvironmentAccountConnectionSummary {
  id: string | undefined;
  arn: string | undefined;
  managementAccountId: string | undefined;
  environmentAccountId: string | undefined;
  roleArn: string | undefined;
  environmentName: string | undefined;
  requestedAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  status: EnvironmentAccountConnectionStatus | undefined;
  componentRoleArn?: string;
}
export interface ListEnvironmentAccountConnectionsOutput {
  environmentAccountConnections:
    | EnvironmentAccountConnectionSummary[]
    | undefined;
  nextToken?: string;
}
export interface RejectEnvironmentAccountConnectionInput {
  id: string | undefined;
}
export interface RejectEnvironmentAccountConnectionOutput {
  environmentAccountConnection: EnvironmentAccountConnection | undefined;
}
export interface UpdateEnvironmentAccountConnectionInput {
  id: string | undefined;
  roleArn?: string;
  componentRoleArn?: string;
  codebuildRoleArn?: string;
}
export interface UpdateEnvironmentAccountConnectionOutput {
  environmentAccountConnection: EnvironmentAccountConnection | undefined;
}
export interface ListEnvironmentOutputsInput {
  environmentName: string | undefined;
  nextToken?: string;
  deploymentId?: string;
}
export interface ListEnvironmentOutputsOutput {
  nextToken?: string;
  outputs: Output[] | undefined;
}
export interface ListEnvironmentProvisionedResourcesInput {
  environmentName: string | undefined;
  nextToken?: string;
}
export interface ListEnvironmentProvisionedResourcesOutput {
  nextToken?: string;
  provisionedResources: ProvisionedResource[] | undefined;
}
export interface CreateEnvironmentInput {
  name: string | undefined;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion?: string;
  description?: string;
  spec: string | undefined;
  protonServiceRoleArn?: string;
  environmentAccountConnectionId?: string;
  tags?: Tag[];
  provisioningRepository?: RepositoryBranchInput;
  componentRoleArn?: string;
  codebuildRoleArn?: string;
}
export interface CreateEnvironmentOutput {
  environment: Environment | undefined;
}
export interface DeleteEnvironmentInput {
  name: string | undefined;
}
export interface DeleteEnvironmentOutput {
  environment?: Environment;
}
export interface GetEnvironmentInput {
  name: string | undefined;
}
export interface GetEnvironmentOutput {
  environment: Environment | undefined;
}
export interface EnvironmentTemplateFilter {
  templateName: string | undefined;
  majorVersion: string | undefined;
}
export interface ListEnvironmentsInput {
  nextToken?: string;
  maxResults?: number;
  environmentTemplates?: EnvironmentTemplateFilter[];
}
export interface EnvironmentSummary {
  name: string | undefined;
  description?: string;
  createdAt: Date | undefined;
  lastDeploymentAttemptedAt: Date | undefined;
  lastDeploymentSucceededAt: Date | undefined;
  arn: string | undefined;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion: string | undefined;
  deploymentStatus: DeploymentStatus | undefined;
  deploymentStatusMessage?: string;
  protonServiceRoleArn?: string;
  environmentAccountConnectionId?: string;
  environmentAccountId?: string;
  provisioning?: Provisioning;
  componentRoleArn?: string;
  lastAttemptedDeploymentId?: string;
  lastSucceededDeploymentId?: string;
}
export interface ListEnvironmentsOutput {
  nextToken?: string;
  environments: EnvironmentSummary[] | undefined;
}
export declare const DeploymentUpdateType: {
  readonly CURRENT_VERSION: "CURRENT_VERSION";
  readonly MAJOR_VERSION: "MAJOR_VERSION";
  readonly MINOR_VERSION: "MINOR_VERSION";
  readonly NONE: "NONE";
};
export type DeploymentUpdateType =
  (typeof DeploymentUpdateType)[keyof typeof DeploymentUpdateType];
export interface UpdateEnvironmentInput {
  name: string | undefined;
  description?: string;
  spec?: string;
  templateMajorVersion?: string;
  templateMinorVersion?: string;
  protonServiceRoleArn?: string;
  deploymentType: DeploymentUpdateType | undefined;
  environmentAccountConnectionId?: string;
  provisioningRepository?: RepositoryBranchInput;
  componentRoleArn?: string;
  codebuildRoleArn?: string;
}
export interface UpdateEnvironmentOutput {
  environment: Environment | undefined;
}
export interface CreateEnvironmentTemplateInput {
  name: string | undefined;
  displayName?: string;
  description?: string;
  encryptionKey?: string;
  provisioning?: Provisioning;
  tags?: Tag[];
}
export interface EnvironmentTemplate {
  name: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  displayName?: string;
  description?: string;
  recommendedVersion?: string;
  encryptionKey?: string;
  provisioning?: Provisioning;
}
export interface CreateEnvironmentTemplateOutput {
  environmentTemplate: EnvironmentTemplate | undefined;
}
export interface DeleteEnvironmentTemplateInput {
  name: string | undefined;
}
export interface DeleteEnvironmentTemplateOutput {
  environmentTemplate?: EnvironmentTemplate;
}
export interface GetEnvironmentTemplateInput {
  name: string | undefined;
}
export interface GetEnvironmentTemplateOutput {
  environmentTemplate: EnvironmentTemplate | undefined;
}
export interface ListEnvironmentTemplatesInput {
  nextToken?: string;
  maxResults?: number;
}
export interface EnvironmentTemplateSummary {
  name: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  displayName?: string;
  description?: string;
  recommendedVersion?: string;
  provisioning?: Provisioning;
}
export interface ListEnvironmentTemplatesOutput {
  nextToken?: string;
  templates: EnvironmentTemplateSummary[] | undefined;
}
export interface UpdateEnvironmentTemplateInput {
  name: string | undefined;
  displayName?: string;
  description?: string;
}
export interface UpdateEnvironmentTemplateOutput {
  environmentTemplate: EnvironmentTemplate | undefined;
}
export interface S3ObjectSource {
  bucket: string | undefined;
  key: string | undefined;
}
export type TemplateVersionSourceInput =
  | TemplateVersionSourceInput.S3Member
  | TemplateVersionSourceInput.$UnknownMember;
export declare namespace TemplateVersionSourceInput {
  interface S3Member {
    s3: S3ObjectSource;
    $unknown?: never;
  }
  interface $UnknownMember {
    s3?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    s3: (value: S3ObjectSource) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: TemplateVersionSourceInput, visitor: Visitor<T>) => T;
}
export interface CreateEnvironmentTemplateVersionInput {
  clientToken?: string;
  templateName: string | undefined;
  description?: string;
  majorVersion?: string;
  source: TemplateVersionSourceInput | undefined;
  tags?: Tag[];
}
export declare const TemplateVersionStatus: {
  readonly DRAFT: "DRAFT";
  readonly PUBLISHED: "PUBLISHED";
  readonly REGISTRATION_FAILED: "REGISTRATION_FAILED";
  readonly REGISTRATION_IN_PROGRESS: "REGISTRATION_IN_PROGRESS";
};
export type TemplateVersionStatus =
  (typeof TemplateVersionStatus)[keyof typeof TemplateVersionStatus];
export interface EnvironmentTemplateVersion {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
  recommendedMinorVersion?: string;
  status: TemplateVersionStatus | undefined;
  statusMessage?: string;
  description?: string;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  schema?: string;
}
export interface CreateEnvironmentTemplateVersionOutput {
  environmentTemplateVersion: EnvironmentTemplateVersion | undefined;
}
export interface DeleteEnvironmentTemplateVersionInput {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
}
export interface DeleteEnvironmentTemplateVersionOutput {
  environmentTemplateVersion?: EnvironmentTemplateVersion;
}
export interface GetEnvironmentTemplateVersionInput {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
}
export interface GetEnvironmentTemplateVersionOutput {
  environmentTemplateVersion: EnvironmentTemplateVersion | undefined;
}
export interface ListEnvironmentTemplateVersionsInput {
  nextToken?: string;
  maxResults?: number;
  templateName: string | undefined;
  majorVersion?: string;
}
export interface EnvironmentTemplateVersionSummary {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
  recommendedMinorVersion?: string;
  status: TemplateVersionStatus | undefined;
  statusMessage?: string;
  description?: string;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
}
export interface ListEnvironmentTemplateVersionsOutput {
  nextToken?: string;
  templateVersions: EnvironmentTemplateVersionSummary[] | undefined;
}
export interface UpdateEnvironmentTemplateVersionInput {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
  description?: string;
  status?: TemplateVersionStatus;
}
export interface UpdateEnvironmentTemplateVersionOutput {
  environmentTemplateVersion: EnvironmentTemplateVersion | undefined;
}
export declare const SyncType: {
  readonly SERVICE_SYNC: "SERVICE_SYNC";
  readonly TEMPLATE_SYNC: "TEMPLATE_SYNC";
};
export type SyncType = (typeof SyncType)[keyof typeof SyncType];
export interface GetRepositorySyncStatusInput {
  repositoryName: string | undefined;
  repositoryProvider: RepositoryProvider | undefined;
  branch: string | undefined;
  syncType: SyncType | undefined;
}
export interface RepositorySyncEvent {
  type: string | undefined;
  externalId?: string;
  time: Date | undefined;
  event: string | undefined;
}
export declare const RepositorySyncStatus: {
  readonly FAILED: "FAILED";
  readonly INITIATED: "INITIATED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly QUEUED: "QUEUED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type RepositorySyncStatus =
  (typeof RepositorySyncStatus)[keyof typeof RepositorySyncStatus];
export interface RepositorySyncAttempt {
  startedAt: Date | undefined;
  status: RepositorySyncStatus | undefined;
  events: RepositorySyncEvent[] | undefined;
}
export interface GetRepositorySyncStatusOutput {
  latestSync?: RepositorySyncAttempt;
}
export interface GetResourcesSummaryInput {}
export interface ResourceCountsSummary {
  total: number | undefined;
  failed?: number;
  upToDate?: number;
  behindMajor?: number;
  behindMinor?: number;
}
export interface CountsSummary {
  components?: ResourceCountsSummary;
  environments?: ResourceCountsSummary;
  environmentTemplates?: ResourceCountsSummary;
  serviceInstances?: ResourceCountsSummary;
  services?: ResourceCountsSummary;
  serviceTemplates?: ResourceCountsSummary;
  pipelines?: ResourceCountsSummary;
}
export interface GetResourcesSummaryOutput {
  counts: CountsSummary | undefined;
}
export interface GetServiceInstanceSyncStatusInput {
  serviceName: string | undefined;
  serviceInstanceName: string | undefined;
}
export interface Revision {
  repositoryName: string | undefined;
  repositoryProvider: RepositoryProvider | undefined;
  sha: string | undefined;
  directory: string | undefined;
  branch: string | undefined;
}
export interface ResourceSyncEvent {
  type: string | undefined;
  externalId?: string;
  time: Date | undefined;
  event: string | undefined;
}
export declare const ResourceSyncStatus: {
  readonly FAILED: "FAILED";
  readonly INITIATED: "INITIATED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type ResourceSyncStatus =
  (typeof ResourceSyncStatus)[keyof typeof ResourceSyncStatus];
export interface ResourceSyncAttempt {
  initialRevision: Revision | undefined;
  targetRevision: Revision | undefined;
  target: string | undefined;
  startedAt: Date | undefined;
  status: ResourceSyncStatus | undefined;
  events: ResourceSyncEvent[] | undefined;
}
export interface GetServiceInstanceSyncStatusOutput {
  latestSync?: ResourceSyncAttempt;
  latestSuccessfulSync?: ResourceSyncAttempt;
  desiredState?: Revision;
}
export declare const TemplateType: {
  readonly ENVIRONMENT: "ENVIRONMENT";
  readonly SERVICE: "SERVICE";
};
export type TemplateType = (typeof TemplateType)[keyof typeof TemplateType];
export interface GetTemplateSyncStatusInput {
  templateName: string | undefined;
  templateType: TemplateType | undefined;
  templateVersion: string | undefined;
}
export interface GetTemplateSyncStatusOutput {
  latestSync?: ResourceSyncAttempt;
  latestSuccessfulSync?: ResourceSyncAttempt;
  desiredState?: Revision;
}
export interface ListRepositorySyncDefinitionsInput {
  repositoryName: string | undefined;
  repositoryProvider: RepositoryProvider | undefined;
  syncType: SyncType | undefined;
  nextToken?: string;
}
export interface RepositorySyncDefinition {
  target: string | undefined;
  parent: string | undefined;
  branch: string | undefined;
  directory: string | undefined;
}
export interface ListRepositorySyncDefinitionsOutput {
  nextToken?: string;
  syncDefinitions: RepositorySyncDefinition[] | undefined;
}
export interface ListTagsForResourceInput {
  resourceArn: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListTagsForResourceOutput {
  tags: Tag[] | undefined;
  nextToken?: string;
}
export declare const ResourceDeploymentStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type ResourceDeploymentStatus =
  (typeof ResourceDeploymentStatus)[keyof typeof ResourceDeploymentStatus];
export interface NotifyResourceDeploymentStatusChangeInput {
  resourceArn: string | undefined;
  status?: ResourceDeploymentStatus;
  outputs?: Output[];
  deploymentId?: string;
  statusMessage?: string;
}
export interface NotifyResourceDeploymentStatusChangeOutput {}
export interface CreateRepositoryInput {
  provider: RepositoryProvider | undefined;
  name: string | undefined;
  connectionArn: string | undefined;
  encryptionKey?: string;
  tags?: Tag[];
}
export interface Repository {
  arn: string | undefined;
  provider: RepositoryProvider | undefined;
  name: string | undefined;
  connectionArn: string | undefined;
  encryptionKey?: string;
}
export interface CreateRepositoryOutput {
  repository: Repository | undefined;
}
export interface DeleteRepositoryInput {
  provider: RepositoryProvider | undefined;
  name: string | undefined;
}
export interface DeleteRepositoryOutput {
  repository?: Repository;
}
export interface GetRepositoryInput {
  provider: RepositoryProvider | undefined;
  name: string | undefined;
}
export interface GetRepositoryOutput {
  repository: Repository | undefined;
}
export interface ListRepositoriesInput {
  nextToken?: string;
  maxResults?: number;
}
export interface RepositorySummary {
  arn: string | undefined;
  provider: RepositoryProvider | undefined;
  name: string | undefined;
  connectionArn: string | undefined;
}
export interface ListRepositoriesOutput {
  nextToken?: string;
  repositories: RepositorySummary[] | undefined;
}
export interface ListServiceInstanceOutputsInput {
  serviceInstanceName: string | undefined;
  serviceName: string | undefined;
  nextToken?: string;
  deploymentId?: string;
}
export interface ListServiceInstanceOutputsOutput {
  nextToken?: string;
  outputs: Output[] | undefined;
}
export interface ListServiceInstanceProvisionedResourcesInput {
  serviceName: string | undefined;
  serviceInstanceName: string | undefined;
  nextToken?: string;
}
export interface ListServiceInstanceProvisionedResourcesOutput {
  nextToken?: string;
  provisionedResources: ProvisionedResource[] | undefined;
}
export interface CreateServiceInstanceInput {
  name: string | undefined;
  serviceName: string | undefined;
  spec: string | undefined;
  templateMajorVersion?: string;
  templateMinorVersion?: string;
  tags?: Tag[];
  clientToken?: string;
}
export interface CreateServiceInstanceOutput {
  serviceInstance: ServiceInstance | undefined;
}
export interface GetServiceInstanceInput {
  name: string | undefined;
  serviceName: string | undefined;
}
export interface GetServiceInstanceOutput {
  serviceInstance: ServiceInstance | undefined;
}
export declare const ListServiceInstancesFilterBy: {
  readonly CREATED_AT_AFTER: "createdAtAfter";
  readonly CREATED_AT_BEFORE: "createdAtBefore";
  readonly DEPLOYED_TEMPLATE_VERSION_STATUS: "deployedTemplateVersionStatus";
  readonly DEPLOYMENT_STATUS: "deploymentStatus";
  readonly ENVIRONMENT_NAME: "environmentName";
  readonly LAST_DEPLOYMENT_ATTEMPTED_AT_AFTER: "lastDeploymentAttemptedAtAfter";
  readonly LAST_DEPLOYMENT_ATTEMPTED_AT_BEFORE: "lastDeploymentAttemptedAtBefore";
  readonly NAME: "name";
  readonly SERVICE_NAME: "serviceName";
  readonly TEMPLATE_NAME: "templateName";
};
export type ListServiceInstancesFilterBy =
  (typeof ListServiceInstancesFilterBy)[keyof typeof ListServiceInstancesFilterBy];
export interface ListServiceInstancesFilter {
  key?: ListServiceInstancesFilterBy;
  value?: string;
}
export declare const ListServiceInstancesSortBy: {
  readonly CREATED_AT: "createdAt";
  readonly DEPLOYMENT_STATUS: "deploymentStatus";
  readonly ENVIRONMENT_NAME: "environmentName";
  readonly LAST_DEPLOYMENT_ATTEMPTED_AT: "lastDeploymentAttemptedAt";
  readonly NAME: "name";
  readonly SERVICE_NAME: "serviceName";
  readonly TEMPLATE_NAME: "templateName";
};
export type ListServiceInstancesSortBy =
  (typeof ListServiceInstancesSortBy)[keyof typeof ListServiceInstancesSortBy];
export declare const SortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface ListServiceInstancesInput {
  serviceName?: string;
  nextToken?: string;
  maxResults?: number;
  filters?: ListServiceInstancesFilter[];
  sortBy?: ListServiceInstancesSortBy;
  sortOrder?: SortOrder;
}
export interface ServiceInstanceSummary {
  name: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastDeploymentAttemptedAt: Date | undefined;
  lastDeploymentSucceededAt: Date | undefined;
  serviceName: string | undefined;
  environmentName: string | undefined;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion: string | undefined;
  deploymentStatus: DeploymentStatus | undefined;
  deploymentStatusMessage?: string;
  lastAttemptedDeploymentId?: string;
  lastSucceededDeploymentId?: string;
}
export interface ListServiceInstancesOutput {
  nextToken?: string;
  serviceInstances: ServiceInstanceSummary[] | undefined;
}
export interface UpdateServiceInstanceInput {
  name: string | undefined;
  serviceName: string | undefined;
  deploymentType: DeploymentUpdateType | undefined;
  spec?: string;
  templateMajorVersion?: string;
  templateMinorVersion?: string;
  clientToken?: string;
}
export interface UpdateServiceInstanceOutput {
  serviceInstance: ServiceInstance | undefined;
}
export interface ListServicePipelineOutputsInput {
  serviceName: string | undefined;
  nextToken?: string;
  deploymentId?: string;
}
export interface ListServicePipelineOutputsOutput {
  nextToken?: string;
  outputs: Output[] | undefined;
}
export interface ListServicePipelineProvisionedResourcesInput {
  serviceName: string | undefined;
  nextToken?: string;
}
export interface ListServicePipelineProvisionedResourcesOutput {
  nextToken?: string;
  provisionedResources: ProvisionedResource[] | undefined;
}
export interface UpdateServicePipelineInput {
  serviceName: string | undefined;
  spec: string | undefined;
  deploymentType: DeploymentUpdateType | undefined;
  templateMajorVersion?: string;
  templateMinorVersion?: string;
}
export interface UpdateServicePipelineOutput {
  pipeline: ServicePipeline | undefined;
}
export interface CreateServiceInput {
  name: string | undefined;
  description?: string;
  templateName: string | undefined;
  templateMajorVersion: string | undefined;
  templateMinorVersion?: string;
  spec: string | undefined;
  repositoryConnectionArn?: string;
  repositoryId?: string;
  branchName?: string;
  tags?: Tag[];
}
export declare const ServiceStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_FAILED_CLEANUP_COMPLETE: "CREATE_FAILED_CLEANUP_COMPLETE";
  readonly CREATE_FAILED_CLEANUP_FAILED: "CREATE_FAILED_CLEANUP_FAILED";
  readonly CREATE_FAILED_CLEANUP_IN_PROGRESS: "CREATE_FAILED_CLEANUP_IN_PROGRESS";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly UPDATE_COMPLETE_CLEANUP_FAILED: "UPDATE_COMPLETE_CLEANUP_FAILED";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_FAILED_CLEANUP_COMPLETE: "UPDATE_FAILED_CLEANUP_COMPLETE";
  readonly UPDATE_FAILED_CLEANUP_FAILED: "UPDATE_FAILED_CLEANUP_FAILED";
  readonly UPDATE_FAILED_CLEANUP_IN_PROGRESS: "UPDATE_FAILED_CLEANUP_IN_PROGRESS";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
};
export type ServiceStatus = (typeof ServiceStatus)[keyof typeof ServiceStatus];
export interface Service {
  name: string | undefined;
  description?: string;
  arn: string | undefined;
  templateName: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  status: ServiceStatus | undefined;
  statusMessage?: string;
  spec: string | undefined;
  pipeline?: ServicePipeline;
  repositoryConnectionArn?: string;
  repositoryId?: string;
  branchName?: string;
}
export interface CreateServiceOutput {
  service: Service | undefined;
}
export interface DeleteServiceInput {
  name: string | undefined;
}
export interface DeleteServiceOutput {
  service?: Service;
}
export interface GetServiceInput {
  name: string | undefined;
}
export interface GetServiceOutput {
  service?: Service;
}
export interface ListServicesInput {
  nextToken?: string;
  maxResults?: number;
}
export interface ServiceSummary {
  name: string | undefined;
  description?: string;
  arn: string | undefined;
  templateName: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  status: ServiceStatus | undefined;
  statusMessage?: string;
}
export interface ListServicesOutput {
  nextToken?: string;
  services: ServiceSummary[] | undefined;
}
export interface UpdateServiceInput {
  name: string | undefined;
  description?: string;
  spec?: string;
}
export interface UpdateServiceOutput {
  service: Service | undefined;
}
export interface GetServiceSyncBlockerSummaryInput {
  serviceName: string | undefined;
  serviceInstanceName?: string;
}
export interface SyncBlockerContext {
  key: string | undefined;
  value: string | undefined;
}
export declare const BlockerStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly RESOLVED: "RESOLVED";
};
export type BlockerStatus = (typeof BlockerStatus)[keyof typeof BlockerStatus];
export declare const BlockerType: {
  readonly AUTOMATED: "AUTOMATED";
};
export type BlockerType = (typeof BlockerType)[keyof typeof BlockerType];
export interface SyncBlocker {
  id: string | undefined;
  type: BlockerType | undefined;
  status: BlockerStatus | undefined;
  createdReason: string | undefined;
  createdAt: Date | undefined;
  contexts?: SyncBlockerContext[];
  resolvedReason?: string;
  resolvedAt?: Date;
}
export interface ServiceSyncBlockerSummary {
  serviceName: string | undefined;
  serviceInstanceName?: string;
  latestBlockers?: SyncBlocker[];
}
export interface GetServiceSyncBlockerSummaryOutput {
  serviceSyncBlockerSummary?: ServiceSyncBlockerSummary;
}
export interface UpdateServiceSyncBlockerInput {
  id: string | undefined;
  resolvedReason: string | undefined;
}
export interface UpdateServiceSyncBlockerOutput {
  serviceName: string | undefined;
  serviceInstanceName?: string;
  serviceSyncBlocker: SyncBlocker | undefined;
}
export interface CreateServiceSyncConfigInput {
  serviceName: string | undefined;
  repositoryProvider: RepositoryProvider | undefined;
  repositoryName: string | undefined;
  branch: string | undefined;
  filePath: string | undefined;
}
export interface ServiceSyncConfig {
  serviceName: string | undefined;
  repositoryProvider: RepositoryProvider | undefined;
  repositoryName: string | undefined;
  branch: string | undefined;
  filePath: string | undefined;
}
export interface CreateServiceSyncConfigOutput {
  serviceSyncConfig?: ServiceSyncConfig;
}
export interface DeleteServiceSyncConfigInput {
  serviceName: string | undefined;
}
export interface DeleteServiceSyncConfigOutput {
  serviceSyncConfig?: ServiceSyncConfig;
}
export interface GetServiceSyncConfigInput {
  serviceName: string | undefined;
}
export interface GetServiceSyncConfigOutput {
  serviceSyncConfig?: ServiceSyncConfig;
}
export interface UpdateServiceSyncConfigInput {
  serviceName: string | undefined;
  repositoryProvider: RepositoryProvider | undefined;
  repositoryName: string | undefined;
  branch: string | undefined;
  filePath: string | undefined;
}
export interface UpdateServiceSyncConfigOutput {
  serviceSyncConfig?: ServiceSyncConfig;
}
export interface CreateServiceTemplateInput {
  name: string | undefined;
  displayName?: string;
  description?: string;
  encryptionKey?: string;
  pipelineProvisioning?: Provisioning;
  tags?: Tag[];
}
export interface ServiceTemplate {
  name: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  displayName?: string;
  description?: string;
  recommendedVersion?: string;
  encryptionKey?: string;
  pipelineProvisioning?: Provisioning;
}
export interface CreateServiceTemplateOutput {
  serviceTemplate: ServiceTemplate | undefined;
}
export interface DeleteServiceTemplateInput {
  name: string | undefined;
}
export interface DeleteServiceTemplateOutput {
  serviceTemplate?: ServiceTemplate;
}
export interface GetServiceTemplateInput {
  name: string | undefined;
}
export interface GetServiceTemplateOutput {
  serviceTemplate: ServiceTemplate | undefined;
}
export interface ListServiceTemplatesInput {
  nextToken?: string;
  maxResults?: number;
}
export interface ServiceTemplateSummary {
  name: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  displayName?: string;
  description?: string;
  recommendedVersion?: string;
  pipelineProvisioning?: Provisioning;
}
export interface ListServiceTemplatesOutput {
  nextToken?: string;
  templates: ServiceTemplateSummary[] | undefined;
}
export interface UpdateServiceTemplateInput {
  name: string | undefined;
  displayName?: string;
  description?: string;
}
export interface UpdateServiceTemplateOutput {
  serviceTemplate: ServiceTemplate | undefined;
}
export interface CompatibleEnvironmentTemplateInput {
  templateName: string | undefined;
  majorVersion: string | undefined;
}
export declare const ServiceTemplateSupportedComponentSourceType: {
  readonly DIRECTLY_DEFINED: "DIRECTLY_DEFINED";
};
export type ServiceTemplateSupportedComponentSourceType =
  (typeof ServiceTemplateSupportedComponentSourceType)[keyof typeof ServiceTemplateSupportedComponentSourceType];
export interface CreateServiceTemplateVersionInput {
  clientToken?: string;
  templateName: string | undefined;
  description?: string;
  majorVersion?: string;
  source: TemplateVersionSourceInput | undefined;
  compatibleEnvironmentTemplates:
    | CompatibleEnvironmentTemplateInput[]
    | undefined;
  tags?: Tag[];
  supportedComponentSources?: ServiceTemplateSupportedComponentSourceType[];
}
export interface CompatibleEnvironmentTemplate {
  templateName: string | undefined;
  majorVersion: string | undefined;
}
export interface ServiceTemplateVersion {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
  recommendedMinorVersion?: string;
  status: TemplateVersionStatus | undefined;
  statusMessage?: string;
  description?: string;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  compatibleEnvironmentTemplates: CompatibleEnvironmentTemplate[] | undefined;
  schema?: string;
  supportedComponentSources?: ServiceTemplateSupportedComponentSourceType[];
}
export interface CreateServiceTemplateVersionOutput {
  serviceTemplateVersion: ServiceTemplateVersion | undefined;
}
export interface DeleteServiceTemplateVersionInput {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
}
export interface DeleteServiceTemplateVersionOutput {
  serviceTemplateVersion?: ServiceTemplateVersion;
}
export interface GetServiceTemplateVersionInput {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
}
export interface GetServiceTemplateVersionOutput {
  serviceTemplateVersion: ServiceTemplateVersion | undefined;
}
export interface ListServiceTemplateVersionsInput {
  nextToken?: string;
  maxResults?: number;
  templateName: string | undefined;
  majorVersion?: string;
}
export interface ServiceTemplateVersionSummary {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
  recommendedMinorVersion?: string;
  status: TemplateVersionStatus | undefined;
  statusMessage?: string;
  description?: string;
  arn: string | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
}
export interface ListServiceTemplateVersionsOutput {
  nextToken?: string;
  templateVersions: ServiceTemplateVersionSummary[] | undefined;
}
export interface UpdateServiceTemplateVersionInput {
  templateName: string | undefined;
  majorVersion: string | undefined;
  minorVersion: string | undefined;
  description?: string;
  status?: TemplateVersionStatus;
  compatibleEnvironmentTemplates?: CompatibleEnvironmentTemplateInput[];
  supportedComponentSources?: ServiceTemplateSupportedComponentSourceType[];
}
export interface UpdateServiceTemplateVersionOutput {
  serviceTemplateVersion: ServiceTemplateVersion | undefined;
}
export interface TagResourceInput {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceOutput {}
export interface CreateTemplateSyncConfigInput {
  templateName: string | undefined;
  templateType: TemplateType | undefined;
  repositoryProvider: RepositoryProvider | undefined;
  repositoryName: string | undefined;
  branch: string | undefined;
  subdirectory?: string;
}
export interface TemplateSyncConfig {
  templateName: string | undefined;
  templateType: TemplateType | undefined;
  repositoryProvider: RepositoryProvider | undefined;
  repositoryName: string | undefined;
  branch: string | undefined;
  subdirectory?: string;
}
export interface CreateTemplateSyncConfigOutput {
  templateSyncConfig?: TemplateSyncConfig;
}
export interface DeleteTemplateSyncConfigInput {
  templateName: string | undefined;
  templateType: TemplateType | undefined;
}
export interface DeleteTemplateSyncConfigOutput {
  templateSyncConfig?: TemplateSyncConfig;
}
export interface GetTemplateSyncConfigInput {
  templateName: string | undefined;
  templateType: TemplateType | undefined;
}
export interface GetTemplateSyncConfigOutput {
  templateSyncConfig?: TemplateSyncConfig;
}
export interface UpdateTemplateSyncConfigInput {
  templateName: string | undefined;
  templateType: TemplateType | undefined;
  repositoryProvider: RepositoryProvider | undefined;
  repositoryName: string | undefined;
  branch: string | undefined;
  subdirectory?: string;
}
export interface UpdateTemplateSyncConfigOutput {
  templateSyncConfig?: TemplateSyncConfig;
}
export interface UntagResourceInput {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceOutput {}
export declare const ComponentFilterSensitiveLog: (obj: Component) => any;
export declare const CancelComponentDeploymentOutputFilterSensitiveLog: (
  obj: CancelComponentDeploymentOutput
) => any;
export declare const EnvironmentFilterSensitiveLog: (obj: Environment) => any;
export declare const CancelEnvironmentDeploymentOutputFilterSensitiveLog: (
  obj: CancelEnvironmentDeploymentOutput
) => any;
export declare const ServiceInstanceFilterSensitiveLog: (
  obj: ServiceInstance
) => any;
export declare const CancelServiceInstanceDeploymentOutputFilterSensitiveLog: (
  obj: CancelServiceInstanceDeploymentOutput
) => any;
export declare const ServicePipelineFilterSensitiveLog: (
  obj: ServicePipeline
) => any;
export declare const CancelServicePipelineDeploymentOutputFilterSensitiveLog: (
  obj: CancelServicePipelineDeploymentOutput
) => any;
export declare const OutputFilterSensitiveLog: (obj: Output) => any;
export declare const ListComponentOutputsOutputFilterSensitiveLog: (
  obj: ListComponentOutputsOutput
) => any;
export declare const CreateComponentInputFilterSensitiveLog: (
  obj: CreateComponentInput
) => any;
export declare const CreateComponentOutputFilterSensitiveLog: (
  obj: CreateComponentOutput
) => any;
export declare const DeleteComponentOutputFilterSensitiveLog: (
  obj: DeleteComponentOutput
) => any;
export declare const GetComponentOutputFilterSensitiveLog: (
  obj: GetComponentOutput
) => any;
export declare const ComponentSummaryFilterSensitiveLog: (
  obj: ComponentSummary
) => any;
export declare const ListComponentsOutputFilterSensitiveLog: (
  obj: ListComponentsOutput
) => any;
export declare const UpdateComponentInputFilterSensitiveLog: (
  obj: UpdateComponentInput
) => any;
export declare const UpdateComponentOutputFilterSensitiveLog: (
  obj: UpdateComponentOutput
) => any;
export declare const ComponentStateFilterSensitiveLog: (
  obj: ComponentState
) => any;
export declare const EnvironmentStateFilterSensitiveLog: (
  obj: EnvironmentState
) => any;
export declare const ServiceInstanceStateFilterSensitiveLog: (
  obj: ServiceInstanceState
) => any;
export declare const ServicePipelineStateFilterSensitiveLog: (
  obj: ServicePipelineState
) => any;
export declare const DeploymentStateFilterSensitiveLog: (
  obj: DeploymentState
) => any;
export declare const DeploymentFilterSensitiveLog: (obj: Deployment) => any;
export declare const DeleteDeploymentOutputFilterSensitiveLog: (
  obj: DeleteDeploymentOutput
) => any;
export declare const GetDeploymentOutputFilterSensitiveLog: (
  obj: GetDeploymentOutput
) => any;
export declare const ListEnvironmentOutputsOutputFilterSensitiveLog: (
  obj: ListEnvironmentOutputsOutput
) => any;
export declare const CreateEnvironmentInputFilterSensitiveLog: (
  obj: CreateEnvironmentInput
) => any;
export declare const CreateEnvironmentOutputFilterSensitiveLog: (
  obj: CreateEnvironmentOutput
) => any;
export declare const DeleteEnvironmentOutputFilterSensitiveLog: (
  obj: DeleteEnvironmentOutput
) => any;
export declare const GetEnvironmentOutputFilterSensitiveLog: (
  obj: GetEnvironmentOutput
) => any;
export declare const EnvironmentSummaryFilterSensitiveLog: (
  obj: EnvironmentSummary
) => any;
export declare const ListEnvironmentsOutputFilterSensitiveLog: (
  obj: ListEnvironmentsOutput
) => any;
export declare const UpdateEnvironmentInputFilterSensitiveLog: (
  obj: UpdateEnvironmentInput
) => any;
export declare const UpdateEnvironmentOutputFilterSensitiveLog: (
  obj: UpdateEnvironmentOutput
) => any;
export declare const CreateEnvironmentTemplateInputFilterSensitiveLog: (
  obj: CreateEnvironmentTemplateInput
) => any;
export declare const EnvironmentTemplateFilterSensitiveLog: (
  obj: EnvironmentTemplate
) => any;
export declare const CreateEnvironmentTemplateOutputFilterSensitiveLog: (
  obj: CreateEnvironmentTemplateOutput
) => any;
export declare const DeleteEnvironmentTemplateOutputFilterSensitiveLog: (
  obj: DeleteEnvironmentTemplateOutput
) => any;
export declare const GetEnvironmentTemplateOutputFilterSensitiveLog: (
  obj: GetEnvironmentTemplateOutput
) => any;
export declare const EnvironmentTemplateSummaryFilterSensitiveLog: (
  obj: EnvironmentTemplateSummary
) => any;
export declare const ListEnvironmentTemplatesOutputFilterSensitiveLog: (
  obj: ListEnvironmentTemplatesOutput
) => any;
export declare const UpdateEnvironmentTemplateInputFilterSensitiveLog: (
  obj: UpdateEnvironmentTemplateInput
) => any;
export declare const UpdateEnvironmentTemplateOutputFilterSensitiveLog: (
  obj: UpdateEnvironmentTemplateOutput
) => any;
export declare const CreateEnvironmentTemplateVersionInputFilterSensitiveLog: (
  obj: CreateEnvironmentTemplateVersionInput
) => any;
export declare const EnvironmentTemplateVersionFilterSensitiveLog: (
  obj: EnvironmentTemplateVersion
) => any;
export declare const CreateEnvironmentTemplateVersionOutputFilterSensitiveLog: (
  obj: CreateEnvironmentTemplateVersionOutput
) => any;
export declare const DeleteEnvironmentTemplateVersionOutputFilterSensitiveLog: (
  obj: DeleteEnvironmentTemplateVersionOutput
) => any;
export declare const GetEnvironmentTemplateVersionOutputFilterSensitiveLog: (
  obj: GetEnvironmentTemplateVersionOutput
) => any;
export declare const EnvironmentTemplateVersionSummaryFilterSensitiveLog: (
  obj: EnvironmentTemplateVersionSummary
) => any;
export declare const ListEnvironmentTemplateVersionsOutputFilterSensitiveLog: (
  obj: ListEnvironmentTemplateVersionsOutput
) => any;
export declare const UpdateEnvironmentTemplateVersionInputFilterSensitiveLog: (
  obj: UpdateEnvironmentTemplateVersionInput
) => any;
export declare const UpdateEnvironmentTemplateVersionOutputFilterSensitiveLog: (
  obj: UpdateEnvironmentTemplateVersionOutput
) => any;
export declare const NotifyResourceDeploymentStatusChangeInputFilterSensitiveLog: (
  obj: NotifyResourceDeploymentStatusChangeInput
) => any;
export declare const ListServiceInstanceOutputsOutputFilterSensitiveLog: (
  obj: ListServiceInstanceOutputsOutput
) => any;
export declare const CreateServiceInstanceInputFilterSensitiveLog: (
  obj: CreateServiceInstanceInput
) => any;
export declare const CreateServiceInstanceOutputFilterSensitiveLog: (
  obj: CreateServiceInstanceOutput
) => any;
export declare const GetServiceInstanceOutputFilterSensitiveLog: (
  obj: GetServiceInstanceOutput
) => any;
export declare const ServiceInstanceSummaryFilterSensitiveLog: (
  obj: ServiceInstanceSummary
) => any;
export declare const ListServiceInstancesOutputFilterSensitiveLog: (
  obj: ListServiceInstancesOutput
) => any;
export declare const UpdateServiceInstanceInputFilterSensitiveLog: (
  obj: UpdateServiceInstanceInput
) => any;
export declare const UpdateServiceInstanceOutputFilterSensitiveLog: (
  obj: UpdateServiceInstanceOutput
) => any;
export declare const ListServicePipelineOutputsOutputFilterSensitiveLog: (
  obj: ListServicePipelineOutputsOutput
) => any;
export declare const UpdateServicePipelineInputFilterSensitiveLog: (
  obj: UpdateServicePipelineInput
) => any;
export declare const UpdateServicePipelineOutputFilterSensitiveLog: (
  obj: UpdateServicePipelineOutput
) => any;
export declare const CreateServiceInputFilterSensitiveLog: (
  obj: CreateServiceInput
) => any;
export declare const ServiceFilterSensitiveLog: (obj: Service) => any;
export declare const CreateServiceOutputFilterSensitiveLog: (
  obj: CreateServiceOutput
) => any;
export declare const DeleteServiceOutputFilterSensitiveLog: (
  obj: DeleteServiceOutput
) => any;
export declare const GetServiceOutputFilterSensitiveLog: (
  obj: GetServiceOutput
) => any;
export declare const ServiceSummaryFilterSensitiveLog: (
  obj: ServiceSummary
) => any;
export declare const ListServicesOutputFilterSensitiveLog: (
  obj: ListServicesOutput
) => any;
export declare const UpdateServiceInputFilterSensitiveLog: (
  obj: UpdateServiceInput
) => any;
export declare const UpdateServiceOutputFilterSensitiveLog: (
  obj: UpdateServiceOutput
) => any;
export declare const CreateServiceTemplateInputFilterSensitiveLog: (
  obj: CreateServiceTemplateInput
) => any;
export declare const ServiceTemplateFilterSensitiveLog: (
  obj: ServiceTemplate
) => any;
export declare const CreateServiceTemplateOutputFilterSensitiveLog: (
  obj: CreateServiceTemplateOutput
) => any;
export declare const DeleteServiceTemplateOutputFilterSensitiveLog: (
  obj: DeleteServiceTemplateOutput
) => any;
export declare const GetServiceTemplateOutputFilterSensitiveLog: (
  obj: GetServiceTemplateOutput
) => any;
export declare const ServiceTemplateSummaryFilterSensitiveLog: (
  obj: ServiceTemplateSummary
) => any;
export declare const ListServiceTemplatesOutputFilterSensitiveLog: (
  obj: ListServiceTemplatesOutput
) => any;
export declare const UpdateServiceTemplateInputFilterSensitiveLog: (
  obj: UpdateServiceTemplateInput
) => any;
export declare const UpdateServiceTemplateOutputFilterSensitiveLog: (
  obj: UpdateServiceTemplateOutput
) => any;
export declare const CreateServiceTemplateVersionInputFilterSensitiveLog: (
  obj: CreateServiceTemplateVersionInput
) => any;
export declare const ServiceTemplateVersionFilterSensitiveLog: (
  obj: ServiceTemplateVersion
) => any;
export declare const CreateServiceTemplateVersionOutputFilterSensitiveLog: (
  obj: CreateServiceTemplateVersionOutput
) => any;
export declare const DeleteServiceTemplateVersionOutputFilterSensitiveLog: (
  obj: DeleteServiceTemplateVersionOutput
) => any;
export declare const GetServiceTemplateVersionOutputFilterSensitiveLog: (
  obj: GetServiceTemplateVersionOutput
) => any;
export declare const ServiceTemplateVersionSummaryFilterSensitiveLog: (
  obj: ServiceTemplateVersionSummary
) => any;
export declare const ListServiceTemplateVersionsOutputFilterSensitiveLog: (
  obj: ListServiceTemplateVersionsOutput
) => any;
export declare const UpdateServiceTemplateVersionInputFilterSensitiveLog: (
  obj: UpdateServiceTemplateVersionInput
) => any;
export declare const UpdateServiceTemplateVersionOutputFilterSensitiveLog: (
  obj: UpdateServiceTemplateVersionOutput
) => any;
