import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { KafkaConnectServiceException as __BaseException } from "../models/KafkaConnectServiceException";
import { BadRequestException, ConflictException, ForbiddenException, InternalServerErrorException, NotFoundException, ServiceUnavailableException, TooManyRequestsException, UnauthorizedException, } from "../models/models_0";
export const se_CreateConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/connectors");
    let body;
    body = JSON.stringify(take(input, {
        capacity: (_) => _json(_),
        connectorConfiguration: (_) => _json(_),
        connectorDescription: [],
        connectorName: [],
        kafkaCluster: (_) => _json(_),
        kafkaClusterClientAuthentication: (_) => _json(_),
        kafkaClusterEncryptionInTransit: (_) => _json(_),
        kafkaConnectVersion: [],
        logDelivery: (_) => _json(_),
        plugins: (_) => _json(_),
        serviceExecutionRoleArn: [],
        tags: (_) => _json(_),
        workerConfiguration: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCustomPluginCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/custom-plugins");
    let body;
    body = JSON.stringify(take(input, {
        contentType: [],
        description: [],
        location: (_) => _json(_),
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWorkerConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/worker-configurations");
    let body;
    body = JSON.stringify(take(input, {
        description: [],
        name: [],
        propertiesFileContent: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/connectors/{connectorArn}");
    b.p("connectorArn", () => input.connectorArn, "{connectorArn}", false);
    const query = map({
        [_cV]: [, input[_cV]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteCustomPluginCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/custom-plugins/{customPluginArn}");
    b.p("customPluginArn", () => input.customPluginArn, "{customPluginArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteWorkerConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/worker-configurations/{workerConfigurationArn}");
    b.p("workerConfigurationArn", () => input.workerConfigurationArn, "{workerConfigurationArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/connectors/{connectorArn}");
    b.p("connectorArn", () => input.connectorArn, "{connectorArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeCustomPluginCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/custom-plugins/{customPluginArn}");
    b.p("customPluginArn", () => input.customPluginArn, "{customPluginArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeWorkerConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/worker-configurations/{workerConfigurationArn}");
    b.p("workerConfigurationArn", () => input.workerConfigurationArn, "{workerConfigurationArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListConnectorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/connectors");
    const query = map({
        [_cNP]: [, input[_cNP]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCustomPluginsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/custom-plugins");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_nP]: [, input[_nP]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListWorkerConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/worker-configurations");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_nP]: [, input[_nP]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateConnectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/connectors/{connectorArn}");
    b.p("connectorArn", () => input.connectorArn, "{connectorArn}", false);
    const query = map({
        [_cV]: [, __expectNonNull(input[_cV], `currentVersion`)],
    });
    let body;
    body = JSON.stringify(take(input, {
        capacity: (_) => _json(_),
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
export const de_CreateConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorArn: __expectString,
        connectorName: __expectString,
        connectorState: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCustomPluginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        customPluginArn: __expectString,
        customPluginState: __expectString,
        name: __expectString,
        revision: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWorkerConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        latestRevision: (_) => de_WorkerConfigurationRevisionSummary(_, context),
        name: __expectString,
        workerConfigurationArn: __expectString,
        workerConfigurationState: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorArn: __expectString,
        connectorState: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteCustomPluginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        customPluginArn: __expectString,
        customPluginState: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteWorkerConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        workerConfigurationArn: __expectString,
        workerConfigurationState: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        capacity: _json,
        connectorArn: __expectString,
        connectorConfiguration: _json,
        connectorDescription: __expectString,
        connectorName: __expectString,
        connectorState: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        currentVersion: __expectString,
        kafkaCluster: _json,
        kafkaClusterClientAuthentication: _json,
        kafkaClusterEncryptionInTransit: _json,
        kafkaConnectVersion: __expectString,
        logDelivery: _json,
        plugins: _json,
        serviceExecutionRoleArn: __expectString,
        stateDescription: _json,
        workerConfiguration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeCustomPluginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customPluginArn: __expectString,
        customPluginState: __expectString,
        description: __expectString,
        latestRevision: (_) => de_CustomPluginRevisionSummary(_, context),
        name: __expectString,
        stateDescription: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeWorkerConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        latestRevision: (_) => de_WorkerConfigurationRevisionDescription(_, context),
        name: __expectString,
        workerConfigurationArn: __expectString,
        workerConfigurationState: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConnectorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectors: (_) => de___listOfConnectorSummary(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCustomPluginsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        customPlugins: (_) => de___listOfCustomPluginSummary(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorkerConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        workerConfigurations: (_) => de___listOfWorkerConfigurationSummary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateConnectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectorArn: __expectString,
        connectorState: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.kafkaconnect#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.kafkaconnect#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.kafkaconnect#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.kafkaconnect#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.kafkaconnect#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.kafkaconnect#ServiceUnavailableException":
            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.kafkaconnect#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.kafkaconnect#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de___listOfConnectorSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConnectorSummary(entry, context);
    });
    return retVal;
};
const de___listOfCustomPluginSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomPluginSummary(entry, context);
    });
    return retVal;
};
const de___listOfWorkerConfigurationSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkerConfigurationSummary(entry, context);
    });
    return retVal;
};
const de_ConnectorSummary = (output, context) => {
    return take(output, {
        capacity: _json,
        connectorArn: __expectString,
        connectorDescription: __expectString,
        connectorName: __expectString,
        connectorState: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        currentVersion: __expectString,
        kafkaCluster: _json,
        kafkaClusterClientAuthentication: _json,
        kafkaClusterEncryptionInTransit: _json,
        kafkaConnectVersion: __expectString,
        logDelivery: _json,
        plugins: _json,
        serviceExecutionRoleArn: __expectString,
        workerConfiguration: _json,
    });
};
const de_CustomPluginRevisionSummary = (output, context) => {
    return take(output, {
        contentType: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        fileDescription: _json,
        location: _json,
        revision: __expectLong,
    });
};
const de_CustomPluginSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customPluginArn: __expectString,
        customPluginState: __expectString,
        description: __expectString,
        latestRevision: (_) => de_CustomPluginRevisionSummary(_, context),
        name: __expectString,
    });
};
const de_WorkerConfigurationRevisionDescription = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        propertiesFileContent: __expectString,
        revision: __expectLong,
    });
};
const de_WorkerConfigurationRevisionSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        revision: __expectLong,
    });
};
const de_WorkerConfigurationSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        latestRevision: (_) => de_WorkerConfigurationRevisionSummary(_, context),
        name: __expectString,
        workerConfigurationArn: __expectString,
        workerConfigurationState: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _cNP = "connectorNamePrefix";
const _cV = "currentVersion";
const _mR = "maxResults";
const _nP = "namePrefix";
const _nT = "nextToken";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
