import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { KafkaConnectServiceException as __BaseException } from "./KafkaConnectServiceException";
export interface ScaleInPolicyDescription {
  cpuUtilizationPercentage?: number;
}
export interface ScaleOutPolicyDescription {
  cpuUtilizationPercentage?: number;
}
export interface AutoScalingDescription {
  maxWorkerCount?: number;
  mcuCount?: number;
  minWorkerCount?: number;
  scaleInPolicy?: ScaleInPolicyDescription;
  scaleOutPolicy?: ScaleOutPolicyDescription;
}
export interface ProvisionedCapacityDescription {
  mcuCount?: number;
  workerCount?: number;
}
export interface CapacityDescription {
  autoScaling?: AutoScalingDescription;
  provisionedCapacity?: ProvisionedCapacityDescription;
}
export declare const ConnectorState: {
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly UPDATING: "UPDATING";
};
export type ConnectorState =
  (typeof ConnectorState)[keyof typeof ConnectorState];
export interface VpcDescription {
  securityGroups?: string[];
  subnets?: string[];
}
export interface ApacheKafkaClusterDescription {
  bootstrapServers?: string;
  vpc?: VpcDescription;
}
export interface KafkaClusterDescription {
  apacheKafkaCluster?: ApacheKafkaClusterDescription;
}
export declare const KafkaClusterClientAuthenticationType: {
  readonly IAM: "IAM";
  readonly NONE: "NONE";
};
export type KafkaClusterClientAuthenticationType =
  (typeof KafkaClusterClientAuthenticationType)[keyof typeof KafkaClusterClientAuthenticationType];
export interface KafkaClusterClientAuthenticationDescription {
  authenticationType?: KafkaClusterClientAuthenticationType;
}
export declare const KafkaClusterEncryptionInTransitType: {
  readonly PLAINTEXT: "PLAINTEXT";
  readonly TLS: "TLS";
};
export type KafkaClusterEncryptionInTransitType =
  (typeof KafkaClusterEncryptionInTransitType)[keyof typeof KafkaClusterEncryptionInTransitType];
export interface KafkaClusterEncryptionInTransitDescription {
  encryptionType?: KafkaClusterEncryptionInTransitType;
}
export interface CloudWatchLogsLogDeliveryDescription {
  enabled?: boolean;
  logGroup?: string;
}
export interface FirehoseLogDeliveryDescription {
  deliveryStream?: string;
  enabled?: boolean;
}
export interface S3LogDeliveryDescription {
  bucket?: string;
  enabled?: boolean;
  prefix?: string;
}
export interface WorkerLogDeliveryDescription {
  cloudWatchLogs?: CloudWatchLogsLogDeliveryDescription;
  firehose?: FirehoseLogDeliveryDescription;
  s3?: S3LogDeliveryDescription;
}
export interface LogDeliveryDescription {
  workerLogDelivery?: WorkerLogDeliveryDescription;
}
export interface CustomPluginDescription {
  customPluginArn?: string;
  revision?: number;
}
export interface PluginDescription {
  customPlugin?: CustomPluginDescription;
}
export interface WorkerConfigurationDescription {
  revision?: number;
  workerConfigurationArn?: string;
}
export interface ConnectorSummary {
  capacity?: CapacityDescription;
  connectorArn?: string;
  connectorDescription?: string;
  connectorName?: string;
  connectorState?: ConnectorState;
  creationTime?: Date;
  currentVersion?: string;
  kafkaCluster?: KafkaClusterDescription;
  kafkaClusterClientAuthentication?: KafkaClusterClientAuthenticationDescription;
  kafkaClusterEncryptionInTransit?: KafkaClusterEncryptionInTransitDescription;
  kafkaConnectVersion?: string;
  logDelivery?: LogDeliveryDescription;
  plugins?: PluginDescription[];
  serviceExecutionRoleArn?: string;
  workerConfiguration?: WorkerConfigurationDescription;
}
export declare const CustomPluginState: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type CustomPluginState =
  (typeof CustomPluginState)[keyof typeof CustomPluginState];
export declare const CustomPluginContentType: {
  readonly JAR: "JAR";
  readonly ZIP: "ZIP";
};
export type CustomPluginContentType =
  (typeof CustomPluginContentType)[keyof typeof CustomPluginContentType];
export interface CustomPluginFileDescription {
  fileMd5?: string;
  fileSize?: number;
}
export interface S3LocationDescription {
  bucketArn?: string;
  fileKey?: string;
  objectVersion?: string;
}
export interface CustomPluginLocationDescription {
  s3Location?: S3LocationDescription;
}
export interface CustomPluginRevisionSummary {
  contentType?: CustomPluginContentType;
  creationTime?: Date;
  description?: string;
  fileDescription?: CustomPluginFileDescription;
  location?: CustomPluginLocationDescription;
  revision?: number;
}
export interface CustomPluginSummary {
  creationTime?: Date;
  customPluginArn?: string;
  customPluginState?: CustomPluginState;
  description?: string;
  latestRevision?: CustomPluginRevisionSummary;
  name?: string;
}
export interface CustomPlugin {
  customPluginArn: string | undefined;
  revision: number | undefined;
}
export interface Plugin {
  customPlugin: CustomPlugin | undefined;
}
export interface WorkerConfigurationRevisionSummary {
  creationTime?: Date;
  description?: string;
  revision?: number;
}
export declare const WorkerConfigurationState: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETING: "DELETING";
};
export type WorkerConfigurationState =
  (typeof WorkerConfigurationState)[keyof typeof WorkerConfigurationState];
export interface WorkerConfigurationSummary {
  creationTime?: Date;
  description?: string;
  latestRevision?: WorkerConfigurationRevisionSummary;
  name?: string;
  workerConfigurationArn?: string;
  workerConfigurationState?: WorkerConfigurationState;
}
export interface Vpc {
  securityGroups?: string[];
  subnets: string[] | undefined;
}
export interface ApacheKafkaCluster {
  bootstrapServers: string | undefined;
  vpc: Vpc | undefined;
}
export interface ScaleInPolicy {
  cpuUtilizationPercentage: number | undefined;
}
export interface ScaleOutPolicy {
  cpuUtilizationPercentage: number | undefined;
}
export interface AutoScaling {
  maxWorkerCount: number | undefined;
  mcuCount: number | undefined;
  minWorkerCount: number | undefined;
  scaleInPolicy?: ScaleInPolicy;
  scaleOutPolicy?: ScaleOutPolicy;
}
export interface ScaleInPolicyUpdate {
  cpuUtilizationPercentage: number | undefined;
}
export interface ScaleOutPolicyUpdate {
  cpuUtilizationPercentage: number | undefined;
}
export interface AutoScalingUpdate {
  maxWorkerCount: number | undefined;
  mcuCount: number | undefined;
  minWorkerCount: number | undefined;
  scaleInPolicy: ScaleInPolicyUpdate | undefined;
  scaleOutPolicy: ScaleOutPolicyUpdate | undefined;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export interface ProvisionedCapacity {
  mcuCount: number | undefined;
  workerCount: number | undefined;
}
export interface Capacity {
  autoScaling?: AutoScaling;
  provisionedCapacity?: ProvisionedCapacity;
}
export interface ProvisionedCapacityUpdate {
  mcuCount: number | undefined;
  workerCount: number | undefined;
}
export interface CapacityUpdate {
  autoScaling?: AutoScalingUpdate;
  provisionedCapacity?: ProvisionedCapacityUpdate;
}
export interface CloudWatchLogsLogDelivery {
  enabled: boolean | undefined;
  logGroup?: string;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface KafkaCluster {
  apacheKafkaCluster: ApacheKafkaCluster | undefined;
}
export interface KafkaClusterClientAuthentication {
  authenticationType: KafkaClusterClientAuthenticationType | undefined;
}
export interface KafkaClusterEncryptionInTransit {
  encryptionType: KafkaClusterEncryptionInTransitType | undefined;
}
export interface FirehoseLogDelivery {
  deliveryStream?: string;
  enabled: boolean | undefined;
}
export interface S3LogDelivery {
  bucket?: string;
  enabled: boolean | undefined;
  prefix?: string;
}
export interface WorkerLogDelivery {
  cloudWatchLogs?: CloudWatchLogsLogDelivery;
  firehose?: FirehoseLogDelivery;
  s3?: S3LogDelivery;
}
export interface LogDelivery {
  workerLogDelivery: WorkerLogDelivery | undefined;
}
export interface WorkerConfiguration {
  revision: number | undefined;
  workerConfigurationArn: string | undefined;
}
export interface CreateConnectorRequest {
  capacity: Capacity | undefined;
  connectorConfiguration: Record<string, string> | undefined;
  connectorDescription?: string;
  connectorName: string | undefined;
  kafkaCluster: KafkaCluster | undefined;
  kafkaClusterClientAuthentication:
    | KafkaClusterClientAuthentication
    | undefined;
  kafkaClusterEncryptionInTransit: KafkaClusterEncryptionInTransit | undefined;
  kafkaConnectVersion: string | undefined;
  logDelivery?: LogDelivery;
  plugins: Plugin[] | undefined;
  serviceExecutionRoleArn: string | undefined;
  workerConfiguration?: WorkerConfiguration;
  tags?: Record<string, string>;
}
export interface CreateConnectorResponse {
  connectorArn?: string;
  connectorName?: string;
  connectorState?: ConnectorState;
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export interface S3Location {
  bucketArn: string | undefined;
  fileKey: string | undefined;
  objectVersion?: string;
}
export interface CustomPluginLocation {
  s3Location: S3Location | undefined;
}
export interface CreateCustomPluginRequest {
  contentType: CustomPluginContentType | undefined;
  description?: string;
  location: CustomPluginLocation | undefined;
  name: string | undefined;
  tags?: Record<string, string>;
}
export interface CreateCustomPluginResponse {
  customPluginArn?: string;
  customPluginState?: CustomPluginState;
  name?: string;
  revision?: number;
}
export interface CreateWorkerConfigurationRequest {
  description?: string;
  name: string | undefined;
  propertiesFileContent: string | undefined;
  tags?: Record<string, string>;
}
export interface CreateWorkerConfigurationResponse {
  creationTime?: Date;
  latestRevision?: WorkerConfigurationRevisionSummary;
  name?: string;
  workerConfigurationArn?: string;
  workerConfigurationState?: WorkerConfigurationState;
}
export interface DeleteConnectorRequest {
  connectorArn: string | undefined;
  currentVersion?: string;
}
export interface DeleteConnectorResponse {
  connectorArn?: string;
  connectorState?: ConnectorState;
}
export interface DeleteCustomPluginRequest {
  customPluginArn: string | undefined;
}
export interface DeleteCustomPluginResponse {
  customPluginArn?: string;
  customPluginState?: CustomPluginState;
}
export interface DeleteWorkerConfigurationRequest {
  workerConfigurationArn: string | undefined;
}
export interface DeleteWorkerConfigurationResponse {
  workerConfigurationArn?: string;
  workerConfigurationState?: WorkerConfigurationState;
}
export interface DescribeConnectorRequest {
  connectorArn: string | undefined;
}
export interface StateDescription {
  code?: string;
  message?: string;
}
export interface DescribeConnectorResponse {
  capacity?: CapacityDescription;
  connectorArn?: string;
  connectorConfiguration?: Record<string, string>;
  connectorDescription?: string;
  connectorName?: string;
  connectorState?: ConnectorState;
  creationTime?: Date;
  currentVersion?: string;
  kafkaCluster?: KafkaClusterDescription;
  kafkaClusterClientAuthentication?: KafkaClusterClientAuthenticationDescription;
  kafkaClusterEncryptionInTransit?: KafkaClusterEncryptionInTransitDescription;
  kafkaConnectVersion?: string;
  logDelivery?: LogDeliveryDescription;
  plugins?: PluginDescription[];
  serviceExecutionRoleArn?: string;
  workerConfiguration?: WorkerConfigurationDescription;
  stateDescription?: StateDescription;
}
export interface DescribeCustomPluginRequest {
  customPluginArn: string | undefined;
}
export interface DescribeCustomPluginResponse {
  creationTime?: Date;
  customPluginArn?: string;
  customPluginState?: CustomPluginState;
  description?: string;
  latestRevision?: CustomPluginRevisionSummary;
  name?: string;
  stateDescription?: StateDescription;
}
export interface DescribeWorkerConfigurationRequest {
  workerConfigurationArn: string | undefined;
}
export interface WorkerConfigurationRevisionDescription {
  creationTime?: Date;
  description?: string;
  propertiesFileContent?: string;
  revision?: number;
}
export interface DescribeWorkerConfigurationResponse {
  creationTime?: Date;
  description?: string;
  latestRevision?: WorkerConfigurationRevisionDescription;
  name?: string;
  workerConfigurationArn?: string;
  workerConfigurationState?: WorkerConfigurationState;
}
export interface ListConnectorsRequest {
  connectorNamePrefix?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface ListConnectorsResponse {
  connectors?: ConnectorSummary[];
  nextToken?: string;
}
export interface ListCustomPluginsRequest {
  maxResults?: number;
  nextToken?: string;
  namePrefix?: string;
}
export interface ListCustomPluginsResponse {
  customPlugins?: CustomPluginSummary[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface ListWorkerConfigurationsRequest {
  maxResults?: number;
  nextToken?: string;
  namePrefix?: string;
}
export interface ListWorkerConfigurationsResponse {
  nextToken?: string;
  workerConfigurations?: WorkerConfigurationSummary[];
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateConnectorRequest {
  capacity: CapacityUpdate | undefined;
  connectorArn: string | undefined;
  currentVersion: string | undefined;
}
export interface UpdateConnectorResponse {
  connectorArn?: string;
  connectorState?: ConnectorState;
}
export declare const CreateConnectorRequestFilterSensitiveLog: (
  obj: CreateConnectorRequest
) => any;
export declare const CreateWorkerConfigurationRequestFilterSensitiveLog: (
  obj: CreateWorkerConfigurationRequest
) => any;
export declare const DescribeConnectorResponseFilterSensitiveLog: (
  obj: DescribeConnectorResponse
) => any;
export declare const WorkerConfigurationRevisionDescriptionFilterSensitiveLog: (
  obj: WorkerConfigurationRevisionDescription
) => any;
export declare const DescribeWorkerConfigurationResponseFilterSensitiveLog: (
  obj: DescribeWorkerConfigurationResponse
) => any;
