"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BadRequestException: () => BadRequestException,
  ConflictException: () => ConflictException,
  ConnectorState: () => ConnectorState,
  CreateConnectorCommand: () => CreateConnectorCommand,
  CreateConnectorRequestFilterSensitiveLog: () => CreateConnectorRequestFilterSensitiveLog,
  CreateCustomPluginCommand: () => CreateCustomPluginCommand,
  CreateWorkerConfigurationCommand: () => CreateWorkerConfigurationCommand,
  CreateWorkerConfigurationRequestFilterSensitiveLog: () => CreateWorkerConfigurationRequestFilterSensitiveLog,
  CustomPluginContentType: () => CustomPluginContentType,
  CustomPluginState: () => CustomPluginState,
  DeleteConnectorCommand: () => DeleteConnectorCommand,
  DeleteCustomPluginCommand: () => DeleteCustomPluginCommand,
  DeleteWorkerConfigurationCommand: () => DeleteWorkerConfigurationCommand,
  DescribeConnectorCommand: () => DescribeConnectorCommand,
  DescribeConnectorResponseFilterSensitiveLog: () => DescribeConnectorResponseFilterSensitiveLog,
  DescribeCustomPluginCommand: () => DescribeCustomPluginCommand,
  DescribeWorkerConfigurationCommand: () => DescribeWorkerConfigurationCommand,
  DescribeWorkerConfigurationResponseFilterSensitiveLog: () => DescribeWorkerConfigurationResponseFilterSensitiveLog,
  ForbiddenException: () => ForbiddenException,
  InternalServerErrorException: () => InternalServerErrorException,
  KafkaClusterClientAuthenticationType: () => KafkaClusterClientAuthenticationType,
  KafkaClusterEncryptionInTransitType: () => KafkaClusterEncryptionInTransitType,
  KafkaConnect: () => KafkaConnect,
  KafkaConnectClient: () => KafkaConnectClient,
  KafkaConnectServiceException: () => KafkaConnectServiceException,
  ListConnectorsCommand: () => ListConnectorsCommand,
  ListCustomPluginsCommand: () => ListCustomPluginsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListWorkerConfigurationsCommand: () => ListWorkerConfigurationsCommand,
  NotFoundException: () => NotFoundException,
  ServiceUnavailableException: () => ServiceUnavailableException,
  TagResourceCommand: () => TagResourceCommand,
  TooManyRequestsException: () => TooManyRequestsException,
  UnauthorizedException: () => UnauthorizedException,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateConnectorCommand: () => UpdateConnectorCommand,
  WorkerConfigurationRevisionDescriptionFilterSensitiveLog: () => WorkerConfigurationRevisionDescriptionFilterSensitiveLog,
  WorkerConfigurationState: () => WorkerConfigurationState,
  __Client: () => import_smithy_client.Client,
  paginateListConnectors: () => paginateListConnectors,
  paginateListCustomPlugins: () => paginateListCustomPlugins,
  paginateListWorkerConfigurations: () => paginateListWorkerConfigurations
});
module.exports = __toCommonJS(src_exports);

// src/KafkaConnectClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "kafkaconnect"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/KafkaConnectClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/KafkaConnectClient.ts
var _KafkaConnectClient = class _KafkaConnectClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultKafkaConnectHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_KafkaConnectClient, "KafkaConnectClient");
var KafkaConnectClient = _KafkaConnectClient;

// src/KafkaConnect.ts


// src/commands/CreateConnectorCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/models/models_0.ts


// src/models/KafkaConnectServiceException.ts

var _KafkaConnectServiceException = class _KafkaConnectServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _KafkaConnectServiceException.prototype);
  }
};
__name(_KafkaConnectServiceException, "KafkaConnectServiceException");
var KafkaConnectServiceException = _KafkaConnectServiceException;

// src/models/models_0.ts
var ConnectorState = {
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  RUNNING: "RUNNING",
  UPDATING: "UPDATING"
};
var KafkaClusterClientAuthenticationType = {
  IAM: "IAM",
  NONE: "NONE"
};
var KafkaClusterEncryptionInTransitType = {
  PLAINTEXT: "PLAINTEXT",
  TLS: "TLS"
};
var CustomPluginState = {
  ACTIVE: "ACTIVE",
  CREATE_FAILED: "CREATE_FAILED",
  CREATING: "CREATING",
  DELETING: "DELETING",
  UPDATE_FAILED: "UPDATE_FAILED",
  UPDATING: "UPDATING"
};
var CustomPluginContentType = {
  JAR: "JAR",
  ZIP: "ZIP"
};
var WorkerConfigurationState = {
  ACTIVE: "ACTIVE",
  DELETING: "DELETING"
};
var _BadRequestException = class _BadRequestException extends KafkaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "BadRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BadRequestException.prototype);
  }
};
__name(_BadRequestException, "BadRequestException");
var BadRequestException = _BadRequestException;
var _ConflictException = class _ConflictException extends KafkaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
  }
};
__name(_ConflictException, "ConflictException");
var ConflictException = _ConflictException;
var _ForbiddenException = class _ForbiddenException extends KafkaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ForbiddenException",
      $fault: "client",
      ...opts
    });
    this.name = "ForbiddenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ForbiddenException.prototype);
  }
};
__name(_ForbiddenException, "ForbiddenException");
var ForbiddenException = _ForbiddenException;
var _InternalServerErrorException = class _InternalServerErrorException extends KafkaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerErrorException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerErrorException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerErrorException.prototype);
  }
};
__name(_InternalServerErrorException, "InternalServerErrorException");
var InternalServerErrorException = _InternalServerErrorException;
var _NotFoundException = class _NotFoundException extends KafkaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "NotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NotFoundException.prototype);
  }
};
__name(_NotFoundException, "NotFoundException");
var NotFoundException = _NotFoundException;
var _ServiceUnavailableException = class _ServiceUnavailableException extends KafkaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "ServiceUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
  }
};
__name(_ServiceUnavailableException, "ServiceUnavailableException");
var ServiceUnavailableException = _ServiceUnavailableException;
var _TooManyRequestsException = class _TooManyRequestsException extends KafkaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyRequestsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyRequestsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
  }
};
__name(_TooManyRequestsException, "TooManyRequestsException");
var TooManyRequestsException = _TooManyRequestsException;
var _UnauthorizedException = class _UnauthorizedException extends KafkaConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnauthorizedException",
      $fault: "client",
      ...opts
    });
    this.name = "UnauthorizedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UnauthorizedException.prototype);
  }
};
__name(_UnauthorizedException, "UnauthorizedException");
var UnauthorizedException = _UnauthorizedException;
var CreateConnectorRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.connectorConfiguration && { connectorConfiguration: import_smithy_client.SENSITIVE_STRING }
}), "CreateConnectorRequestFilterSensitiveLog");
var CreateWorkerConfigurationRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.propertiesFileContent && { propertiesFileContent: import_smithy_client.SENSITIVE_STRING }
}), "CreateWorkerConfigurationRequestFilterSensitiveLog");
var DescribeConnectorResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.connectorConfiguration && { connectorConfiguration: import_smithy_client.SENSITIVE_STRING }
}), "DescribeConnectorResponseFilterSensitiveLog");
var WorkerConfigurationRevisionDescriptionFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.propertiesFileContent && { propertiesFileContent: import_smithy_client.SENSITIVE_STRING }
}), "WorkerConfigurationRevisionDescriptionFilterSensitiveLog");
var DescribeWorkerConfigurationResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.latestRevision && {
    latestRevision: WorkerConfigurationRevisionDescriptionFilterSensitiveLog(obj.latestRevision)
  }
}), "DescribeWorkerConfigurationResponseFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");


var se_CreateConnectorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/connectors");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      capacity: (_) => (0, import_smithy_client._json)(_),
      connectorConfiguration: (_) => (0, import_smithy_client._json)(_),
      connectorDescription: [],
      connectorName: [],
      kafkaCluster: (_) => (0, import_smithy_client._json)(_),
      kafkaClusterClientAuthentication: (_) => (0, import_smithy_client._json)(_),
      kafkaClusterEncryptionInTransit: (_) => (0, import_smithy_client._json)(_),
      kafkaConnectVersion: [],
      logDelivery: (_) => (0, import_smithy_client._json)(_),
      plugins: (_) => (0, import_smithy_client._json)(_),
      serviceExecutionRoleArn: [],
      tags: (_) => (0, import_smithy_client._json)(_),
      workerConfiguration: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateConnectorCommand");
var se_CreateCustomPluginCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/custom-plugins");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      contentType: [],
      description: [],
      location: (_) => (0, import_smithy_client._json)(_),
      name: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateCustomPluginCommand");
var se_CreateWorkerConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/worker-configurations");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      description: [],
      name: [],
      propertiesFileContent: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateWorkerConfigurationCommand");
var se_DeleteConnectorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/connectors/{connectorArn}");
  b.p("connectorArn", () => input.connectorArn, "{connectorArn}", false);
  const query = (0, import_smithy_client.map)({
    [_cV]: [, input[_cV]]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteConnectorCommand");
var se_DeleteCustomPluginCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/custom-plugins/{customPluginArn}");
  b.p("customPluginArn", () => input.customPluginArn, "{customPluginArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteCustomPluginCommand");
var se_DeleteWorkerConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/worker-configurations/{workerConfigurationArn}");
  b.p("workerConfigurationArn", () => input.workerConfigurationArn, "{workerConfigurationArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteWorkerConfigurationCommand");
var se_DescribeConnectorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/connectors/{connectorArn}");
  b.p("connectorArn", () => input.connectorArn, "{connectorArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeConnectorCommand");
var se_DescribeCustomPluginCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/custom-plugins/{customPluginArn}");
  b.p("customPluginArn", () => input.customPluginArn, "{customPluginArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeCustomPluginCommand");
var se_DescribeWorkerConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/worker-configurations/{workerConfigurationArn}");
  b.p("workerConfigurationArn", () => input.workerConfigurationArn, "{workerConfigurationArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeWorkerConfigurationCommand");
var se_ListConnectorsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/connectors");
  const query = (0, import_smithy_client.map)({
    [_cNP]: [, input[_cNP]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListConnectorsCommand");
var se_ListCustomPluginsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/custom-plugins");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_nP]: [, input[_nP]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCustomPluginsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/tags/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_ListWorkerConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/worker-configurations");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_nT]: [, input[_nT]],
    [_nP]: [, input[_nP]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListWorkerConfigurationsCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/tags/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/v1/tags/{resourceArn}");
  b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.tagKeys, `tagKeys`) != null,
      () => (input[_tK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateConnectorCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/v1/connectors/{connectorArn}");
  b.p("connectorArn", () => input.connectorArn, "{connectorArn}", false);
  const query = (0, import_smithy_client.map)({
    [_cV]: [, (0, import_smithy_client.expectNonNull)(input[_cV], `currentVersion`)]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      capacity: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PUT").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdateConnectorCommand");
var de_CreateConnectorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    connectorArn: import_smithy_client.expectString,
    connectorName: import_smithy_client.expectString,
    connectorState: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateConnectorCommand");
var de_CreateCustomPluginCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    customPluginArn: import_smithy_client.expectString,
    customPluginState: import_smithy_client.expectString,
    name: import_smithy_client.expectString,
    revision: import_smithy_client.expectLong
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateCustomPluginCommand");
var de_CreateWorkerConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    latestRevision: (_) => de_WorkerConfigurationRevisionSummary(_, context),
    name: import_smithy_client.expectString,
    workerConfigurationArn: import_smithy_client.expectString,
    workerConfigurationState: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateWorkerConfigurationCommand");
var de_DeleteConnectorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    connectorArn: import_smithy_client.expectString,
    connectorState: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteConnectorCommand");
var de_DeleteCustomPluginCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    customPluginArn: import_smithy_client.expectString,
    customPluginState: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteCustomPluginCommand");
var de_DeleteWorkerConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    workerConfigurationArn: import_smithy_client.expectString,
    workerConfigurationState: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteWorkerConfigurationCommand");
var de_DescribeConnectorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    capacity: import_smithy_client._json,
    connectorArn: import_smithy_client.expectString,
    connectorConfiguration: import_smithy_client._json,
    connectorDescription: import_smithy_client.expectString,
    connectorName: import_smithy_client.expectString,
    connectorState: import_smithy_client.expectString,
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    currentVersion: import_smithy_client.expectString,
    kafkaCluster: import_smithy_client._json,
    kafkaClusterClientAuthentication: import_smithy_client._json,
    kafkaClusterEncryptionInTransit: import_smithy_client._json,
    kafkaConnectVersion: import_smithy_client.expectString,
    logDelivery: import_smithy_client._json,
    plugins: import_smithy_client._json,
    serviceExecutionRoleArn: import_smithy_client.expectString,
    stateDescription: import_smithy_client._json,
    workerConfiguration: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeConnectorCommand");
var de_DescribeCustomPluginCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    customPluginArn: import_smithy_client.expectString,
    customPluginState: import_smithy_client.expectString,
    description: import_smithy_client.expectString,
    latestRevision: (_) => de_CustomPluginRevisionSummary(_, context),
    name: import_smithy_client.expectString,
    stateDescription: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeCustomPluginCommand");
var de_DescribeWorkerConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    description: import_smithy_client.expectString,
    latestRevision: (_) => de_WorkerConfigurationRevisionDescription(_, context),
    name: import_smithy_client.expectString,
    workerConfigurationArn: import_smithy_client.expectString,
    workerConfigurationState: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeWorkerConfigurationCommand");
var de_ListConnectorsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    connectors: (_) => de___listOfConnectorSummary(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListConnectorsCommand");
var de_ListCustomPluginsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    customPlugins: (_) => de___listOfCustomPluginSummary(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCustomPluginsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListWorkerConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    workerConfigurations: (_) => de___listOfWorkerConfigurationSummary(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListWorkerConfigurationsCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateConnectorCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    connectorArn: import_smithy_client.expectString,
    connectorState: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateConnectorCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.kafkaconnect#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.kafkaconnect#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "ForbiddenException":
    case "com.amazonaws.kafkaconnect#ForbiddenException":
      throw await de_ForbiddenExceptionRes(parsedOutput, context);
    case "InternalServerErrorException":
    case "com.amazonaws.kafkaconnect#InternalServerErrorException":
      throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.kafkaconnect#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.kafkaconnect#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.kafkaconnect#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.kafkaconnect#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(KafkaConnectServiceException);
var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_BadRequestExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_ForbiddenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ForbiddenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ForbiddenExceptionRes");
var de_InternalServerErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerErrorExceptionRes");
var de_NotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new NotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_NotFoundExceptionRes");
var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableExceptionRes");
var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new TooManyRequestsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TooManyRequestsExceptionRes");
var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new UnauthorizedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_UnauthorizedExceptionRes");
var de___listOfConnectorSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ConnectorSummary(entry, context);
  });
  return retVal;
}, "de___listOfConnectorSummary");
var de___listOfCustomPluginSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CustomPluginSummary(entry, context);
  });
  return retVal;
}, "de___listOfCustomPluginSummary");
var de___listOfWorkerConfigurationSummary = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_WorkerConfigurationSummary(entry, context);
  });
  return retVal;
}, "de___listOfWorkerConfigurationSummary");
var de_ConnectorSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    capacity: import_smithy_client._json,
    connectorArn: import_smithy_client.expectString,
    connectorDescription: import_smithy_client.expectString,
    connectorName: import_smithy_client.expectString,
    connectorState: import_smithy_client.expectString,
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    currentVersion: import_smithy_client.expectString,
    kafkaCluster: import_smithy_client._json,
    kafkaClusterClientAuthentication: import_smithy_client._json,
    kafkaClusterEncryptionInTransit: import_smithy_client._json,
    kafkaConnectVersion: import_smithy_client.expectString,
    logDelivery: import_smithy_client._json,
    plugins: import_smithy_client._json,
    serviceExecutionRoleArn: import_smithy_client.expectString,
    workerConfiguration: import_smithy_client._json
  });
}, "de_ConnectorSummary");
var de_CustomPluginRevisionSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    contentType: import_smithy_client.expectString,
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    description: import_smithy_client.expectString,
    fileDescription: import_smithy_client._json,
    location: import_smithy_client._json,
    revision: import_smithy_client.expectLong
  });
}, "de_CustomPluginRevisionSummary");
var de_CustomPluginSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    customPluginArn: import_smithy_client.expectString,
    customPluginState: import_smithy_client.expectString,
    description: import_smithy_client.expectString,
    latestRevision: (_) => de_CustomPluginRevisionSummary(_, context),
    name: import_smithy_client.expectString
  });
}, "de_CustomPluginSummary");
var de_WorkerConfigurationRevisionDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    description: import_smithy_client.expectString,
    propertiesFileContent: import_smithy_client.expectString,
    revision: import_smithy_client.expectLong
  });
}, "de_WorkerConfigurationRevisionDescription");
var de_WorkerConfigurationRevisionSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    description: import_smithy_client.expectString,
    revision: import_smithy_client.expectLong
  });
}, "de_WorkerConfigurationRevisionSummary");
var de_WorkerConfigurationSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(_)),
    description: import_smithy_client.expectString,
    latestRevision: (_) => de_WorkerConfigurationRevisionSummary(_, context),
    name: import_smithy_client.expectString,
    workerConfigurationArn: import_smithy_client.expectString,
    workerConfigurationState: import_smithy_client.expectString
  });
}, "de_WorkerConfigurationSummary");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _cNP = "connectorNamePrefix";
var _cV = "currentVersion";
var _mR = "maxResults";
var _nP = "namePrefix";
var _nT = "nextToken";
var _tK = "tagKeys";

// src/commands/CreateConnectorCommand.ts
var _CreateConnectorCommand = class _CreateConnectorCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "CreateConnector", {}).n("KafkaConnectClient", "CreateConnectorCommand").f(CreateConnectorRequestFilterSensitiveLog, void 0).ser(se_CreateConnectorCommand).de(de_CreateConnectorCommand).build() {
};
__name(_CreateConnectorCommand, "CreateConnectorCommand");
var CreateConnectorCommand = _CreateConnectorCommand;

// src/commands/CreateCustomPluginCommand.ts




var _CreateCustomPluginCommand = class _CreateCustomPluginCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "CreateCustomPlugin", {}).n("KafkaConnectClient", "CreateCustomPluginCommand").f(void 0, void 0).ser(se_CreateCustomPluginCommand).de(de_CreateCustomPluginCommand).build() {
};
__name(_CreateCustomPluginCommand, "CreateCustomPluginCommand");
var CreateCustomPluginCommand = _CreateCustomPluginCommand;

// src/commands/CreateWorkerConfigurationCommand.ts




var _CreateWorkerConfigurationCommand = class _CreateWorkerConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "CreateWorkerConfiguration", {}).n("KafkaConnectClient", "CreateWorkerConfigurationCommand").f(CreateWorkerConfigurationRequestFilterSensitiveLog, void 0).ser(se_CreateWorkerConfigurationCommand).de(de_CreateWorkerConfigurationCommand).build() {
};
__name(_CreateWorkerConfigurationCommand, "CreateWorkerConfigurationCommand");
var CreateWorkerConfigurationCommand = _CreateWorkerConfigurationCommand;

// src/commands/DeleteConnectorCommand.ts




var _DeleteConnectorCommand = class _DeleteConnectorCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "DeleteConnector", {}).n("KafkaConnectClient", "DeleteConnectorCommand").f(void 0, void 0).ser(se_DeleteConnectorCommand).de(de_DeleteConnectorCommand).build() {
};
__name(_DeleteConnectorCommand, "DeleteConnectorCommand");
var DeleteConnectorCommand = _DeleteConnectorCommand;

// src/commands/DeleteCustomPluginCommand.ts




var _DeleteCustomPluginCommand = class _DeleteCustomPluginCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "DeleteCustomPlugin", {}).n("KafkaConnectClient", "DeleteCustomPluginCommand").f(void 0, void 0).ser(se_DeleteCustomPluginCommand).de(de_DeleteCustomPluginCommand).build() {
};
__name(_DeleteCustomPluginCommand, "DeleteCustomPluginCommand");
var DeleteCustomPluginCommand = _DeleteCustomPluginCommand;

// src/commands/DeleteWorkerConfigurationCommand.ts




var _DeleteWorkerConfigurationCommand = class _DeleteWorkerConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "DeleteWorkerConfiguration", {}).n("KafkaConnectClient", "DeleteWorkerConfigurationCommand").f(void 0, void 0).ser(se_DeleteWorkerConfigurationCommand).de(de_DeleteWorkerConfigurationCommand).build() {
};
__name(_DeleteWorkerConfigurationCommand, "DeleteWorkerConfigurationCommand");
var DeleteWorkerConfigurationCommand = _DeleteWorkerConfigurationCommand;

// src/commands/DescribeConnectorCommand.ts




var _DescribeConnectorCommand = class _DescribeConnectorCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "DescribeConnector", {}).n("KafkaConnectClient", "DescribeConnectorCommand").f(void 0, DescribeConnectorResponseFilterSensitiveLog).ser(se_DescribeConnectorCommand).de(de_DescribeConnectorCommand).build() {
};
__name(_DescribeConnectorCommand, "DescribeConnectorCommand");
var DescribeConnectorCommand = _DescribeConnectorCommand;

// src/commands/DescribeCustomPluginCommand.ts




var _DescribeCustomPluginCommand = class _DescribeCustomPluginCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "DescribeCustomPlugin", {}).n("KafkaConnectClient", "DescribeCustomPluginCommand").f(void 0, void 0).ser(se_DescribeCustomPluginCommand).de(de_DescribeCustomPluginCommand).build() {
};
__name(_DescribeCustomPluginCommand, "DescribeCustomPluginCommand");
var DescribeCustomPluginCommand = _DescribeCustomPluginCommand;

// src/commands/DescribeWorkerConfigurationCommand.ts




var _DescribeWorkerConfigurationCommand = class _DescribeWorkerConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "DescribeWorkerConfiguration", {}).n("KafkaConnectClient", "DescribeWorkerConfigurationCommand").f(void 0, DescribeWorkerConfigurationResponseFilterSensitiveLog).ser(se_DescribeWorkerConfigurationCommand).de(de_DescribeWorkerConfigurationCommand).build() {
};
__name(_DescribeWorkerConfigurationCommand, "DescribeWorkerConfigurationCommand");
var DescribeWorkerConfigurationCommand = _DescribeWorkerConfigurationCommand;

// src/commands/ListConnectorsCommand.ts




var _ListConnectorsCommand = class _ListConnectorsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "ListConnectors", {}).n("KafkaConnectClient", "ListConnectorsCommand").f(void 0, void 0).ser(se_ListConnectorsCommand).de(de_ListConnectorsCommand).build() {
};
__name(_ListConnectorsCommand, "ListConnectorsCommand");
var ListConnectorsCommand = _ListConnectorsCommand;

// src/commands/ListCustomPluginsCommand.ts




var _ListCustomPluginsCommand = class _ListCustomPluginsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "ListCustomPlugins", {}).n("KafkaConnectClient", "ListCustomPluginsCommand").f(void 0, void 0).ser(se_ListCustomPluginsCommand).de(de_ListCustomPluginsCommand).build() {
};
__name(_ListCustomPluginsCommand, "ListCustomPluginsCommand");
var ListCustomPluginsCommand = _ListCustomPluginsCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "ListTagsForResource", {}).n("KafkaConnectClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/ListWorkerConfigurationsCommand.ts




var _ListWorkerConfigurationsCommand = class _ListWorkerConfigurationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "ListWorkerConfigurations", {}).n("KafkaConnectClient", "ListWorkerConfigurationsCommand").f(void 0, void 0).ser(se_ListWorkerConfigurationsCommand).de(de_ListWorkerConfigurationsCommand).build() {
};
__name(_ListWorkerConfigurationsCommand, "ListWorkerConfigurationsCommand");
var ListWorkerConfigurationsCommand = _ListWorkerConfigurationsCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "TagResource", {}).n("KafkaConnectClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "UntagResource", {}).n("KafkaConnectClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateConnectorCommand.ts




var _UpdateConnectorCommand = class _UpdateConnectorCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("KafkaConnect", "UpdateConnector", {}).n("KafkaConnectClient", "UpdateConnectorCommand").f(void 0, void 0).ser(se_UpdateConnectorCommand).de(de_UpdateConnectorCommand).build() {
};
__name(_UpdateConnectorCommand, "UpdateConnectorCommand");
var UpdateConnectorCommand = _UpdateConnectorCommand;

// src/KafkaConnect.ts
var commands = {
  CreateConnectorCommand,
  CreateCustomPluginCommand,
  CreateWorkerConfigurationCommand,
  DeleteConnectorCommand,
  DeleteCustomPluginCommand,
  DeleteWorkerConfigurationCommand,
  DescribeConnectorCommand,
  DescribeCustomPluginCommand,
  DescribeWorkerConfigurationCommand,
  ListConnectorsCommand,
  ListCustomPluginsCommand,
  ListTagsForResourceCommand,
  ListWorkerConfigurationsCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateConnectorCommand
};
var _KafkaConnect = class _KafkaConnect extends KafkaConnectClient {
};
__name(_KafkaConnect, "KafkaConnect");
var KafkaConnect = _KafkaConnect;
(0, import_smithy_client.createAggregatedClient)(commands, KafkaConnect);

// src/pagination/ListConnectorsPaginator.ts

var paginateListConnectors = (0, import_core.createPaginator)(KafkaConnectClient, ListConnectorsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListCustomPluginsPaginator.ts

var paginateListCustomPlugins = (0, import_core.createPaginator)(KafkaConnectClient, ListCustomPluginsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListWorkerConfigurationsPaginator.ts

var paginateListWorkerConfigurations = (0, import_core.createPaginator)(KafkaConnectClient, ListWorkerConfigurationsCommand, "nextToken", "nextToken", "maxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  KafkaConnectServiceException,
  __Client,
  KafkaConnectClient,
  KafkaConnect,
  $Command,
  CreateConnectorCommand,
  CreateCustomPluginCommand,
  CreateWorkerConfigurationCommand,
  DeleteConnectorCommand,
  DeleteCustomPluginCommand,
  DeleteWorkerConfigurationCommand,
  DescribeConnectorCommand,
  DescribeCustomPluginCommand,
  DescribeWorkerConfigurationCommand,
  ListConnectorsCommand,
  ListCustomPluginsCommand,
  ListTagsForResourceCommand,
  ListWorkerConfigurationsCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateConnectorCommand,
  paginateListConnectors,
  paginateListCustomPlugins,
  paginateListWorkerConfigurations,
  ConnectorState,
  KafkaClusterClientAuthenticationType,
  KafkaClusterEncryptionInTransitType,
  CustomPluginState,
  CustomPluginContentType,
  WorkerConfigurationState,
  BadRequestException,
  ConflictException,
  ForbiddenException,
  InternalServerErrorException,
  NotFoundException,
  ServiceUnavailableException,
  TooManyRequestsException,
  UnauthorizedException,
  CreateConnectorRequestFilterSensitiveLog,
  CreateWorkerConfigurationRequestFilterSensitiveLog,
  DescribeConnectorResponseFilterSensitiveLog,
  WorkerConfigurationRevisionDescriptionFilterSensitiveLog,
  DescribeWorkerConfigurationResponseFilterSensitiveLog
});

