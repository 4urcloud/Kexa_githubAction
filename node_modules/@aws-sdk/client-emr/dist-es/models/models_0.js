import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { EMRServiceException as __BaseException } from "./EMRServiceException";
export const ActionOnFailure = {
    CANCEL_AND_WAIT: "CANCEL_AND_WAIT",
    CONTINUE: "CONTINUE",
    TERMINATE_CLUSTER: "TERMINATE_CLUSTER",
    TERMINATE_JOB_FLOW: "TERMINATE_JOB_FLOW",
};
export const InstanceFleetType = {
    CORE: "CORE",
    MASTER: "MASTER",
    TASK: "TASK",
};
export const OnDemandProvisioningAllocationStrategy = {
    LOWEST_PRICE: "lowest-price",
};
export const OnDemandCapacityReservationPreference = {
    NONE: "none",
    OPEN: "open",
};
export const OnDemandCapacityReservationUsageStrategy = {
    USE_CAPACITY_RESERVATIONS_FIRST: "use-capacity-reservations-first",
};
export const SpotProvisioningAllocationStrategy = {
    CAPACITY_OPTIMIZED: "capacity-optimized",
    DIVERSIFIED: "diversified",
    LOWEST_PRICE: "lowest-price",
    PRICE_CAPACITY_OPTIMIZED: "price-capacity-optimized",
};
export const SpotProvisioningTimeoutAction = {
    SWITCH_TO_ON_DEMAND: "SWITCH_TO_ON_DEMAND",
    TERMINATE_CLUSTER: "TERMINATE_CLUSTER",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.ErrorCode = opts.ErrorCode;
        this.Message = opts.Message;
    }
}
export const MarketType = {
    ON_DEMAND: "ON_DEMAND",
    SPOT: "SPOT",
};
export const AdjustmentType = {
    CHANGE_IN_CAPACITY: "CHANGE_IN_CAPACITY",
    EXACT_CAPACITY: "EXACT_CAPACITY",
    PERCENT_CHANGE_IN_CAPACITY: "PERCENT_CHANGE_IN_CAPACITY",
};
export const ComparisonOperator = {
    GREATER_THAN: "GREATER_THAN",
    GREATER_THAN_OR_EQUAL: "GREATER_THAN_OR_EQUAL",
    LESS_THAN: "LESS_THAN",
    LESS_THAN_OR_EQUAL: "LESS_THAN_OR_EQUAL",
};
export const Statistic = {
    AVERAGE: "AVERAGE",
    MAXIMUM: "MAXIMUM",
    MINIMUM: "MINIMUM",
    SAMPLE_COUNT: "SAMPLE_COUNT",
    SUM: "SUM",
};
export const Unit = {
    BITS: "BITS",
    BITS_PER_SECOND: "BITS_PER_SECOND",
    BYTES: "BYTES",
    BYTES_PER_SECOND: "BYTES_PER_SECOND",
    COUNT: "COUNT",
    COUNT_PER_SECOND: "COUNT_PER_SECOND",
    GIGA_BITS: "GIGA_BITS",
    GIGA_BITS_PER_SECOND: "GIGA_BITS_PER_SECOND",
    GIGA_BYTES: "GIGA_BYTES",
    GIGA_BYTES_PER_SECOND: "GIGA_BYTES_PER_SECOND",
    KILO_BITS: "KILO_BITS",
    KILO_BITS_PER_SECOND: "KILO_BITS_PER_SECOND",
    KILO_BYTES: "KILO_BYTES",
    KILO_BYTES_PER_SECOND: "KILO_BYTES_PER_SECOND",
    MEGA_BITS: "MEGA_BITS",
    MEGA_BITS_PER_SECOND: "MEGA_BITS_PER_SECOND",
    MEGA_BYTES: "MEGA_BYTES",
    MEGA_BYTES_PER_SECOND: "MEGA_BYTES_PER_SECOND",
    MICRO_SECONDS: "MICRO_SECONDS",
    MILLI_SECONDS: "MILLI_SECONDS",
    NONE: "NONE",
    PERCENT: "PERCENT",
    SECONDS: "SECONDS",
    TERA_BITS: "TERA_BITS",
    TERA_BITS_PER_SECOND: "TERA_BITS_PER_SECOND",
    TERA_BYTES: "TERA_BYTES",
    TERA_BYTES_PER_SECOND: "TERA_BYTES_PER_SECOND",
};
export const InstanceRoleType = {
    CORE: "CORE",
    MASTER: "MASTER",
    TASK: "TASK",
};
export class InternalServerError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
    }
}
export const AuthMode = {
    IAM: "IAM",
    SSO: "SSO",
};
export const AutoScalingPolicyState = {
    ATTACHED: "ATTACHED",
    ATTACHING: "ATTACHING",
    DETACHED: "DETACHED",
    DETACHING: "DETACHING",
    FAILED: "FAILED",
    PENDING: "PENDING",
};
export const AutoScalingPolicyStateChangeReasonCode = {
    CLEANUP_FAILURE: "CLEANUP_FAILURE",
    PROVISION_FAILURE: "PROVISION_FAILURE",
    USER_REQUEST: "USER_REQUEST",
};
export const StepCancellationOption = {
    SEND_INTERRUPT: "SEND_INTERRUPT",
    TERMINATE_PROCESS: "TERMINATE_PROCESS",
};
export const CancelStepsRequestStatus = {
    FAILED: "FAILED",
    SUBMITTED: "SUBMITTED",
};
export const InstanceCollectionType = {
    INSTANCE_FLEET: "INSTANCE_FLEET",
    INSTANCE_GROUP: "INSTANCE_GROUP",
};
export const PlacementGroupStrategy = {
    CLUSTER: "CLUSTER",
    NONE: "NONE",
    PARTITION: "PARTITION",
    SPREAD: "SPREAD",
};
export const RepoUpgradeOnBoot = {
    NONE: "NONE",
    SECURITY: "SECURITY",
};
export const ScaleDownBehavior = {
    TERMINATE_AT_INSTANCE_HOUR: "TERMINATE_AT_INSTANCE_HOUR",
    TERMINATE_AT_TASK_COMPLETION: "TERMINATE_AT_TASK_COMPLETION",
};
export const ClusterState = {
    BOOTSTRAPPING: "BOOTSTRAPPING",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    TERMINATED: "TERMINATED",
    TERMINATED_WITH_ERRORS: "TERMINATED_WITH_ERRORS",
    TERMINATING: "TERMINATING",
    WAITING: "WAITING",
};
export const ClusterStateChangeReasonCode = {
    ALL_STEPS_COMPLETED: "ALL_STEPS_COMPLETED",
    BOOTSTRAP_FAILURE: "BOOTSTRAP_FAILURE",
    INSTANCE_FAILURE: "INSTANCE_FAILURE",
    INSTANCE_FLEET_TIMEOUT: "INSTANCE_FLEET_TIMEOUT",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    STEP_FAILURE: "STEP_FAILURE",
    USER_REQUEST: "USER_REQUEST",
    VALIDATION_ERROR: "VALIDATION_ERROR",
};
export const ComputeLimitsUnitType = {
    InstanceFleetUnits: "InstanceFleetUnits",
    Instances: "Instances",
    VCPU: "VCPU",
};
export const IdcUserAssignment = {
    OPTIONAL: "OPTIONAL",
    REQUIRED: "REQUIRED",
};
export const IdentityType = {
    GROUP: "GROUP",
    USER: "USER",
};
export var Credentials;
(function (Credentials) {
    Credentials.visit = (value, visitor) => {
        if (value.UsernamePassword !== undefined)
            return visitor.UsernamePassword(value.UsernamePassword);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Credentials || (Credentials = {}));
export const JobFlowExecutionState = {
    BOOTSTRAPPING: "BOOTSTRAPPING",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    RUNNING: "RUNNING",
    SHUTTING_DOWN: "SHUTTING_DOWN",
    STARTING: "STARTING",
    TERMINATED: "TERMINATED",
    WAITING: "WAITING",
};
export const InstanceGroupState = {
    ARRESTED: "ARRESTED",
    BOOTSTRAPPING: "BOOTSTRAPPING",
    ENDED: "ENDED",
    PROVISIONING: "PROVISIONING",
    RECONFIGURING: "RECONFIGURING",
    RESIZING: "RESIZING",
    RUNNING: "RUNNING",
    SHUTTING_DOWN: "SHUTTING_DOWN",
    SUSPENDED: "SUSPENDED",
    TERMINATED: "TERMINATED",
    TERMINATING: "TERMINATING",
};
export const StepExecutionState = {
    CANCELLED: "CANCELLED",
    COMPLETED: "COMPLETED",
    CONTINUE: "CONTINUE",
    FAILED: "FAILED",
    INTERRUPTED: "INTERRUPTED",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
};
export const ExecutionEngineType = {
    EMR: "EMR",
};
export const OutputNotebookFormat = {
    HTML: "HTML",
};
export const NotebookExecutionStatus = {
    FAILED: "FAILED",
    FAILING: "FAILING",
    FINISHED: "FINISHED",
    FINISHING: "FINISHING",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    START_PENDING: "START_PENDING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    STOP_PENDING: "STOP_PENDING",
};
export const StepState = {
    CANCELLED: "CANCELLED",
    CANCEL_PENDING: "CANCEL_PENDING",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    INTERRUPTED: "INTERRUPTED",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
};
export const StepStateChangeReasonCode = {
    NONE: "NONE",
};
export const InstanceFleetState = {
    BOOTSTRAPPING: "BOOTSTRAPPING",
    PROVISIONING: "PROVISIONING",
    RESIZING: "RESIZING",
    RUNNING: "RUNNING",
    SUSPENDED: "SUSPENDED",
    TERMINATED: "TERMINATED",
    TERMINATING: "TERMINATING",
};
export const InstanceFleetStateChangeReasonCode = {
    CLUSTER_TERMINATED: "CLUSTER_TERMINATED",
    INSTANCE_FAILURE: "INSTANCE_FAILURE",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    VALIDATION_ERROR: "VALIDATION_ERROR",
};
export const InstanceGroupType = {
    CORE: "CORE",
    MASTER: "MASTER",
    TASK: "TASK",
};
export const InstanceGroupStateChangeReasonCode = {
    CLUSTER_TERMINATED: "CLUSTER_TERMINATED",
    INSTANCE_FAILURE: "INSTANCE_FAILURE",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    VALIDATION_ERROR: "VALIDATION_ERROR",
};
export const InstanceState = {
    AWAITING_FULFILLMENT: "AWAITING_FULFILLMENT",
    BOOTSTRAPPING: "BOOTSTRAPPING",
    PROVISIONING: "PROVISIONING",
    RUNNING: "RUNNING",
    TERMINATED: "TERMINATED",
};
export const InstanceStateChangeReasonCode = {
    BOOTSTRAP_FAILURE: "BOOTSTRAP_FAILURE",
    CLUSTER_TERMINATED: "CLUSTER_TERMINATED",
    INSTANCE_FAILURE: "INSTANCE_FAILURE",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    VALIDATION_ERROR: "VALIDATION_ERROR",
};
export const ReconfigurationType = {
    MERGE: "MERGE",
    OVERWRITE: "OVERWRITE",
};
export const UsernamePasswordFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CredentialsFilterSensitiveLog = (obj) => {
    if (obj.UsernamePassword !== undefined)
        return { UsernamePassword: SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const GetClusterSessionCredentialsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Credentials && { Credentials: CredentialsFilterSensitiveLog(obj.Credentials) }),
});
