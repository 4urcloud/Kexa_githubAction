import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { EMRServiceException as __BaseException } from "../models/EMRServiceException";
import { InternalServerError, InternalServerException, InvalidRequestException, } from "../models/models_0";
export const se_AddInstanceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("AddInstanceFleet");
    let body;
    body = JSON.stringify(se_AddInstanceFleetInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AddInstanceGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("AddInstanceGroups");
    let body;
    body = JSON.stringify(se_AddInstanceGroupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AddJobFlowStepsCommand = async (input, context) => {
    const headers = sharedHeaders("AddJobFlowSteps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AddTagsCommand = async (input, context) => {
    const headers = sharedHeaders("AddTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CancelStepsCommand = async (input, context) => {
    const headers = sharedHeaders("CancelSteps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateSecurityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSecurityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStudioCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStudio");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStudioSessionMappingCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStudioSessionMapping");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSecurityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSecurityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteStudioCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStudio");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteStudioSessionMappingCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStudioSessionMapping");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeClusterCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCluster");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeJobFlowsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeJobFlows");
    let body;
    body = JSON.stringify(se_DescribeJobFlowsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeNotebookExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeNotebookExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeReleaseLabelCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeReleaseLabel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSecurityConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSecurityConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeStepCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStep");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeStudioCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStudio");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAutoTerminationPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetAutoTerminationPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBlockPublicAccessConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetBlockPublicAccessConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetClusterSessionCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("GetClusterSessionCredentials");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetManagedScalingPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetManagedScalingPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetStudioSessionMappingCommand = async (input, context) => {
    const headers = sharedHeaders("GetStudioSessionMapping");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBootstrapActionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBootstrapActions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListClustersCommand = async (input, context) => {
    const headers = sharedHeaders("ListClusters");
    let body;
    body = JSON.stringify(se_ListClustersInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInstanceFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInstanceFleets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInstanceGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInstanceGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("ListInstances");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListNotebookExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListNotebookExecutions");
    let body;
    body = JSON.stringify(se_ListNotebookExecutionsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListReleaseLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListReleaseLabels");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSecurityConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSecurityConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListStepsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSteps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListStudiosCommand = async (input, context) => {
    const headers = sharedHeaders("ListStudios");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListStudioSessionMappingsCommand = async (input, context) => {
    const headers = sharedHeaders("ListStudioSessionMappings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSupportedInstanceTypesCommand = async (input, context) => {
    const headers = sharedHeaders("ListSupportedInstanceTypes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyClusterCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyCluster");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstanceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyInstanceFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ModifyInstanceGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ModifyInstanceGroups");
    let body;
    body = JSON.stringify(se_ModifyInstanceGroupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutAutoScalingPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutAutoScalingPolicy");
    let body;
    body = JSON.stringify(se_PutAutoScalingPolicyInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutAutoTerminationPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutAutoTerminationPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutBlockPublicAccessConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutBlockPublicAccessConfiguration");
    let body;
    body = JSON.stringify(se_PutBlockPublicAccessConfigurationInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutManagedScalingPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutManagedScalingPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveAutoScalingPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveAutoScalingPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveAutoTerminationPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveAutoTerminationPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveManagedScalingPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveManagedScalingPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveTagsCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RunJobFlowCommand = async (input, context) => {
    const headers = sharedHeaders("RunJobFlow");
    let body;
    body = JSON.stringify(se_RunJobFlowInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetKeepJobFlowAliveWhenNoStepsCommand = async (input, context) => {
    const headers = sharedHeaders("SetKeepJobFlowAliveWhenNoSteps");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetTerminationProtectionCommand = async (input, context) => {
    const headers = sharedHeaders("SetTerminationProtection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetUnhealthyNodeReplacementCommand = async (input, context) => {
    const headers = sharedHeaders("SetUnhealthyNodeReplacement");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetVisibleToAllUsersCommand = async (input, context) => {
    const headers = sharedHeaders("SetVisibleToAllUsers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartNotebookExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartNotebookExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopNotebookExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StopNotebookExecution");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TerminateJobFlowsCommand = async (input, context) => {
    const headers = sharedHeaders("TerminateJobFlows");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateStudioCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateStudio");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateStudioSessionMappingCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateStudioSessionMapping");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AddInstanceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AddInstanceGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AddJobFlowStepsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AddTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CancelStepsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateSecurityConfigurationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateStudioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateStudioSessionMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteStudioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteStudioSessionMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DescribeClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeClusterOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeJobFlowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeJobFlowsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeNotebookExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeNotebookExecutionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeReleaseLabelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSecurityConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeSecurityConfigurationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeStepCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeStepOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeStudioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeStudioOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAutoTerminationPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBlockPublicAccessConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBlockPublicAccessConfigurationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetClusterSessionCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetClusterSessionCredentialsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetManagedScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetStudioSessionMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStudioSessionMappingOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBootstrapActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListClustersOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListInstanceFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListInstanceFleetsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListInstanceGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListInstanceGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListInstancesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListNotebookExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListNotebookExecutionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListReleaseLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSecurityConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSecurityConfigurationsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListStepsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListStepsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListStudiosCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListStudiosOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListStudioSessionMappingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListStudioSessionMappingsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSupportedInstanceTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListSupportedInstanceTypesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifyClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ModifyInstanceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_ModifyInstanceGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_PutAutoScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAutoScalingPolicyOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutAutoTerminationPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutBlockPublicAccessConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutManagedScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RemoveAutoScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RemoveAutoTerminationPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RemoveManagedScalingPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RemoveTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RunJobFlowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetKeepJobFlowAliveWhenNoStepsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_SetTerminationProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_SetUnhealthyNodeReplacementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_SetVisibleToAllUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_StartNotebookExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopNotebookExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_TerminateJobFlowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UpdateStudioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_UpdateStudioSessionMappingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.emr#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.emr#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.emr#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InternalServerErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AddInstanceFleetInput = (input, context) => {
    return take(input, {
        ClusterId: [],
        InstanceFleet: (_) => se_InstanceFleetConfig(_, context),
    });
};
const se_AddInstanceGroupsInput = (input, context) => {
    return take(input, {
        InstanceGroups: (_) => se_InstanceGroupConfigList(_, context),
        JobFlowId: [],
    });
};
const se_AutoScalingPolicy = (input, context) => {
    return take(input, {
        Constraints: _json,
        Rules: (_) => se_ScalingRuleList(_, context),
    });
};
const se_BlockPublicAccessConfiguration = (input, context) => {
    return take(input, {
        BlockPublicSecurityGroupRules: [],
        Classification: [],
        Configurations: (_) => se_ConfigurationList(_, context),
        PermittedPublicSecurityGroupRuleRanges: _json,
        Properties: _json,
    });
};
const se_CloudWatchAlarmDefinition = (input, context) => {
    return take(input, {
        ComparisonOperator: [],
        Dimensions: _json,
        EvaluationPeriods: [],
        MetricName: [],
        Namespace: [],
        Period: [],
        Statistic: [],
        Threshold: __serializeFloat,
        Unit: [],
    });
};
const se_Configuration = (input, context) => {
    return take(input, {
        Classification: [],
        Configurations: (_) => se_ConfigurationList(_, context),
        Properties: _json,
    });
};
const se_ConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Configuration(entry, context);
    });
};
const se_DescribeJobFlowsInput = (input, context) => {
    return take(input, {
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        JobFlowIds: _json,
        JobFlowStates: _json,
    });
};
const se_InstanceFleetConfig = (input, context) => {
    return take(input, {
        InstanceFleetType: [],
        InstanceTypeConfigs: (_) => se_InstanceTypeConfigList(_, context),
        LaunchSpecifications: _json,
        Name: [],
        ResizeSpecifications: _json,
        TargetOnDemandCapacity: [],
        TargetSpotCapacity: [],
    });
};
const se_InstanceFleetConfigList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InstanceFleetConfig(entry, context);
    });
};
const se_InstanceGroupConfig = (input, context) => {
    return take(input, {
        AutoScalingPolicy: (_) => se_AutoScalingPolicy(_, context),
        BidPrice: [],
        Configurations: (_) => se_ConfigurationList(_, context),
        CustomAmiId: [],
        EbsConfiguration: _json,
        InstanceCount: [],
        InstanceRole: [],
        InstanceType: [],
        Market: [],
        Name: [],
    });
};
const se_InstanceGroupConfigList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InstanceGroupConfig(entry, context);
    });
};
const se_InstanceGroupModifyConfig = (input, context) => {
    return take(input, {
        Configurations: (_) => se_ConfigurationList(_, context),
        EC2InstanceIdsToTerminate: _json,
        InstanceCount: [],
        InstanceGroupId: [],
        ReconfigurationType: [],
        ShrinkPolicy: _json,
    });
};
const se_InstanceGroupModifyConfigList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InstanceGroupModifyConfig(entry, context);
    });
};
const se_InstanceTypeConfig = (input, context) => {
    return take(input, {
        BidPrice: [],
        BidPriceAsPercentageOfOnDemandPrice: __serializeFloat,
        Configurations: (_) => se_ConfigurationList(_, context),
        CustomAmiId: [],
        EbsConfiguration: _json,
        InstanceType: [],
        WeightedCapacity: [],
    });
};
const se_InstanceTypeConfigList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InstanceTypeConfig(entry, context);
    });
};
const se_JobFlowInstancesConfig = (input, context) => {
    return take(input, {
        AdditionalMasterSecurityGroups: _json,
        AdditionalSlaveSecurityGroups: _json,
        Ec2KeyName: [],
        Ec2SubnetId: [],
        Ec2SubnetIds: _json,
        EmrManagedMasterSecurityGroup: [],
        EmrManagedSlaveSecurityGroup: [],
        HadoopVersion: [],
        InstanceCount: [],
        InstanceFleets: (_) => se_InstanceFleetConfigList(_, context),
        InstanceGroups: (_) => se_InstanceGroupConfigList(_, context),
        KeepJobFlowAliveWhenNoSteps: [],
        MasterInstanceType: [],
        Placement: _json,
        ServiceAccessSecurityGroup: [],
        SlaveInstanceType: [],
        TerminationProtected: [],
        UnhealthyNodeReplacement: [],
    });
};
const se_ListClustersInput = (input, context) => {
    return take(input, {
        ClusterStates: _json,
        CreatedAfter: (_) => Math.round(_.getTime() / 1000),
        CreatedBefore: (_) => Math.round(_.getTime() / 1000),
        Marker: [],
    });
};
const se_ListNotebookExecutionsInput = (input, context) => {
    return take(input, {
        EditorId: [],
        ExecutionEngineId: [],
        From: (_) => Math.round(_.getTime() / 1000),
        Marker: [],
        Status: [],
        To: (_) => Math.round(_.getTime() / 1000),
    });
};
const se_ModifyInstanceGroupsInput = (input, context) => {
    return take(input, {
        ClusterId: [],
        InstanceGroups: (_) => se_InstanceGroupModifyConfigList(_, context),
    });
};
const se_PutAutoScalingPolicyInput = (input, context) => {
    return take(input, {
        AutoScalingPolicy: (_) => se_AutoScalingPolicy(_, context),
        ClusterId: [],
        InstanceGroupId: [],
    });
};
const se_PutBlockPublicAccessConfigurationInput = (input, context) => {
    return take(input, {
        BlockPublicAccessConfiguration: (_) => se_BlockPublicAccessConfiguration(_, context),
    });
};
const se_RunJobFlowInput = (input, context) => {
    return take(input, {
        AdditionalInfo: [],
        AmiVersion: [],
        Applications: _json,
        AutoScalingRole: [],
        AutoTerminationPolicy: _json,
        BootstrapActions: _json,
        Configurations: (_) => se_ConfigurationList(_, context),
        CustomAmiId: [],
        EbsRootVolumeIops: [],
        EbsRootVolumeSize: [],
        EbsRootVolumeThroughput: [],
        Instances: (_) => se_JobFlowInstancesConfig(_, context),
        JobFlowRole: [],
        KerberosAttributes: _json,
        LogEncryptionKmsKeyId: [],
        LogUri: [],
        ManagedScalingPolicy: _json,
        Name: [],
        NewSupportedProducts: _json,
        OSReleaseLabel: [],
        PlacementGroupConfigs: _json,
        ReleaseLabel: [],
        RepoUpgradeOnBoot: [],
        ScaleDownBehavior: [],
        SecurityConfiguration: [],
        ServiceRole: [],
        StepConcurrencyLevel: [],
        Steps: _json,
        SupportedProducts: _json,
        Tags: _json,
        VisibleToAllUsers: [],
    });
};
const se_ScalingRule = (input, context) => {
    return take(input, {
        Action: _json,
        Description: [],
        Name: [],
        Trigger: (_) => se_ScalingTrigger(_, context),
    });
};
const se_ScalingRuleList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ScalingRule(entry, context);
    });
};
const se_ScalingTrigger = (input, context) => {
    return take(input, {
        CloudWatchAlarmDefinition: (_) => se_CloudWatchAlarmDefinition(_, context),
    });
};
const de_AutoScalingPolicyDescription = (output, context) => {
    return take(output, {
        Constraints: _json,
        Rules: (_) => de_ScalingRuleList(_, context),
        Status: _json,
    });
};
const de_BlockPublicAccessConfiguration = (output, context) => {
    return take(output, {
        BlockPublicSecurityGroupRules: __expectBoolean,
        Classification: __expectString,
        Configurations: (_) => de_ConfigurationList(_, context),
        PermittedPublicSecurityGroupRuleRanges: _json,
        Properties: _json,
    });
};
const de_BlockPublicAccessConfigurationMetadata = (output, context) => {
    return take(output, {
        CreatedByArn: __expectString,
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_CloudWatchAlarmDefinition = (output, context) => {
    return take(output, {
        ComparisonOperator: __expectString,
        Dimensions: _json,
        EvaluationPeriods: __expectInt32,
        MetricName: __expectString,
        Namespace: __expectString,
        Period: __expectInt32,
        Statistic: __expectString,
        Threshold: __limitedParseDouble,
        Unit: __expectString,
    });
};
const de_Cluster = (output, context) => {
    return take(output, {
        Applications: _json,
        AutoScalingRole: __expectString,
        AutoTerminate: __expectBoolean,
        ClusterArn: __expectString,
        Configurations: (_) => de_ConfigurationList(_, context),
        CustomAmiId: __expectString,
        EbsRootVolumeIops: __expectInt32,
        EbsRootVolumeSize: __expectInt32,
        EbsRootVolumeThroughput: __expectInt32,
        Ec2InstanceAttributes: _json,
        Id: __expectString,
        InstanceCollectionType: __expectString,
        KerberosAttributes: _json,
        LogEncryptionKmsKeyId: __expectString,
        LogUri: __expectString,
        MasterPublicDnsName: __expectString,
        Name: __expectString,
        NormalizedInstanceHours: __expectInt32,
        OSReleaseLabel: __expectString,
        OutpostArn: __expectString,
        PlacementGroups: _json,
        ReleaseLabel: __expectString,
        RepoUpgradeOnBoot: __expectString,
        RequestedAmiVersion: __expectString,
        RunningAmiVersion: __expectString,
        ScaleDownBehavior: __expectString,
        SecurityConfiguration: __expectString,
        ServiceRole: __expectString,
        Status: (_) => de_ClusterStatus(_, context),
        StepConcurrencyLevel: __expectInt32,
        Tags: _json,
        TerminationProtected: __expectBoolean,
        UnhealthyNodeReplacement: __expectBoolean,
        VisibleToAllUsers: __expectBoolean,
    });
};
const de_ClusterStatus = (output, context) => {
    return take(output, {
        ErrorDetails: _json,
        State: __expectString,
        StateChangeReason: _json,
        Timeline: (_) => de_ClusterTimeline(_, context),
    });
};
const de_ClusterSummary = (output, context) => {
    return take(output, {
        ClusterArn: __expectString,
        Id: __expectString,
        Name: __expectString,
        NormalizedInstanceHours: __expectInt32,
        OutpostArn: __expectString,
        Status: (_) => de_ClusterStatus(_, context),
    });
};
const de_ClusterSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClusterSummary(entry, context);
    });
    return retVal;
};
const de_ClusterTimeline = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReadyDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Configuration = (output, context) => {
    return take(output, {
        Classification: __expectString,
        Configurations: (_) => de_ConfigurationList(_, context),
        Properties: _json,
    });
};
const de_ConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Configuration(entry, context);
    });
    return retVal;
};
const de_CreateSecurityConfigurationOutput = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_DescribeClusterOutput = (output, context) => {
    return take(output, {
        Cluster: (_) => de_Cluster(_, context),
    });
};
const de_DescribeJobFlowsOutput = (output, context) => {
    return take(output, {
        JobFlows: (_) => de_JobFlowDetailList(_, context),
    });
};
const de_DescribeNotebookExecutionOutput = (output, context) => {
    return take(output, {
        NotebookExecution: (_) => de_NotebookExecution(_, context),
    });
};
const de_DescribeSecurityConfigurationOutput = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        SecurityConfiguration: __expectString,
    });
};
const de_DescribeStepOutput = (output, context) => {
    return take(output, {
        Step: (_) => de_Step(_, context),
    });
};
const de_DescribeStudioOutput = (output, context) => {
    return take(output, {
        Studio: (_) => de_Studio(_, context),
    });
};
const de_GetBlockPublicAccessConfigurationOutput = (output, context) => {
    return take(output, {
        BlockPublicAccessConfiguration: (_) => de_BlockPublicAccessConfiguration(_, context),
        BlockPublicAccessConfigurationMetadata: (_) => de_BlockPublicAccessConfigurationMetadata(_, context),
    });
};
const de_GetClusterSessionCredentialsOutput = (output, context) => {
    return take(output, {
        Credentials: (_) => _json(__expectUnion(_)),
        ExpiresAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_GetStudioSessionMappingOutput = (output, context) => {
    return take(output, {
        SessionMapping: (_) => de_SessionMappingDetail(_, context),
    });
};
const de_Instance = (output, context) => {
    return take(output, {
        EbsVolumes: _json,
        Ec2InstanceId: __expectString,
        Id: __expectString,
        InstanceFleetId: __expectString,
        InstanceGroupId: __expectString,
        InstanceType: __expectString,
        Market: __expectString,
        PrivateDnsName: __expectString,
        PrivateIpAddress: __expectString,
        PublicDnsName: __expectString,
        PublicIpAddress: __expectString,
        Status: (_) => de_InstanceStatus(_, context),
    });
};
const de_InstanceFleet = (output, context) => {
    return take(output, {
        Id: __expectString,
        InstanceFleetType: __expectString,
        InstanceTypeSpecifications: (_) => de_InstanceTypeSpecificationList(_, context),
        LaunchSpecifications: _json,
        Name: __expectString,
        ProvisionedOnDemandCapacity: __expectInt32,
        ProvisionedSpotCapacity: __expectInt32,
        ResizeSpecifications: _json,
        Status: (_) => de_InstanceFleetStatus(_, context),
        TargetOnDemandCapacity: __expectInt32,
        TargetSpotCapacity: __expectInt32,
    });
};
const de_InstanceFleetList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceFleet(entry, context);
    });
    return retVal;
};
const de_InstanceFleetStatus = (output, context) => {
    return take(output, {
        State: __expectString,
        StateChangeReason: _json,
        Timeline: (_) => de_InstanceFleetTimeline(_, context),
    });
};
const de_InstanceFleetTimeline = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReadyDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_InstanceGroup = (output, context) => {
    return take(output, {
        AutoScalingPolicy: (_) => de_AutoScalingPolicyDescription(_, context),
        BidPrice: __expectString,
        Configurations: (_) => de_ConfigurationList(_, context),
        ConfigurationsVersion: __expectLong,
        CustomAmiId: __expectString,
        EbsBlockDevices: _json,
        EbsOptimized: __expectBoolean,
        Id: __expectString,
        InstanceGroupType: __expectString,
        InstanceType: __expectString,
        LastSuccessfullyAppliedConfigurations: (_) => de_ConfigurationList(_, context),
        LastSuccessfullyAppliedConfigurationsVersion: __expectLong,
        Market: __expectString,
        Name: __expectString,
        RequestedInstanceCount: __expectInt32,
        RunningInstanceCount: __expectInt32,
        ShrinkPolicy: _json,
        Status: (_) => de_InstanceGroupStatus(_, context),
    });
};
const de_InstanceGroupDetail = (output, context) => {
    return take(output, {
        BidPrice: __expectString,
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CustomAmiId: __expectString,
        EndDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InstanceGroupId: __expectString,
        InstanceRequestCount: __expectInt32,
        InstanceRole: __expectString,
        InstanceRunningCount: __expectInt32,
        InstanceType: __expectString,
        LastStateChangeReason: __expectString,
        Market: __expectString,
        Name: __expectString,
        ReadyDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
    });
};
const de_InstanceGroupDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceGroupDetail(entry, context);
    });
    return retVal;
};
const de_InstanceGroupList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceGroup(entry, context);
    });
    return retVal;
};
const de_InstanceGroupStatus = (output, context) => {
    return take(output, {
        State: __expectString,
        StateChangeReason: _json,
        Timeline: (_) => de_InstanceGroupTimeline(_, context),
    });
};
const de_InstanceGroupTimeline = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReadyDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_InstanceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry, context);
    });
    return retVal;
};
const de_InstanceStatus = (output, context) => {
    return take(output, {
        State: __expectString,
        StateChangeReason: _json,
        Timeline: (_) => de_InstanceTimeline(_, context),
    });
};
const de_InstanceTimeline = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReadyDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_InstanceTypeSpecification = (output, context) => {
    return take(output, {
        BidPrice: __expectString,
        BidPriceAsPercentageOfOnDemandPrice: __limitedParseDouble,
        Configurations: (_) => de_ConfigurationList(_, context),
        CustomAmiId: __expectString,
        EbsBlockDevices: _json,
        EbsOptimized: __expectBoolean,
        InstanceType: __expectString,
        WeightedCapacity: __expectInt32,
    });
};
const de_InstanceTypeSpecificationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceTypeSpecification(entry, context);
    });
    return retVal;
};
const de_JobFlowDetail = (output, context) => {
    return take(output, {
        AmiVersion: __expectString,
        AutoScalingRole: __expectString,
        BootstrapActions: _json,
        ExecutionStatusDetail: (_) => de_JobFlowExecutionStatusDetail(_, context),
        Instances: (_) => de_JobFlowInstancesDetail(_, context),
        JobFlowId: __expectString,
        JobFlowRole: __expectString,
        LogEncryptionKmsKeyId: __expectString,
        LogUri: __expectString,
        Name: __expectString,
        ScaleDownBehavior: __expectString,
        ServiceRole: __expectString,
        Steps: (_) => de_StepDetailList(_, context),
        SupportedProducts: _json,
        VisibleToAllUsers: __expectBoolean,
    });
};
const de_JobFlowDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobFlowDetail(entry, context);
    });
    return retVal;
};
const de_JobFlowExecutionStatusDetail = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastStateChangeReason: __expectString,
        ReadyDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
    });
};
const de_JobFlowInstancesDetail = (output, context) => {
    return take(output, {
        Ec2KeyName: __expectString,
        Ec2SubnetId: __expectString,
        HadoopVersion: __expectString,
        InstanceCount: __expectInt32,
        InstanceGroups: (_) => de_InstanceGroupDetailList(_, context),
        KeepJobFlowAliveWhenNoSteps: __expectBoolean,
        MasterInstanceId: __expectString,
        MasterInstanceType: __expectString,
        MasterPublicDnsName: __expectString,
        NormalizedInstanceHours: __expectInt32,
        Placement: _json,
        SlaveInstanceType: __expectString,
        TerminationProtected: __expectBoolean,
        UnhealthyNodeReplacement: __expectBoolean,
    });
};
const de_ListClustersOutput = (output, context) => {
    return take(output, {
        Clusters: (_) => de_ClusterSummaryList(_, context),
        Marker: __expectString,
    });
};
const de_ListInstanceFleetsOutput = (output, context) => {
    return take(output, {
        InstanceFleets: (_) => de_InstanceFleetList(_, context),
        Marker: __expectString,
    });
};
const de_ListInstanceGroupsOutput = (output, context) => {
    return take(output, {
        InstanceGroups: (_) => de_InstanceGroupList(_, context),
        Marker: __expectString,
    });
};
const de_ListInstancesOutput = (output, context) => {
    return take(output, {
        Instances: (_) => de_InstanceList(_, context),
        Marker: __expectString,
    });
};
const de_ListNotebookExecutionsOutput = (output, context) => {
    return take(output, {
        Marker: __expectString,
        NotebookExecutions: (_) => de_NotebookExecutionSummaryList(_, context),
    });
};
const de_ListSecurityConfigurationsOutput = (output, context) => {
    return take(output, {
        Marker: __expectString,
        SecurityConfigurations: (_) => de_SecurityConfigurationList(_, context),
    });
};
const de_ListStepsOutput = (output, context) => {
    return take(output, {
        Marker: __expectString,
        Steps: (_) => de_StepSummaryList(_, context),
    });
};
const de_ListStudioSessionMappingsOutput = (output, context) => {
    return take(output, {
        Marker: __expectString,
        SessionMappings: (_) => de_SessionMappingSummaryList(_, context),
    });
};
const de_ListStudiosOutput = (output, context) => {
    return take(output, {
        Marker: __expectString,
        Studios: (_) => de_StudioSummaryList(_, context),
    });
};
const de_ListSupportedInstanceTypesOutput = (output, context) => {
    return take(output, {
        Marker: __expectString,
        SupportedInstanceTypes: (_) => de_SupportedInstanceTypesList(_, context),
    });
};
const de_NotebookExecution = (output, context) => {
    return take(output, {
        Arn: __expectString,
        EditorId: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EnvironmentVariables: _json,
        ExecutionEngine: _json,
        LastStateChangeReason: __expectString,
        NotebookExecutionId: __expectString,
        NotebookExecutionName: __expectString,
        NotebookInstanceSecurityGroupId: __expectString,
        NotebookParams: __expectString,
        NotebookS3Location: _json,
        OutputNotebookFormat: __expectString,
        OutputNotebookS3Location: _json,
        OutputNotebookURI: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        Tags: _json,
    });
};
const de_NotebookExecutionSummary = (output, context) => {
    return take(output, {
        EditorId: __expectString,
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ExecutionEngineId: __expectString,
        NotebookExecutionId: __expectString,
        NotebookExecutionName: __expectString,
        NotebookS3Location: _json,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_NotebookExecutionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NotebookExecutionSummary(entry, context);
    });
    return retVal;
};
const de_PutAutoScalingPolicyOutput = (output, context) => {
    return take(output, {
        AutoScalingPolicy: (_) => de_AutoScalingPolicyDescription(_, context),
        ClusterArn: __expectString,
        ClusterId: __expectString,
        InstanceGroupId: __expectString,
    });
};
const de_ScalingRule = (output, context) => {
    return take(output, {
        Action: _json,
        Description: __expectString,
        Name: __expectString,
        Trigger: (_) => de_ScalingTrigger(_, context),
    });
};
const de_ScalingRuleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalingRule(entry, context);
    });
    return retVal;
};
const de_ScalingTrigger = (output, context) => {
    return take(output, {
        CloudWatchAlarmDefinition: (_) => de_CloudWatchAlarmDefinition(_, context),
    });
};
const de_SecurityConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityConfigurationSummary(entry, context);
    });
    return retVal;
};
const de_SecurityConfigurationSummary = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_SessionMappingDetail = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IdentityId: __expectString,
        IdentityName: __expectString,
        IdentityType: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SessionPolicyArn: __expectString,
        StudioId: __expectString,
    });
};
const de_SessionMappingSummary = (output, context) => {
    return take(output, {
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IdentityId: __expectString,
        IdentityName: __expectString,
        IdentityType: __expectString,
        SessionPolicyArn: __expectString,
        StudioId: __expectString,
    });
};
const de_SessionMappingSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SessionMappingSummary(entry, context);
    });
    return retVal;
};
const de_Step = (output, context) => {
    return take(output, {
        ActionOnFailure: __expectString,
        Config: _json,
        ExecutionRoleArn: __expectString,
        Id: __expectString,
        Name: __expectString,
        Status: (_) => de_StepStatus(_, context),
    });
};
const de_StepDetail = (output, context) => {
    return take(output, {
        ExecutionStatusDetail: (_) => de_StepExecutionStatusDetail(_, context),
        StepConfig: _json,
    });
};
const de_StepDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StepDetail(entry, context);
    });
    return retVal;
};
const de_StepExecutionStatusDetail = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastStateChangeReason: __expectString,
        StartDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        State: __expectString,
    });
};
const de_StepStatus = (output, context) => {
    return take(output, {
        FailureDetails: _json,
        State: __expectString,
        StateChangeReason: _json,
        Timeline: (_) => de_StepTimeline(_, context),
    });
};
const de_StepSummary = (output, context) => {
    return take(output, {
        ActionOnFailure: __expectString,
        Config: _json,
        Id: __expectString,
        Name: __expectString,
        Status: (_) => de_StepStatus(_, context),
    });
};
const de_StepSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StepSummary(entry, context);
    });
    return retVal;
};
const de_StepTimeline = (output, context) => {
    return take(output, {
        CreationDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Studio = (output, context) => {
    return take(output, {
        AuthMode: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultS3Location: __expectString,
        Description: __expectString,
        EncryptionKeyArn: __expectString,
        EngineSecurityGroupId: __expectString,
        IdcInstanceArn: __expectString,
        IdcUserAssignment: __expectString,
        IdpAuthUrl: __expectString,
        IdpRelayStateParameterName: __expectString,
        Name: __expectString,
        ServiceRole: __expectString,
        StudioArn: __expectString,
        StudioId: __expectString,
        SubnetIds: _json,
        Tags: _json,
        TrustedIdentityPropagationEnabled: __expectBoolean,
        Url: __expectString,
        UserRole: __expectString,
        VpcId: __expectString,
        WorkspaceSecurityGroupId: __expectString,
    });
};
const de_StudioSummary = (output, context) => {
    return take(output, {
        AuthMode: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Name: __expectString,
        StudioId: __expectString,
        Url: __expectString,
        VpcId: __expectString,
    });
};
const de_StudioSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StudioSummary(entry, context);
    });
    return retVal;
};
const de_SupportedInstanceType = (output, context) => {
    return take(output, {
        Architecture: __expectString,
        EbsOptimizedAvailable: __expectBoolean,
        EbsOptimizedByDefault: __expectBoolean,
        EbsStorageOnly: __expectBoolean,
        InstanceFamilyId: __expectString,
        Is64BitsOnly: __expectBoolean,
        MemoryGB: __limitedParseFloat32,
        NumberOfDisks: __expectInt32,
        StorageGB: __expectInt32,
        Type: __expectString,
        VCPU: __expectInt32,
    });
};
const de_SupportedInstanceTypesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SupportedInstanceType(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `ElasticMapReduce.${operation}`,
    };
}
