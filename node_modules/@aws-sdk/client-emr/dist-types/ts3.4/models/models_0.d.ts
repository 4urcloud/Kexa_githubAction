import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { EMRServiceException as __BaseException } from "./EMRServiceException";
export declare const ActionOnFailure: {
  readonly CANCEL_AND_WAIT: "CANCEL_AND_WAIT";
  readonly CONTINUE: "CONTINUE";
  readonly TERMINATE_CLUSTER: "TERMINATE_CLUSTER";
  readonly TERMINATE_JOB_FLOW: "TERMINATE_JOB_FLOW";
};
export type ActionOnFailure =
  (typeof ActionOnFailure)[keyof typeof ActionOnFailure];
export declare const InstanceFleetType: {
  readonly CORE: "CORE";
  readonly MASTER: "MASTER";
  readonly TASK: "TASK";
};
export type InstanceFleetType =
  (typeof InstanceFleetType)[keyof typeof InstanceFleetType];
export interface VolumeSpecification {
  VolumeType: string | undefined;
  Iops?: number;
  SizeInGB: number | undefined;
  Throughput?: number;
}
export interface EbsBlockDeviceConfig {
  VolumeSpecification: VolumeSpecification | undefined;
  VolumesPerInstance?: number;
}
export interface EbsConfiguration {
  EbsBlockDeviceConfigs?: EbsBlockDeviceConfig[];
  EbsOptimized?: boolean;
}
export declare const OnDemandProvisioningAllocationStrategy: {
  readonly LOWEST_PRICE: "lowest-price";
};
export type OnDemandProvisioningAllocationStrategy =
  (typeof OnDemandProvisioningAllocationStrategy)[keyof typeof OnDemandProvisioningAllocationStrategy];
export declare const OnDemandCapacityReservationPreference: {
  readonly NONE: "none";
  readonly OPEN: "open";
};
export type OnDemandCapacityReservationPreference =
  (typeof OnDemandCapacityReservationPreference)[keyof typeof OnDemandCapacityReservationPreference];
export declare const OnDemandCapacityReservationUsageStrategy: {
  readonly USE_CAPACITY_RESERVATIONS_FIRST: "use-capacity-reservations-first";
};
export type OnDemandCapacityReservationUsageStrategy =
  (typeof OnDemandCapacityReservationUsageStrategy)[keyof typeof OnDemandCapacityReservationUsageStrategy];
export interface OnDemandCapacityReservationOptions {
  UsageStrategy?: OnDemandCapacityReservationUsageStrategy;
  CapacityReservationPreference?: OnDemandCapacityReservationPreference;
  CapacityReservationResourceGroupArn?: string;
}
export interface OnDemandProvisioningSpecification {
  AllocationStrategy: OnDemandProvisioningAllocationStrategy | undefined;
  CapacityReservationOptions?: OnDemandCapacityReservationOptions;
}
export declare const SpotProvisioningAllocationStrategy: {
  readonly CAPACITY_OPTIMIZED: "capacity-optimized";
  readonly DIVERSIFIED: "diversified";
  readonly LOWEST_PRICE: "lowest-price";
  readonly PRICE_CAPACITY_OPTIMIZED: "price-capacity-optimized";
};
export type SpotProvisioningAllocationStrategy =
  (typeof SpotProvisioningAllocationStrategy)[keyof typeof SpotProvisioningAllocationStrategy];
export declare const SpotProvisioningTimeoutAction: {
  readonly SWITCH_TO_ON_DEMAND: "SWITCH_TO_ON_DEMAND";
  readonly TERMINATE_CLUSTER: "TERMINATE_CLUSTER";
};
export type SpotProvisioningTimeoutAction =
  (typeof SpotProvisioningTimeoutAction)[keyof typeof SpotProvisioningTimeoutAction];
export interface SpotProvisioningSpecification {
  TimeoutDurationMinutes: number | undefined;
  TimeoutAction: SpotProvisioningTimeoutAction | undefined;
  BlockDurationMinutes?: number;
  AllocationStrategy?: SpotProvisioningAllocationStrategy;
}
export interface InstanceFleetProvisioningSpecifications {
  SpotSpecification?: SpotProvisioningSpecification;
  OnDemandSpecification?: OnDemandProvisioningSpecification;
}
export interface OnDemandResizingSpecification {
  TimeoutDurationMinutes: number | undefined;
}
export interface SpotResizingSpecification {
  TimeoutDurationMinutes: number | undefined;
}
export interface InstanceFleetResizingSpecifications {
  SpotResizeSpecification?: SpotResizingSpecification;
  OnDemandResizeSpecification?: OnDemandResizingSpecification;
}
export interface AddInstanceFleetOutput {
  ClusterId?: string;
  InstanceFleetId?: string;
  ClusterArn?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  ErrorCode?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export interface ScalingConstraints {
  MinCapacity: number | undefined;
  MaxCapacity: number | undefined;
}
export declare const MarketType: {
  readonly ON_DEMAND: "ON_DEMAND";
  readonly SPOT: "SPOT";
};
export type MarketType = (typeof MarketType)[keyof typeof MarketType];
export declare const AdjustmentType: {
  readonly CHANGE_IN_CAPACITY: "CHANGE_IN_CAPACITY";
  readonly EXACT_CAPACITY: "EXACT_CAPACITY";
  readonly PERCENT_CHANGE_IN_CAPACITY: "PERCENT_CHANGE_IN_CAPACITY";
};
export type AdjustmentType =
  (typeof AdjustmentType)[keyof typeof AdjustmentType];
export interface SimpleScalingPolicyConfiguration {
  AdjustmentType?: AdjustmentType;
  ScalingAdjustment: number | undefined;
  CoolDown?: number;
}
export interface ScalingAction {
  Market?: MarketType;
  SimpleScalingPolicyConfiguration:
    | SimpleScalingPolicyConfiguration
    | undefined;
}
export declare const ComparisonOperator: {
  readonly GREATER_THAN: "GREATER_THAN";
  readonly GREATER_THAN_OR_EQUAL: "GREATER_THAN_OR_EQUAL";
  readonly LESS_THAN: "LESS_THAN";
  readonly LESS_THAN_OR_EQUAL: "LESS_THAN_OR_EQUAL";
};
export type ComparisonOperator =
  (typeof ComparisonOperator)[keyof typeof ComparisonOperator];
export interface MetricDimension {
  Key?: string;
  Value?: string;
}
export declare const Statistic: {
  readonly AVERAGE: "AVERAGE";
  readonly MAXIMUM: "MAXIMUM";
  readonly MINIMUM: "MINIMUM";
  readonly SAMPLE_COUNT: "SAMPLE_COUNT";
  readonly SUM: "SUM";
};
export type Statistic = (typeof Statistic)[keyof typeof Statistic];
export declare const Unit: {
  readonly BITS: "BITS";
  readonly BITS_PER_SECOND: "BITS_PER_SECOND";
  readonly BYTES: "BYTES";
  readonly BYTES_PER_SECOND: "BYTES_PER_SECOND";
  readonly COUNT: "COUNT";
  readonly COUNT_PER_SECOND: "COUNT_PER_SECOND";
  readonly GIGA_BITS: "GIGA_BITS";
  readonly GIGA_BITS_PER_SECOND: "GIGA_BITS_PER_SECOND";
  readonly GIGA_BYTES: "GIGA_BYTES";
  readonly GIGA_BYTES_PER_SECOND: "GIGA_BYTES_PER_SECOND";
  readonly KILO_BITS: "KILO_BITS";
  readonly KILO_BITS_PER_SECOND: "KILO_BITS_PER_SECOND";
  readonly KILO_BYTES: "KILO_BYTES";
  readonly KILO_BYTES_PER_SECOND: "KILO_BYTES_PER_SECOND";
  readonly MEGA_BITS: "MEGA_BITS";
  readonly MEGA_BITS_PER_SECOND: "MEGA_BITS_PER_SECOND";
  readonly MEGA_BYTES: "MEGA_BYTES";
  readonly MEGA_BYTES_PER_SECOND: "MEGA_BYTES_PER_SECOND";
  readonly MICRO_SECONDS: "MICRO_SECONDS";
  readonly MILLI_SECONDS: "MILLI_SECONDS";
  readonly NONE: "NONE";
  readonly PERCENT: "PERCENT";
  readonly SECONDS: "SECONDS";
  readonly TERA_BITS: "TERA_BITS";
  readonly TERA_BITS_PER_SECOND: "TERA_BITS_PER_SECOND";
  readonly TERA_BYTES: "TERA_BYTES";
  readonly TERA_BYTES_PER_SECOND: "TERA_BYTES_PER_SECOND";
};
export type Unit = (typeof Unit)[keyof typeof Unit];
export interface CloudWatchAlarmDefinition {
  ComparisonOperator: ComparisonOperator | undefined;
  EvaluationPeriods?: number;
  MetricName: string | undefined;
  Namespace?: string;
  Period: number | undefined;
  Statistic?: Statistic;
  Threshold: number | undefined;
  Unit?: Unit;
  Dimensions?: MetricDimension[];
}
export interface ScalingTrigger {
  CloudWatchAlarmDefinition: CloudWatchAlarmDefinition | undefined;
}
export interface ScalingRule {
  Name: string | undefined;
  Description?: string;
  Action: ScalingAction | undefined;
  Trigger: ScalingTrigger | undefined;
}
export interface AutoScalingPolicy {
  Constraints: ScalingConstraints | undefined;
  Rules: ScalingRule[] | undefined;
}
export declare const InstanceRoleType: {
  readonly CORE: "CORE";
  readonly MASTER: "MASTER";
  readonly TASK: "TASK";
};
export type InstanceRoleType =
  (typeof InstanceRoleType)[keyof typeof InstanceRoleType];
export interface AddInstanceGroupsOutput {
  JobFlowId?: string;
  InstanceGroupIds?: string[];
  ClusterArn?: string;
}
export declare class InternalServerError extends __BaseException {
  readonly name: "InternalServerError";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerError, __BaseException>
  );
}
export interface KeyValue {
  Key?: string;
  Value?: string;
}
export interface HadoopJarStepConfig {
  Properties?: KeyValue[];
  Jar: string | undefined;
  MainClass?: string;
  Args?: string[];
}
export interface StepConfig {
  Name: string | undefined;
  ActionOnFailure?: ActionOnFailure;
  HadoopJarStep: HadoopJarStepConfig | undefined;
}
export interface AddJobFlowStepsInput {
  JobFlowId: string | undefined;
  Steps: StepConfig[] | undefined;
  ExecutionRoleArn?: string;
}
export interface AddJobFlowStepsOutput {
  StepIds?: string[];
}
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface AddTagsInput {
  ResourceId: string | undefined;
  Tags: Tag[] | undefined;
}
export interface AddTagsOutput {}
export interface Application {
  Name?: string;
  Version?: string;
  Args?: string[];
  AdditionalInfo?: Record<string, string>;
}
export declare const AuthMode: {
  readonly IAM: "IAM";
  readonly SSO: "SSO";
};
export type AuthMode = (typeof AuthMode)[keyof typeof AuthMode];
export declare const AutoScalingPolicyState: {
  readonly ATTACHED: "ATTACHED";
  readonly ATTACHING: "ATTACHING";
  readonly DETACHED: "DETACHED";
  readonly DETACHING: "DETACHING";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
};
export type AutoScalingPolicyState =
  (typeof AutoScalingPolicyState)[keyof typeof AutoScalingPolicyState];
export declare const AutoScalingPolicyStateChangeReasonCode: {
  readonly CLEANUP_FAILURE: "CLEANUP_FAILURE";
  readonly PROVISION_FAILURE: "PROVISION_FAILURE";
  readonly USER_REQUEST: "USER_REQUEST";
};
export type AutoScalingPolicyStateChangeReasonCode =
  (typeof AutoScalingPolicyStateChangeReasonCode)[keyof typeof AutoScalingPolicyStateChangeReasonCode];
export interface AutoScalingPolicyStateChangeReason {
  Code?: AutoScalingPolicyStateChangeReasonCode;
  Message?: string;
}
export interface AutoScalingPolicyStatus {
  State?: AutoScalingPolicyState;
  StateChangeReason?: AutoScalingPolicyStateChangeReason;
}
export interface AutoScalingPolicyDescription {
  Status?: AutoScalingPolicyStatus;
  Constraints?: ScalingConstraints;
  Rules?: ScalingRule[];
}
export interface AutoTerminationPolicy {
  IdleTimeout?: number;
}
export interface PortRange {
  MinRange: number | undefined;
  MaxRange?: number;
}
export interface BlockPublicAccessConfigurationMetadata {
  CreationDateTime: Date | undefined;
  CreatedByArn: string | undefined;
}
export interface ScriptBootstrapActionConfig {
  Path: string | undefined;
  Args?: string[];
}
export interface BootstrapActionConfig {
  Name: string | undefined;
  ScriptBootstrapAction: ScriptBootstrapActionConfig | undefined;
}
export interface BootstrapActionDetail {
  BootstrapActionConfig?: BootstrapActionConfig;
}
export declare const StepCancellationOption: {
  readonly SEND_INTERRUPT: "SEND_INTERRUPT";
  readonly TERMINATE_PROCESS: "TERMINATE_PROCESS";
};
export type StepCancellationOption =
  (typeof StepCancellationOption)[keyof typeof StepCancellationOption];
export interface CancelStepsInput {
  ClusterId: string | undefined;
  StepIds: string[] | undefined;
  StepCancellationOption?: StepCancellationOption;
}
export declare const CancelStepsRequestStatus: {
  readonly FAILED: "FAILED";
  readonly SUBMITTED: "SUBMITTED";
};
export type CancelStepsRequestStatus =
  (typeof CancelStepsRequestStatus)[keyof typeof CancelStepsRequestStatus];
export interface CancelStepsInfo {
  StepId?: string;
  Status?: CancelStepsRequestStatus;
  Reason?: string;
}
export interface CancelStepsOutput {
  CancelStepsInfoList?: CancelStepsInfo[];
}
export interface Ec2InstanceAttributes {
  Ec2KeyName?: string;
  Ec2SubnetId?: string;
  RequestedEc2SubnetIds?: string[];
  Ec2AvailabilityZone?: string;
  RequestedEc2AvailabilityZones?: string[];
  IamInstanceProfile?: string;
  EmrManagedMasterSecurityGroup?: string;
  EmrManagedSlaveSecurityGroup?: string;
  ServiceAccessSecurityGroup?: string;
  AdditionalMasterSecurityGroups?: string[];
  AdditionalSlaveSecurityGroups?: string[];
}
export declare const InstanceCollectionType: {
  readonly INSTANCE_FLEET: "INSTANCE_FLEET";
  readonly INSTANCE_GROUP: "INSTANCE_GROUP";
};
export type InstanceCollectionType =
  (typeof InstanceCollectionType)[keyof typeof InstanceCollectionType];
export interface KerberosAttributes {
  Realm: string | undefined;
  KdcAdminPassword: string | undefined;
  CrossRealmTrustPrincipalPassword?: string;
  ADDomainJoinUser?: string;
  ADDomainJoinPassword?: string;
}
export declare const PlacementGroupStrategy: {
  readonly CLUSTER: "CLUSTER";
  readonly NONE: "NONE";
  readonly PARTITION: "PARTITION";
  readonly SPREAD: "SPREAD";
};
export type PlacementGroupStrategy =
  (typeof PlacementGroupStrategy)[keyof typeof PlacementGroupStrategy];
export interface PlacementGroupConfig {
  InstanceRole: InstanceRoleType | undefined;
  PlacementStrategy?: PlacementGroupStrategy;
}
export declare const RepoUpgradeOnBoot: {
  readonly NONE: "NONE";
  readonly SECURITY: "SECURITY";
};
export type RepoUpgradeOnBoot =
  (typeof RepoUpgradeOnBoot)[keyof typeof RepoUpgradeOnBoot];
export declare const ScaleDownBehavior: {
  readonly TERMINATE_AT_INSTANCE_HOUR: "TERMINATE_AT_INSTANCE_HOUR";
  readonly TERMINATE_AT_TASK_COMPLETION: "TERMINATE_AT_TASK_COMPLETION";
};
export type ScaleDownBehavior =
  (typeof ScaleDownBehavior)[keyof typeof ScaleDownBehavior];
export interface ErrorDetail {
  ErrorCode?: string;
  ErrorData?: Record<string, string>[];
  ErrorMessage?: string;
}
export declare const ClusterState: {
  readonly BOOTSTRAPPING: "BOOTSTRAPPING";
  readonly RUNNING: "RUNNING";
  readonly STARTING: "STARTING";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATED_WITH_ERRORS: "TERMINATED_WITH_ERRORS";
  readonly TERMINATING: "TERMINATING";
  readonly WAITING: "WAITING";
};
export type ClusterState = (typeof ClusterState)[keyof typeof ClusterState];
export declare const ClusterStateChangeReasonCode: {
  readonly ALL_STEPS_COMPLETED: "ALL_STEPS_COMPLETED";
  readonly BOOTSTRAP_FAILURE: "BOOTSTRAP_FAILURE";
  readonly INSTANCE_FAILURE: "INSTANCE_FAILURE";
  readonly INSTANCE_FLEET_TIMEOUT: "INSTANCE_FLEET_TIMEOUT";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly STEP_FAILURE: "STEP_FAILURE";
  readonly USER_REQUEST: "USER_REQUEST";
  readonly VALIDATION_ERROR: "VALIDATION_ERROR";
};
export type ClusterStateChangeReasonCode =
  (typeof ClusterStateChangeReasonCode)[keyof typeof ClusterStateChangeReasonCode];
export interface ClusterStateChangeReason {
  Code?: ClusterStateChangeReasonCode;
  Message?: string;
}
export interface ClusterTimeline {
  CreationDateTime?: Date;
  ReadyDateTime?: Date;
  EndDateTime?: Date;
}
export interface ClusterStatus {
  State?: ClusterState;
  StateChangeReason?: ClusterStateChangeReason;
  Timeline?: ClusterTimeline;
  ErrorDetails?: ErrorDetail[];
}
export interface ClusterSummary {
  Id?: string;
  Name?: string;
  Status?: ClusterStatus;
  NormalizedInstanceHours?: number;
  ClusterArn?: string;
  OutpostArn?: string;
}
export interface Command {
  Name?: string;
  ScriptPath?: string;
  Args?: string[];
}
export declare const ComputeLimitsUnitType: {
  readonly InstanceFleetUnits: "InstanceFleetUnits";
  readonly Instances: "Instances";
  readonly VCPU: "VCPU";
};
export type ComputeLimitsUnitType =
  (typeof ComputeLimitsUnitType)[keyof typeof ComputeLimitsUnitType];
export interface ComputeLimits {
  UnitType: ComputeLimitsUnitType | undefined;
  MinimumCapacityUnits: number | undefined;
  MaximumCapacityUnits: number | undefined;
  MaximumOnDemandCapacityUnits?: number;
  MaximumCoreCapacityUnits?: number;
}
export interface CreateSecurityConfigurationInput {
  Name: string | undefined;
  SecurityConfiguration: string | undefined;
}
export interface CreateSecurityConfigurationOutput {
  Name: string | undefined;
  CreationDateTime: Date | undefined;
}
export declare const IdcUserAssignment: {
  readonly OPTIONAL: "OPTIONAL";
  readonly REQUIRED: "REQUIRED";
};
export type IdcUserAssignment =
  (typeof IdcUserAssignment)[keyof typeof IdcUserAssignment];
export interface CreateStudioInput {
  Name: string | undefined;
  Description?: string;
  AuthMode: AuthMode | undefined;
  VpcId: string | undefined;
  SubnetIds: string[] | undefined;
  ServiceRole: string | undefined;
  UserRole?: string;
  WorkspaceSecurityGroupId: string | undefined;
  EngineSecurityGroupId: string | undefined;
  DefaultS3Location: string | undefined;
  IdpAuthUrl?: string;
  IdpRelayStateParameterName?: string;
  Tags?: Tag[];
  TrustedIdentityPropagationEnabled?: boolean;
  IdcUserAssignment?: IdcUserAssignment;
  IdcInstanceArn?: string;
  EncryptionKeyArn?: string;
}
export interface CreateStudioOutput {
  StudioId?: string;
  Url?: string;
}
export declare const IdentityType: {
  readonly GROUP: "GROUP";
  readonly USER: "USER";
};
export type IdentityType = (typeof IdentityType)[keyof typeof IdentityType];
export interface CreateStudioSessionMappingInput {
  StudioId: string | undefined;
  IdentityId?: string;
  IdentityName?: string;
  IdentityType: IdentityType | undefined;
  SessionPolicyArn: string | undefined;
}
export interface UsernamePassword {
  Username?: string;
  Password?: string;
}
export type Credentials =
  | Credentials.UsernamePasswordMember
  | Credentials.$UnknownMember;
export declare namespace Credentials {
  interface UsernamePasswordMember {
    UsernamePassword: UsernamePassword;
    $unknown?: never;
  }
  interface $UnknownMember {
    UsernamePassword?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    UsernamePassword: (value: UsernamePassword) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Credentials, visitor: Visitor<T>) => T;
}
export interface DeleteSecurityConfigurationInput {
  Name: string | undefined;
}
export interface DeleteSecurityConfigurationOutput {}
export interface DeleteStudioInput {
  StudioId: string | undefined;
}
export interface DeleteStudioSessionMappingInput {
  StudioId: string | undefined;
  IdentityId?: string;
  IdentityName?: string;
  IdentityType: IdentityType | undefined;
}
export interface DescribeClusterInput {
  ClusterId: string | undefined;
}
export declare const JobFlowExecutionState: {
  readonly BOOTSTRAPPING: "BOOTSTRAPPING";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly RUNNING: "RUNNING";
  readonly SHUTTING_DOWN: "SHUTTING_DOWN";
  readonly STARTING: "STARTING";
  readonly TERMINATED: "TERMINATED";
  readonly WAITING: "WAITING";
};
export type JobFlowExecutionState =
  (typeof JobFlowExecutionState)[keyof typeof JobFlowExecutionState];
export interface DescribeJobFlowsInput {
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  JobFlowIds?: string[];
  JobFlowStates?: JobFlowExecutionState[];
}
export interface JobFlowExecutionStatusDetail {
  State: JobFlowExecutionState | undefined;
  CreationDateTime: Date | undefined;
  StartDateTime?: Date;
  ReadyDateTime?: Date;
  EndDateTime?: Date;
  LastStateChangeReason?: string;
}
export declare const InstanceGroupState: {
  readonly ARRESTED: "ARRESTED";
  readonly BOOTSTRAPPING: "BOOTSTRAPPING";
  readonly ENDED: "ENDED";
  readonly PROVISIONING: "PROVISIONING";
  readonly RECONFIGURING: "RECONFIGURING";
  readonly RESIZING: "RESIZING";
  readonly RUNNING: "RUNNING";
  readonly SHUTTING_DOWN: "SHUTTING_DOWN";
  readonly SUSPENDED: "SUSPENDED";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATING: "TERMINATING";
};
export type InstanceGroupState =
  (typeof InstanceGroupState)[keyof typeof InstanceGroupState];
export interface InstanceGroupDetail {
  InstanceGroupId?: string;
  Name?: string;
  Market: MarketType | undefined;
  InstanceRole: InstanceRoleType | undefined;
  BidPrice?: string;
  InstanceType: string | undefined;
  InstanceRequestCount: number | undefined;
  InstanceRunningCount: number | undefined;
  State: InstanceGroupState | undefined;
  LastStateChangeReason?: string;
  CreationDateTime: Date | undefined;
  StartDateTime?: Date;
  ReadyDateTime?: Date;
  EndDateTime?: Date;
  CustomAmiId?: string;
}
export interface PlacementType {
  AvailabilityZone?: string;
  AvailabilityZones?: string[];
}
export interface JobFlowInstancesDetail {
  MasterInstanceType: string | undefined;
  MasterPublicDnsName?: string;
  MasterInstanceId?: string;
  SlaveInstanceType: string | undefined;
  InstanceCount: number | undefined;
  InstanceGroups?: InstanceGroupDetail[];
  NormalizedInstanceHours?: number;
  Ec2KeyName?: string;
  Ec2SubnetId?: string;
  Placement?: PlacementType;
  KeepJobFlowAliveWhenNoSteps?: boolean;
  TerminationProtected?: boolean;
  UnhealthyNodeReplacement?: boolean;
  HadoopVersion?: string;
}
export declare const StepExecutionState: {
  readonly CANCELLED: "CANCELLED";
  readonly COMPLETED: "COMPLETED";
  readonly CONTINUE: "CONTINUE";
  readonly FAILED: "FAILED";
  readonly INTERRUPTED: "INTERRUPTED";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
};
export type StepExecutionState =
  (typeof StepExecutionState)[keyof typeof StepExecutionState];
export interface StepExecutionStatusDetail {
  State: StepExecutionState | undefined;
  CreationDateTime: Date | undefined;
  StartDateTime?: Date;
  EndDateTime?: Date;
  LastStateChangeReason?: string;
}
export interface StepDetail {
  StepConfig: StepConfig | undefined;
  ExecutionStatusDetail: StepExecutionStatusDetail | undefined;
}
export interface JobFlowDetail {
  JobFlowId: string | undefined;
  Name: string | undefined;
  LogUri?: string;
  LogEncryptionKmsKeyId?: string;
  AmiVersion?: string;
  ExecutionStatusDetail: JobFlowExecutionStatusDetail | undefined;
  Instances: JobFlowInstancesDetail | undefined;
  Steps?: StepDetail[];
  BootstrapActions?: BootstrapActionDetail[];
  SupportedProducts?: string[];
  VisibleToAllUsers?: boolean;
  JobFlowRole?: string;
  ServiceRole?: string;
  AutoScalingRole?: string;
  ScaleDownBehavior?: ScaleDownBehavior;
}
export interface DescribeJobFlowsOutput {
  JobFlows?: JobFlowDetail[];
}
export interface DescribeNotebookExecutionInput {
  NotebookExecutionId: string | undefined;
}
export declare const ExecutionEngineType: {
  readonly EMR: "EMR";
};
export type ExecutionEngineType =
  (typeof ExecutionEngineType)[keyof typeof ExecutionEngineType];
export interface ExecutionEngineConfig {
  Id: string | undefined;
  Type?: ExecutionEngineType;
  MasterInstanceSecurityGroupId?: string;
  ExecutionRoleArn?: string;
}
export interface NotebookS3LocationForOutput {
  Bucket?: string;
  Key?: string;
}
export declare const OutputNotebookFormat: {
  readonly HTML: "HTML";
};
export type OutputNotebookFormat =
  (typeof OutputNotebookFormat)[keyof typeof OutputNotebookFormat];
export interface OutputNotebookS3LocationForOutput {
  Bucket?: string;
  Key?: string;
}
export declare const NotebookExecutionStatus: {
  readonly FAILED: "FAILED";
  readonly FAILING: "FAILING";
  readonly FINISHED: "FINISHED";
  readonly FINISHING: "FINISHING";
  readonly RUNNING: "RUNNING";
  readonly STARTING: "STARTING";
  readonly START_PENDING: "START_PENDING";
  readonly STOPPED: "STOPPED";
  readonly STOPPING: "STOPPING";
  readonly STOP_PENDING: "STOP_PENDING";
};
export type NotebookExecutionStatus =
  (typeof NotebookExecutionStatus)[keyof typeof NotebookExecutionStatus];
export interface NotebookExecution {
  NotebookExecutionId?: string;
  EditorId?: string;
  ExecutionEngine?: ExecutionEngineConfig;
  NotebookExecutionName?: string;
  NotebookParams?: string;
  Status?: NotebookExecutionStatus;
  StartTime?: Date;
  EndTime?: Date;
  Arn?: string;
  OutputNotebookURI?: string;
  LastStateChangeReason?: string;
  NotebookInstanceSecurityGroupId?: string;
  Tags?: Tag[];
  NotebookS3Location?: NotebookS3LocationForOutput;
  OutputNotebookS3Location?: OutputNotebookS3LocationForOutput;
  OutputNotebookFormat?: OutputNotebookFormat;
  EnvironmentVariables?: Record<string, string>;
}
export interface DescribeNotebookExecutionOutput {
  NotebookExecution?: NotebookExecution;
}
export interface DescribeReleaseLabelInput {
  ReleaseLabel?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface SimplifiedApplication {
  Name?: string;
  Version?: string;
}
export interface OSRelease {
  Label?: string;
}
export interface DescribeReleaseLabelOutput {
  ReleaseLabel?: string;
  Applications?: SimplifiedApplication[];
  NextToken?: string;
  AvailableOSReleases?: OSRelease[];
}
export interface DescribeSecurityConfigurationInput {
  Name: string | undefined;
}
export interface DescribeSecurityConfigurationOutput {
  Name?: string;
  SecurityConfiguration?: string;
  CreationDateTime?: Date;
}
export interface DescribeStepInput {
  ClusterId: string | undefined;
  StepId: string | undefined;
}
export interface HadoopStepConfig {
  Jar?: string;
  Properties?: Record<string, string>;
  MainClass?: string;
  Args?: string[];
}
export interface FailureDetails {
  Reason?: string;
  Message?: string;
  LogFile?: string;
}
export declare const StepState: {
  readonly CANCELLED: "CANCELLED";
  readonly CANCEL_PENDING: "CANCEL_PENDING";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly INTERRUPTED: "INTERRUPTED";
  readonly PENDING: "PENDING";
  readonly RUNNING: "RUNNING";
};
export type StepState = (typeof StepState)[keyof typeof StepState];
export declare const StepStateChangeReasonCode: {
  readonly NONE: "NONE";
};
export type StepStateChangeReasonCode =
  (typeof StepStateChangeReasonCode)[keyof typeof StepStateChangeReasonCode];
export interface StepStateChangeReason {
  Code?: StepStateChangeReasonCode;
  Message?: string;
}
export interface StepTimeline {
  CreationDateTime?: Date;
  StartDateTime?: Date;
  EndDateTime?: Date;
}
export interface StepStatus {
  State?: StepState;
  StateChangeReason?: StepStateChangeReason;
  FailureDetails?: FailureDetails;
  Timeline?: StepTimeline;
}
export interface Step {
  Id?: string;
  Name?: string;
  Config?: HadoopStepConfig;
  ActionOnFailure?: ActionOnFailure;
  Status?: StepStatus;
  ExecutionRoleArn?: string;
}
export interface DescribeStepOutput {
  Step?: Step;
}
export interface DescribeStudioInput {
  StudioId: string | undefined;
}
export interface Studio {
  StudioId?: string;
  StudioArn?: string;
  Name?: string;
  Description?: string;
  AuthMode?: AuthMode;
  VpcId?: string;
  SubnetIds?: string[];
  ServiceRole?: string;
  UserRole?: string;
  WorkspaceSecurityGroupId?: string;
  EngineSecurityGroupId?: string;
  Url?: string;
  CreationTime?: Date;
  DefaultS3Location?: string;
  IdpAuthUrl?: string;
  IdpRelayStateParameterName?: string;
  Tags?: Tag[];
  IdcInstanceArn?: string;
  TrustedIdentityPropagationEnabled?: boolean;
  IdcUserAssignment?: IdcUserAssignment;
  EncryptionKeyArn?: string;
}
export interface DescribeStudioOutput {
  Studio?: Studio;
}
export interface EbsBlockDevice {
  VolumeSpecification?: VolumeSpecification;
  Device?: string;
}
export interface EbsVolume {
  Device?: string;
  VolumeId?: string;
}
export interface GetAutoTerminationPolicyInput {
  ClusterId: string | undefined;
}
export interface GetAutoTerminationPolicyOutput {
  AutoTerminationPolicy?: AutoTerminationPolicy;
}
export interface GetBlockPublicAccessConfigurationInput {}
export interface GetClusterSessionCredentialsInput {
  ClusterId: string | undefined;
  ExecutionRoleArn?: string;
}
export interface GetClusterSessionCredentialsOutput {
  Credentials?: Credentials;
  ExpiresAt?: Date;
}
export interface GetManagedScalingPolicyInput {
  ClusterId: string | undefined;
}
export interface ManagedScalingPolicy {
  ComputeLimits?: ComputeLimits;
}
export interface GetManagedScalingPolicyOutput {
  ManagedScalingPolicy?: ManagedScalingPolicy;
}
export interface GetStudioSessionMappingInput {
  StudioId: string | undefined;
  IdentityId?: string;
  IdentityName?: string;
  IdentityType: IdentityType | undefined;
}
export interface SessionMappingDetail {
  StudioId?: string;
  IdentityId?: string;
  IdentityName?: string;
  IdentityType?: IdentityType;
  SessionPolicyArn?: string;
  CreationTime?: Date;
  LastModifiedTime?: Date;
}
export interface GetStudioSessionMappingOutput {
  SessionMapping?: SessionMappingDetail;
}
export interface ListBootstrapActionsInput {
  ClusterId: string | undefined;
  Marker?: string;
}
export interface ListBootstrapActionsOutput {
  BootstrapActions?: Command[];
  Marker?: string;
}
export interface ListClustersInput {
  CreatedAfter?: Date;
  CreatedBefore?: Date;
  ClusterStates?: ClusterState[];
  Marker?: string;
}
export interface ListClustersOutput {
  Clusters?: ClusterSummary[];
  Marker?: string;
}
export interface ListInstanceFleetsInput {
  ClusterId: string | undefined;
  Marker?: string;
}
export declare const InstanceFleetState: {
  readonly BOOTSTRAPPING: "BOOTSTRAPPING";
  readonly PROVISIONING: "PROVISIONING";
  readonly RESIZING: "RESIZING";
  readonly RUNNING: "RUNNING";
  readonly SUSPENDED: "SUSPENDED";
  readonly TERMINATED: "TERMINATED";
  readonly TERMINATING: "TERMINATING";
};
export type InstanceFleetState =
  (typeof InstanceFleetState)[keyof typeof InstanceFleetState];
export declare const InstanceFleetStateChangeReasonCode: {
  readonly CLUSTER_TERMINATED: "CLUSTER_TERMINATED";
  readonly INSTANCE_FAILURE: "INSTANCE_FAILURE";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly VALIDATION_ERROR: "VALIDATION_ERROR";
};
export type InstanceFleetStateChangeReasonCode =
  (typeof InstanceFleetStateChangeReasonCode)[keyof typeof InstanceFleetStateChangeReasonCode];
export interface InstanceFleetStateChangeReason {
  Code?: InstanceFleetStateChangeReasonCode;
  Message?: string;
}
export interface InstanceFleetTimeline {
  CreationDateTime?: Date;
  ReadyDateTime?: Date;
  EndDateTime?: Date;
}
export interface InstanceFleetStatus {
  State?: InstanceFleetState;
  StateChangeReason?: InstanceFleetStateChangeReason;
  Timeline?: InstanceFleetTimeline;
}
export interface ListInstanceGroupsInput {
  ClusterId: string | undefined;
  Marker?: string;
}
export declare const InstanceGroupType: {
  readonly CORE: "CORE";
  readonly MASTER: "MASTER";
  readonly TASK: "TASK";
};
export type InstanceGroupType =
  (typeof InstanceGroupType)[keyof typeof InstanceGroupType];
export interface InstanceResizePolicy {
  InstancesToTerminate?: string[];
  InstancesToProtect?: string[];
  InstanceTerminationTimeout?: number;
}
export interface ShrinkPolicy {
  DecommissionTimeout?: number;
  InstanceResizePolicy?: InstanceResizePolicy;
}
export declare const InstanceGroupStateChangeReasonCode: {
  readonly CLUSTER_TERMINATED: "CLUSTER_TERMINATED";
  readonly INSTANCE_FAILURE: "INSTANCE_FAILURE";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly VALIDATION_ERROR: "VALIDATION_ERROR";
};
export type InstanceGroupStateChangeReasonCode =
  (typeof InstanceGroupStateChangeReasonCode)[keyof typeof InstanceGroupStateChangeReasonCode];
export interface InstanceGroupStateChangeReason {
  Code?: InstanceGroupStateChangeReasonCode;
  Message?: string;
}
export interface InstanceGroupTimeline {
  CreationDateTime?: Date;
  ReadyDateTime?: Date;
  EndDateTime?: Date;
}
export interface InstanceGroupStatus {
  State?: InstanceGroupState;
  StateChangeReason?: InstanceGroupStateChangeReason;
  Timeline?: InstanceGroupTimeline;
}
export declare const InstanceState: {
  readonly AWAITING_FULFILLMENT: "AWAITING_FULFILLMENT";
  readonly BOOTSTRAPPING: "BOOTSTRAPPING";
  readonly PROVISIONING: "PROVISIONING";
  readonly RUNNING: "RUNNING";
  readonly TERMINATED: "TERMINATED";
};
export type InstanceState = (typeof InstanceState)[keyof typeof InstanceState];
export interface ListInstancesInput {
  ClusterId: string | undefined;
  InstanceGroupId?: string;
  InstanceGroupTypes?: InstanceGroupType[];
  InstanceFleetId?: string;
  InstanceFleetType?: InstanceFleetType;
  InstanceStates?: InstanceState[];
  Marker?: string;
}
export declare const InstanceStateChangeReasonCode: {
  readonly BOOTSTRAP_FAILURE: "BOOTSTRAP_FAILURE";
  readonly CLUSTER_TERMINATED: "CLUSTER_TERMINATED";
  readonly INSTANCE_FAILURE: "INSTANCE_FAILURE";
  readonly INTERNAL_ERROR: "INTERNAL_ERROR";
  readonly VALIDATION_ERROR: "VALIDATION_ERROR";
};
export type InstanceStateChangeReasonCode =
  (typeof InstanceStateChangeReasonCode)[keyof typeof InstanceStateChangeReasonCode];
export interface InstanceStateChangeReason {
  Code?: InstanceStateChangeReasonCode;
  Message?: string;
}
export interface InstanceTimeline {
  CreationDateTime?: Date;
  ReadyDateTime?: Date;
  EndDateTime?: Date;
}
export interface InstanceStatus {
  State?: InstanceState;
  StateChangeReason?: InstanceStateChangeReason;
  Timeline?: InstanceTimeline;
}
export interface Instance {
  Id?: string;
  Ec2InstanceId?: string;
  PublicDnsName?: string;
  PublicIpAddress?: string;
  PrivateDnsName?: string;
  PrivateIpAddress?: string;
  Status?: InstanceStatus;
  InstanceGroupId?: string;
  InstanceFleetId?: string;
  Market?: MarketType;
  InstanceType?: string;
  EbsVolumes?: EbsVolume[];
}
export interface ListInstancesOutput {
  Instances?: Instance[];
  Marker?: string;
}
export interface ListNotebookExecutionsInput {
  EditorId?: string;
  Status?: NotebookExecutionStatus;
  From?: Date;
  To?: Date;
  Marker?: string;
  ExecutionEngineId?: string;
}
export interface NotebookExecutionSummary {
  NotebookExecutionId?: string;
  EditorId?: string;
  NotebookExecutionName?: string;
  Status?: NotebookExecutionStatus;
  StartTime?: Date;
  EndTime?: Date;
  NotebookS3Location?: NotebookS3LocationForOutput;
  ExecutionEngineId?: string;
}
export interface ListNotebookExecutionsOutput {
  NotebookExecutions?: NotebookExecutionSummary[];
  Marker?: string;
}
export interface ReleaseLabelFilter {
  Prefix?: string;
  Application?: string;
}
export interface ListReleaseLabelsInput {
  Filters?: ReleaseLabelFilter;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListReleaseLabelsOutput {
  ReleaseLabels?: string[];
  NextToken?: string;
}
export interface ListSecurityConfigurationsInput {
  Marker?: string;
}
export interface SecurityConfigurationSummary {
  Name?: string;
  CreationDateTime?: Date;
}
export interface ListSecurityConfigurationsOutput {
  SecurityConfigurations?: SecurityConfigurationSummary[];
  Marker?: string;
}
export interface ListStepsInput {
  ClusterId: string | undefined;
  StepStates?: StepState[];
  StepIds?: string[];
  Marker?: string;
}
export interface StepSummary {
  Id?: string;
  Name?: string;
  Config?: HadoopStepConfig;
  ActionOnFailure?: ActionOnFailure;
  Status?: StepStatus;
}
export interface ListStepsOutput {
  Steps?: StepSummary[];
  Marker?: string;
}
export interface ListStudiosInput {
  Marker?: string;
}
export interface StudioSummary {
  StudioId?: string;
  Name?: string;
  VpcId?: string;
  Description?: string;
  Url?: string;
  AuthMode?: AuthMode;
  CreationTime?: Date;
}
export interface ListStudiosOutput {
  Studios?: StudioSummary[];
  Marker?: string;
}
export interface ListStudioSessionMappingsInput {
  StudioId?: string;
  IdentityType?: IdentityType;
  Marker?: string;
}
export interface SessionMappingSummary {
  StudioId?: string;
  IdentityId?: string;
  IdentityName?: string;
  IdentityType?: IdentityType;
  SessionPolicyArn?: string;
  CreationTime?: Date;
}
export interface ListStudioSessionMappingsOutput {
  SessionMappings?: SessionMappingSummary[];
  Marker?: string;
}
export interface ListSupportedInstanceTypesInput {
  ReleaseLabel: string | undefined;
  Marker?: string;
}
export interface SupportedInstanceType {
  Type?: string;
  MemoryGB?: number;
  StorageGB?: number;
  VCPU?: number;
  Is64BitsOnly?: boolean;
  InstanceFamilyId?: string;
  EbsOptimizedAvailable?: boolean;
  EbsOptimizedByDefault?: boolean;
  NumberOfDisks?: number;
  EbsStorageOnly?: boolean;
  Architecture?: string;
}
export interface ListSupportedInstanceTypesOutput {
  SupportedInstanceTypes?: SupportedInstanceType[];
  Marker?: string;
}
export interface ModifyClusterInput {
  ClusterId: string | undefined;
  StepConcurrencyLevel?: number;
}
export interface ModifyClusterOutput {
  StepConcurrencyLevel?: number;
}
export interface InstanceFleetModifyConfig {
  InstanceFleetId: string | undefined;
  TargetOnDemandCapacity?: number;
  TargetSpotCapacity?: number;
  ResizeSpecifications?: InstanceFleetResizingSpecifications;
}
export interface ModifyInstanceFleetInput {
  ClusterId: string | undefined;
  InstanceFleet: InstanceFleetModifyConfig | undefined;
}
export declare const ReconfigurationType: {
  readonly MERGE: "MERGE";
  readonly OVERWRITE: "OVERWRITE";
};
export type ReconfigurationType =
  (typeof ReconfigurationType)[keyof typeof ReconfigurationType];
export interface PutAutoScalingPolicyInput {
  ClusterId: string | undefined;
  InstanceGroupId: string | undefined;
  AutoScalingPolicy: AutoScalingPolicy | undefined;
}
export interface PutAutoScalingPolicyOutput {
  ClusterId?: string;
  InstanceGroupId?: string;
  AutoScalingPolicy?: AutoScalingPolicyDescription;
  ClusterArn?: string;
}
export interface PutAutoTerminationPolicyInput {
  ClusterId: string | undefined;
  AutoTerminationPolicy?: AutoTerminationPolicy;
}
export interface PutAutoTerminationPolicyOutput {}
export interface PutBlockPublicAccessConfigurationOutput {}
export interface PutManagedScalingPolicyInput {
  ClusterId: string | undefined;
  ManagedScalingPolicy: ManagedScalingPolicy | undefined;
}
export interface PutManagedScalingPolicyOutput {}
export interface RemoveAutoScalingPolicyInput {
  ClusterId: string | undefined;
  InstanceGroupId: string | undefined;
}
export interface RemoveAutoScalingPolicyOutput {}
export interface RemoveAutoTerminationPolicyInput {
  ClusterId: string | undefined;
}
export interface RemoveAutoTerminationPolicyOutput {}
export interface RemoveManagedScalingPolicyInput {
  ClusterId: string | undefined;
}
export interface RemoveManagedScalingPolicyOutput {}
export interface RemoveTagsInput {
  ResourceId: string | undefined;
  TagKeys: string[] | undefined;
}
export interface RemoveTagsOutput {}
export interface SupportedProductConfig {
  Name?: string;
  Args?: string[];
}
export interface RunJobFlowOutput {
  JobFlowId?: string;
  ClusterArn?: string;
}
export interface SetKeepJobFlowAliveWhenNoStepsInput {
  JobFlowIds: string[] | undefined;
  KeepJobFlowAliveWhenNoSteps: boolean | undefined;
}
export interface SetTerminationProtectionInput {
  JobFlowIds: string[] | undefined;
  TerminationProtected: boolean | undefined;
}
export interface SetUnhealthyNodeReplacementInput {
  JobFlowIds: string[] | undefined;
  UnhealthyNodeReplacement: boolean | undefined;
}
export interface SetVisibleToAllUsersInput {
  JobFlowIds: string[] | undefined;
  VisibleToAllUsers: boolean | undefined;
}
export interface NotebookS3LocationFromInput {
  Bucket?: string;
  Key?: string;
}
export interface OutputNotebookS3LocationFromInput {
  Bucket?: string;
  Key?: string;
}
export interface StartNotebookExecutionInput {
  EditorId?: string;
  RelativePath?: string;
  NotebookExecutionName?: string;
  NotebookParams?: string;
  ExecutionEngine: ExecutionEngineConfig | undefined;
  ServiceRole: string | undefined;
  NotebookInstanceSecurityGroupId?: string;
  Tags?: Tag[];
  NotebookS3Location?: NotebookS3LocationFromInput;
  OutputNotebookS3Location?: OutputNotebookS3LocationFromInput;
  OutputNotebookFormat?: OutputNotebookFormat;
  EnvironmentVariables?: Record<string, string>;
}
export interface StartNotebookExecutionOutput {
  NotebookExecutionId?: string;
}
export interface StopNotebookExecutionInput {
  NotebookExecutionId: string | undefined;
}
export interface TerminateJobFlowsInput {
  JobFlowIds: string[] | undefined;
}
export interface UpdateStudioInput {
  StudioId: string | undefined;
  Name?: string;
  Description?: string;
  SubnetIds?: string[];
  DefaultS3Location?: string;
  EncryptionKeyArn?: string;
}
export interface UpdateStudioSessionMappingInput {
  StudioId: string | undefined;
  IdentityId?: string;
  IdentityName?: string;
  IdentityType: IdentityType | undefined;
  SessionPolicyArn: string | undefined;
}
export interface Configuration {
  Classification?: string;
  Configurations?: Configuration[];
  Properties?: Record<string, string>;
}
export interface BlockPublicAccessConfiguration {
  BlockPublicSecurityGroupRules: boolean | undefined;
  PermittedPublicSecurityGroupRuleRanges?: PortRange[];
  Classification?: string;
  Configurations?: Configuration[];
  Properties?: Record<string, string>;
}
export interface Cluster {
  Id?: string;
  Name?: string;
  Status?: ClusterStatus;
  Ec2InstanceAttributes?: Ec2InstanceAttributes;
  InstanceCollectionType?: InstanceCollectionType;
  LogUri?: string;
  LogEncryptionKmsKeyId?: string;
  RequestedAmiVersion?: string;
  RunningAmiVersion?: string;
  ReleaseLabel?: string;
  AutoTerminate?: boolean;
  TerminationProtected?: boolean;
  UnhealthyNodeReplacement?: boolean;
  VisibleToAllUsers?: boolean;
  Applications?: Application[];
  Tags?: Tag[];
  ServiceRole?: string;
  NormalizedInstanceHours?: number;
  MasterPublicDnsName?: string;
  Configurations?: Configuration[];
  SecurityConfiguration?: string;
  AutoScalingRole?: string;
  ScaleDownBehavior?: ScaleDownBehavior;
  CustomAmiId?: string;
  EbsRootVolumeSize?: number;
  RepoUpgradeOnBoot?: RepoUpgradeOnBoot;
  KerberosAttributes?: KerberosAttributes;
  ClusterArn?: string;
  OutpostArn?: string;
  StepConcurrencyLevel?: number;
  PlacementGroups?: PlacementGroupConfig[];
  OSReleaseLabel?: string;
  EbsRootVolumeIops?: number;
  EbsRootVolumeThroughput?: number;
}
export interface InstanceGroupConfig {
  Name?: string;
  Market?: MarketType;
  InstanceRole: InstanceRoleType | undefined;
  BidPrice?: string;
  InstanceType: string | undefined;
  InstanceCount: number | undefined;
  Configurations?: Configuration[];
  EbsConfiguration?: EbsConfiguration;
  AutoScalingPolicy?: AutoScalingPolicy;
  CustomAmiId?: string;
}
export interface InstanceGroupModifyConfig {
  InstanceGroupId: string | undefined;
  InstanceCount?: number;
  EC2InstanceIdsToTerminate?: string[];
  ShrinkPolicy?: ShrinkPolicy;
  ReconfigurationType?: ReconfigurationType;
  Configurations?: Configuration[];
}
export interface InstanceTypeConfig {
  InstanceType: string | undefined;
  WeightedCapacity?: number;
  BidPrice?: string;
  BidPriceAsPercentageOfOnDemandPrice?: number;
  EbsConfiguration?: EbsConfiguration;
  Configurations?: Configuration[];
  CustomAmiId?: string;
}
export interface InstanceTypeSpecification {
  InstanceType?: string;
  WeightedCapacity?: number;
  BidPrice?: string;
  BidPriceAsPercentageOfOnDemandPrice?: number;
  Configurations?: Configuration[];
  EbsBlockDevices?: EbsBlockDevice[];
  EbsOptimized?: boolean;
  CustomAmiId?: string;
}
export interface DescribeClusterOutput {
  Cluster?: Cluster;
}
export interface GetBlockPublicAccessConfigurationOutput {
  BlockPublicAccessConfiguration: BlockPublicAccessConfiguration | undefined;
  BlockPublicAccessConfigurationMetadata:
    | BlockPublicAccessConfigurationMetadata
    | undefined;
}
export interface PutBlockPublicAccessConfigurationInput {
  BlockPublicAccessConfiguration: BlockPublicAccessConfiguration | undefined;
}
export interface AddInstanceGroupsInput {
  InstanceGroups: InstanceGroupConfig[] | undefined;
  JobFlowId: string | undefined;
}
export interface InstanceFleet {
  Id?: string;
  Name?: string;
  Status?: InstanceFleetStatus;
  InstanceFleetType?: InstanceFleetType;
  TargetOnDemandCapacity?: number;
  TargetSpotCapacity?: number;
  ProvisionedOnDemandCapacity?: number;
  ProvisionedSpotCapacity?: number;
  InstanceTypeSpecifications?: InstanceTypeSpecification[];
  LaunchSpecifications?: InstanceFleetProvisioningSpecifications;
  ResizeSpecifications?: InstanceFleetResizingSpecifications;
}
export interface InstanceFleetConfig {
  Name?: string;
  InstanceFleetType: InstanceFleetType | undefined;
  TargetOnDemandCapacity?: number;
  TargetSpotCapacity?: number;
  InstanceTypeConfigs?: InstanceTypeConfig[];
  LaunchSpecifications?: InstanceFleetProvisioningSpecifications;
  ResizeSpecifications?: InstanceFleetResizingSpecifications;
}
export interface ModifyInstanceGroupsInput {
  ClusterId?: string;
  InstanceGroups?: InstanceGroupModifyConfig[];
}
export interface AddInstanceFleetInput {
  ClusterId: string | undefined;
  InstanceFleet: InstanceFleetConfig | undefined;
}
export interface InstanceGroup {
  Id?: string;
  Name?: string;
  Market?: MarketType;
  InstanceGroupType?: InstanceGroupType;
  BidPrice?: string;
  InstanceType?: string;
  RequestedInstanceCount?: number;
  RunningInstanceCount?: number;
  Status?: InstanceGroupStatus;
  Configurations?: Configuration[];
  ConfigurationsVersion?: number;
  LastSuccessfullyAppliedConfigurations?: Configuration[];
  LastSuccessfullyAppliedConfigurationsVersion?: number;
  EbsBlockDevices?: EbsBlockDevice[];
  EbsOptimized?: boolean;
  ShrinkPolicy?: ShrinkPolicy;
  AutoScalingPolicy?: AutoScalingPolicyDescription;
  CustomAmiId?: string;
}
export interface ListInstanceFleetsOutput {
  InstanceFleets?: InstanceFleet[];
  Marker?: string;
}
export interface ListInstanceGroupsOutput {
  InstanceGroups?: InstanceGroup[];
  Marker?: string;
}
export interface JobFlowInstancesConfig {
  MasterInstanceType?: string;
  SlaveInstanceType?: string;
  InstanceCount?: number;
  InstanceGroups?: InstanceGroupConfig[];
  InstanceFleets?: InstanceFleetConfig[];
  Ec2KeyName?: string;
  Placement?: PlacementType;
  KeepJobFlowAliveWhenNoSteps?: boolean;
  TerminationProtected?: boolean;
  UnhealthyNodeReplacement?: boolean;
  HadoopVersion?: string;
  Ec2SubnetId?: string;
  Ec2SubnetIds?: string[];
  EmrManagedMasterSecurityGroup?: string;
  EmrManagedSlaveSecurityGroup?: string;
  ServiceAccessSecurityGroup?: string;
  AdditionalMasterSecurityGroups?: string[];
  AdditionalSlaveSecurityGroups?: string[];
}
export interface RunJobFlowInput {
  Name: string | undefined;
  LogUri?: string;
  LogEncryptionKmsKeyId?: string;
  AdditionalInfo?: string;
  AmiVersion?: string;
  ReleaseLabel?: string;
  Instances: JobFlowInstancesConfig | undefined;
  Steps?: StepConfig[];
  BootstrapActions?: BootstrapActionConfig[];
  SupportedProducts?: string[];
  NewSupportedProducts?: SupportedProductConfig[];
  Applications?: Application[];
  Configurations?: Configuration[];
  VisibleToAllUsers?: boolean;
  JobFlowRole?: string;
  ServiceRole?: string;
  Tags?: Tag[];
  SecurityConfiguration?: string;
  AutoScalingRole?: string;
  ScaleDownBehavior?: ScaleDownBehavior;
  CustomAmiId?: string;
  EbsRootVolumeSize?: number;
  RepoUpgradeOnBoot?: RepoUpgradeOnBoot;
  KerberosAttributes?: KerberosAttributes;
  StepConcurrencyLevel?: number;
  ManagedScalingPolicy?: ManagedScalingPolicy;
  PlacementGroupConfigs?: PlacementGroupConfig[];
  AutoTerminationPolicy?: AutoTerminationPolicy;
  OSReleaseLabel?: string;
  EbsRootVolumeIops?: number;
  EbsRootVolumeThroughput?: number;
}
export declare const UsernamePasswordFilterSensitiveLog: (
  obj: UsernamePassword
) => any;
export declare const CredentialsFilterSensitiveLog: (obj: Credentials) => any;
export declare const GetClusterSessionCredentialsOutputFilterSensitiveLog: (
  obj: GetClusterSessionCredentialsOutput
) => any;
