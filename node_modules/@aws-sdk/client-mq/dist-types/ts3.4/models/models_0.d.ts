import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { MqServiceException as __BaseException } from "./MqServiceException";
export interface ActionRequired {
  ActionRequiredCode?: string;
  ActionRequiredInfo?: string;
}
export interface AvailabilityZone {
  Name?: string;
}
export declare const EngineType: {
  readonly ACTIVEMQ: "ACTIVEMQ";
  readonly RABBITMQ: "RABBITMQ";
};
export type EngineType = (typeof EngineType)[keyof typeof EngineType];
export interface EngineVersion {
  Name?: string;
}
export interface BrokerEngineType {
  EngineType?: EngineType;
  EngineVersions?: EngineVersion[];
}
export interface BrokerInstance {
  ConsoleURL?: string;
  Endpoints?: string[];
  IpAddress?: string;
}
export declare const BrokerStorageType: {
  readonly EBS: "EBS";
  readonly EFS: "EFS";
};
export type BrokerStorageType =
  (typeof BrokerStorageType)[keyof typeof BrokerStorageType];
export declare const DeploymentMode: {
  readonly ACTIVE_STANDBY_MULTI_AZ: "ACTIVE_STANDBY_MULTI_AZ";
  readonly CLUSTER_MULTI_AZ: "CLUSTER_MULTI_AZ";
  readonly SINGLE_INSTANCE: "SINGLE_INSTANCE";
};
export type DeploymentMode =
  (typeof DeploymentMode)[keyof typeof DeploymentMode];
export interface BrokerInstanceOption {
  AvailabilityZones?: AvailabilityZone[];
  EngineType?: EngineType;
  HostInstanceType?: string;
  StorageType?: BrokerStorageType;
  SupportedDeploymentModes?: DeploymentMode[];
  SupportedEngineVersions?: string[];
}
export declare const BrokerState: {
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS";
  readonly CRITICAL_ACTION_REQUIRED: "CRITICAL_ACTION_REQUIRED";
  readonly DELETION_IN_PROGRESS: "DELETION_IN_PROGRESS";
  readonly REBOOT_IN_PROGRESS: "REBOOT_IN_PROGRESS";
  readonly REPLICA: "REPLICA";
  readonly RUNNING: "RUNNING";
};
export type BrokerState = (typeof BrokerState)[keyof typeof BrokerState];
export interface BrokerSummary {
  BrokerArn?: string;
  BrokerId?: string;
  BrokerName?: string;
  BrokerState?: BrokerState;
  Created?: Date;
  DeploymentMode: DeploymentMode | undefined;
  EngineType: EngineType | undefined;
  HostInstanceType?: string;
}
export declare const AuthenticationStrategy: {
  readonly LDAP: "LDAP";
  readonly SIMPLE: "SIMPLE";
};
export type AuthenticationStrategy =
  (typeof AuthenticationStrategy)[keyof typeof AuthenticationStrategy];
export interface ConfigurationRevision {
  Created: Date | undefined;
  Description?: string;
  Revision: number | undefined;
}
export interface Configuration {
  Arn: string | undefined;
  AuthenticationStrategy: AuthenticationStrategy | undefined;
  Created: Date | undefined;
  Description: string | undefined;
  EngineType: EngineType | undefined;
  EngineVersion: string | undefined;
  Id: string | undefined;
  LatestRevision: ConfigurationRevision | undefined;
  Name: string | undefined;
  Tags?: Record<string, string>;
}
export interface ConfigurationId {
  Id: string | undefined;
  Revision?: number;
}
export declare const SanitizationWarningReason: {
  readonly DISALLOWED_ATTRIBUTE_REMOVED: "DISALLOWED_ATTRIBUTE_REMOVED";
  readonly DISALLOWED_ELEMENT_REMOVED: "DISALLOWED_ELEMENT_REMOVED";
  readonly INVALID_ATTRIBUTE_VALUE_REMOVED: "INVALID_ATTRIBUTE_VALUE_REMOVED";
};
export type SanitizationWarningReason =
  (typeof SanitizationWarningReason)[keyof typeof SanitizationWarningReason];
export interface SanitizationWarning {
  AttributeName?: string;
  ElementName?: string;
  Reason: SanitizationWarningReason | undefined;
}
export interface User {
  ConsoleAccess?: boolean;
  Groups?: string[];
  Password: string | undefined;
  Username: string | undefined;
  ReplicationUser?: boolean;
}
export declare const ChangeType: {
  readonly CREATE: "CREATE";
  readonly DELETE: "DELETE";
  readonly UPDATE: "UPDATE";
};
export type ChangeType = (typeof ChangeType)[keyof typeof ChangeType];
export interface UserSummary {
  PendingChange?: ChangeType;
  Username: string | undefined;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  ErrorAttribute?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export interface Configurations {
  Current?: ConfigurationId;
  History?: ConfigurationId[];
  Pending?: ConfigurationId;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  ErrorAttribute?: string;
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const DataReplicationMode: {
  readonly CRDR: "CRDR";
  readonly NONE: "NONE";
};
export type DataReplicationMode =
  (typeof DataReplicationMode)[keyof typeof DataReplicationMode];
export interface EncryptionOptions {
  KmsKeyId?: string;
  UseAwsOwnedKey: boolean | undefined;
}
export interface LdapServerMetadataInput {
  Hosts: string[] | undefined;
  RoleBase: string | undefined;
  RoleName?: string;
  RoleSearchMatching: string | undefined;
  RoleSearchSubtree?: boolean;
  ServiceAccountPassword: string | undefined;
  ServiceAccountUsername: string | undefined;
  UserBase: string | undefined;
  UserRoleName?: string;
  UserSearchMatching: string | undefined;
  UserSearchSubtree?: boolean;
}
export interface Logs {
  Audit?: boolean;
  General?: boolean;
}
export declare const DayOfWeek: {
  readonly FRIDAY: "FRIDAY";
  readonly MONDAY: "MONDAY";
  readonly SATURDAY: "SATURDAY";
  readonly SUNDAY: "SUNDAY";
  readonly THURSDAY: "THURSDAY";
  readonly TUESDAY: "TUESDAY";
  readonly WEDNESDAY: "WEDNESDAY";
};
export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek];
export interface WeeklyStartTime {
  DayOfWeek: DayOfWeek | undefined;
  TimeOfDay: string | undefined;
  TimeZone?: string;
}
export interface CreateBrokerRequest {
  AuthenticationStrategy?: AuthenticationStrategy;
  AutoMinorVersionUpgrade: boolean | undefined;
  BrokerName: string | undefined;
  Configuration?: ConfigurationId;
  CreatorRequestId?: string;
  DeploymentMode: DeploymentMode | undefined;
  EncryptionOptions?: EncryptionOptions;
  EngineType: EngineType | undefined;
  EngineVersion: string | undefined;
  HostInstanceType: string | undefined;
  LdapServerMetadata?: LdapServerMetadataInput;
  Logs?: Logs;
  MaintenanceWindowStartTime?: WeeklyStartTime;
  PubliclyAccessible: boolean | undefined;
  SecurityGroups?: string[];
  StorageType?: BrokerStorageType;
  SubnetIds?: string[];
  Tags?: Record<string, string>;
  Users: User[] | undefined;
  DataReplicationMode?: DataReplicationMode;
  DataReplicationPrimaryBrokerArn?: string;
}
export interface CreateBrokerResponse {
  BrokerArn?: string;
  BrokerId?: string;
}
export declare class ForbiddenException extends __BaseException {
  readonly name: "ForbiddenException";
  readonly $fault: "client";
  ErrorAttribute?: string;
  Message?: string;
  constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
}
export declare class InternalServerErrorException extends __BaseException {
  readonly name: "InternalServerErrorException";
  readonly $fault: "server";
  ErrorAttribute?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>
  );
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  ErrorAttribute?: string;
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export interface CreateConfigurationRequest {
  AuthenticationStrategy?: AuthenticationStrategy;
  EngineType: EngineType | undefined;
  EngineVersion: string | undefined;
  Name: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateConfigurationResponse {
  Arn?: string;
  AuthenticationStrategy?: AuthenticationStrategy;
  Created?: Date;
  Id?: string;
  LatestRevision?: ConfigurationRevision;
  Name?: string;
}
export interface CreateTagsRequest {
  ResourceArn: string | undefined;
  Tags?: Record<string, string>;
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  ErrorAttribute?: string;
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export interface CreateUserRequest {
  BrokerId: string | undefined;
  ConsoleAccess?: boolean;
  Groups?: string[];
  Password: string | undefined;
  Username: string | undefined;
  ReplicationUser?: boolean;
}
export interface CreateUserResponse {}
export interface DataReplicationCounterpart {
  BrokerId: string | undefined;
  Region: string | undefined;
}
export interface DataReplicationMetadataOutput {
  DataReplicationCounterpart?: DataReplicationCounterpart;
  DataReplicationRole: string | undefined;
}
export interface DeleteBrokerRequest {
  BrokerId: string | undefined;
}
export interface DeleteBrokerResponse {
  BrokerId?: string;
}
export interface DeleteTagsRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface DeleteUserRequest {
  BrokerId: string | undefined;
  Username: string | undefined;
}
export interface DeleteUserResponse {}
export interface DescribeBrokerRequest {
  BrokerId: string | undefined;
}
export interface LdapServerMetadataOutput {
  Hosts: string[] | undefined;
  RoleBase: string | undefined;
  RoleName?: string;
  RoleSearchMatching: string | undefined;
  RoleSearchSubtree?: boolean;
  ServiceAccountUsername: string | undefined;
  UserBase: string | undefined;
  UserRoleName?: string;
  UserSearchMatching: string | undefined;
  UserSearchSubtree?: boolean;
}
export interface PendingLogs {
  Audit?: boolean;
  General?: boolean;
}
export interface LogsSummary {
  Audit?: boolean;
  AuditLogGroup?: string;
  General: boolean | undefined;
  GeneralLogGroup: string | undefined;
  Pending?: PendingLogs;
}
export interface DescribeBrokerResponse {
  ActionsRequired?: ActionRequired[];
  AuthenticationStrategy?: AuthenticationStrategy;
  AutoMinorVersionUpgrade?: boolean;
  BrokerArn?: string;
  BrokerId?: string;
  BrokerInstances?: BrokerInstance[];
  BrokerName?: string;
  BrokerState?: BrokerState;
  Configurations?: Configurations;
  Created?: Date;
  DeploymentMode?: DeploymentMode;
  EncryptionOptions?: EncryptionOptions;
  EngineType?: EngineType;
  EngineVersion?: string;
  HostInstanceType?: string;
  LdapServerMetadata?: LdapServerMetadataOutput;
  Logs?: LogsSummary;
  MaintenanceWindowStartTime?: WeeklyStartTime;
  PendingAuthenticationStrategy?: AuthenticationStrategy;
  PendingEngineVersion?: string;
  PendingHostInstanceType?: string;
  PendingLdapServerMetadata?: LdapServerMetadataOutput;
  PendingSecurityGroups?: string[];
  PubliclyAccessible?: boolean;
  SecurityGroups?: string[];
  StorageType?: BrokerStorageType;
  SubnetIds?: string[];
  Tags?: Record<string, string>;
  Users?: UserSummary[];
  DataReplicationMetadata?: DataReplicationMetadataOutput;
  DataReplicationMode?: DataReplicationMode;
  PendingDataReplicationMetadata?: DataReplicationMetadataOutput;
  PendingDataReplicationMode?: DataReplicationMode;
}
export interface DescribeBrokerEngineTypesRequest {
  EngineType?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeBrokerEngineTypesResponse {
  BrokerEngineTypes?: BrokerEngineType[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeBrokerInstanceOptionsRequest {
  EngineType?: string;
  HostInstanceType?: string;
  MaxResults?: number;
  NextToken?: string;
  StorageType?: string;
}
export interface DescribeBrokerInstanceOptionsResponse {
  BrokerInstanceOptions?: BrokerInstanceOption[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeConfigurationRequest {
  ConfigurationId: string | undefined;
}
export interface DescribeConfigurationResponse {
  Arn?: string;
  AuthenticationStrategy?: AuthenticationStrategy;
  Created?: Date;
  Description?: string;
  EngineType?: EngineType;
  EngineVersion?: string;
  Id?: string;
  LatestRevision?: ConfigurationRevision;
  Name?: string;
  Tags?: Record<string, string>;
}
export interface DescribeConfigurationRevisionRequest {
  ConfigurationId: string | undefined;
  ConfigurationRevision: string | undefined;
}
export interface DescribeConfigurationRevisionResponse {
  ConfigurationId?: string;
  Created?: Date;
  Data?: string;
  Description?: string;
}
export interface DescribeUserRequest {
  BrokerId: string | undefined;
  Username: string | undefined;
}
export interface UserPendingChanges {
  ConsoleAccess?: boolean;
  Groups?: string[];
  PendingChange: ChangeType | undefined;
}
export interface DescribeUserResponse {
  BrokerId?: string;
  ConsoleAccess?: boolean;
  Groups?: string[];
  Pending?: UserPendingChanges;
  Username?: string;
  ReplicationUser?: boolean;
}
export interface ListBrokersRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListBrokersResponse {
  BrokerSummaries?: BrokerSummary[];
  NextToken?: string;
}
export interface ListConfigurationRevisionsRequest {
  ConfigurationId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListConfigurationRevisionsResponse {
  ConfigurationId?: string;
  MaxResults?: number;
  NextToken?: string;
  Revisions?: ConfigurationRevision[];
}
export interface ListConfigurationsRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListConfigurationsResponse {
  Configurations?: Configuration[];
  MaxResults?: number;
  NextToken?: string;
}
export interface ListTagsRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsResponse {
  Tags?: Record<string, string>;
}
export interface ListUsersRequest {
  BrokerId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListUsersResponse {
  BrokerId?: string;
  MaxResults?: number;
  NextToken?: string;
  Users?: UserSummary[];
}
export declare const PromoteMode: {
  readonly FAILOVER: "FAILOVER";
  readonly SWITCHOVER: "SWITCHOVER";
};
export type PromoteMode = (typeof PromoteMode)[keyof typeof PromoteMode];
export interface PromoteRequest {
  BrokerId: string | undefined;
  Mode: PromoteMode | undefined;
}
export interface PromoteResponse {
  BrokerId?: string;
}
export interface RebootBrokerRequest {
  BrokerId: string | undefined;
}
export interface RebootBrokerResponse {}
export interface UpdateBrokerRequest {
  AuthenticationStrategy?: AuthenticationStrategy;
  AutoMinorVersionUpgrade?: boolean;
  BrokerId: string | undefined;
  Configuration?: ConfigurationId;
  EngineVersion?: string;
  HostInstanceType?: string;
  LdapServerMetadata?: LdapServerMetadataInput;
  Logs?: Logs;
  MaintenanceWindowStartTime?: WeeklyStartTime;
  SecurityGroups?: string[];
  DataReplicationMode?: DataReplicationMode;
}
export interface UpdateBrokerResponse {
  AuthenticationStrategy?: AuthenticationStrategy;
  AutoMinorVersionUpgrade?: boolean;
  BrokerId?: string;
  Configuration?: ConfigurationId;
  EngineVersion?: string;
  HostInstanceType?: string;
  LdapServerMetadata?: LdapServerMetadataOutput;
  Logs?: Logs;
  MaintenanceWindowStartTime?: WeeklyStartTime;
  SecurityGroups?: string[];
  DataReplicationMetadata?: DataReplicationMetadataOutput;
  DataReplicationMode?: DataReplicationMode;
  PendingDataReplicationMetadata?: DataReplicationMetadataOutput;
  PendingDataReplicationMode?: DataReplicationMode;
}
export interface UpdateConfigurationRequest {
  ConfigurationId: string | undefined;
  Data: string | undefined;
  Description?: string;
}
export interface UpdateConfigurationResponse {
  Arn?: string;
  Created?: Date;
  Id?: string;
  LatestRevision?: ConfigurationRevision;
  Name?: string;
  Warnings?: SanitizationWarning[];
}
export interface UpdateUserRequest {
  BrokerId: string | undefined;
  ConsoleAccess?: boolean;
  Groups?: string[];
  Password?: string;
  Username: string | undefined;
  ReplicationUser?: boolean;
}
export interface UpdateUserResponse {}
