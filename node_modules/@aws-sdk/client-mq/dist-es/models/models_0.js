import { MqServiceException as __BaseException } from "./MqServiceException";
export const EngineType = {
    ACTIVEMQ: "ACTIVEMQ",
    RABBITMQ: "RABBITMQ",
};
export const BrokerStorageType = {
    EBS: "EBS",
    EFS: "EFS",
};
export const DeploymentMode = {
    ACTIVE_STANDBY_MULTI_AZ: "ACTIVE_STANDBY_MULTI_AZ",
    CLUSTER_MULTI_AZ: "CLUSTER_MULTI_AZ",
    SINGLE_INSTANCE: "SINGLE_INSTANCE",
};
export const BrokerState = {
    CREATION_FAILED: "CREATION_FAILED",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
    CRITICAL_ACTION_REQUIRED: "CRITICAL_ACTION_REQUIRED",
    DELETION_IN_PROGRESS: "DELETION_IN_PROGRESS",
    REBOOT_IN_PROGRESS: "REBOOT_IN_PROGRESS",
    REPLICA: "REPLICA",
    RUNNING: "RUNNING",
};
export const AuthenticationStrategy = {
    LDAP: "LDAP",
    SIMPLE: "SIMPLE",
};
export const SanitizationWarningReason = {
    DISALLOWED_ATTRIBUTE_REMOVED: "DISALLOWED_ATTRIBUTE_REMOVED",
    DISALLOWED_ELEMENT_REMOVED: "DISALLOWED_ELEMENT_REMOVED",
    INVALID_ATTRIBUTE_VALUE_REMOVED: "INVALID_ATTRIBUTE_VALUE_REMOVED",
};
export const ChangeType = {
    CREATE: "CREATE",
    DELETE: "DELETE",
    UPDATE: "UPDATE",
};
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.ErrorAttribute = opts.ErrorAttribute;
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.ErrorAttribute = opts.ErrorAttribute;
        this.Message = opts.Message;
    }
}
export const DataReplicationMode = {
    CRDR: "CRDR",
    NONE: "NONE",
};
export const DayOfWeek = {
    FRIDAY: "FRIDAY",
    MONDAY: "MONDAY",
    SATURDAY: "SATURDAY",
    SUNDAY: "SUNDAY",
    THURSDAY: "THURSDAY",
    TUESDAY: "TUESDAY",
    WEDNESDAY: "WEDNESDAY",
};
export class ForbiddenException extends __BaseException {
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        this.name = "ForbiddenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.ErrorAttribute = opts.ErrorAttribute;
        this.Message = opts.Message;
    }
}
export class InternalServerErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.ErrorAttribute = opts.ErrorAttribute;
        this.Message = opts.Message;
    }
}
export class UnauthorizedException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
        this.ErrorAttribute = opts.ErrorAttribute;
        this.Message = opts.Message;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.ErrorAttribute = opts.ErrorAttribute;
        this.Message = opts.Message;
    }
}
export const PromoteMode = {
    FAILOVER: "FAILOVER",
    SWITCHOVER: "SWITCHOVER",
};
