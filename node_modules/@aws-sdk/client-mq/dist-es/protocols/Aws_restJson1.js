import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { BadRequestException, ConflictException, ForbiddenException, InternalServerErrorException, NotFoundException, UnauthorizedException, } from "../models/models_0";
import { MqServiceException as __BaseException } from "../models/MqServiceException";
export const se_CreateBrokerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/brokers");
    let body;
    body = JSON.stringify(take(input, {
        authenticationStrategy: [, , `AuthenticationStrategy`],
        autoMinorVersionUpgrade: [, , `AutoMinorVersionUpgrade`],
        brokerName: [, , `BrokerName`],
        configuration: [, (_) => se_ConfigurationId(_, context), `Configuration`],
        creatorRequestId: [true, (_) => _ ?? generateIdempotencyToken(), `CreatorRequestId`],
        dataReplicationMode: [, , `DataReplicationMode`],
        dataReplicationPrimaryBrokerArn: [, , `DataReplicationPrimaryBrokerArn`],
        deploymentMode: [, , `DeploymentMode`],
        encryptionOptions: [, (_) => se_EncryptionOptions(_, context), `EncryptionOptions`],
        engineType: [, , `EngineType`],
        engineVersion: [, , `EngineVersion`],
        hostInstanceType: [, , `HostInstanceType`],
        ldapServerMetadata: [, (_) => se_LdapServerMetadataInput(_, context), `LdapServerMetadata`],
        logs: [, (_) => se_Logs(_, context), `Logs`],
        maintenanceWindowStartTime: [, (_) => se_WeeklyStartTime(_, context), `MaintenanceWindowStartTime`],
        publiclyAccessible: [, , `PubliclyAccessible`],
        securityGroups: [, (_) => _json(_), `SecurityGroups`],
        storageType: [, , `StorageType`],
        subnetIds: [, (_) => _json(_), `SubnetIds`],
        tags: [, (_) => _json(_), `Tags`],
        users: [, (_) => se___listOfUser(_, context), `Users`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/configurations");
    let body;
    body = JSON.stringify(take(input, {
        authenticationStrategy: [, , `AuthenticationStrategy`],
        engineType: [, , `EngineType`],
        engineVersion: [, , `EngineVersion`],
        name: [, , `Name`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTagsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/brokers/{BrokerId}/users/{Username}");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    b.p("Username", () => input.Username, "{Username}", false);
    let body;
    body = JSON.stringify(take(input, {
        consoleAccess: [, , `ConsoleAccess`],
        groups: [, (_) => _json(_), `Groups`],
        password: [, , `Password`],
        replicationUser: [, , `ReplicationUser`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteBrokerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/brokers/{BrokerId}");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteTagsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/brokers/{BrokerId}/users/{Username}");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    b.p("Username", () => input.Username, "{Username}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeBrokerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/brokers/{BrokerId}");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeBrokerEngineTypesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/broker-engine-types");
    const query = map({
        [_eT]: [, input[_ET]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeBrokerInstanceOptionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/broker-instance-options");
    const query = map({
        [_eT]: [, input[_ET]],
        [_hIT]: [, input[_HIT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_sT]: [, input[_ST]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/configurations/{ConfigurationId}");
    b.p("ConfigurationId", () => input.ConfigurationId, "{ConfigurationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeConfigurationRevisionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/configurations/{ConfigurationId}/revisions/{ConfigurationRevision}");
    b.p("ConfigurationId", () => input.ConfigurationId, "{ConfigurationId}", false);
    b.p("ConfigurationRevision", () => input.ConfigurationRevision, "{ConfigurationRevision}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/brokers/{BrokerId}/users/{Username}");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    b.p("Username", () => input.Username, "{Username}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListBrokersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/brokers");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListConfigurationRevisionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/configurations/{ConfigurationId}/revisions");
    b.p("ConfigurationId", () => input.ConfigurationId, "{ConfigurationId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListConfigurationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/configurations");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListUsersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/brokers/{BrokerId}/users");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PromoteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/brokers/{BrokerId}/promote");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    let body;
    body = JSON.stringify(take(input, {
        mode: [, , `Mode`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RebootBrokerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/v1/brokers/{BrokerId}/reboot");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateBrokerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/brokers/{BrokerId}");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    let body;
    body = JSON.stringify(take(input, {
        authenticationStrategy: [, , `AuthenticationStrategy`],
        autoMinorVersionUpgrade: [, , `AutoMinorVersionUpgrade`],
        configuration: [, (_) => se_ConfigurationId(_, context), `Configuration`],
        dataReplicationMode: [, , `DataReplicationMode`],
        engineVersion: [, , `EngineVersion`],
        hostInstanceType: [, , `HostInstanceType`],
        ldapServerMetadata: [, (_) => se_LdapServerMetadataInput(_, context), `LdapServerMetadata`],
        logs: [, (_) => se_Logs(_, context), `Logs`],
        maintenanceWindowStartTime: [, (_) => se_WeeklyStartTime(_, context), `MaintenanceWindowStartTime`],
        securityGroups: [, (_) => _json(_), `SecurityGroups`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/configurations/{ConfigurationId}");
    b.p("ConfigurationId", () => input.ConfigurationId, "{ConfigurationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        data: [, , `Data`],
        description: [, , `Description`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateUserCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/v1/brokers/{BrokerId}/users/{Username}");
    b.p("BrokerId", () => input.BrokerId, "{BrokerId}", false);
    b.p("Username", () => input.Username, "{Username}", false);
    let body;
    body = JSON.stringify(take(input, {
        consoleAccess: [, , `ConsoleAccess`],
        groups: [, (_) => _json(_), `Groups`],
        password: [, , `Password`],
        replicationUser: [, , `ReplicationUser`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_CreateBrokerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BrokerArn: [, __expectString, `brokerArn`],
        BrokerId: [, __expectString, `brokerId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        AuthenticationStrategy: [, __expectString, `authenticationStrategy`],
        Created: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `created`],
        Id: [, __expectString, `id`],
        LatestRevision: [, (_) => de_ConfigurationRevision(_, context), `latestRevision`],
        Name: [, __expectString, `name`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTagsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteBrokerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BrokerId: [, __expectString, `brokerId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteTagsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeBrokerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ActionsRequired: [, (_) => de___listOfActionRequired(_, context), `actionsRequired`],
        AuthenticationStrategy: [, __expectString, `authenticationStrategy`],
        AutoMinorVersionUpgrade: [, __expectBoolean, `autoMinorVersionUpgrade`],
        BrokerArn: [, __expectString, `brokerArn`],
        BrokerId: [, __expectString, `brokerId`],
        BrokerInstances: [, (_) => de___listOfBrokerInstance(_, context), `brokerInstances`],
        BrokerName: [, __expectString, `brokerName`],
        BrokerState: [, __expectString, `brokerState`],
        Configurations: [, (_) => de_Configurations(_, context), `configurations`],
        Created: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `created`],
        DataReplicationMetadata: [, (_) => de_DataReplicationMetadataOutput(_, context), `dataReplicationMetadata`],
        DataReplicationMode: [, __expectString, `dataReplicationMode`],
        DeploymentMode: [, __expectString, `deploymentMode`],
        EncryptionOptions: [, (_) => de_EncryptionOptions(_, context), `encryptionOptions`],
        EngineType: [, __expectString, `engineType`],
        EngineVersion: [, __expectString, `engineVersion`],
        HostInstanceType: [, __expectString, `hostInstanceType`],
        LdapServerMetadata: [, (_) => de_LdapServerMetadataOutput(_, context), `ldapServerMetadata`],
        Logs: [, (_) => de_LogsSummary(_, context), `logs`],
        MaintenanceWindowStartTime: [, (_) => de_WeeklyStartTime(_, context), `maintenanceWindowStartTime`],
        PendingAuthenticationStrategy: [, __expectString, `pendingAuthenticationStrategy`],
        PendingDataReplicationMetadata: [
            ,
            (_) => de_DataReplicationMetadataOutput(_, context),
            `pendingDataReplicationMetadata`,
        ],
        PendingDataReplicationMode: [, __expectString, `pendingDataReplicationMode`],
        PendingEngineVersion: [, __expectString, `pendingEngineVersion`],
        PendingHostInstanceType: [, __expectString, `pendingHostInstanceType`],
        PendingLdapServerMetadata: [, (_) => de_LdapServerMetadataOutput(_, context), `pendingLdapServerMetadata`],
        PendingSecurityGroups: [, _json, `pendingSecurityGroups`],
        PubliclyAccessible: [, __expectBoolean, `publiclyAccessible`],
        SecurityGroups: [, _json, `securityGroups`],
        StorageType: [, __expectString, `storageType`],
        SubnetIds: [, _json, `subnetIds`],
        Tags: [, _json, `tags`],
        Users: [, (_) => de___listOfUserSummary(_, context), `users`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeBrokerEngineTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BrokerEngineTypes: [, (_) => de___listOfBrokerEngineType(_, context), `brokerEngineTypes`],
        MaxResults: [, __expectInt32, `maxResults`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeBrokerInstanceOptionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BrokerInstanceOptions: [, (_) => de___listOfBrokerInstanceOption(_, context), `brokerInstanceOptions`],
        MaxResults: [, __expectInt32, `maxResults`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        AuthenticationStrategy: [, __expectString, `authenticationStrategy`],
        Created: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `created`],
        Description: [, __expectString, `description`],
        EngineType: [, __expectString, `engineType`],
        EngineVersion: [, __expectString, `engineVersion`],
        Id: [, __expectString, `id`],
        LatestRevision: [, (_) => de_ConfigurationRevision(_, context), `latestRevision`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeConfigurationRevisionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConfigurationId: [, __expectString, `configurationId`],
        Created: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `created`],
        Data: [, __expectString, `data`],
        Description: [, __expectString, `description`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BrokerId: [, __expectString, `brokerId`],
        ConsoleAccess: [, __expectBoolean, `consoleAccess`],
        Groups: [, _json, `groups`],
        Pending: [, (_) => de_UserPendingChanges(_, context), `pending`],
        ReplicationUser: [, __expectBoolean, `replicationUser`],
        Username: [, __expectString, `username`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListBrokersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BrokerSummaries: [, (_) => de___listOfBrokerSummary(_, context), `brokerSummaries`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConfigurationRevisionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConfigurationId: [, __expectString, `configurationId`],
        MaxResults: [, __expectInt32, `maxResults`],
        NextToken: [, __expectString, `nextToken`],
        Revisions: [, (_) => de___listOfConfigurationRevision(_, context), `revisions`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Configurations: [, (_) => de___listOfConfiguration(_, context), `configurations`],
        MaxResults: [, __expectInt32, `maxResults`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: [, _json, `tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BrokerId: [, __expectString, `brokerId`],
        MaxResults: [, __expectInt32, `maxResults`],
        NextToken: [, __expectString, `nextToken`],
        Users: [, (_) => de___listOfUserSummary(_, context), `users`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PromoteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BrokerId: [, __expectString, `brokerId`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RebootBrokerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateBrokerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AuthenticationStrategy: [, __expectString, `authenticationStrategy`],
        AutoMinorVersionUpgrade: [, __expectBoolean, `autoMinorVersionUpgrade`],
        BrokerId: [, __expectString, `brokerId`],
        Configuration: [, (_) => de_ConfigurationId(_, context), `configuration`],
        DataReplicationMetadata: [, (_) => de_DataReplicationMetadataOutput(_, context), `dataReplicationMetadata`],
        DataReplicationMode: [, __expectString, `dataReplicationMode`],
        EngineVersion: [, __expectString, `engineVersion`],
        HostInstanceType: [, __expectString, `hostInstanceType`],
        LdapServerMetadata: [, (_) => de_LdapServerMetadataOutput(_, context), `ldapServerMetadata`],
        Logs: [, (_) => de_Logs(_, context), `logs`],
        MaintenanceWindowStartTime: [, (_) => de_WeeklyStartTime(_, context), `maintenanceWindowStartTime`],
        PendingDataReplicationMetadata: [
            ,
            (_) => de_DataReplicationMetadataOutput(_, context),
            `pendingDataReplicationMetadata`,
        ],
        PendingDataReplicationMode: [, __expectString, `pendingDataReplicationMode`],
        SecurityGroups: [, _json, `securityGroups`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Arn: [, __expectString, `arn`],
        Created: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `created`],
        Id: [, __expectString, `id`],
        LatestRevision: [, (_) => de_ConfigurationRevision(_, context), `latestRevision`],
        Name: [, __expectString, `name`],
        Warnings: [, (_) => de___listOfSanitizationWarning(_, context), `warnings`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.mq#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.mq#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.mq#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.mq#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.mq#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.mq#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorAttribute: [, __expectString, `errorAttribute`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorAttribute: [, __expectString, `errorAttribute`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorAttribute: [, __expectString, `errorAttribute`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorAttribute: [, __expectString, `errorAttribute`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorAttribute: [, __expectString, `errorAttribute`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        ErrorAttribute: [, __expectString, `errorAttribute`],
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se___listOfUser = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_User(entry, context);
    });
};
const se_ConfigurationId = (input, context) => {
    return take(input, {
        id: [, , `Id`],
        revision: [, , `Revision`],
    });
};
const se_EncryptionOptions = (input, context) => {
    return take(input, {
        kmsKeyId: [, , `KmsKeyId`],
        useAwsOwnedKey: [, , `UseAwsOwnedKey`],
    });
};
const se_LdapServerMetadataInput = (input, context) => {
    return take(input, {
        hosts: [, _json, `Hosts`],
        roleBase: [, , `RoleBase`],
        roleName: [, , `RoleName`],
        roleSearchMatching: [, , `RoleSearchMatching`],
        roleSearchSubtree: [, , `RoleSearchSubtree`],
        serviceAccountPassword: [, , `ServiceAccountPassword`],
        serviceAccountUsername: [, , `ServiceAccountUsername`],
        userBase: [, , `UserBase`],
        userRoleName: [, , `UserRoleName`],
        userSearchMatching: [, , `UserSearchMatching`],
        userSearchSubtree: [, , `UserSearchSubtree`],
    });
};
const se_Logs = (input, context) => {
    return take(input, {
        audit: [, , `Audit`],
        general: [, , `General`],
    });
};
const se_User = (input, context) => {
    return take(input, {
        consoleAccess: [, , `ConsoleAccess`],
        groups: [, _json, `Groups`],
        password: [, , `Password`],
        replicationUser: [, , `ReplicationUser`],
        username: [, , `Username`],
    });
};
const se_WeeklyStartTime = (input, context) => {
    return take(input, {
        dayOfWeek: [, , `DayOfWeek`],
        timeOfDay: [, , `TimeOfDay`],
        timeZone: [, , `TimeZone`],
    });
};
const de___listOfActionRequired = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionRequired(entry, context);
    });
    return retVal;
};
const de___listOfAvailabilityZone = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AvailabilityZone(entry, context);
    });
    return retVal;
};
const de___listOfBrokerEngineType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BrokerEngineType(entry, context);
    });
    return retVal;
};
const de___listOfBrokerInstance = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BrokerInstance(entry, context);
    });
    return retVal;
};
const de___listOfBrokerInstanceOption = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BrokerInstanceOption(entry, context);
    });
    return retVal;
};
const de___listOfBrokerSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BrokerSummary(entry, context);
    });
    return retVal;
};
const de___listOfConfiguration = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Configuration(entry, context);
    });
    return retVal;
};
const de___listOfConfigurationId = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationId(entry, context);
    });
    return retVal;
};
const de___listOfConfigurationRevision = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationRevision(entry, context);
    });
    return retVal;
};
const de___listOfEngineVersion = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EngineVersion(entry, context);
    });
    return retVal;
};
const de___listOfSanitizationWarning = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SanitizationWarning(entry, context);
    });
    return retVal;
};
const de___listOfUserSummary = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserSummary(entry, context);
    });
    return retVal;
};
const de_ActionRequired = (output, context) => {
    return take(output, {
        ActionRequiredCode: [, __expectString, `actionRequiredCode`],
        ActionRequiredInfo: [, __expectString, `actionRequiredInfo`],
    });
};
const de_AvailabilityZone = (output, context) => {
    return take(output, {
        Name: [, __expectString, `name`],
    });
};
const de_BrokerEngineType = (output, context) => {
    return take(output, {
        EngineType: [, __expectString, `engineType`],
        EngineVersions: [, (_) => de___listOfEngineVersion(_, context), `engineVersions`],
    });
};
const de_BrokerInstance = (output, context) => {
    return take(output, {
        ConsoleURL: [, __expectString, `consoleURL`],
        Endpoints: [, _json, `endpoints`],
        IpAddress: [, __expectString, `ipAddress`],
    });
};
const de_BrokerInstanceOption = (output, context) => {
    return take(output, {
        AvailabilityZones: [, (_) => de___listOfAvailabilityZone(_, context), `availabilityZones`],
        EngineType: [, __expectString, `engineType`],
        HostInstanceType: [, __expectString, `hostInstanceType`],
        StorageType: [, __expectString, `storageType`],
        SupportedDeploymentModes: [, _json, `supportedDeploymentModes`],
        SupportedEngineVersions: [, _json, `supportedEngineVersions`],
    });
};
const de_BrokerSummary = (output, context) => {
    return take(output, {
        BrokerArn: [, __expectString, `brokerArn`],
        BrokerId: [, __expectString, `brokerId`],
        BrokerName: [, __expectString, `brokerName`],
        BrokerState: [, __expectString, `brokerState`],
        Created: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `created`],
        DeploymentMode: [, __expectString, `deploymentMode`],
        EngineType: [, __expectString, `engineType`],
        HostInstanceType: [, __expectString, `hostInstanceType`],
    });
};
const de_Configuration = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        AuthenticationStrategy: [, __expectString, `authenticationStrategy`],
        Created: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `created`],
        Description: [, __expectString, `description`],
        EngineType: [, __expectString, `engineType`],
        EngineVersion: [, __expectString, `engineVersion`],
        Id: [, __expectString, `id`],
        LatestRevision: [, (_) => de_ConfigurationRevision(_, context), `latestRevision`],
        Name: [, __expectString, `name`],
        Tags: [, _json, `tags`],
    });
};
const de_ConfigurationId = (output, context) => {
    return take(output, {
        Id: [, __expectString, `id`],
        Revision: [, __expectInt32, `revision`],
    });
};
const de_ConfigurationRevision = (output, context) => {
    return take(output, {
        Created: [, (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)), `created`],
        Description: [, __expectString, `description`],
        Revision: [, __expectInt32, `revision`],
    });
};
const de_Configurations = (output, context) => {
    return take(output, {
        Current: [, (_) => de_ConfigurationId(_, context), `current`],
        History: [, (_) => de___listOfConfigurationId(_, context), `history`],
        Pending: [, (_) => de_ConfigurationId(_, context), `pending`],
    });
};
const de_DataReplicationCounterpart = (output, context) => {
    return take(output, {
        BrokerId: [, __expectString, `brokerId`],
        Region: [, __expectString, `region`],
    });
};
const de_DataReplicationMetadataOutput = (output, context) => {
    return take(output, {
        DataReplicationCounterpart: [, (_) => de_DataReplicationCounterpart(_, context), `dataReplicationCounterpart`],
        DataReplicationRole: [, __expectString, `dataReplicationRole`],
    });
};
const de_EncryptionOptions = (output, context) => {
    return take(output, {
        KmsKeyId: [, __expectString, `kmsKeyId`],
        UseAwsOwnedKey: [, __expectBoolean, `useAwsOwnedKey`],
    });
};
const de_EngineVersion = (output, context) => {
    return take(output, {
        Name: [, __expectString, `name`],
    });
};
const de_LdapServerMetadataOutput = (output, context) => {
    return take(output, {
        Hosts: [, _json, `hosts`],
        RoleBase: [, __expectString, `roleBase`],
        RoleName: [, __expectString, `roleName`],
        RoleSearchMatching: [, __expectString, `roleSearchMatching`],
        RoleSearchSubtree: [, __expectBoolean, `roleSearchSubtree`],
        ServiceAccountUsername: [, __expectString, `serviceAccountUsername`],
        UserBase: [, __expectString, `userBase`],
        UserRoleName: [, __expectString, `userRoleName`],
        UserSearchMatching: [, __expectString, `userSearchMatching`],
        UserSearchSubtree: [, __expectBoolean, `userSearchSubtree`],
    });
};
const de_Logs = (output, context) => {
    return take(output, {
        Audit: [, __expectBoolean, `audit`],
        General: [, __expectBoolean, `general`],
    });
};
const de_LogsSummary = (output, context) => {
    return take(output, {
        Audit: [, __expectBoolean, `audit`],
        AuditLogGroup: [, __expectString, `auditLogGroup`],
        General: [, __expectBoolean, `general`],
        GeneralLogGroup: [, __expectString, `generalLogGroup`],
        Pending: [, (_) => de_PendingLogs(_, context), `pending`],
    });
};
const de_PendingLogs = (output, context) => {
    return take(output, {
        Audit: [, __expectBoolean, `audit`],
        General: [, __expectBoolean, `general`],
    });
};
const de_SanitizationWarning = (output, context) => {
    return take(output, {
        AttributeName: [, __expectString, `attributeName`],
        ElementName: [, __expectString, `elementName`],
        Reason: [, __expectString, `reason`],
    });
};
const de_UserPendingChanges = (output, context) => {
    return take(output, {
        ConsoleAccess: [, __expectBoolean, `consoleAccess`],
        Groups: [, _json, `groups`],
        PendingChange: [, __expectString, `pendingChange`],
    });
};
const de_UserSummary = (output, context) => {
    return take(output, {
        PendingChange: [, __expectString, `pendingChange`],
        Username: [, __expectString, `username`],
    });
};
const de_WeeklyStartTime = (output, context) => {
    return take(output, {
        DayOfWeek: [, __expectString, `dayOfWeek`],
        TimeOfDay: [, __expectString, `timeOfDay`],
        TimeZone: [, __expectString, `timeZone`],
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _ET = "EngineType";
const _HIT = "HostInstanceType";
const _MR = "MaxResults";
const _NT = "NextToken";
const _ST = "StorageType";
const _TK = "TagKeys";
const _eT = "engineType";
const _hIT = "hostInstanceType";
const _mR = "maxResults";
const _nT = "nextToken";
const _sT = "storageType";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
