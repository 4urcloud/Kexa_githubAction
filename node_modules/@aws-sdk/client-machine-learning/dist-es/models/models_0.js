import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { MachineLearningServiceException as __BaseException } from "./MachineLearningServiceException";
export const TaggableResourceType = {
    BATCH_PREDICTION: "BatchPrediction",
    DATASOURCE: "DataSource",
    EVALUATION: "Evaluation",
    ML_MODEL: "MLModel",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.code = opts.code;
    }
}
export class InvalidInputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.code = opts.code;
    }
}
export class InvalidTagException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidTagException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.code = opts.code;
    }
}
export class TagLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "TagLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagLimitExceededException.prototype);
    }
}
export const Algorithm = {
    SGD: "sgd",
};
export class IdempotentParameterMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.code = opts.code;
    }
}
export const MLModelType = {
    BINARY: "BINARY",
    MULTICLASS: "MULTICLASS",
    REGRESSION: "REGRESSION",
};
export const RealtimeEndpointStatus = {
    FAILED: "FAILED",
    NONE: "NONE",
    READY: "READY",
    UPDATING: "UPDATING",
};
export const BatchPredictionFilterVariable = {
    CREATED_AT: "CreatedAt",
    DATASOURCE_ID: "DataSourceId",
    DATA_URI: "DataURI",
    IAM_USER: "IAMUser",
    LAST_UPDATED_AT: "LastUpdatedAt",
    ML_MODEL_ID: "MLModelId",
    NAME: "Name",
    STATUS: "Status",
};
export const SortOrder = {
    ASC: "asc",
    DSC: "dsc",
};
export const EntityStatus = {
    COMPLETED: "COMPLETED",
    DELETED: "DELETED",
    FAILED: "FAILED",
    INPROGRESS: "INPROGRESS",
    PENDING: "PENDING",
};
export const DataSourceFilterVariable = {
    CREATED_AT: "CreatedAt",
    DATA_URI: "DataLocationS3",
    IAM_USER: "IAMUser",
    LAST_UPDATED_AT: "LastUpdatedAt",
    NAME: "Name",
    STATUS: "Status",
};
export const EvaluationFilterVariable = {
    CREATED_AT: "CreatedAt",
    DATASOURCE_ID: "DataSourceId",
    DATA_URI: "DataURI",
    IAM_USER: "IAMUser",
    LAST_UPDATED_AT: "LastUpdatedAt",
    ML_MODEL_ID: "MLModelId",
    NAME: "Name",
    STATUS: "Status",
};
export const MLModelFilterVariable = {
    ALGORITHM: "Algorithm",
    CREATED_AT: "CreatedAt",
    IAM_USER: "IAMUser",
    LAST_UPDATED_AT: "LastUpdatedAt",
    ML_MODEL_TYPE: "MLModelType",
    NAME: "Name",
    REAL_TIME_ENDPOINT_STATUS: "RealtimeEndpointStatus",
    STATUS: "Status",
    TRAINING_DATASOURCE_ID: "TrainingDataSourceId",
    TRAINING_DATA_URI: "TrainingDataURI",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.code = opts.code;
    }
}
export class PredictorNotMountedException extends __BaseException {
    constructor(opts) {
        super({
            name: "PredictorNotMountedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PredictorNotMountedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PredictorNotMountedException.prototype);
    }
}
export const DetailsAttributes = {
    ALGORITHM: "Algorithm",
    PREDICTIVE_MODEL_TYPE: "PredictiveModelType",
};
export const RDSDatabaseCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: SENSITIVE_STRING }),
});
export const RDSDataSpecFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DatabaseCredentials && {
        DatabaseCredentials: RDSDatabaseCredentialsFilterSensitiveLog(obj.DatabaseCredentials),
    }),
});
export const CreateDataSourceFromRDSInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RDSData && { RDSData: RDSDataSpecFilterSensitiveLog(obj.RDSData) }),
});
export const RedshiftDatabaseCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: SENSITIVE_STRING }),
});
export const RedshiftDataSpecFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DatabaseCredentials && {
        DatabaseCredentials: RedshiftDatabaseCredentialsFilterSensitiveLog(obj.DatabaseCredentials),
    }),
});
export const CreateDataSourceFromRedshiftInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DataSpec && { DataSpec: RedshiftDataSpecFilterSensitiveLog(obj.DataSpec) }),
});
