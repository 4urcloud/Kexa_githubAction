import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { MachineLearningServiceException as __BaseException } from "../models/MachineLearningServiceException";
import { IdempotentParameterMismatchException, InternalServerException, InvalidInputException, InvalidTagException, LimitExceededException, PredictorNotMountedException, ResourceNotFoundException, TagLimitExceededException, } from "../models/models_0";
export const se_AddTagsCommand = async (input, context) => {
    const headers = sharedHeaders("AddTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateBatchPredictionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateBatchPrediction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDataSourceFromRDSCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataSourceFromRDS");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDataSourceFromRedshiftCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataSourceFromRedshift");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDataSourceFromS3Command = async (input, context) => {
    const headers = sharedHeaders("CreateDataSourceFromS3");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEvaluation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateMLModelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMLModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRealtimeEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRealtimeEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteBatchPredictionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBatchPrediction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDataSourceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataSource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEvaluation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMLModelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMLModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRealtimeEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRealtimeEndpoint");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTagsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeBatchPredictionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeBatchPredictions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDataSourcesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataSources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEvaluationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEvaluations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeMLModelsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMLModels");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTagsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetBatchPredictionCommand = async (input, context) => {
    const headers = sharedHeaders("GetBatchPrediction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDataSourceCommand = async (input, context) => {
    const headers = sharedHeaders("GetDataSource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("GetEvaluation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMLModelCommand = async (input, context) => {
    const headers = sharedHeaders("GetMLModel");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PredictCommand = async (input, context) => {
    const headers = sharedHeaders("Predict");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateBatchPredictionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateBatchPrediction");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDataSourceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDataSource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEvaluationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEvaluation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateMLModelCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMLModel");
    let body;
    body = JSON.stringify(se_UpdateMLModelInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AddTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateBatchPredictionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDataSourceFromRDSCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDataSourceFromRedshiftCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDataSourceFromS3Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateMLModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRealtimeEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRealtimeEndpointOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteBatchPredictionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteMLModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRealtimeEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRealtimeEndpointOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeBatchPredictionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeBatchPredictionsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDataSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDataSourcesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEvaluationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEvaluationsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeMLModelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeMLModelsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetBatchPredictionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBatchPredictionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDataSourceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetEvaluationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMLModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMLModelOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PredictCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PredictOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateBatchPredictionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDataSourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEvaluationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateMLModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.machinelearning#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.machinelearning#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "InvalidTagException":
        case "com.amazonaws.machinelearning#InvalidTagException":
            throw await de_InvalidTagExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.machinelearning#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TagLimitExceededException":
        case "com.amazonaws.machinelearning#TagLimitExceededException":
            throw await de_TagLimitExceededExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.machinelearning#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.machinelearning#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "PredictorNotMountedException":
        case "com.amazonaws.machinelearning#PredictorNotMountedException":
            throw await de_PredictorNotMountedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTagExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTagException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PredictorNotMountedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new PredictorNotMountedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TagLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TagLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_UpdateMLModelInput = (input, context) => {
    return take(input, {
        MLModelId: [],
        MLModelName: [],
        ScoreThreshold: __serializeFloat,
    });
};
const de_BatchPrediction = (output, context) => {
    return take(output, {
        BatchPredictionDataSourceId: __expectString,
        BatchPredictionId: __expectString,
        ComputeTime: __expectLong,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedByIamUser: __expectString,
        FinishedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataLocationS3: __expectString,
        InvalidRecordCount: __expectLong,
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MLModelId: __expectString,
        Message: __expectString,
        Name: __expectString,
        OutputUri: __expectString,
        StartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        TotalRecordCount: __expectLong,
    });
};
const de_BatchPredictions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchPrediction(entry, context);
    });
    return retVal;
};
const de_CreateRealtimeEndpointOutput = (output, context) => {
    return take(output, {
        MLModelId: __expectString,
        RealtimeEndpointInfo: (_) => de_RealtimeEndpointInfo(_, context),
    });
};
const de_DataSource = (output, context) => {
    return take(output, {
        ComputeStatistics: __expectBoolean,
        ComputeTime: __expectLong,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedByIamUser: __expectString,
        DataLocationS3: __expectString,
        DataRearrangement: __expectString,
        DataSizeInBytes: __expectLong,
        DataSourceId: __expectString,
        FinishedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Message: __expectString,
        Name: __expectString,
        NumberOfFiles: __expectLong,
        RDSMetadata: _json,
        RedshiftMetadata: _json,
        RoleARN: __expectString,
        StartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_DataSources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSource(entry, context);
    });
    return retVal;
};
const de_DeleteRealtimeEndpointOutput = (output, context) => {
    return take(output, {
        MLModelId: __expectString,
        RealtimeEndpointInfo: (_) => de_RealtimeEndpointInfo(_, context),
    });
};
const de_DescribeBatchPredictionsOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Results: (_) => de_BatchPredictions(_, context),
    });
};
const de_DescribeDataSourcesOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Results: (_) => de_DataSources(_, context),
    });
};
const de_DescribeEvaluationsOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Results: (_) => de_Evaluations(_, context),
    });
};
const de_DescribeMLModelsOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Results: (_) => de_MLModels(_, context),
    });
};
const de_Evaluation = (output, context) => {
    return take(output, {
        ComputeTime: __expectLong,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedByIamUser: __expectString,
        EvaluationDataSourceId: __expectString,
        EvaluationId: __expectString,
        FinishedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataLocationS3: __expectString,
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MLModelId: __expectString,
        Message: __expectString,
        Name: __expectString,
        PerformanceMetrics: _json,
        StartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_Evaluations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Evaluation(entry, context);
    });
    return retVal;
};
const de_GetBatchPredictionOutput = (output, context) => {
    return take(output, {
        BatchPredictionDataSourceId: __expectString,
        BatchPredictionId: __expectString,
        ComputeTime: __expectLong,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedByIamUser: __expectString,
        FinishedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataLocationS3: __expectString,
        InvalidRecordCount: __expectLong,
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogUri: __expectString,
        MLModelId: __expectString,
        Message: __expectString,
        Name: __expectString,
        OutputUri: __expectString,
        StartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        TotalRecordCount: __expectLong,
    });
};
const de_GetDataSourceOutput = (output, context) => {
    return take(output, {
        ComputeStatistics: __expectBoolean,
        ComputeTime: __expectLong,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedByIamUser: __expectString,
        DataLocationS3: __expectString,
        DataRearrangement: __expectString,
        DataSizeInBytes: __expectLong,
        DataSourceId: __expectString,
        DataSourceSchema: __expectString,
        FinishedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogUri: __expectString,
        Message: __expectString,
        Name: __expectString,
        NumberOfFiles: __expectLong,
        RDSMetadata: _json,
        RedshiftMetadata: _json,
        RoleARN: __expectString,
        StartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_GetEvaluationOutput = (output, context) => {
    return take(output, {
        ComputeTime: __expectLong,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedByIamUser: __expectString,
        EvaluationDataSourceId: __expectString,
        EvaluationId: __expectString,
        FinishedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataLocationS3: __expectString,
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogUri: __expectString,
        MLModelId: __expectString,
        Message: __expectString,
        Name: __expectString,
        PerformanceMetrics: _json,
        StartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
};
const de_GetMLModelOutput = (output, context) => {
    return take(output, {
        ComputeTime: __expectLong,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedByIamUser: __expectString,
        EndpointInfo: (_) => de_RealtimeEndpointInfo(_, context),
        FinishedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataLocationS3: __expectString,
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LogUri: __expectString,
        MLModelId: __expectString,
        MLModelType: __expectString,
        Message: __expectString,
        Name: __expectString,
        Recipe: __expectString,
        Schema: __expectString,
        ScoreThreshold: __limitedParseFloat32,
        ScoreThresholdLastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SizeInBytes: __expectLong,
        StartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        TrainingDataSourceId: __expectString,
        TrainingParameters: _json,
    });
};
const de_MLModel = (output, context) => {
    return take(output, {
        Algorithm: __expectString,
        ComputeTime: __expectLong,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreatedByIamUser: __expectString,
        EndpointInfo: (_) => de_RealtimeEndpointInfo(_, context),
        FinishedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        InputDataLocationS3: __expectString,
        LastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MLModelId: __expectString,
        MLModelType: __expectString,
        Message: __expectString,
        Name: __expectString,
        ScoreThreshold: __limitedParseFloat32,
        ScoreThresholdLastUpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SizeInBytes: __expectLong,
        StartedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        TrainingDataSourceId: __expectString,
        TrainingParameters: _json,
    });
};
const de_MLModels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MLModel(entry, context);
    });
    return retVal;
};
const de_Prediction = (output, context) => {
    return take(output, {
        details: _json,
        predictedLabel: __expectString,
        predictedScores: (_) => de_ScoreValuePerLabelMap(_, context),
        predictedValue: __limitedParseFloat32,
    });
};
const de_PredictOutput = (output, context) => {
    return take(output, {
        Prediction: (_) => de_Prediction(_, context),
    });
};
const de_RealtimeEndpointInfo = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EndpointStatus: __expectString,
        EndpointUrl: __expectString,
        PeakRequestsPerSecond: __expectInt32,
    });
};
const de_ScoreValuePerLabelMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = __limitedParseFloat32(value);
        return acc;
    }, {});
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AmazonML_20141212.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
