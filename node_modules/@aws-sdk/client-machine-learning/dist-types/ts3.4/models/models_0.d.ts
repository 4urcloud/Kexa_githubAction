import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { MachineLearningServiceException as __BaseException } from "./MachineLearningServiceException";
export declare const TaggableResourceType: {
  readonly BATCH_PREDICTION: "BatchPrediction";
  readonly DATASOURCE: "DataSource";
  readonly EVALUATION: "Evaluation";
  readonly ML_MODEL: "MLModel";
};
export type TaggableResourceType =
  (typeof TaggableResourceType)[keyof typeof TaggableResourceType];
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface AddTagsInput {
  Tags: Tag[] | undefined;
  ResourceId: string | undefined;
  ResourceType: TaggableResourceType | undefined;
}
export interface AddTagsOutput {
  ResourceId?: string;
  ResourceType?: TaggableResourceType;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  code?: number;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class InvalidInputException extends __BaseException {
  readonly name: "InvalidInputException";
  readonly $fault: "client";
  code?: number;
  constructor(
    opts: __ExceptionOptionType<InvalidInputException, __BaseException>
  );
}
export declare class InvalidTagException extends __BaseException {
  readonly name: "InvalidTagException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidTagException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  code?: number;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class TagLimitExceededException extends __BaseException {
  readonly name: "TagLimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TagLimitExceededException, __BaseException>
  );
}
export declare const Algorithm: {
  readonly SGD: "sgd";
};
export type Algorithm = (typeof Algorithm)[keyof typeof Algorithm];
export interface CreateBatchPredictionInput {
  BatchPredictionId: string | undefined;
  BatchPredictionName?: string;
  MLModelId: string | undefined;
  BatchPredictionDataSourceId: string | undefined;
  OutputUri: string | undefined;
}
export interface CreateBatchPredictionOutput {
  BatchPredictionId?: string;
}
export declare class IdempotentParameterMismatchException extends __BaseException {
  readonly name: "IdempotentParameterMismatchException";
  readonly $fault: "client";
  code?: number;
  constructor(
    opts: __ExceptionOptionType<
      IdempotentParameterMismatchException,
      __BaseException
    >
  );
}
export interface RDSDatabaseCredentials {
  Username: string | undefined;
  Password: string | undefined;
}
export interface RDSDatabase {
  InstanceIdentifier: string | undefined;
  DatabaseName: string | undefined;
}
export interface RDSDataSpec {
  DatabaseInformation: RDSDatabase | undefined;
  SelectSqlQuery: string | undefined;
  DatabaseCredentials: RDSDatabaseCredentials | undefined;
  S3StagingLocation: string | undefined;
  DataRearrangement?: string;
  DataSchema?: string;
  DataSchemaUri?: string;
  ResourceRole: string | undefined;
  ServiceRole: string | undefined;
  SubnetId: string | undefined;
  SecurityGroupIds: string[] | undefined;
}
export interface CreateDataSourceFromRDSInput {
  DataSourceId: string | undefined;
  DataSourceName?: string;
  RDSData: RDSDataSpec | undefined;
  RoleARN: string | undefined;
  ComputeStatistics?: boolean;
}
export interface CreateDataSourceFromRDSOutput {
  DataSourceId?: string;
}
export interface RedshiftDatabaseCredentials {
  Username: string | undefined;
  Password: string | undefined;
}
export interface RedshiftDatabase {
  DatabaseName: string | undefined;
  ClusterIdentifier: string | undefined;
}
export interface RedshiftDataSpec {
  DatabaseInformation: RedshiftDatabase | undefined;
  SelectSqlQuery: string | undefined;
  DatabaseCredentials: RedshiftDatabaseCredentials | undefined;
  S3StagingLocation: string | undefined;
  DataRearrangement?: string;
  DataSchema?: string;
  DataSchemaUri?: string;
}
export interface CreateDataSourceFromRedshiftInput {
  DataSourceId: string | undefined;
  DataSourceName?: string;
  DataSpec: RedshiftDataSpec | undefined;
  RoleARN: string | undefined;
  ComputeStatistics?: boolean;
}
export interface CreateDataSourceFromRedshiftOutput {
  DataSourceId?: string;
}
export interface S3DataSpec {
  DataLocationS3: string | undefined;
  DataRearrangement?: string;
  DataSchema?: string;
  DataSchemaLocationS3?: string;
}
export interface CreateDataSourceFromS3Input {
  DataSourceId: string | undefined;
  DataSourceName?: string;
  DataSpec: S3DataSpec | undefined;
  ComputeStatistics?: boolean;
}
export interface CreateDataSourceFromS3Output {
  DataSourceId?: string;
}
export interface CreateEvaluationInput {
  EvaluationId: string | undefined;
  EvaluationName?: string;
  MLModelId: string | undefined;
  EvaluationDataSourceId: string | undefined;
}
export interface CreateEvaluationOutput {
  EvaluationId?: string;
}
export declare const MLModelType: {
  readonly BINARY: "BINARY";
  readonly MULTICLASS: "MULTICLASS";
  readonly REGRESSION: "REGRESSION";
};
export type MLModelType = (typeof MLModelType)[keyof typeof MLModelType];
export interface CreateMLModelInput {
  MLModelId: string | undefined;
  MLModelName?: string;
  MLModelType: MLModelType | undefined;
  Parameters?: Record<string, string>;
  TrainingDataSourceId: string | undefined;
  Recipe?: string;
  RecipeUri?: string;
}
export interface CreateMLModelOutput {
  MLModelId?: string;
}
export interface CreateRealtimeEndpointInput {
  MLModelId: string | undefined;
}
export declare const RealtimeEndpointStatus: {
  readonly FAILED: "FAILED";
  readonly NONE: "NONE";
  readonly READY: "READY";
  readonly UPDATING: "UPDATING";
};
export type RealtimeEndpointStatus =
  (typeof RealtimeEndpointStatus)[keyof typeof RealtimeEndpointStatus];
export interface RealtimeEndpointInfo {
  PeakRequestsPerSecond?: number;
  CreatedAt?: Date;
  EndpointUrl?: string;
  EndpointStatus?: RealtimeEndpointStatus;
}
export interface CreateRealtimeEndpointOutput {
  MLModelId?: string;
  RealtimeEndpointInfo?: RealtimeEndpointInfo;
}
export interface DeleteBatchPredictionInput {
  BatchPredictionId: string | undefined;
}
export interface DeleteBatchPredictionOutput {
  BatchPredictionId?: string;
}
export interface DeleteDataSourceInput {
  DataSourceId: string | undefined;
}
export interface DeleteDataSourceOutput {
  DataSourceId?: string;
}
export interface DeleteEvaluationInput {
  EvaluationId: string | undefined;
}
export interface DeleteEvaluationOutput {
  EvaluationId?: string;
}
export interface DeleteMLModelInput {
  MLModelId: string | undefined;
}
export interface DeleteMLModelOutput {
  MLModelId?: string;
}
export interface DeleteRealtimeEndpointInput {
  MLModelId: string | undefined;
}
export interface DeleteRealtimeEndpointOutput {
  MLModelId?: string;
  RealtimeEndpointInfo?: RealtimeEndpointInfo;
}
export interface DeleteTagsInput {
  TagKeys: string[] | undefined;
  ResourceId: string | undefined;
  ResourceType: TaggableResourceType | undefined;
}
export interface DeleteTagsOutput {
  ResourceId?: string;
  ResourceType?: TaggableResourceType;
}
export declare const BatchPredictionFilterVariable: {
  readonly CREATED_AT: "CreatedAt";
  readonly DATASOURCE_ID: "DataSourceId";
  readonly DATA_URI: "DataURI";
  readonly IAM_USER: "IAMUser";
  readonly LAST_UPDATED_AT: "LastUpdatedAt";
  readonly ML_MODEL_ID: "MLModelId";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type BatchPredictionFilterVariable =
  (typeof BatchPredictionFilterVariable)[keyof typeof BatchPredictionFilterVariable];
export declare const SortOrder: {
  readonly ASC: "asc";
  readonly DSC: "dsc";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface DescribeBatchPredictionsInput {
  FilterVariable?: BatchPredictionFilterVariable;
  EQ?: string;
  GT?: string;
  LT?: string;
  GE?: string;
  LE?: string;
  NE?: string;
  Prefix?: string;
  SortOrder?: SortOrder;
  NextToken?: string;
  Limit?: number;
}
export declare const EntityStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly DELETED: "DELETED";
  readonly FAILED: "FAILED";
  readonly INPROGRESS: "INPROGRESS";
  readonly PENDING: "PENDING";
};
export type EntityStatus = (typeof EntityStatus)[keyof typeof EntityStatus];
export interface BatchPrediction {
  BatchPredictionId?: string;
  MLModelId?: string;
  BatchPredictionDataSourceId?: string;
  InputDataLocationS3?: string;
  CreatedByIamUser?: string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  Name?: string;
  Status?: EntityStatus;
  OutputUri?: string;
  Message?: string;
  ComputeTime?: number;
  FinishedAt?: Date;
  StartedAt?: Date;
  TotalRecordCount?: number;
  InvalidRecordCount?: number;
}
export interface DescribeBatchPredictionsOutput {
  Results?: BatchPrediction[];
  NextToken?: string;
}
export declare const DataSourceFilterVariable: {
  readonly CREATED_AT: "CreatedAt";
  readonly DATA_URI: "DataLocationS3";
  readonly IAM_USER: "IAMUser";
  readonly LAST_UPDATED_AT: "LastUpdatedAt";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type DataSourceFilterVariable =
  (typeof DataSourceFilterVariable)[keyof typeof DataSourceFilterVariable];
export interface DescribeDataSourcesInput {
  FilterVariable?: DataSourceFilterVariable;
  EQ?: string;
  GT?: string;
  LT?: string;
  GE?: string;
  LE?: string;
  NE?: string;
  Prefix?: string;
  SortOrder?: SortOrder;
  NextToken?: string;
  Limit?: number;
}
export interface RDSMetadata {
  Database?: RDSDatabase;
  DatabaseUserName?: string;
  SelectSqlQuery?: string;
  ResourceRole?: string;
  ServiceRole?: string;
  DataPipelineId?: string;
}
export interface RedshiftMetadata {
  RedshiftDatabase?: RedshiftDatabase;
  DatabaseUserName?: string;
  SelectSqlQuery?: string;
}
export interface DataSource {
  DataSourceId?: string;
  DataLocationS3?: string;
  DataRearrangement?: string;
  CreatedByIamUser?: string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  DataSizeInBytes?: number;
  NumberOfFiles?: number;
  Name?: string;
  Status?: EntityStatus;
  Message?: string;
  RedshiftMetadata?: RedshiftMetadata;
  RDSMetadata?: RDSMetadata;
  RoleARN?: string;
  ComputeStatistics?: boolean;
  ComputeTime?: number;
  FinishedAt?: Date;
  StartedAt?: Date;
}
export interface DescribeDataSourcesOutput {
  Results?: DataSource[];
  NextToken?: string;
}
export declare const EvaluationFilterVariable: {
  readonly CREATED_AT: "CreatedAt";
  readonly DATASOURCE_ID: "DataSourceId";
  readonly DATA_URI: "DataURI";
  readonly IAM_USER: "IAMUser";
  readonly LAST_UPDATED_AT: "LastUpdatedAt";
  readonly ML_MODEL_ID: "MLModelId";
  readonly NAME: "Name";
  readonly STATUS: "Status";
};
export type EvaluationFilterVariable =
  (typeof EvaluationFilterVariable)[keyof typeof EvaluationFilterVariable];
export interface DescribeEvaluationsInput {
  FilterVariable?: EvaluationFilterVariable;
  EQ?: string;
  GT?: string;
  LT?: string;
  GE?: string;
  LE?: string;
  NE?: string;
  Prefix?: string;
  SortOrder?: SortOrder;
  NextToken?: string;
  Limit?: number;
}
export interface PerformanceMetrics {
  Properties?: Record<string, string>;
}
export interface Evaluation {
  EvaluationId?: string;
  MLModelId?: string;
  EvaluationDataSourceId?: string;
  InputDataLocationS3?: string;
  CreatedByIamUser?: string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  Name?: string;
  Status?: EntityStatus;
  PerformanceMetrics?: PerformanceMetrics;
  Message?: string;
  ComputeTime?: number;
  FinishedAt?: Date;
  StartedAt?: Date;
}
export interface DescribeEvaluationsOutput {
  Results?: Evaluation[];
  NextToken?: string;
}
export declare const MLModelFilterVariable: {
  readonly ALGORITHM: "Algorithm";
  readonly CREATED_AT: "CreatedAt";
  readonly IAM_USER: "IAMUser";
  readonly LAST_UPDATED_AT: "LastUpdatedAt";
  readonly ML_MODEL_TYPE: "MLModelType";
  readonly NAME: "Name";
  readonly REAL_TIME_ENDPOINT_STATUS: "RealtimeEndpointStatus";
  readonly STATUS: "Status";
  readonly TRAINING_DATASOURCE_ID: "TrainingDataSourceId";
  readonly TRAINING_DATA_URI: "TrainingDataURI";
};
export type MLModelFilterVariable =
  (typeof MLModelFilterVariable)[keyof typeof MLModelFilterVariable];
export interface DescribeMLModelsInput {
  FilterVariable?: MLModelFilterVariable;
  EQ?: string;
  GT?: string;
  LT?: string;
  GE?: string;
  LE?: string;
  NE?: string;
  Prefix?: string;
  SortOrder?: SortOrder;
  NextToken?: string;
  Limit?: number;
}
export interface MLModel {
  MLModelId?: string;
  TrainingDataSourceId?: string;
  CreatedByIamUser?: string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  Name?: string;
  Status?: EntityStatus;
  SizeInBytes?: number;
  EndpointInfo?: RealtimeEndpointInfo;
  TrainingParameters?: Record<string, string>;
  InputDataLocationS3?: string;
  Algorithm?: Algorithm;
  MLModelType?: MLModelType;
  ScoreThreshold?: number;
  ScoreThresholdLastUpdatedAt?: Date;
  Message?: string;
  ComputeTime?: number;
  FinishedAt?: Date;
  StartedAt?: Date;
}
export interface DescribeMLModelsOutput {
  Results?: MLModel[];
  NextToken?: string;
}
export interface DescribeTagsInput {
  ResourceId: string | undefined;
  ResourceType: TaggableResourceType | undefined;
}
export interface DescribeTagsOutput {
  ResourceId?: string;
  ResourceType?: TaggableResourceType;
  Tags?: Tag[];
}
export interface GetBatchPredictionInput {
  BatchPredictionId: string | undefined;
}
export interface GetBatchPredictionOutput {
  BatchPredictionId?: string;
  MLModelId?: string;
  BatchPredictionDataSourceId?: string;
  InputDataLocationS3?: string;
  CreatedByIamUser?: string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  Name?: string;
  Status?: EntityStatus;
  OutputUri?: string;
  LogUri?: string;
  Message?: string;
  ComputeTime?: number;
  FinishedAt?: Date;
  StartedAt?: Date;
  TotalRecordCount?: number;
  InvalidRecordCount?: number;
}
export interface GetDataSourceInput {
  DataSourceId: string | undefined;
  Verbose?: boolean;
}
export interface GetDataSourceOutput {
  DataSourceId?: string;
  DataLocationS3?: string;
  DataRearrangement?: string;
  CreatedByIamUser?: string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  DataSizeInBytes?: number;
  NumberOfFiles?: number;
  Name?: string;
  Status?: EntityStatus;
  LogUri?: string;
  Message?: string;
  RedshiftMetadata?: RedshiftMetadata;
  RDSMetadata?: RDSMetadata;
  RoleARN?: string;
  ComputeStatistics?: boolean;
  ComputeTime?: number;
  FinishedAt?: Date;
  StartedAt?: Date;
  DataSourceSchema?: string;
}
export interface GetEvaluationInput {
  EvaluationId: string | undefined;
}
export interface GetEvaluationOutput {
  EvaluationId?: string;
  MLModelId?: string;
  EvaluationDataSourceId?: string;
  InputDataLocationS3?: string;
  CreatedByIamUser?: string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  Name?: string;
  Status?: EntityStatus;
  PerformanceMetrics?: PerformanceMetrics;
  LogUri?: string;
  Message?: string;
  ComputeTime?: number;
  FinishedAt?: Date;
  StartedAt?: Date;
}
export interface GetMLModelInput {
  MLModelId: string | undefined;
  Verbose?: boolean;
}
export interface GetMLModelOutput {
  MLModelId?: string;
  TrainingDataSourceId?: string;
  CreatedByIamUser?: string;
  CreatedAt?: Date;
  LastUpdatedAt?: Date;
  Name?: string;
  Status?: EntityStatus;
  SizeInBytes?: number;
  EndpointInfo?: RealtimeEndpointInfo;
  TrainingParameters?: Record<string, string>;
  InputDataLocationS3?: string;
  MLModelType?: MLModelType;
  ScoreThreshold?: number;
  ScoreThresholdLastUpdatedAt?: Date;
  LogUri?: string;
  Message?: string;
  ComputeTime?: number;
  FinishedAt?: Date;
  StartedAt?: Date;
  Recipe?: string;
  Schema?: string;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  code?: number;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export interface PredictInput {
  MLModelId: string | undefined;
  Record: Record<string, string> | undefined;
  PredictEndpoint: string | undefined;
}
export declare class PredictorNotMountedException extends __BaseException {
  readonly name: "PredictorNotMountedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PredictorNotMountedException, __BaseException>
  );
}
export declare const DetailsAttributes: {
  readonly ALGORITHM: "Algorithm";
  readonly PREDICTIVE_MODEL_TYPE: "PredictiveModelType";
};
export type DetailsAttributes =
  (typeof DetailsAttributes)[keyof typeof DetailsAttributes];
export interface Prediction {
  predictedLabel?: string;
  predictedValue?: number;
  predictedScores?: Record<string, number>;
  details?: Partial<Record<DetailsAttributes, string>>;
}
export interface PredictOutput {
  Prediction?: Prediction;
}
export interface UpdateBatchPredictionInput {
  BatchPredictionId: string | undefined;
  BatchPredictionName: string | undefined;
}
export interface UpdateBatchPredictionOutput {
  BatchPredictionId?: string;
}
export interface UpdateDataSourceInput {
  DataSourceId: string | undefined;
  DataSourceName: string | undefined;
}
export interface UpdateDataSourceOutput {
  DataSourceId?: string;
}
export interface UpdateEvaluationInput {
  EvaluationId: string | undefined;
  EvaluationName: string | undefined;
}
export interface UpdateEvaluationOutput {
  EvaluationId?: string;
}
export interface UpdateMLModelInput {
  MLModelId: string | undefined;
  MLModelName?: string;
  ScoreThreshold?: number;
}
export interface UpdateMLModelOutput {
  MLModelId?: string;
}
export declare const RDSDatabaseCredentialsFilterSensitiveLog: (
  obj: RDSDatabaseCredentials
) => any;
export declare const RDSDataSpecFilterSensitiveLog: (obj: RDSDataSpec) => any;
export declare const CreateDataSourceFromRDSInputFilterSensitiveLog: (
  obj: CreateDataSourceFromRDSInput
) => any;
export declare const RedshiftDatabaseCredentialsFilterSensitiveLog: (
  obj: RedshiftDatabaseCredentials
) => any;
export declare const RedshiftDataSpecFilterSensitiveLog: (
  obj: RedshiftDataSpec
) => any;
export declare const CreateDataSourceFromRedshiftInputFilterSensitiveLog: (
  obj: CreateDataSourceFromRedshiftInput
) => any;
