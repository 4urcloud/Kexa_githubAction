import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { EMRServerlessClientResolvedConfig } from "../EMRServerlessClient";
export interface EMRServerlessHttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface EMRServerlessHttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    EMRServerlessClientResolvedConfig,
    HandlerExecutionContext,
    EMRServerlessHttpAuthSchemeParameters,
    object
  > {}
export declare const defaultEMRServerlessHttpAuthSchemeParametersProvider: (
  config: EMRServerlessClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<EMRServerlessHttpAuthSchemeParameters>;
export interface EMRServerlessHttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<EMRServerlessHttpAuthSchemeParameters> {}
export declare const defaultEMRServerlessHttpAuthSchemeProvider: EMRServerlessHttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: EMRServerlessHttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: EMRServerlessHttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
