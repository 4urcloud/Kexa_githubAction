import { awsExpectUnion as __expectUnion } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { EMRServerlessServiceException as __BaseException } from "../models/EMRServerlessServiceException";
import { ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ValidationException, } from "../models/models_0";
export const se_CancelJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/jobruns/{jobRunId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("jobRunId", () => input.jobRunId, "{jobRunId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_CreateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications");
    let body;
    body = JSON.stringify(take(input, {
        architecture: [],
        autoStartConfiguration: (_) => _json(_),
        autoStopConfiguration: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        imageConfiguration: (_) => _json(_),
        initialCapacity: (_) => _json(_),
        maximumCapacity: (_) => _json(_),
        monitoringConfiguration: (_) => _json(_),
        name: [],
        networkConfiguration: (_) => _json(_),
        releaseLabel: [],
        runtimeConfiguration: (_) => se_ConfigurationList(_, context),
        tags: (_) => _json(_),
        type: [],
        workerTypeSpecifications: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDashboardForJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/jobruns/{jobRunId}/dashboard");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("jobRunId", () => input.jobRunId, "{jobRunId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/jobruns/{jobRunId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    b.p("jobRunId", () => input.jobRunId, "{jobRunId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListApplicationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_s]: [() => input.states !== void 0, () => (input[_s] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJobRunsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/jobruns");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_cAA]: [() => input.createdAtAfter !== void 0, () => (input[_cAA].toISOString().split(".")[0] + "Z").toString()],
        [_cAB]: [() => input.createdAtBefore !== void 0, () => (input[_cAB].toISOString().split(".")[0] + "Z").toString()],
        [_s]: [() => input.states !== void 0, () => (input[_s] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_StartApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/start");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartJobRunCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}/jobruns");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        configurationOverrides: (_) => se_ConfigurationOverrides(_, context),
        executionRoleArn: [],
        executionTimeoutMinutes: [],
        jobDriver: (_) => _json(_),
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/applications/{applicationId}/stop");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateApplicationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/applications/{applicationId}");
    b.p("applicationId", () => input.applicationId, "{applicationId}", false);
    let body;
    body = JSON.stringify(take(input, {
        architecture: [],
        autoStartConfiguration: (_) => _json(_),
        autoStopConfiguration: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        imageConfiguration: (_) => _json(_),
        initialCapacity: (_) => _json(_),
        maximumCapacity: (_) => _json(_),
        monitoringConfiguration: (_) => _json(_),
        networkConfiguration: (_) => _json(_),
        releaseLabel: [],
        runtimeConfiguration: (_) => se_ConfigurationList(_, context),
        workerTypeSpecifications: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_CancelJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationId: __expectString,
        jobRunId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationId: __expectString,
        arn: __expectString,
        name: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        application: (_) => de_Application(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDashboardForJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        url: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobRun: (_) => de_JobRun(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applications: (_) => de_ApplicationList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobRunsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobRuns: (_) => de_JobRuns(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartJobRunCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        applicationId: __expectString,
        arn: __expectString,
        jobRunId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StopApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        application: (_) => de_Application(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.emrserverless#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.emrserverless#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.emrserverless#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.emrserverless#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.emrserverless#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_Configuration = (input, context) => {
    return take(input, {
        classification: [],
        configurations: (_) => se_ConfigurationList(_, context),
        properties: _json,
    });
};
const se_ConfigurationList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Configuration(entry, context);
    });
};
const se_ConfigurationOverrides = (input, context) => {
    return take(input, {
        applicationConfiguration: (_) => se_ConfigurationList(_, context),
        monitoringConfiguration: _json,
    });
};
const de_Application = (output, context) => {
    return take(output, {
        applicationId: __expectString,
        architecture: __expectString,
        arn: __expectString,
        autoStartConfiguration: _json,
        autoStopConfiguration: _json,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        imageConfiguration: _json,
        initialCapacity: _json,
        maximumCapacity: _json,
        monitoringConfiguration: _json,
        name: __expectString,
        networkConfiguration: _json,
        releaseLabel: __expectString,
        runtimeConfiguration: (_) => de_ConfigurationList(_, context),
        state: __expectString,
        stateDetails: __expectString,
        tags: _json,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        workerTypeSpecifications: _json,
    });
};
const de_ApplicationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationSummary(entry, context);
    });
    return retVal;
};
const de_ApplicationSummary = (output, context) => {
    return take(output, {
        architecture: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        id: __expectString,
        name: __expectString,
        releaseLabel: __expectString,
        state: __expectString,
        stateDetails: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Configuration = (output, context) => {
    return take(output, {
        classification: __expectString,
        configurations: (_) => de_ConfigurationList(_, context),
        properties: _json,
    });
};
const de_ConfigurationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Configuration(entry, context);
    });
    return retVal;
};
const de_ConfigurationOverrides = (output, context) => {
    return take(output, {
        applicationConfiguration: (_) => de_ConfigurationList(_, context),
        monitoringConfiguration: _json,
    });
};
const de_JobRun = (output, context) => {
    return take(output, {
        applicationId: __expectString,
        arn: __expectString,
        billedResourceUtilization: (_) => de_ResourceUtilization(_, context),
        configurationOverrides: (_) => de_ConfigurationOverrides(_, context),
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdBy: __expectString,
        executionRole: __expectString,
        executionTimeoutMinutes: __expectLong,
        jobDriver: (_) => _json(__expectUnion(_)),
        jobRunId: __expectString,
        name: __expectString,
        networkConfiguration: _json,
        releaseLabel: __expectString,
        state: __expectString,
        stateDetails: __expectString,
        tags: _json,
        totalExecutionDurationSeconds: __expectInt32,
        totalResourceUtilization: (_) => de_TotalResourceUtilization(_, context),
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_JobRuns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobRunSummary(entry, context);
    });
    return retVal;
};
const de_JobRunSummary = (output, context) => {
    return take(output, {
        applicationId: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        createdBy: __expectString,
        executionRole: __expectString,
        id: __expectString,
        name: __expectString,
        releaseLabel: __expectString,
        state: __expectString,
        stateDetails: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ResourceUtilization = (output, context) => {
    return take(output, {
        memoryGBHour: __limitedParseDouble,
        storageGBHour: __limitedParseDouble,
        vCPUHour: __limitedParseDouble,
    });
};
const de_TotalResourceUtilization = (output, context) => {
    return take(output, {
        memoryGBHour: __limitedParseDouble,
        storageGBHour: __limitedParseDouble,
        vCPUHour: __limitedParseDouble,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _cAA = "createdAtAfter";
const _cAB = "createdAtBefore";
const _mR = "maxResults";
const _nT = "nextToken";
const _s = "states";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
