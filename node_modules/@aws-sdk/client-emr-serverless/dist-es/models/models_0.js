import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { EMRServerlessServiceException as __BaseException } from "./EMRServerlessServiceException";
export const Architecture = {
    ARM64: "ARM64",
    X86_64: "X86_64",
};
export const ApplicationState = {
    CREATED: "CREATED",
    CREATING: "CREATING",
    STARTED: "STARTED",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
    TERMINATED: "TERMINATED",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export var JobDriver;
(function (JobDriver) {
    JobDriver.visit = (value, visitor) => {
        if (value.sparkSubmit !== undefined)
            return visitor.sparkSubmit(value.sparkSubmit);
        if (value.hive !== undefined)
            return visitor.hive(value.hive);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(JobDriver || (JobDriver = {}));
export const JobRunState = {
    CANCELLED: "CANCELLED",
    CANCELLING: "CANCELLING",
    FAILED: "FAILED",
    PENDING: "PENDING",
    RUNNING: "RUNNING",
    SCHEDULED: "SCHEDULED",
    SUBMITTED: "SUBMITTED",
    SUCCESS: "SUCCESS",
};
export const HiveFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.query && { query: SENSITIVE_STRING }),
    ...(obj.initQueryFile && { initQueryFile: SENSITIVE_STRING }),
    ...(obj.parameters && { parameters: SENSITIVE_STRING }),
});
export const SparkSubmitFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.entryPoint && { entryPoint: SENSITIVE_STRING }),
    ...(obj.entryPointArguments && { entryPointArguments: SENSITIVE_STRING }),
    ...(obj.sparkSubmitParameters && { sparkSubmitParameters: SENSITIVE_STRING }),
});
export const JobDriverFilterSensitiveLog = (obj) => {
    if (obj.sparkSubmit !== undefined)
        return { sparkSubmit: SparkSubmitFilterSensitiveLog(obj.sparkSubmit) };
    if (obj.hive !== undefined)
        return { hive: HiveFilterSensitiveLog(obj.hive) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const ConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.properties && { properties: SENSITIVE_STRING }),
    ...(obj.configurations && {
        configurations: obj.configurations.map((item) => ConfigurationFilterSensitiveLog(item)),
    }),
});
export const ApplicationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.runtimeConfiguration && {
        runtimeConfiguration: obj.runtimeConfiguration.map((item) => ConfigurationFilterSensitiveLog(item)),
    }),
});
export const ConfigurationOverridesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.applicationConfiguration && {
        applicationConfiguration: obj.applicationConfiguration.map((item) => ConfigurationFilterSensitiveLog(item)),
    }),
});
export const CreateApplicationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.runtimeConfiguration && {
        runtimeConfiguration: obj.runtimeConfiguration.map((item) => ConfigurationFilterSensitiveLog(item)),
    }),
});
export const UpdateApplicationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.runtimeConfiguration && {
        runtimeConfiguration: obj.runtimeConfiguration.map((item) => ConfigurationFilterSensitiveLog(item)),
    }),
});
export const GetApplicationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.application && { application: ApplicationFilterSensitiveLog(obj.application) }),
});
export const JobRunFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.configurationOverrides && {
        configurationOverrides: ConfigurationOverridesFilterSensitiveLog(obj.configurationOverrides),
    }),
    ...(obj.jobDriver && { jobDriver: JobDriverFilterSensitiveLog(obj.jobDriver) }),
});
export const StartJobRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobDriver && { jobDriver: JobDriverFilterSensitiveLog(obj.jobDriver) }),
    ...(obj.configurationOverrides && {
        configurationOverrides: ConfigurationOverridesFilterSensitiveLog(obj.configurationOverrides),
    }),
});
export const UpdateApplicationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.application && { application: ApplicationFilterSensitiveLog(obj.application) }),
});
export const GetJobRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.jobRun && { jobRun: JobRunFilterSensitiveLog(obj.jobRun) }),
});
