import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { IdentitystoreServiceException as __BaseException } from "./IdentitystoreServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export var AlternateIdentifier;
(function (AlternateIdentifier) {
    AlternateIdentifier.visit = (value, visitor) => {
        if (value.ExternalId !== undefined)
            return visitor.ExternalId(value.ExternalId);
        if (value.UniqueAttribute !== undefined)
            return visitor.UniqueAttribute(value.UniqueAttribute);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AlternateIdentifier || (AlternateIdentifier = {}));
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        this.$retryable = {};
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export const ResourceType = {
    GROUP: "GROUP",
    GROUP_MEMBERSHIP: "GROUP_MEMBERSHIP",
    IDENTITY_STORE: "IDENTITY_STORE",
    USER: "USER",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.ResourceType = opts.ResourceType;
        this.ResourceId = opts.ResourceId;
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        this.$retryable = {
            throttling: true,
        };
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export var MemberId;
(function (MemberId) {
    MemberId.visit = (value, visitor) => {
        if (value.UserId !== undefined)
            return visitor.UserId(value.UserId);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(MemberId || (MemberId = {}));
export const ConflictExceptionReason = {
    CONCURRENT_MODIFICATION: "CONCURRENT_MODIFICATION",
    UNIQUENESS_CONSTRAINT_VIOLATION: "UNIQUENESS_CONSTRAINT_VIOLATION",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
        this.Reason = opts.Reason;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.RequestId = opts.RequestId;
    }
}
export const AddressFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.StreetAddress && { StreetAddress: SENSITIVE_STRING }),
    ...(obj.Locality && { Locality: SENSITIVE_STRING }),
    ...(obj.Region && { Region: SENSITIVE_STRING }),
    ...(obj.PostalCode && { PostalCode: SENSITIVE_STRING }),
    ...(obj.Country && { Country: SENSITIVE_STRING }),
    ...(obj.Formatted && { Formatted: SENSITIVE_STRING }),
    ...(obj.Type && { Type: SENSITIVE_STRING }),
    ...(obj.Primary && { Primary: SENSITIVE_STRING }),
});
export const ExternalIdFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Issuer && { Issuer: SENSITIVE_STRING }),
    ...(obj.Id && { Id: SENSITIVE_STRING }),
});
export const AlternateIdentifierFilterSensitiveLog = (obj) => {
    if (obj.ExternalId !== undefined)
        return { ExternalId: ExternalIdFilterSensitiveLog(obj.ExternalId) };
    if (obj.UniqueAttribute !== undefined)
        return { UniqueAttribute: obj.UniqueAttribute };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const GetGroupIdRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AlternateIdentifier && {
        AlternateIdentifier: AlternateIdentifierFilterSensitiveLog(obj.AlternateIdentifier),
    }),
});
export const GetUserIdRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AlternateIdentifier && {
        AlternateIdentifier: AlternateIdentifierFilterSensitiveLog(obj.AlternateIdentifier),
    }),
});
export const CreateGroupRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
    ...(obj.Description && { Description: SENSITIVE_STRING }),
});
export const DescribeGroupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
    ...(obj.ExternalIds && { ExternalIds: obj.ExternalIds.map((item) => ExternalIdFilterSensitiveLog(item)) }),
    ...(obj.Description && { Description: SENSITIVE_STRING }),
});
export const FilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AttributeValue && { AttributeValue: SENSITIVE_STRING }),
});
export const ListGroupsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Filters && { Filters: obj.Filters.map((item) => FilterFilterSensitiveLog(item)) }),
});
export const GroupFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
    ...(obj.ExternalIds && { ExternalIds: obj.ExternalIds.map((item) => ExternalIdFilterSensitiveLog(item)) }),
    ...(obj.Description && { Description: SENSITIVE_STRING }),
});
export const ListGroupsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Groups && { Groups: obj.Groups.map((item) => GroupFilterSensitiveLog(item)) }),
});
export const GroupMembershipExistenceResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MemberId && { MemberId: obj.MemberId }),
    ...(obj.MembershipExists && { MembershipExists: SENSITIVE_STRING }),
});
export const IsMemberInGroupsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Results && { Results: obj.Results.map((item) => GroupMembershipExistenceResultFilterSensitiveLog(item)) }),
});
export const EmailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: SENSITIVE_STRING }),
    ...(obj.Type && { Type: SENSITIVE_STRING }),
    ...(obj.Primary && { Primary: SENSITIVE_STRING }),
});
export const NameFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Formatted && { Formatted: SENSITIVE_STRING }),
    ...(obj.FamilyName && { FamilyName: SENSITIVE_STRING }),
    ...(obj.GivenName && { GivenName: SENSITIVE_STRING }),
    ...(obj.MiddleName && { MiddleName: SENSITIVE_STRING }),
    ...(obj.HonorificPrefix && { HonorificPrefix: SENSITIVE_STRING }),
    ...(obj.HonorificSuffix && { HonorificSuffix: SENSITIVE_STRING }),
});
export const PhoneNumberFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: SENSITIVE_STRING }),
    ...(obj.Type && { Type: SENSITIVE_STRING }),
    ...(obj.Primary && { Primary: SENSITIVE_STRING }),
});
export const CreateUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
    ...(obj.Name && { Name: NameFilterSensitiveLog(obj.Name) }),
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
    ...(obj.NickName && { NickName: SENSITIVE_STRING }),
    ...(obj.ProfileUrl && { ProfileUrl: SENSITIVE_STRING }),
    ...(obj.Emails && { Emails: obj.Emails.map((item) => EmailFilterSensitiveLog(item)) }),
    ...(obj.Addresses && { Addresses: obj.Addresses.map((item) => AddressFilterSensitiveLog(item)) }),
    ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
    ...(obj.UserType && { UserType: SENSITIVE_STRING }),
    ...(obj.Title && { Title: SENSITIVE_STRING }),
    ...(obj.PreferredLanguage && { PreferredLanguage: SENSITIVE_STRING }),
    ...(obj.Locale && { Locale: SENSITIVE_STRING }),
    ...(obj.Timezone && { Timezone: SENSITIVE_STRING }),
});
export const DescribeUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
    ...(obj.ExternalIds && { ExternalIds: obj.ExternalIds.map((item) => ExternalIdFilterSensitiveLog(item)) }),
    ...(obj.Name && { Name: NameFilterSensitiveLog(obj.Name) }),
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
    ...(obj.NickName && { NickName: SENSITIVE_STRING }),
    ...(obj.ProfileUrl && { ProfileUrl: SENSITIVE_STRING }),
    ...(obj.Emails && { Emails: obj.Emails.map((item) => EmailFilterSensitiveLog(item)) }),
    ...(obj.Addresses && { Addresses: obj.Addresses.map((item) => AddressFilterSensitiveLog(item)) }),
    ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
    ...(obj.UserType && { UserType: SENSITIVE_STRING }),
    ...(obj.Title && { Title: SENSITIVE_STRING }),
    ...(obj.PreferredLanguage && { PreferredLanguage: SENSITIVE_STRING }),
    ...(obj.Locale && { Locale: SENSITIVE_STRING }),
    ...(obj.Timezone && { Timezone: SENSITIVE_STRING }),
});
export const ListUsersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Filters && { Filters: obj.Filters.map((item) => FilterFilterSensitiveLog(item)) }),
});
export const UserFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserName && { UserName: SENSITIVE_STRING }),
    ...(obj.ExternalIds && { ExternalIds: obj.ExternalIds.map((item) => ExternalIdFilterSensitiveLog(item)) }),
    ...(obj.Name && { Name: NameFilterSensitiveLog(obj.Name) }),
    ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
    ...(obj.NickName && { NickName: SENSITIVE_STRING }),
    ...(obj.ProfileUrl && { ProfileUrl: SENSITIVE_STRING }),
    ...(obj.Emails && { Emails: obj.Emails.map((item) => EmailFilterSensitiveLog(item)) }),
    ...(obj.Addresses && { Addresses: obj.Addresses.map((item) => AddressFilterSensitiveLog(item)) }),
    ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
    ...(obj.UserType && { UserType: SENSITIVE_STRING }),
    ...(obj.Title && { Title: SENSITIVE_STRING }),
    ...(obj.PreferredLanguage && { PreferredLanguage: SENSITIVE_STRING }),
    ...(obj.Locale && { Locale: SENSITIVE_STRING }),
    ...(obj.Timezone && { Timezone: SENSITIVE_STRING }),
});
export const ListUsersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Users && { Users: obj.Users.map((item) => UserFilterSensitiveLog(item)) }),
});
