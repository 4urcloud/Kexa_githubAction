import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { DocumentType as __DocumentType } from "@smithy/types";
import { IdentitystoreServiceException as __BaseException } from "./IdentitystoreServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface Address {
  StreetAddress?: string;
  Locality?: string;
  Region?: string;
  PostalCode?: string;
  Country?: string;
  Formatted?: string;
  Type?: string;
  Primary?: boolean;
}
export interface ExternalId {
  Issuer: string | undefined;
  Id: string | undefined;
}
export interface UniqueAttribute {
  AttributePath: string | undefined;
  AttributeValue: __DocumentType | undefined;
}
export type AlternateIdentifier =
  | AlternateIdentifier.ExternalIdMember
  | AlternateIdentifier.UniqueAttributeMember
  | AlternateIdentifier.$UnknownMember;
export declare namespace AlternateIdentifier {
  interface ExternalIdMember {
    ExternalId: ExternalId;
    UniqueAttribute?: never;
    $unknown?: never;
  }
  interface UniqueAttributeMember {
    ExternalId?: never;
    UniqueAttribute: UniqueAttribute;
    $unknown?: never;
  }
  interface $UnknownMember {
    ExternalId?: never;
    UniqueAttribute?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    ExternalId: (value: ExternalId) => T;
    UniqueAttribute: (value: UniqueAttribute) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: AlternateIdentifier, visitor: Visitor<T>) => T;
}
export interface AttributeOperation {
  AttributePath: string | undefined;
  AttributeValue?: __DocumentType;
}
export interface GetGroupIdRequest {
  IdentityStoreId: string | undefined;
  AlternateIdentifier: AlternateIdentifier | undefined;
}
export interface GetGroupIdResponse {
  GroupId: string | undefined;
  IdentityStoreId: string | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  $retryable: {};
  Message?: string;
  RequestId?: string;
  RetryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare const ResourceType: {
  readonly GROUP: "GROUP";
  readonly GROUP_MEMBERSHIP: "GROUP_MEMBERSHIP";
  readonly IDENTITY_STORE: "IDENTITY_STORE";
  readonly USER: "USER";
};
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  ResourceType?: ResourceType;
  ResourceId?: string;
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  $retryable: {
    throttling: boolean;
  };
  Message?: string;
  RequestId?: string;
  RetryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export type MemberId = MemberId.UserIdMember | MemberId.$UnknownMember;
export declare namespace MemberId {
  interface UserIdMember {
    UserId: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    UserId?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    UserId: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: MemberId, visitor: Visitor<T>) => T;
}
export interface GetGroupMembershipIdRequest {
  IdentityStoreId: string | undefined;
  GroupId: string | undefined;
  MemberId: MemberId | undefined;
}
export interface GetGroupMembershipIdResponse {
  MembershipId: string | undefined;
  IdentityStoreId: string | undefined;
}
export interface GetUserIdRequest {
  IdentityStoreId: string | undefined;
  AlternateIdentifier: AlternateIdentifier | undefined;
}
export interface GetUserIdResponse {
  UserId: string | undefined;
  IdentityStoreId: string | undefined;
}
export declare const ConflictExceptionReason: {
  readonly CONCURRENT_MODIFICATION: "CONCURRENT_MODIFICATION";
  readonly UNIQUENESS_CONSTRAINT_VIOLATION: "UNIQUENESS_CONSTRAINT_VIOLATION";
};
export type ConflictExceptionReason =
  (typeof ConflictExceptionReason)[keyof typeof ConflictExceptionReason];
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  RequestId?: string;
  Reason?: ConflictExceptionReason;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CreateGroupMembershipRequest {
  IdentityStoreId: string | undefined;
  GroupId: string | undefined;
  MemberId: MemberId | undefined;
}
export interface CreateGroupMembershipResponse {
  MembershipId: string | undefined;
  IdentityStoreId: string | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message?: string;
  RequestId?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface DeleteGroupMembershipRequest {
  IdentityStoreId: string | undefined;
  MembershipId: string | undefined;
}
export interface DeleteGroupMembershipResponse {}
export interface DescribeGroupMembershipRequest {
  IdentityStoreId: string | undefined;
  MembershipId: string | undefined;
}
export interface DescribeGroupMembershipResponse {
  IdentityStoreId: string | undefined;
  MembershipId: string | undefined;
  GroupId: string | undefined;
  MemberId: MemberId | undefined;
}
export interface ListGroupMembershipsRequest {
  IdentityStoreId: string | undefined;
  GroupId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface GroupMembership {
  IdentityStoreId: string | undefined;
  MembershipId?: string;
  GroupId?: string;
  MemberId?: MemberId;
}
export interface ListGroupMembershipsResponse {
  GroupMemberships: GroupMembership[] | undefined;
  NextToken?: string;
}
export interface CreateGroupRequest {
  IdentityStoreId: string | undefined;
  DisplayName?: string;
  Description?: string;
}
export interface CreateGroupResponse {
  GroupId: string | undefined;
  IdentityStoreId: string | undefined;
}
export interface DeleteGroupRequest {
  IdentityStoreId: string | undefined;
  GroupId: string | undefined;
}
export interface DeleteGroupResponse {}
export interface DescribeGroupRequest {
  IdentityStoreId: string | undefined;
  GroupId: string | undefined;
}
export interface DescribeGroupResponse {
  GroupId: string | undefined;
  DisplayName?: string;
  ExternalIds?: ExternalId[];
  Description?: string;
  IdentityStoreId: string | undefined;
}
export interface Filter {
  AttributePath: string | undefined;
  AttributeValue: string | undefined;
}
export interface ListGroupsRequest {
  IdentityStoreId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
  Filters?: Filter[];
}
export interface Group {
  GroupId: string | undefined;
  DisplayName?: string;
  ExternalIds?: ExternalId[];
  Description?: string;
  IdentityStoreId: string | undefined;
}
export interface ListGroupsResponse {
  Groups: Group[] | undefined;
  NextToken?: string;
}
export interface UpdateGroupRequest {
  IdentityStoreId: string | undefined;
  GroupId: string | undefined;
  Operations: AttributeOperation[] | undefined;
}
export interface UpdateGroupResponse {}
export interface IsMemberInGroupsRequest {
  IdentityStoreId: string | undefined;
  MemberId: MemberId | undefined;
  GroupIds: string[] | undefined;
}
export interface GroupMembershipExistenceResult {
  GroupId?: string;
  MemberId?: MemberId;
  MembershipExists?: boolean;
}
export interface IsMemberInGroupsResponse {
  Results: GroupMembershipExistenceResult[] | undefined;
}
export interface ListGroupMembershipsForMemberRequest {
  IdentityStoreId: string | undefined;
  MemberId: MemberId | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListGroupMembershipsForMemberResponse {
  GroupMemberships: GroupMembership[] | undefined;
  NextToken?: string;
}
export interface Email {
  Value?: string;
  Type?: string;
  Primary?: boolean;
}
export interface Name {
  Formatted?: string;
  FamilyName?: string;
  GivenName?: string;
  MiddleName?: string;
  HonorificPrefix?: string;
  HonorificSuffix?: string;
}
export interface PhoneNumber {
  Value?: string;
  Type?: string;
  Primary?: boolean;
}
export interface CreateUserRequest {
  IdentityStoreId: string | undefined;
  UserName?: string;
  Name?: Name;
  DisplayName?: string;
  NickName?: string;
  ProfileUrl?: string;
  Emails?: Email[];
  Addresses?: Address[];
  PhoneNumbers?: PhoneNumber[];
  UserType?: string;
  Title?: string;
  PreferredLanguage?: string;
  Locale?: string;
  Timezone?: string;
}
export interface CreateUserResponse {
  UserId: string | undefined;
  IdentityStoreId: string | undefined;
}
export interface DeleteUserRequest {
  IdentityStoreId: string | undefined;
  UserId: string | undefined;
}
export interface DeleteUserResponse {}
export interface DescribeUserRequest {
  IdentityStoreId: string | undefined;
  UserId: string | undefined;
}
export interface DescribeUserResponse {
  UserName?: string;
  UserId: string | undefined;
  ExternalIds?: ExternalId[];
  Name?: Name;
  DisplayName?: string;
  NickName?: string;
  ProfileUrl?: string;
  Emails?: Email[];
  Addresses?: Address[];
  PhoneNumbers?: PhoneNumber[];
  UserType?: string;
  Title?: string;
  PreferredLanguage?: string;
  Locale?: string;
  Timezone?: string;
  IdentityStoreId: string | undefined;
}
export interface ListUsersRequest {
  IdentityStoreId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
  Filters?: Filter[];
}
export interface User {
  UserName?: string;
  UserId: string | undefined;
  ExternalIds?: ExternalId[];
  Name?: Name;
  DisplayName?: string;
  NickName?: string;
  ProfileUrl?: string;
  Emails?: Email[];
  Addresses?: Address[];
  PhoneNumbers?: PhoneNumber[];
  UserType?: string;
  Title?: string;
  PreferredLanguage?: string;
  Locale?: string;
  Timezone?: string;
  IdentityStoreId: string | undefined;
}
export interface ListUsersResponse {
  Users: User[] | undefined;
  NextToken?: string;
}
export interface UpdateUserRequest {
  IdentityStoreId: string | undefined;
  UserId: string | undefined;
  Operations: AttributeOperation[] | undefined;
}
export interface UpdateUserResponse {}
export declare const AddressFilterSensitiveLog: (obj: Address) => any;
export declare const ExternalIdFilterSensitiveLog: (obj: ExternalId) => any;
export declare const AlternateIdentifierFilterSensitiveLog: (
  obj: AlternateIdentifier
) => any;
export declare const GetGroupIdRequestFilterSensitiveLog: (
  obj: GetGroupIdRequest
) => any;
export declare const GetUserIdRequestFilterSensitiveLog: (
  obj: GetUserIdRequest
) => any;
export declare const CreateGroupRequestFilterSensitiveLog: (
  obj: CreateGroupRequest
) => any;
export declare const DescribeGroupResponseFilterSensitiveLog: (
  obj: DescribeGroupResponse
) => any;
export declare const FilterFilterSensitiveLog: (obj: Filter) => any;
export declare const ListGroupsRequestFilterSensitiveLog: (
  obj: ListGroupsRequest
) => any;
export declare const GroupFilterSensitiveLog: (obj: Group) => any;
export declare const ListGroupsResponseFilterSensitiveLog: (
  obj: ListGroupsResponse
) => any;
export declare const GroupMembershipExistenceResultFilterSensitiveLog: (
  obj: GroupMembershipExistenceResult
) => any;
export declare const IsMemberInGroupsResponseFilterSensitiveLog: (
  obj: IsMemberInGroupsResponse
) => any;
export declare const EmailFilterSensitiveLog: (obj: Email) => any;
export declare const NameFilterSensitiveLog: (obj: Name) => any;
export declare const PhoneNumberFilterSensitiveLog: (obj: PhoneNumber) => any;
export declare const CreateUserRequestFilterSensitiveLog: (
  obj: CreateUserRequest
) => any;
export declare const DescribeUserResponseFilterSensitiveLog: (
  obj: DescribeUserResponse
) => any;
export declare const ListUsersRequestFilterSensitiveLog: (
  obj: ListUsersRequest
) => any;
export declare const UserFilterSensitiveLog: (obj: User) => any;
export declare const ListUsersResponseFilterSensitiveLog: (
  obj: ListUsersResponse
) => any;
