import { ApplicationInsightsServiceException as __BaseException } from "./ApplicationInsightsServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const Tier = {
    ACTIVE_DIRECTORY: "ACTIVE_DIRECTORY",
    CUSTOM: "CUSTOM",
    DEFAULT: "DEFAULT",
    DOT_NET_CORE: "DOT_NET_CORE",
    DOT_NET_WEB: "DOT_NET_WEB",
    DOT_NET_WEB_TIER: "DOT_NET_WEB_TIER",
    DOT_NET_WORKER: "DOT_NET_WORKER",
    JAVA_JMX: "JAVA_JMX",
    MYSQL: "MYSQL",
    ORACLE: "ORACLE",
    POSTGRESQL: "POSTGRESQL",
    SAP_HANA_HIGH_AVAILABILITY: "SAP_HANA_HIGH_AVAILABILITY",
    SAP_HANA_MULTI_NODE: "SAP_HANA_MULTI_NODE",
    SAP_HANA_SINGLE_NODE: "SAP_HANA_SINGLE_NODE",
    SAP_NETWEAVER_DISTRIBUTED: "SAP_NETWEAVER_DISTRIBUTED",
    SAP_NETWEAVER_HIGH_AVAILABILITY: "SAP_NETWEAVER_HIGH_AVAILABILITY",
    SAP_NETWEAVER_STANDARD: "SAP_NETWEAVER_STANDARD",
    SHAREPOINT: "SHAREPOINT",
    SQL_SERVER: "SQL_SERVER",
    SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP: "SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP",
    SQL_SERVER_FAILOVER_CLUSTER_INSTANCE: "SQL_SERVER_FAILOVER_CLUSTER_INSTANCE",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const OsType = {
    LINUX: "LINUX",
    WINDOWS: "WINDOWS",
};
export const DiscoveryType = {
    ACCOUNT_BASED: "ACCOUNT_BASED",
    RESOURCE_GROUP_BASED: "RESOURCE_GROUP_BASED",
};
export class BadRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "BadRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
export const CloudWatchEventSource = {
    CODE_DEPLOY: "CODE_DEPLOY",
    EC2: "EC2",
    HEALTH: "HEALTH",
    RDS: "RDS",
};
export const ConfigurationEventResourceType = {
    CLOUDFORMATION: "CLOUDFORMATION",
    CLOUDWATCH_ALARM: "CLOUDWATCH_ALARM",
    CLOUDWATCH_LOG: "CLOUDWATCH_LOG",
    SSM_ASSOCIATION: "SSM_ASSOCIATION",
};
export const ConfigurationEventStatus = {
    ERROR: "ERROR",
    INFO: "INFO",
    WARN: "WARN",
};
export const GroupingType = {
    ACCOUNT_BASED: "ACCOUNT_BASED",
};
export class TagsAlreadyExistException extends __BaseException {
    constructor(opts) {
        super({
            name: "TagsAlreadyExistException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagsAlreadyExistException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagsAlreadyExistException.prototype);
        this.Message = opts.Message;
    }
}
export const RecommendationType = {
    ALL: "ALL",
    INFRA_ONLY: "INFRA_ONLY",
    WORKLOAD_ONLY: "WORKLOAD_ONLY",
};
export const LogFilter = {
    ERROR: "ERROR",
    INFO: "INFO",
    WARN: "WARN",
};
export const FeedbackKey = {
    INSIGHTS_FEEDBACK: "INSIGHTS_FEEDBACK",
};
export const FeedbackValue = {
    NOT_SPECIFIED: "NOT_SPECIFIED",
    NOT_USEFUL: "NOT_USEFUL",
    USEFUL: "USEFUL",
};
export const ResolutionMethod = {
    AUTOMATIC: "AUTOMATIC",
    MANUAL: "MANUAL",
    UNRESOLVED: "UNRESOLVED",
};
export const SeverityLevel = {
    High: "High",
    Informative: "Informative",
    Low: "Low",
    Medium: "Medium",
};
export const Status = {
    IGNORE: "IGNORE",
    PENDING: "PENDING",
    RECOVERING: "RECOVERING",
    RECURRING: "RECURRING",
    RESOLVED: "RESOLVED",
};
export const Visibility = {
    IGNORED: "IGNORED",
    VISIBLE: "VISIBLE",
};
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
export const UpdateStatus = {
    RESOLVED: "RESOLVED",
};
