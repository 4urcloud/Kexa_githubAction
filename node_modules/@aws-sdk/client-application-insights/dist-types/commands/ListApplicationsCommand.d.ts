import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { ApplicationInsightsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ApplicationInsightsClient";
import { ListApplicationsRequest, ListApplicationsResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link ListApplicationsCommand}.
 */
export interface ListApplicationsCommandInput extends ListApplicationsRequest {
}
/**
 * @public
 *
 * The output of {@link ListApplicationsCommand}.
 */
export interface ListApplicationsCommandOutput extends ListApplicationsResponse, __MetadataBearer {
}
declare const ListApplicationsCommand_base: {
    new (input: ListApplicationsCommandInput): import("@smithy/smithy-client").CommandImpl<ListApplicationsCommandInput, ListApplicationsCommandOutput, ApplicationInsightsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (...[input]: [] | [ListApplicationsCommandInput]): import("@smithy/smithy-client").CommandImpl<ListApplicationsCommandInput, ListApplicationsCommandOutput, ApplicationInsightsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Lists the IDs of the applications that you are monitoring. </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ApplicationInsightsClient, ListApplicationsCommand } from "@aws-sdk/client-application-insights"; // ES Modules import
 * // const { ApplicationInsightsClient, ListApplicationsCommand } = require("@aws-sdk/client-application-insights"); // CommonJS import
 * const client = new ApplicationInsightsClient(config);
 * const input = { // ListApplicationsRequest
 *   MaxResults: Number("int"),
 *   NextToken: "STRING_VALUE",
 *   AccountId: "STRING_VALUE",
 * };
 * const command = new ListApplicationsCommand(input);
 * const response = await client.send(command);
 * // { // ListApplicationsResponse
 * //   ApplicationInfoList: [ // ApplicationInfoList
 * //     { // ApplicationInfo
 * //       AccountId: "STRING_VALUE",
 * //       ResourceGroupName: "STRING_VALUE",
 * //       LifeCycle: "STRING_VALUE",
 * //       OpsItemSNSTopicArn: "STRING_VALUE",
 * //       OpsCenterEnabled: true || false,
 * //       CWEMonitorEnabled: true || false,
 * //       Remarks: "STRING_VALUE",
 * //       AutoConfigEnabled: true || false,
 * //       DiscoveryType: "RESOURCE_GROUP_BASED" || "ACCOUNT_BASED",
 * //       AttachMissingPermission: true || false,
 * //     },
 * //   ],
 * //   NextToken: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param ListApplicationsCommandInput - {@link ListApplicationsCommandInput}
 * @returns {@link ListApplicationsCommandOutput}
 * @see {@link ListApplicationsCommandInput} for command's `input` shape.
 * @see {@link ListApplicationsCommandOutput} for command's `response` shape.
 * @see {@link ApplicationInsightsClientResolvedConfig | config} for ApplicationInsightsClient's `config` shape.
 *
 * @throws {@link InternalServerException} (server fault)
 *  <p>The server encountered an internal error and is unable to complete the request.</p>
 *
 * @throws {@link ValidationException} (client fault)
 *  <p>The parameter is not valid.</p>
 *
 * @throws {@link ApplicationInsightsServiceException}
 * <p>Base exception class for all service exceptions from ApplicationInsights service.</p>
 *
 * @public
 */
export declare class ListApplicationsCommand extends ListApplicationsCommand_base {
}
