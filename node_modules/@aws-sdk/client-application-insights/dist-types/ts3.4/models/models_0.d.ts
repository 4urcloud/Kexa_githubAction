import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { ApplicationInsightsServiceException as __BaseException } from "./ApplicationInsightsServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const Tier: {
  readonly ACTIVE_DIRECTORY: "ACTIVE_DIRECTORY";
  readonly CUSTOM: "CUSTOM";
  readonly DEFAULT: "DEFAULT";
  readonly DOT_NET_CORE: "DOT_NET_CORE";
  readonly DOT_NET_WEB: "DOT_NET_WEB";
  readonly DOT_NET_WEB_TIER: "DOT_NET_WEB_TIER";
  readonly DOT_NET_WORKER: "DOT_NET_WORKER";
  readonly JAVA_JMX: "JAVA_JMX";
  readonly MYSQL: "MYSQL";
  readonly ORACLE: "ORACLE";
  readonly POSTGRESQL: "POSTGRESQL";
  readonly SAP_HANA_HIGH_AVAILABILITY: "SAP_HANA_HIGH_AVAILABILITY";
  readonly SAP_HANA_MULTI_NODE: "SAP_HANA_MULTI_NODE";
  readonly SAP_HANA_SINGLE_NODE: "SAP_HANA_SINGLE_NODE";
  readonly SAP_NETWEAVER_DISTRIBUTED: "SAP_NETWEAVER_DISTRIBUTED";
  readonly SAP_NETWEAVER_HIGH_AVAILABILITY: "SAP_NETWEAVER_HIGH_AVAILABILITY";
  readonly SAP_NETWEAVER_STANDARD: "SAP_NETWEAVER_STANDARD";
  readonly SHAREPOINT: "SHAREPOINT";
  readonly SQL_SERVER: "SQL_SERVER";
  readonly SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP: "SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP";
  readonly SQL_SERVER_FAILOVER_CLUSTER_INSTANCE: "SQL_SERVER_FAILOVER_CLUSTER_INSTANCE";
};
export type Tier = (typeof Tier)[keyof typeof Tier];
export interface WorkloadConfiguration {
  WorkloadName?: string;
  Tier?: Tier;
  Configuration?: string;
}
export interface AddWorkloadRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  WorkloadConfiguration: WorkloadConfiguration | undefined;
}
export interface AddWorkloadResponse {
  WorkloadId?: string;
  WorkloadConfiguration?: WorkloadConfiguration;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare const OsType: {
  readonly LINUX: "LINUX";
  readonly WINDOWS: "WINDOWS";
};
export type OsType = (typeof OsType)[keyof typeof OsType];
export interface ApplicationComponent {
  ComponentName?: string;
  ComponentRemarks?: string;
  ResourceType?: string;
  OsType?: OsType;
  Tier?: Tier;
  Monitor?: boolean;
  DetectedWorkload?: Partial<Record<Tier, Record<string, string>>>;
}
export declare const DiscoveryType: {
  readonly ACCOUNT_BASED: "ACCOUNT_BASED";
  readonly RESOURCE_GROUP_BASED: "RESOURCE_GROUP_BASED";
};
export type DiscoveryType = (typeof DiscoveryType)[keyof typeof DiscoveryType];
export interface ApplicationInfo {
  AccountId?: string;
  ResourceGroupName?: string;
  LifeCycle?: string;
  OpsItemSNSTopicArn?: string;
  OpsCenterEnabled?: boolean;
  CWEMonitorEnabled?: boolean;
  Remarks?: string;
  AutoConfigEnabled?: boolean;
  DiscoveryType?: DiscoveryType;
  AttachMissingPermission?: boolean;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare const CloudWatchEventSource: {
  readonly CODE_DEPLOY: "CODE_DEPLOY";
  readonly EC2: "EC2";
  readonly HEALTH: "HEALTH";
  readonly RDS: "RDS";
};
export type CloudWatchEventSource =
  (typeof CloudWatchEventSource)[keyof typeof CloudWatchEventSource];
export declare const ConfigurationEventResourceType: {
  readonly CLOUDFORMATION: "CLOUDFORMATION";
  readonly CLOUDWATCH_ALARM: "CLOUDWATCH_ALARM";
  readonly CLOUDWATCH_LOG: "CLOUDWATCH_LOG";
  readonly SSM_ASSOCIATION: "SSM_ASSOCIATION";
};
export type ConfigurationEventResourceType =
  (typeof ConfigurationEventResourceType)[keyof typeof ConfigurationEventResourceType];
export declare const ConfigurationEventStatus: {
  readonly ERROR: "ERROR";
  readonly INFO: "INFO";
  readonly WARN: "WARN";
};
export type ConfigurationEventStatus =
  (typeof ConfigurationEventStatus)[keyof typeof ConfigurationEventStatus];
export interface ConfigurationEvent {
  ResourceGroupName?: string;
  AccountId?: string;
  MonitoredResourceARN?: string;
  EventStatus?: ConfigurationEventStatus;
  EventResourceType?: ConfigurationEventResourceType;
  EventTime?: Date;
  EventDetail?: string;
  EventResourceName?: string;
}
export declare const GroupingType: {
  readonly ACCOUNT_BASED: "ACCOUNT_BASED";
};
export type GroupingType = (typeof GroupingType)[keyof typeof GroupingType];
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateApplicationRequest {
  ResourceGroupName?: string;
  OpsCenterEnabled?: boolean;
  CWEMonitorEnabled?: boolean;
  OpsItemSNSTopicArn?: string;
  Tags?: Tag[];
  AutoConfigEnabled?: boolean;
  AutoCreate?: boolean;
  GroupingType?: GroupingType;
  AttachMissingPermission?: boolean;
}
export interface CreateApplicationResponse {
  ApplicationInfo?: ApplicationInfo;
}
export declare class TagsAlreadyExistException extends __BaseException {
  readonly name: "TagsAlreadyExistException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TagsAlreadyExistException, __BaseException>
  );
}
export interface CreateComponentRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  ResourceList: string[] | undefined;
}
export interface CreateComponentResponse {}
export interface CreateLogPatternRequest {
  ResourceGroupName: string | undefined;
  PatternSetName: string | undefined;
  PatternName: string | undefined;
  Pattern: string | undefined;
  Rank: number | undefined;
}
export interface LogPattern {
  PatternSetName?: string;
  PatternName?: string;
  Pattern?: string;
  Rank?: number;
}
export interface CreateLogPatternResponse {
  LogPattern?: LogPattern;
  ResourceGroupName?: string;
}
export interface DeleteApplicationRequest {
  ResourceGroupName: string | undefined;
}
export interface DeleteApplicationResponse {}
export interface DeleteComponentRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
}
export interface DeleteComponentResponse {}
export interface DeleteLogPatternRequest {
  ResourceGroupName: string | undefined;
  PatternSetName: string | undefined;
  PatternName: string | undefined;
}
export interface DeleteLogPatternResponse {}
export interface DescribeApplicationRequest {
  ResourceGroupName: string | undefined;
  AccountId?: string;
}
export interface DescribeApplicationResponse {
  ApplicationInfo?: ApplicationInfo;
}
export interface DescribeComponentRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  AccountId?: string;
}
export interface DescribeComponentResponse {
  ApplicationComponent?: ApplicationComponent;
  ResourceList?: string[];
}
export interface DescribeComponentConfigurationRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  AccountId?: string;
}
export interface DescribeComponentConfigurationResponse {
  Monitor?: boolean;
  Tier?: Tier;
  ComponentConfiguration?: string;
}
export declare const RecommendationType: {
  readonly ALL: "ALL";
  readonly INFRA_ONLY: "INFRA_ONLY";
  readonly WORKLOAD_ONLY: "WORKLOAD_ONLY";
};
export type RecommendationType =
  (typeof RecommendationType)[keyof typeof RecommendationType];
export interface DescribeComponentConfigurationRecommendationRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  Tier: Tier | undefined;
  WorkloadName?: string;
  RecommendationType?: RecommendationType;
}
export interface DescribeComponentConfigurationRecommendationResponse {
  ComponentConfiguration?: string;
}
export interface DescribeLogPatternRequest {
  ResourceGroupName: string | undefined;
  PatternSetName: string | undefined;
  PatternName: string | undefined;
  AccountId?: string;
}
export interface DescribeLogPatternResponse {
  ResourceGroupName?: string;
  AccountId?: string;
  LogPattern?: LogPattern;
}
export interface DescribeObservationRequest {
  ObservationId: string | undefined;
  AccountId?: string;
}
export declare const LogFilter: {
  readonly ERROR: "ERROR";
  readonly INFO: "INFO";
  readonly WARN: "WARN";
};
export type LogFilter = (typeof LogFilter)[keyof typeof LogFilter];
export interface Observation {
  Id?: string;
  StartTime?: Date;
  EndTime?: Date;
  SourceType?: string;
  SourceARN?: string;
  LogGroup?: string;
  LineTime?: Date;
  LogText?: string;
  LogFilter?: LogFilter;
  MetricNamespace?: string;
  MetricName?: string;
  Unit?: string;
  Value?: number;
  CloudWatchEventId?: string;
  CloudWatchEventSource?: CloudWatchEventSource;
  CloudWatchEventDetailType?: string;
  HealthEventArn?: string;
  HealthService?: string;
  HealthEventTypeCode?: string;
  HealthEventTypeCategory?: string;
  HealthEventDescription?: string;
  CodeDeployDeploymentId?: string;
  CodeDeployDeploymentGroup?: string;
  CodeDeployState?: string;
  CodeDeployApplication?: string;
  CodeDeployInstanceGroupId?: string;
  Ec2State?: string;
  RdsEventCategories?: string;
  RdsEventMessage?: string;
  S3EventName?: string;
  StatesExecutionArn?: string;
  StatesArn?: string;
  StatesStatus?: string;
  StatesInput?: string;
  EbsEvent?: string;
  EbsResult?: string;
  EbsCause?: string;
  EbsRequestId?: string;
  XRayFaultPercent?: number;
  XRayThrottlePercent?: number;
  XRayErrorPercent?: number;
  XRayRequestCount?: number;
  XRayRequestAverageLatency?: number;
  XRayNodeName?: string;
  XRayNodeType?: string;
}
export interface DescribeObservationResponse {
  Observation?: Observation;
}
export interface DescribeProblemRequest {
  ProblemId: string | undefined;
  AccountId?: string;
}
export declare const FeedbackKey: {
  readonly INSIGHTS_FEEDBACK: "INSIGHTS_FEEDBACK";
};
export type FeedbackKey = (typeof FeedbackKey)[keyof typeof FeedbackKey];
export declare const FeedbackValue: {
  readonly NOT_SPECIFIED: "NOT_SPECIFIED";
  readonly NOT_USEFUL: "NOT_USEFUL";
  readonly USEFUL: "USEFUL";
};
export type FeedbackValue = (typeof FeedbackValue)[keyof typeof FeedbackValue];
export declare const ResolutionMethod: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly MANUAL: "MANUAL";
  readonly UNRESOLVED: "UNRESOLVED";
};
export type ResolutionMethod =
  (typeof ResolutionMethod)[keyof typeof ResolutionMethod];
export declare const SeverityLevel: {
  readonly High: "High";
  readonly Informative: "Informative";
  readonly Low: "Low";
  readonly Medium: "Medium";
};
export type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];
export declare const Status: {
  readonly IGNORE: "IGNORE";
  readonly PENDING: "PENDING";
  readonly RECOVERING: "RECOVERING";
  readonly RECURRING: "RECURRING";
  readonly RESOLVED: "RESOLVED";
};
export type Status = (typeof Status)[keyof typeof Status];
export declare const Visibility: {
  readonly IGNORED: "IGNORED";
  readonly VISIBLE: "VISIBLE";
};
export type Visibility = (typeof Visibility)[keyof typeof Visibility];
export interface Problem {
  Id?: string;
  Title?: string;
  Insights?: string;
  Status?: Status;
  AffectedResource?: string;
  StartTime?: Date;
  EndTime?: Date;
  SeverityLevel?: SeverityLevel;
  AccountId?: string;
  ResourceGroupName?: string;
  Feedback?: Partial<Record<FeedbackKey, FeedbackValue>>;
  RecurringCount?: number;
  LastRecurrenceTime?: Date;
  Visibility?: Visibility;
  ResolutionMethod?: ResolutionMethod;
}
export interface DescribeProblemResponse {
  Problem?: Problem;
}
export interface DescribeProblemObservationsRequest {
  ProblemId: string | undefined;
  AccountId?: string;
}
export interface RelatedObservations {
  ObservationList?: Observation[];
}
export interface DescribeProblemObservationsResponse {
  RelatedObservations?: RelatedObservations;
}
export interface DescribeWorkloadRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  WorkloadId: string | undefined;
  AccountId?: string;
}
export interface DescribeWorkloadResponse {
  WorkloadId?: string;
  WorkloadRemarks?: string;
  WorkloadConfiguration?: WorkloadConfiguration;
}
export interface ListApplicationsRequest {
  MaxResults?: number;
  NextToken?: string;
  AccountId?: string;
}
export interface ListApplicationsResponse {
  ApplicationInfoList?: ApplicationInfo[];
  NextToken?: string;
}
export interface ListComponentsRequest {
  ResourceGroupName: string | undefined;
  MaxResults?: number;
  NextToken?: string;
  AccountId?: string;
}
export interface ListComponentsResponse {
  ApplicationComponentList?: ApplicationComponent[];
  NextToken?: string;
}
export interface ListConfigurationHistoryRequest {
  ResourceGroupName?: string;
  StartTime?: Date;
  EndTime?: Date;
  EventStatus?: ConfigurationEventStatus;
  MaxResults?: number;
  NextToken?: string;
  AccountId?: string;
}
export interface ListConfigurationHistoryResponse {
  EventList?: ConfigurationEvent[];
  NextToken?: string;
}
export interface ListLogPatternsRequest {
  ResourceGroupName: string | undefined;
  PatternSetName?: string;
  MaxResults?: number;
  NextToken?: string;
  AccountId?: string;
}
export interface ListLogPatternsResponse {
  ResourceGroupName?: string;
  AccountId?: string;
  LogPatterns?: LogPattern[];
  NextToken?: string;
}
export interface ListLogPatternSetsRequest {
  ResourceGroupName: string | undefined;
  MaxResults?: number;
  NextToken?: string;
  AccountId?: string;
}
export interface ListLogPatternSetsResponse {
  ResourceGroupName?: string;
  AccountId?: string;
  LogPatternSets?: string[];
  NextToken?: string;
}
export interface ListProblemsRequest {
  AccountId?: string;
  ResourceGroupName?: string;
  StartTime?: Date;
  EndTime?: Date;
  MaxResults?: number;
  NextToken?: string;
  ComponentName?: string;
  Visibility?: Visibility;
}
export interface ListProblemsResponse {
  ProblemList?: Problem[];
  NextToken?: string;
  ResourceGroupName?: string;
  AccountId?: string;
}
export interface ListTagsForResourceRequest {
  ResourceARN: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Tag[];
}
export interface ListWorkloadsRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  MaxResults?: number;
  NextToken?: string;
  AccountId?: string;
}
export interface Workload {
  WorkloadId?: string;
  ComponentName?: string;
  WorkloadName?: string;
  Tier?: Tier;
  WorkloadRemarks?: string;
}
export interface ListWorkloadsResponse {
  WorkloadList?: Workload[];
  NextToken?: string;
}
export interface RemoveWorkloadRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  WorkloadId: string | undefined;
}
export interface RemoveWorkloadResponse {}
export interface TagResourceRequest {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  Message?: string;
  ResourceName?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface UntagResourceRequest {
  ResourceARN: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateApplicationRequest {
  ResourceGroupName: string | undefined;
  OpsCenterEnabled?: boolean;
  CWEMonitorEnabled?: boolean;
  OpsItemSNSTopicArn?: string;
  RemoveSNSTopic?: boolean;
  AutoConfigEnabled?: boolean;
  AttachMissingPermission?: boolean;
}
export interface UpdateApplicationResponse {
  ApplicationInfo?: ApplicationInfo;
}
export interface UpdateComponentRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  NewComponentName?: string;
  ResourceList?: string[];
}
export interface UpdateComponentResponse {}
export interface UpdateComponentConfigurationRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  Monitor?: boolean;
  Tier?: Tier;
  ComponentConfiguration?: string;
  AutoConfigEnabled?: boolean;
}
export interface UpdateComponentConfigurationResponse {}
export interface UpdateLogPatternRequest {
  ResourceGroupName: string | undefined;
  PatternSetName: string | undefined;
  PatternName: string | undefined;
  Pattern?: string;
  Rank?: number;
}
export interface UpdateLogPatternResponse {
  ResourceGroupName?: string;
  LogPattern?: LogPattern;
}
export declare const UpdateStatus: {
  readonly RESOLVED: "RESOLVED";
};
export type UpdateStatus = (typeof UpdateStatus)[keyof typeof UpdateStatus];
export interface UpdateProblemRequest {
  ProblemId: string | undefined;
  UpdateStatus?: UpdateStatus;
  Visibility?: Visibility;
}
export interface UpdateProblemResponse {}
export interface UpdateWorkloadRequest {
  ResourceGroupName: string | undefined;
  ComponentName: string | undefined;
  WorkloadId?: string;
  WorkloadConfiguration: WorkloadConfiguration | undefined;
}
export interface UpdateWorkloadResponse {
  WorkloadId?: string;
  WorkloadConfiguration?: WorkloadConfiguration;
}
