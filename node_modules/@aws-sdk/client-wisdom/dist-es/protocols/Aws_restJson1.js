import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, PreconditionFailedException, RequestTimeoutException, ResourceNotFoundException, ServiceQuotaExceededException, TooManyTagsException, ValidationException, } from "../models/models_0";
import { WisdomServiceException as __BaseException } from "../models/WisdomServiceException";
export const se_CreateAssistantCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        serverSideEncryptionConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAssistantAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/associations");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify(take(input, {
        association: (_) => _json(_),
        associationType: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        metadata: (_) => _json(_),
        name: [],
        overrideLinkOutUri: [],
        tags: (_) => _json(_),
        title: [],
        uploadId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        knowledgeBaseType: [],
        name: [],
        renderingConfiguration: (_) => _json(_),
        serverSideEncryptionConfiguration: (_) => _json(_),
        sourceConfiguration: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateQuickResponseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        channels: (_) => _json(_),
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        content: (_) => _json(_),
        contentType: [],
        description: [],
        groupingConfiguration: (_) => _json(_),
        isActive: [],
        language: [],
        name: [],
        shortcutKey: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/sessions");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAssistantCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteAssistantAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/associations/{assistantAssociationId}");
    b.p("assistantAssociationId", () => input.assistantAssociationId, "{assistantAssociationId}", false);
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("contentId", () => input.contentId, "{contentId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("importJobId", () => input.importJobId, "{importJobId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteQuickResponseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("quickResponseId", () => input.quickResponseId, "{quickResponseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetAssistantCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetAssistantAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/associations/{assistantAssociationId}");
    b.p("assistantAssociationId", () => input.assistantAssociationId, "{assistantAssociationId}", false);
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}");
    b.p("contentId", () => input.contentId, "{contentId}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetContentSummaryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/summary");
    b.p("contentId", () => input.contentId, "{contentId}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}");
    b.p("importJobId", () => input.importJobId, "{importJobId}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetKnowledgeBaseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetQuickResponseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}");
    b.p("quickResponseId", () => input.quickResponseId, "{quickResponseId}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRecommendationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/sessions/{sessionId}/recommendations");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_wTS]: [() => input.waitTimeSeconds !== void 0, () => input[_wTS].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSessionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/sessions/{sessionId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListAssistantAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/associations");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListAssistantsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/assistants");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListContentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListImportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/importJobs");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListKnowledgeBasesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases");
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListQuickResponsesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_NotifyRecommendationsReceivedCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/sessions/{sessionId}/recommendations/notify");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        recommendationIds: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_QueryAssistantCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/query");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [],
        nextToken: [],
        queryText: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RemoveKnowledgeBaseTemplateUriCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/templateUri");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_SearchContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/search");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    body = JSON.stringify(take(input, {
        searchExpression: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_SearchQuickResponsesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/search/quickResponses");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    body = JSON.stringify(take(input, {
        attributes: (_) => _json(_),
        searchExpression: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_SearchSessionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/searchSessions");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    const query = map({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    body = JSON.stringify(take(input, {
        searchExpression: (_) => _json(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
export const se_StartContentUploadCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/upload");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        contentType: [],
        presignedUrlTimeToLive: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/importJobs");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        externalSourceConfiguration: (_) => _json(_),
        importJobType: [],
        metadata: (_) => _json(_),
        uploadId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateContentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("contentId", () => input.contentId, "{contentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        metadata: (_) => _json(_),
        overrideLinkOutUri: [],
        removeOverrideLinkOutUri: [],
        revisionId: [],
        title: [],
        uploadId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateKnowledgeBaseTemplateUriCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/templateUri");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        templateUri: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateQuickResponseCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("quickResponseId", () => input.quickResponseId, "{quickResponseId}", false);
    let body;
    body = JSON.stringify(take(input, {
        channels: (_) => _json(_),
        content: (_) => _json(_),
        contentType: [],
        description: [],
        groupingConfiguration: (_) => _json(_),
        isActive: [],
        language: [],
        name: [],
        removeDescription: [],
        removeGroupingConfiguration: [],
        removeShortcutKey: [],
        shortcutKey: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CreateAssistantCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assistant: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAssistantAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assistantAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        content: (_) => de_ContentData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBase: (_) => de_KnowledgeBaseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateQuickResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        quickResponse: (_) => de_QuickResponseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        session: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAssistantCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAssistantAssociationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteContentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteImportJobCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteQuickResponseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetAssistantCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assistant: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAssistantAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assistantAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        content: (_) => de_ContentData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetContentSummaryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        contentSummary: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        importJob: (_) => de_ImportJobData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBase: (_) => de_KnowledgeBaseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetQuickResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        quickResponse: (_) => de_QuickResponseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        recommendations: (_) => de_RecommendationList(_, context),
        triggers: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        session: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssistantAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assistantAssociationSummaries: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAssistantsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        assistantSummaries: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListContentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        contentSummaries: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        importJobSummaries: (_) => de_ImportJobList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListKnowledgeBasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBaseSummaries: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListQuickResponsesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        quickResponseSummaries: (_) => de_QuickResponseSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_NotifyRecommendationsReceivedCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errors: _json,
        recommendationIds: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_QueryAssistantCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        results: (_) => de_QueryResultsList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RemoveKnowledgeBaseTemplateUriCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_SearchContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        contentSummaries: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchQuickResponsesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        results: (_) => de_QuickResponseSearchResultsList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchSessionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        sessionSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartContentUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        headersToInclude: _json,
        uploadId: __expectString,
        url: __expectString,
        urlExpiry: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        importJob: (_) => de_ImportJobData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        content: (_) => de_ContentData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateKnowledgeBaseTemplateUriCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        knowledgeBase: (_) => de_KnowledgeBaseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateQuickResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        quickResponse: (_) => de_QuickResponseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.wisdom#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.wisdom#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.wisdom#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.wisdom#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.wisdom#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "RequestTimeoutException":
        case "com.amazonaws.wisdom#RequestTimeoutException":
            throw await de_RequestTimeoutExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.wisdom#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.wisdom#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_PreconditionFailedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new PreconditionFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_RequestTimeoutExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new RequestTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ContentData = (output, context) => {
    return take(output, {
        contentArn: __expectString,
        contentId: __expectString,
        contentType: __expectString,
        knowledgeBaseArn: __expectString,
        knowledgeBaseId: __expectString,
        linkOutUri: __expectString,
        metadata: _json,
        name: __expectString,
        revisionId: __expectString,
        status: __expectString,
        tags: _json,
        title: __expectString,
        url: __expectString,
        urlExpiry: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ImportJobData = (output, context) => {
    return take(output, {
        createdTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        externalSourceConfiguration: _json,
        failedRecordReport: __expectString,
        importJobId: __expectString,
        importJobType: __expectString,
        knowledgeBaseArn: __expectString,
        knowledgeBaseId: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        metadata: _json,
        status: __expectString,
        uploadId: __expectString,
        url: __expectString,
        urlExpiry: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ImportJobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportJobSummary(entry, context);
    });
    return retVal;
};
const de_ImportJobSummary = (output, context) => {
    return take(output, {
        createdTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        externalSourceConfiguration: _json,
        importJobId: __expectString,
        importJobType: __expectString,
        knowledgeBaseArn: __expectString,
        knowledgeBaseId: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        metadata: _json,
        status: __expectString,
        uploadId: __expectString,
    });
};
const de_KnowledgeBaseData = (output, context) => {
    return take(output, {
        description: __expectString,
        knowledgeBaseArn: __expectString,
        knowledgeBaseId: __expectString,
        knowledgeBaseType: __expectString,
        lastContentModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        renderingConfiguration: _json,
        serverSideEncryptionConfiguration: _json,
        sourceConfiguration: (_) => _json(__expectUnion(_)),
        status: __expectString,
        tags: _json,
    });
};
const de_QueryResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResultData(entry, context);
    });
    return retVal;
};
const de_QuickResponseData = (output, context) => {
    return take(output, {
        channels: _json,
        contentType: __expectString,
        contents: _json,
        createdTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        groupingConfiguration: _json,
        isActive: __expectBoolean,
        knowledgeBaseArn: __expectString,
        knowledgeBaseId: __expectString,
        language: __expectString,
        lastModifiedBy: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        quickResponseArn: __expectString,
        quickResponseId: __expectString,
        shortcutKey: __expectString,
        status: __expectString,
        tags: _json,
    });
};
const de_QuickResponseSearchResultData = (output, context) => {
    return take(output, {
        attributesInterpolated: _json,
        attributesNotInterpolated: _json,
        channels: _json,
        contentType: __expectString,
        contents: _json,
        createdTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        groupingConfiguration: _json,
        isActive: __expectBoolean,
        knowledgeBaseArn: __expectString,
        knowledgeBaseId: __expectString,
        language: __expectString,
        lastModifiedBy: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        quickResponseArn: __expectString,
        quickResponseId: __expectString,
        shortcutKey: __expectString,
        status: __expectString,
        tags: _json,
    });
};
const de_QuickResponseSearchResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QuickResponseSearchResultData(entry, context);
    });
    return retVal;
};
const de_QuickResponseSummary = (output, context) => {
    return take(output, {
        channels: _json,
        contentType: __expectString,
        createdTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        isActive: __expectBoolean,
        knowledgeBaseArn: __expectString,
        knowledgeBaseId: __expectString,
        lastModifiedBy: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        quickResponseArn: __expectString,
        quickResponseId: __expectString,
        status: __expectString,
        tags: _json,
    });
};
const de_QuickResponseSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QuickResponseSummary(entry, context);
    });
    return retVal;
};
const de_RecommendationData = (output, context) => {
    return take(output, {
        document: _json,
        recommendationId: __expectString,
        relevanceLevel: __expectString,
        relevanceScore: __limitedParseDouble,
        type: __expectString,
    });
};
const de_RecommendationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecommendationData(entry, context);
    });
    return retVal;
};
const de_ResultData = (output, context) => {
    return take(output, {
        document: _json,
        relevanceScore: __limitedParseDouble,
        resultId: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _mR = "maxResults";
const _nT = "nextToken";
const _tK = "tagKeys";
const _wTS = "waitTimeSeconds";
