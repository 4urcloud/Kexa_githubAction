import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { WisdomServiceException as __BaseException } from "./WisdomServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AppIntegrationsConfiguration {
  appIntegrationArn: string | undefined;
  objectFields?: string[];
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export type AssistantAssociationInputData =
  | AssistantAssociationInputData.KnowledgeBaseIdMember
  | AssistantAssociationInputData.$UnknownMember;
export declare namespace AssistantAssociationInputData {
  interface KnowledgeBaseIdMember {
    knowledgeBaseId: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    knowledgeBaseId?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    knowledgeBaseId: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: AssistantAssociationInputData,
    visitor: Visitor<T>
  ) => T;
}
export declare const AssociationType: {
  readonly KNOWLEDGE_BASE: "KNOWLEDGE_BASE";
};
export type AssociationType =
  (typeof AssociationType)[keyof typeof AssociationType];
export interface CreateAssistantAssociationRequest {
  assistantId: string | undefined;
  associationType: AssociationType | undefined;
  association: AssistantAssociationInputData | undefined;
  clientToken?: string;
  tags?: Record<string, string>;
}
export interface KnowledgeBaseAssociationData {
  knowledgeBaseId?: string;
  knowledgeBaseArn?: string;
}
export type AssistantAssociationOutputData =
  | AssistantAssociationOutputData.KnowledgeBaseAssociationMember
  | AssistantAssociationOutputData.$UnknownMember;
export declare namespace AssistantAssociationOutputData {
  interface KnowledgeBaseAssociationMember {
    knowledgeBaseAssociation: KnowledgeBaseAssociationData;
    $unknown?: never;
  }
  interface $UnknownMember {
    knowledgeBaseAssociation?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    knowledgeBaseAssociation: (value: KnowledgeBaseAssociationData) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: AssistantAssociationOutputData,
    visitor: Visitor<T>
  ) => T;
}
export interface AssistantAssociationData {
  assistantAssociationId: string | undefined;
  assistantAssociationArn: string | undefined;
  assistantId: string | undefined;
  assistantArn: string | undefined;
  associationType: AssociationType | undefined;
  associationData: AssistantAssociationOutputData | undefined;
  tags?: Record<string, string>;
}
export interface CreateAssistantAssociationResponse {
  assistantAssociation?: AssistantAssociationData;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceName?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteAssistantAssociationRequest {
  assistantAssociationId: string | undefined;
  assistantId: string | undefined;
}
export interface DeleteAssistantAssociationResponse {}
export interface GetAssistantAssociationRequest {
  assistantAssociationId: string | undefined;
  assistantId: string | undefined;
}
export interface GetAssistantAssociationResponse {
  assistantAssociation?: AssistantAssociationData;
}
export interface ListAssistantAssociationsRequest {
  nextToken?: string;
  maxResults?: number;
  assistantId: string | undefined;
}
export interface AssistantAssociationSummary {
  assistantAssociationId: string | undefined;
  assistantAssociationArn: string | undefined;
  assistantId: string | undefined;
  assistantArn: string | undefined;
  associationType: AssociationType | undefined;
  associationData: AssistantAssociationOutputData | undefined;
  tags?: Record<string, string>;
}
export interface ListAssistantAssociationsResponse {
  assistantAssociationSummaries: AssistantAssociationSummary[] | undefined;
  nextToken?: string;
}
export interface ServerSideEncryptionConfiguration {
  kmsKeyId?: string;
}
export declare const AssistantType: {
  readonly AGENT: "AGENT";
};
export type AssistantType = (typeof AssistantType)[keyof typeof AssistantType];
export interface CreateAssistantRequest {
  clientToken?: string;
  name: string | undefined;
  type: AssistantType | undefined;
  description?: string;
  tags?: Record<string, string>;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
}
export interface AssistantIntegrationConfiguration {
  topicIntegrationArn?: string;
}
export declare const AssistantStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
};
export type AssistantStatus =
  (typeof AssistantStatus)[keyof typeof AssistantStatus];
export interface AssistantData {
  assistantId: string | undefined;
  assistantArn: string | undefined;
  name: string | undefined;
  type: AssistantType | undefined;
  status: AssistantStatus | undefined;
  description?: string;
  tags?: Record<string, string>;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  integrationConfiguration?: AssistantIntegrationConfiguration;
}
export interface CreateAssistantResponse {
  assistant?: AssistantData;
}
export interface DeleteAssistantRequest {
  assistantId: string | undefined;
}
export interface DeleteAssistantResponse {}
export interface GetAssistantRequest {
  assistantId: string | undefined;
}
export interface GetAssistantResponse {
  assistant?: AssistantData;
}
export interface GetRecommendationsRequest {
  assistantId: string | undefined;
  sessionId: string | undefined;
  maxResults?: number;
  waitTimeSeconds?: number;
}
export interface ContentReference {
  knowledgeBaseArn?: string;
  knowledgeBaseId?: string;
  contentArn?: string;
  contentId?: string;
}
export interface Highlight {
  beginOffsetInclusive?: number;
  endOffsetExclusive?: number;
}
export interface DocumentText {
  text?: string;
  highlights?: Highlight[];
}
export interface Document {
  contentReference: ContentReference | undefined;
  title?: DocumentText;
  excerpt?: DocumentText;
}
export declare const RelevanceLevel: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
};
export type RelevanceLevel =
  (typeof RelevanceLevel)[keyof typeof RelevanceLevel];
export declare const RecommendationType: {
  readonly KNOWLEDGE_CONTENT: "KNOWLEDGE_CONTENT";
};
export type RecommendationType =
  (typeof RecommendationType)[keyof typeof RecommendationType];
export interface RecommendationData {
  recommendationId: string | undefined;
  document: Document | undefined;
  relevanceScore?: number;
  relevanceLevel?: RelevanceLevel;
  type?: RecommendationType;
}
export interface QueryRecommendationTriggerData {
  text?: string;
}
export type RecommendationTriggerData =
  | RecommendationTriggerData.QueryMember
  | RecommendationTriggerData.$UnknownMember;
export declare namespace RecommendationTriggerData {
  interface QueryMember {
    query: QueryRecommendationTriggerData;
    $unknown?: never;
  }
  interface $UnknownMember {
    query?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    query: (value: QueryRecommendationTriggerData) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: RecommendationTriggerData, visitor: Visitor<T>) => T;
}
export declare const RecommendationSourceType: {
  readonly ISSUE_DETECTION: "ISSUE_DETECTION";
  readonly OTHER: "OTHER";
  readonly RULE_EVALUATION: "RULE_EVALUATION";
};
export type RecommendationSourceType =
  (typeof RecommendationSourceType)[keyof typeof RecommendationSourceType];
export declare const RecommendationTriggerType: {
  readonly QUERY: "QUERY";
};
export type RecommendationTriggerType =
  (typeof RecommendationTriggerType)[keyof typeof RecommendationTriggerType];
export interface RecommendationTrigger {
  id: string | undefined;
  type: RecommendationTriggerType | undefined;
  source: RecommendationSourceType | undefined;
  data: RecommendationTriggerData | undefined;
  recommendationIds: string[] | undefined;
}
export interface GetRecommendationsResponse {
  recommendations: RecommendationData[] | undefined;
  triggers?: RecommendationTrigger[];
}
export interface ListAssistantsRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface AssistantSummary {
  assistantId: string | undefined;
  assistantArn: string | undefined;
  name: string | undefined;
  type: AssistantType | undefined;
  status: AssistantStatus | undefined;
  description?: string;
  tags?: Record<string, string>;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  integrationConfiguration?: AssistantIntegrationConfiguration;
}
export interface ListAssistantsResponse {
  assistantSummaries: AssistantSummary[] | undefined;
  nextToken?: string;
}
export interface NotifyRecommendationsReceivedRequest {
  assistantId: string | undefined;
  sessionId: string | undefined;
  recommendationIds: string[] | undefined;
}
export interface NotifyRecommendationsReceivedError {
  recommendationId?: string;
  message?: string;
}
export interface NotifyRecommendationsReceivedResponse {
  recommendationIds?: string[];
  errors?: NotifyRecommendationsReceivedError[];
}
export interface QueryAssistantRequest {
  assistantId: string | undefined;
  queryText: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ResultData {
  resultId: string | undefined;
  document: Document | undefined;
  relevanceScore?: number;
}
export interface QueryAssistantResponse {
  results: ResultData[] | undefined;
  nextToken?: string;
}
export declare class RequestTimeoutException extends __BaseException {
  readonly name: "RequestTimeoutException";
  readonly $fault: "client";
  $retryable: {};
  constructor(
    opts: __ExceptionOptionType<RequestTimeoutException, __BaseException>
  );
}
export declare const FilterField: {
  readonly NAME: "NAME";
};
export type FilterField = (typeof FilterField)[keyof typeof FilterField];
export declare const FilterOperator: {
  readonly EQUALS: "EQUALS";
};
export type FilterOperator =
  (typeof FilterOperator)[keyof typeof FilterOperator];
export interface Filter {
  field: FilterField | undefined;
  operator: FilterOperator | undefined;
  value: string | undefined;
}
export interface SearchExpression {
  filters: Filter[] | undefined;
}
export interface SearchSessionsRequest {
  nextToken?: string;
  maxResults?: number;
  assistantId: string | undefined;
  searchExpression: SearchExpression | undefined;
}
export interface SessionSummary {
  sessionId: string | undefined;
  sessionArn: string | undefined;
  assistantId: string | undefined;
  assistantArn: string | undefined;
}
export interface SearchSessionsResponse {
  sessionSummaries: SessionSummary[] | undefined;
  nextToken?: string;
}
export interface CreateSessionRequest {
  clientToken?: string;
  assistantId: string | undefined;
  name: string | undefined;
  description?: string;
  tags?: Record<string, string>;
}
export interface SessionIntegrationConfiguration {
  topicIntegrationArn?: string;
}
export interface SessionData {
  sessionArn: string | undefined;
  sessionId: string | undefined;
  name: string | undefined;
  description?: string;
  tags?: Record<string, string>;
  integrationConfiguration?: SessionIntegrationConfiguration;
}
export interface CreateSessionResponse {
  session?: SessionData;
}
export interface GetSessionRequest {
  assistantId: string | undefined;
  sessionId: string | undefined;
}
export interface GetSessionResponse {
  session?: SessionData;
}
export interface ConnectConfiguration {
  instanceId?: string;
}
export type Configuration =
  | Configuration.ConnectConfigurationMember
  | Configuration.$UnknownMember;
export declare namespace Configuration {
  interface ConnectConfigurationMember {
    connectConfiguration: ConnectConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    connectConfiguration?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    connectConfiguration: (value: ConnectConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Configuration, visitor: Visitor<T>) => T;
}
export interface CreateContentRequest {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  title?: string;
  overrideLinkOutUri?: string;
  metadata?: Record<string, string>;
  uploadId: string | undefined;
  clientToken?: string;
  tags?: Record<string, string>;
}
export declare const ContentStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
};
export type ContentStatus = (typeof ContentStatus)[keyof typeof ContentStatus];
export interface ContentData {
  contentArn: string | undefined;
  contentId: string | undefined;
  knowledgeBaseArn: string | undefined;
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  revisionId: string | undefined;
  title: string | undefined;
  contentType: string | undefined;
  status: ContentStatus | undefined;
  metadata: Record<string, string> | undefined;
  tags?: Record<string, string>;
  linkOutUri?: string;
  url: string | undefined;
  urlExpiry: Date | undefined;
}
export interface CreateContentResponse {
  content?: ContentData;
}
export interface DeleteContentRequest {
  knowledgeBaseId: string | undefined;
  contentId: string | undefined;
}
export interface DeleteContentResponse {}
export interface GetContentRequest {
  contentId: string | undefined;
  knowledgeBaseId: string | undefined;
}
export interface GetContentResponse {
  content?: ContentData;
}
export interface GetContentSummaryRequest {
  contentId: string | undefined;
  knowledgeBaseId: string | undefined;
}
export interface ContentSummary {
  contentArn: string | undefined;
  contentId: string | undefined;
  knowledgeBaseArn: string | undefined;
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  revisionId: string | undefined;
  title: string | undefined;
  contentType: string | undefined;
  status: ContentStatus | undefined;
  metadata: Record<string, string> | undefined;
  tags?: Record<string, string>;
}
export interface GetContentSummaryResponse {
  contentSummary?: ContentSummary;
}
export interface ListContentsRequest {
  nextToken?: string;
  maxResults?: number;
  knowledgeBaseId: string | undefined;
}
export interface ListContentsResponse {
  contentSummaries: ContentSummary[] | undefined;
  nextToken?: string;
}
export declare class PreconditionFailedException extends __BaseException {
  readonly name: "PreconditionFailedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PreconditionFailedException, __BaseException>
  );
}
export interface UpdateContentRequest {
  knowledgeBaseId: string | undefined;
  contentId: string | undefined;
  revisionId?: string;
  title?: string;
  overrideLinkOutUri?: string;
  removeOverrideLinkOutUri?: boolean;
  metadata?: Record<string, string>;
  uploadId?: string;
}
export interface UpdateContentResponse {
  content?: ContentData;
}
export declare const KnowledgeBaseType: {
  readonly CUSTOM: "CUSTOM";
  readonly EXTERNAL: "EXTERNAL";
  readonly QUICK_RESPONSES: "QUICK_RESPONSES";
};
export type KnowledgeBaseType =
  (typeof KnowledgeBaseType)[keyof typeof KnowledgeBaseType];
export interface RenderingConfiguration {
  templateUri?: string;
}
export type SourceConfiguration =
  | SourceConfiguration.AppIntegrationsMember
  | SourceConfiguration.$UnknownMember;
export declare namespace SourceConfiguration {
  interface AppIntegrationsMember {
    appIntegrations: AppIntegrationsConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    appIntegrations?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    appIntegrations: (value: AppIntegrationsConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: SourceConfiguration, visitor: Visitor<T>) => T;
}
export interface CreateKnowledgeBaseRequest {
  clientToken?: string;
  name: string | undefined;
  knowledgeBaseType: KnowledgeBaseType | undefined;
  sourceConfiguration?: SourceConfiguration;
  renderingConfiguration?: RenderingConfiguration;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  description?: string;
  tags?: Record<string, string>;
}
export declare const KnowledgeBaseStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
};
export type KnowledgeBaseStatus =
  (typeof KnowledgeBaseStatus)[keyof typeof KnowledgeBaseStatus];
export interface KnowledgeBaseData {
  knowledgeBaseId: string | undefined;
  knowledgeBaseArn: string | undefined;
  name: string | undefined;
  knowledgeBaseType: KnowledgeBaseType | undefined;
  status: KnowledgeBaseStatus | undefined;
  lastContentModificationTime?: Date;
  sourceConfiguration?: SourceConfiguration;
  renderingConfiguration?: RenderingConfiguration;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  description?: string;
  tags?: Record<string, string>;
}
export interface CreateKnowledgeBaseResponse {
  knowledgeBase?: KnowledgeBaseData;
}
export type QuickResponseDataProvider =
  | QuickResponseDataProvider.ContentMember
  | QuickResponseDataProvider.$UnknownMember;
export declare namespace QuickResponseDataProvider {
  interface ContentMember {
    content: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    content?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    content: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: QuickResponseDataProvider, visitor: Visitor<T>) => T;
}
export interface GroupingConfiguration {
  criteria?: string;
  values?: string[];
}
export interface CreateQuickResponseRequest {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  content: QuickResponseDataProvider | undefined;
  contentType?: string;
  groupingConfiguration?: GroupingConfiguration;
  description?: string;
  shortcutKey?: string;
  isActive?: boolean;
  channels?: string[];
  language?: string;
  clientToken?: string;
  tags?: Record<string, string>;
}
export type QuickResponseContentProvider =
  | QuickResponseContentProvider.ContentMember
  | QuickResponseContentProvider.$UnknownMember;
export declare namespace QuickResponseContentProvider {
  interface ContentMember {
    content: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    content?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    content: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: QuickResponseContentProvider,
    visitor: Visitor<T>
  ) => T;
}
export interface QuickResponseContents {
  plainText?: QuickResponseContentProvider;
  markdown?: QuickResponseContentProvider;
}
export declare const QuickResponseStatus: {
  readonly CREATED: "CREATED";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS";
};
export type QuickResponseStatus =
  (typeof QuickResponseStatus)[keyof typeof QuickResponseStatus];
export interface QuickResponseData {
  quickResponseArn: string | undefined;
  quickResponseId: string | undefined;
  knowledgeBaseArn: string | undefined;
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  contentType: string | undefined;
  status: QuickResponseStatus | undefined;
  createdTime: Date | undefined;
  lastModifiedTime: Date | undefined;
  contents?: QuickResponseContents;
  description?: string;
  groupingConfiguration?: GroupingConfiguration;
  shortcutKey?: string;
  lastModifiedBy?: string;
  isActive?: boolean;
  channels?: string[];
  language?: string;
  tags?: Record<string, string>;
}
export interface CreateQuickResponseResponse {
  quickResponse?: QuickResponseData;
}
export interface DeleteImportJobRequest {
  knowledgeBaseId: string | undefined;
  importJobId: string | undefined;
}
export interface DeleteImportJobResponse {}
export interface DeleteKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
}
export interface DeleteKnowledgeBaseResponse {}
export interface DeleteQuickResponseRequest {
  knowledgeBaseId: string | undefined;
  quickResponseId: string | undefined;
}
export interface DeleteQuickResponseResponse {}
export declare const ExternalSource: {
  readonly AMAZON_CONNECT: "AMAZON_CONNECT";
};
export type ExternalSource =
  (typeof ExternalSource)[keyof typeof ExternalSource];
export interface ExternalSourceConfiguration {
  source: ExternalSource | undefined;
  configuration: Configuration | undefined;
}
export interface GetImportJobRequest {
  importJobId: string | undefined;
  knowledgeBaseId: string | undefined;
}
export declare const ImportJobType: {
  readonly QUICK_RESPONSES: "QUICK_RESPONSES";
};
export type ImportJobType = (typeof ImportJobType)[keyof typeof ImportJobType];
export declare const ImportJobStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly FAILED: "FAILED";
  readonly START_IN_PROGRESS: "START_IN_PROGRESS";
};
export type ImportJobStatus =
  (typeof ImportJobStatus)[keyof typeof ImportJobStatus];
export interface ImportJobData {
  importJobId: string | undefined;
  knowledgeBaseId: string | undefined;
  uploadId: string | undefined;
  knowledgeBaseArn: string | undefined;
  importJobType: ImportJobType | undefined;
  status: ImportJobStatus | undefined;
  url: string | undefined;
  failedRecordReport?: string;
  urlExpiry: Date | undefined;
  createdTime: Date | undefined;
  lastModifiedTime: Date | undefined;
  metadata?: Record<string, string>;
  externalSourceConfiguration?: ExternalSourceConfiguration;
}
export interface GetImportJobResponse {
  importJob?: ImportJobData;
}
export interface GetKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
}
export interface GetKnowledgeBaseResponse {
  knowledgeBase?: KnowledgeBaseData;
}
export interface GetQuickResponseRequest {
  quickResponseId: string | undefined;
  knowledgeBaseId: string | undefined;
}
export interface GetQuickResponseResponse {
  quickResponse?: QuickResponseData;
}
export interface ImportJobSummary {
  importJobId: string | undefined;
  knowledgeBaseId: string | undefined;
  uploadId: string | undefined;
  knowledgeBaseArn: string | undefined;
  importJobType: ImportJobType | undefined;
  status: ImportJobStatus | undefined;
  createdTime: Date | undefined;
  lastModifiedTime: Date | undefined;
  metadata?: Record<string, string>;
  externalSourceConfiguration?: ExternalSourceConfiguration;
}
export interface ListImportJobsRequest {
  nextToken?: string;
  maxResults?: number;
  knowledgeBaseId: string | undefined;
}
export interface ListImportJobsResponse {
  importJobSummaries: ImportJobSummary[] | undefined;
  nextToken?: string;
}
export interface ListKnowledgeBasesRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface KnowledgeBaseSummary {
  knowledgeBaseId: string | undefined;
  knowledgeBaseArn: string | undefined;
  name: string | undefined;
  knowledgeBaseType: KnowledgeBaseType | undefined;
  status: KnowledgeBaseStatus | undefined;
  sourceConfiguration?: SourceConfiguration;
  renderingConfiguration?: RenderingConfiguration;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  description?: string;
  tags?: Record<string, string>;
}
export interface ListKnowledgeBasesResponse {
  knowledgeBaseSummaries: KnowledgeBaseSummary[] | undefined;
  nextToken?: string;
}
export interface ListQuickResponsesRequest {
  nextToken?: string;
  maxResults?: number;
  knowledgeBaseId: string | undefined;
}
export interface QuickResponseSummary {
  quickResponseArn: string | undefined;
  quickResponseId: string | undefined;
  knowledgeBaseArn: string | undefined;
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  contentType: string | undefined;
  status: QuickResponseStatus | undefined;
  createdTime: Date | undefined;
  lastModifiedTime: Date | undefined;
  description?: string;
  lastModifiedBy?: string;
  isActive?: boolean;
  channels?: string[];
  tags?: Record<string, string>;
}
export interface ListQuickResponsesResponse {
  quickResponseSummaries: QuickResponseSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateQuickResponseRequest {
  knowledgeBaseId: string | undefined;
  quickResponseId: string | undefined;
  name?: string;
  content?: QuickResponseDataProvider;
  contentType?: string;
  groupingConfiguration?: GroupingConfiguration;
  removeGroupingConfiguration?: boolean;
  description?: string;
  removeDescription?: boolean;
  shortcutKey?: string;
  removeShortcutKey?: boolean;
  isActive?: boolean;
  channels?: string[];
  language?: string;
}
export interface UpdateQuickResponseResponse {
  quickResponse?: QuickResponseData;
}
export interface RemoveKnowledgeBaseTemplateUriRequest {
  knowledgeBaseId: string | undefined;
}
export interface RemoveKnowledgeBaseTemplateUriResponse {}
export interface SearchContentRequest {
  nextToken?: string;
  maxResults?: number;
  knowledgeBaseId: string | undefined;
  searchExpression: SearchExpression | undefined;
}
export interface SearchContentResponse {
  contentSummaries: ContentSummary[] | undefined;
  nextToken?: string;
}
export declare const QuickResponseFilterOperator: {
  readonly EQUALS: "EQUALS";
  readonly PREFIX: "PREFIX";
};
export type QuickResponseFilterOperator =
  (typeof QuickResponseFilterOperator)[keyof typeof QuickResponseFilterOperator];
export interface QuickResponseFilterField {
  name: string | undefined;
  values?: string[];
  operator: QuickResponseFilterOperator | undefined;
  includeNoExistence?: boolean;
}
export declare const Order: {
  readonly ASC: "ASC";
  readonly DESC: "DESC";
};
export type Order = (typeof Order)[keyof typeof Order];
export interface QuickResponseOrderField {
  name: string | undefined;
  order?: Order;
}
export declare const QuickResponseQueryOperator: {
  readonly CONTAINS: "CONTAINS";
  readonly CONTAINS_AND_PREFIX: "CONTAINS_AND_PREFIX";
};
export type QuickResponseQueryOperator =
  (typeof QuickResponseQueryOperator)[keyof typeof QuickResponseQueryOperator];
export declare const Priority: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
};
export type Priority = (typeof Priority)[keyof typeof Priority];
export interface QuickResponseQueryField {
  name: string | undefined;
  values: string[] | undefined;
  operator: QuickResponseQueryOperator | undefined;
  allowFuzziness?: boolean;
  priority?: Priority;
}
export interface QuickResponseSearchExpression {
  queries?: QuickResponseQueryField[];
  filters?: QuickResponseFilterField[];
  orderOnField?: QuickResponseOrderField;
}
export interface SearchQuickResponsesRequest {
  knowledgeBaseId: string | undefined;
  searchExpression: QuickResponseSearchExpression | undefined;
  nextToken?: string;
  maxResults?: number;
  attributes?: Record<string, string>;
}
export interface QuickResponseSearchResultData {
  quickResponseArn: string | undefined;
  quickResponseId: string | undefined;
  knowledgeBaseArn: string | undefined;
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  contentType: string | undefined;
  status: QuickResponseStatus | undefined;
  contents: QuickResponseContents | undefined;
  createdTime: Date | undefined;
  lastModifiedTime: Date | undefined;
  isActive: boolean | undefined;
  description?: string;
  groupingConfiguration?: GroupingConfiguration;
  shortcutKey?: string;
  lastModifiedBy?: string;
  channels?: string[];
  language?: string;
  attributesNotInterpolated?: string[];
  attributesInterpolated?: string[];
  tags?: Record<string, string>;
}
export interface SearchQuickResponsesResponse {
  results: QuickResponseSearchResultData[] | undefined;
  nextToken?: string;
}
export interface StartContentUploadRequest {
  knowledgeBaseId: string | undefined;
  contentType: string | undefined;
  presignedUrlTimeToLive?: number;
}
export interface StartContentUploadResponse {
  uploadId: string | undefined;
  url: string | undefined;
  urlExpiry: Date | undefined;
  headersToInclude: Record<string, string> | undefined;
}
export interface StartImportJobRequest {
  knowledgeBaseId: string | undefined;
  importJobType: ImportJobType | undefined;
  uploadId: string | undefined;
  clientToken?: string;
  metadata?: Record<string, string>;
  externalSourceConfiguration?: ExternalSourceConfiguration;
}
export interface StartImportJobResponse {
  importJob?: ImportJobData;
}
export interface UpdateKnowledgeBaseTemplateUriRequest {
  knowledgeBaseId: string | undefined;
  templateUri: string | undefined;
}
export interface UpdateKnowledgeBaseTemplateUriResponse {
  knowledgeBase?: KnowledgeBaseData;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  resourceName?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export declare const DocumentTextFilterSensitiveLog: (obj: DocumentText) => any;
export declare const DocumentFilterSensitiveLog: (obj: Document) => any;
export declare const RecommendationDataFilterSensitiveLog: (
  obj: RecommendationData
) => any;
export declare const QueryRecommendationTriggerDataFilterSensitiveLog: (
  obj: QueryRecommendationTriggerData
) => any;
export declare const RecommendationTriggerDataFilterSensitiveLog: (
  obj: RecommendationTriggerData
) => any;
export declare const RecommendationTriggerFilterSensitiveLog: (
  obj: RecommendationTrigger
) => any;
export declare const GetRecommendationsResponseFilterSensitiveLog: (
  obj: GetRecommendationsResponse
) => any;
export declare const QueryAssistantRequestFilterSensitiveLog: (
  obj: QueryAssistantRequest
) => any;
export declare const ResultDataFilterSensitiveLog: (obj: ResultData) => any;
export declare const QueryAssistantResponseFilterSensitiveLog: (
  obj: QueryAssistantResponse
) => any;
export declare const ContentDataFilterSensitiveLog: (obj: ContentData) => any;
export declare const CreateContentResponseFilterSensitiveLog: (
  obj: CreateContentResponse
) => any;
export declare const GetContentResponseFilterSensitiveLog: (
  obj: GetContentResponse
) => any;
export declare const UpdateContentResponseFilterSensitiveLog: (
  obj: UpdateContentResponse
) => any;
export declare const QuickResponseDataProviderFilterSensitiveLog: (
  obj: QuickResponseDataProvider
) => any;
export declare const GroupingConfigurationFilterSensitiveLog: (
  obj: GroupingConfiguration
) => any;
export declare const CreateQuickResponseRequestFilterSensitiveLog: (
  obj: CreateQuickResponseRequest
) => any;
export declare const QuickResponseContentProviderFilterSensitiveLog: (
  obj: QuickResponseContentProvider
) => any;
export declare const QuickResponseContentsFilterSensitiveLog: (
  obj: QuickResponseContents
) => any;
export declare const QuickResponseDataFilterSensitiveLog: (
  obj: QuickResponseData
) => any;
export declare const CreateQuickResponseResponseFilterSensitiveLog: (
  obj: CreateQuickResponseResponse
) => any;
export declare const ImportJobDataFilterSensitiveLog: (
  obj: ImportJobData
) => any;
export declare const GetImportJobResponseFilterSensitiveLog: (
  obj: GetImportJobResponse
) => any;
export declare const GetQuickResponseResponseFilterSensitiveLog: (
  obj: GetQuickResponseResponse
) => any;
export declare const QuickResponseSummaryFilterSensitiveLog: (
  obj: QuickResponseSummary
) => any;
export declare const ListQuickResponsesResponseFilterSensitiveLog: (
  obj: ListQuickResponsesResponse
) => any;
export declare const UpdateQuickResponseRequestFilterSensitiveLog: (
  obj: UpdateQuickResponseRequest
) => any;
export declare const UpdateQuickResponseResponseFilterSensitiveLog: (
  obj: UpdateQuickResponseResponse
) => any;
export declare const SearchQuickResponsesRequestFilterSensitiveLog: (
  obj: SearchQuickResponsesRequest
) => any;
export declare const QuickResponseSearchResultDataFilterSensitiveLog: (
  obj: QuickResponseSearchResultData
) => any;
export declare const SearchQuickResponsesResponseFilterSensitiveLog: (
  obj: SearchQuickResponsesResponse
) => any;
export declare const StartContentUploadResponseFilterSensitiveLog: (
  obj: StartContentUploadResponse
) => any;
export declare const StartImportJobResponseFilterSensitiveLog: (
  obj: StartImportJobResponse
) => any;
