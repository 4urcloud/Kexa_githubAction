import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { SavingsplansServiceException as __BaseException } from "./SavingsplansServiceException";
export interface CreateSavingsPlanRequest {
  savingsPlanOfferingId: string | undefined;
  commitment: string | undefined;
  upfrontPaymentAmount?: string;
  purchaseTime?: Date;
  clientToken?: string;
  tags?: Record<string, string>;
}
export interface CreateSavingsPlanResponse {
  savingsPlanId?: string;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteQueuedSavingsPlanRequest {
  savingsPlanId: string | undefined;
}
export interface DeleteQueuedSavingsPlanResponse {}
export declare const SavingsPlanRateFilterName: {
  readonly INSTANCE_TYPE: "instanceType";
  readonly OPERATION: "operation";
  readonly PRODUCT_DESCRIPTION: "productDescription";
  readonly PRODUCT_TYPE: "productType";
  readonly REGION: "region";
  readonly SERVICE_CODE: "serviceCode";
  readonly TENANCY: "tenancy";
  readonly USAGE_TYPE: "usageType";
};
export type SavingsPlanRateFilterName =
  (typeof SavingsPlanRateFilterName)[keyof typeof SavingsPlanRateFilterName];
export interface SavingsPlanRateFilter {
  name?: SavingsPlanRateFilterName;
  values?: string[];
}
export interface DescribeSavingsPlanRatesRequest {
  savingsPlanId: string | undefined;
  filters?: SavingsPlanRateFilter[];
  nextToken?: string;
  maxResults?: number;
}
export declare const CurrencyCode: {
  readonly CNY: "CNY";
  readonly USD: "USD";
};
export type CurrencyCode = (typeof CurrencyCode)[keyof typeof CurrencyCode];
export declare const SavingsPlanProductType: {
  readonly EC2: "EC2";
  readonly FARGATE: "Fargate";
  readonly LAMBDA: "Lambda";
  readonly SAGEMAKER: "SageMaker";
};
export type SavingsPlanProductType =
  (typeof SavingsPlanProductType)[keyof typeof SavingsPlanProductType];
export declare const SavingsPlanRatePropertyKey: {
  readonly INSTANCE_FAMILY: "instanceFamily";
  readonly INSTANCE_TYPE: "instanceType";
  readonly PRODUCT_DESCRIPTION: "productDescription";
  readonly REGION: "region";
  readonly TENANCY: "tenancy";
};
export type SavingsPlanRatePropertyKey =
  (typeof SavingsPlanRatePropertyKey)[keyof typeof SavingsPlanRatePropertyKey];
export interface SavingsPlanRateProperty {
  name?: SavingsPlanRatePropertyKey;
  value?: string;
}
export declare const SavingsPlanRateServiceCode: {
  readonly EC2: "AmazonEC2";
  readonly FARGATE: "AmazonECS";
  readonly FARGATE_EKS: "AmazonEKS";
  readonly LAMBDA: "AWSLambda";
  readonly SAGEMAKER: "AmazonSageMaker";
};
export type SavingsPlanRateServiceCode =
  (typeof SavingsPlanRateServiceCode)[keyof typeof SavingsPlanRateServiceCode];
export declare const SavingsPlanRateUnit: {
  readonly HOURS: "Hrs";
  readonly LAMBDA_GB_SECOND: "Lambda-GB-Second";
  readonly REQUEST: "Request";
};
export type SavingsPlanRateUnit =
  (typeof SavingsPlanRateUnit)[keyof typeof SavingsPlanRateUnit];
export interface SavingsPlanRate {
  rate?: string;
  currency?: CurrencyCode;
  unit?: SavingsPlanRateUnit;
  productType?: SavingsPlanProductType;
  serviceCode?: SavingsPlanRateServiceCode;
  usageType?: string;
  operation?: string;
  properties?: SavingsPlanRateProperty[];
}
export interface DescribeSavingsPlanRatesResponse {
  savingsPlanId?: string;
  searchResults?: SavingsPlanRate[];
  nextToken?: string;
}
export declare const SavingsPlansFilterName: {
  readonly COMMITMENT: "commitment";
  readonly EC2_INSTANCE_FAMILY: "ec2-instance-family";
  readonly END: "end";
  readonly PAYMENT_OPTION: "payment-option";
  readonly REGION: "region";
  readonly SAVINGS_PLAN_TYPE: "savings-plan-type";
  readonly START: "start";
  readonly TERM: "term";
  readonly UPFRONT: "upfront";
};
export type SavingsPlansFilterName =
  (typeof SavingsPlansFilterName)[keyof typeof SavingsPlansFilterName];
export interface SavingsPlanFilter {
  name?: SavingsPlansFilterName;
  values?: string[];
}
export declare const SavingsPlanState: {
  readonly ACTIVE: "active";
  readonly PAYMENT_FAILED: "payment-failed";
  readonly PAYMENT_PENDING: "payment-pending";
  readonly QUEUED: "queued";
  readonly QUEUED_DELETED: "queued-deleted";
  readonly RETIRED: "retired";
};
export type SavingsPlanState =
  (typeof SavingsPlanState)[keyof typeof SavingsPlanState];
export interface DescribeSavingsPlansRequest {
  savingsPlanArns?: string[];
  savingsPlanIds?: string[];
  nextToken?: string;
  maxResults?: number;
  states?: SavingsPlanState[];
  filters?: SavingsPlanFilter[];
}
export declare const SavingsPlanPaymentOption: {
  readonly ALL_UPFRONT: "All Upfront";
  readonly NO_UPFRONT: "No Upfront";
  readonly PARTIAL_UPFRONT: "Partial Upfront";
};
export type SavingsPlanPaymentOption =
  (typeof SavingsPlanPaymentOption)[keyof typeof SavingsPlanPaymentOption];
export declare const SavingsPlanType: {
  readonly COMPUTE: "Compute";
  readonly EC2_INSTANCE: "EC2Instance";
  readonly SAGEMAKER: "SageMaker";
};
export type SavingsPlanType =
  (typeof SavingsPlanType)[keyof typeof SavingsPlanType];
export interface SavingsPlan {
  offeringId?: string;
  savingsPlanId?: string;
  savingsPlanArn?: string;
  description?: string;
  start?: string;
  end?: string;
  state?: SavingsPlanState;
  region?: string;
  ec2InstanceFamily?: string;
  savingsPlanType?: SavingsPlanType;
  paymentOption?: SavingsPlanPaymentOption;
  productTypes?: SavingsPlanProductType[];
  currency?: CurrencyCode;
  commitment?: string;
  upfrontPaymentAmount?: string;
  recurringPaymentAmount?: string;
  termDurationInSeconds?: number;
  tags?: Record<string, string>;
}
export interface DescribeSavingsPlansResponse {
  savingsPlans?: SavingsPlan[];
  nextToken?: string;
}
export declare const SavingsPlanRateFilterAttribute: {
  readonly INSTANCE_FAMILY: "instanceFamily";
  readonly INSTANCE_TYPE: "instanceType";
  readonly PRODUCT_DESCRIPTION: "productDescription";
  readonly PRODUCT_ID: "productId";
  readonly REGION: "region";
  readonly TENANCY: "tenancy";
};
export type SavingsPlanRateFilterAttribute =
  (typeof SavingsPlanRateFilterAttribute)[keyof typeof SavingsPlanRateFilterAttribute];
export interface SavingsPlanOfferingRateFilterElement {
  name?: SavingsPlanRateFilterAttribute;
  values?: string[];
}
export interface DescribeSavingsPlansOfferingRatesRequest {
  savingsPlanOfferingIds?: string[];
  savingsPlanPaymentOptions?: SavingsPlanPaymentOption[];
  savingsPlanTypes?: SavingsPlanType[];
  products?: SavingsPlanProductType[];
  serviceCodes?: SavingsPlanRateServiceCode[];
  usageTypes?: string[];
  operations?: string[];
  filters?: SavingsPlanOfferingRateFilterElement[];
  nextToken?: string;
  maxResults?: number;
}
export interface SavingsPlanOfferingRateProperty {
  name?: string;
  value?: string;
}
export interface ParentSavingsPlanOffering {
  offeringId?: string;
  paymentOption?: SavingsPlanPaymentOption;
  planType?: SavingsPlanType;
  durationSeconds?: number;
  currency?: CurrencyCode;
  planDescription?: string;
}
export interface SavingsPlanOfferingRate {
  savingsPlanOffering?: ParentSavingsPlanOffering;
  rate?: string;
  unit?: SavingsPlanRateUnit;
  productType?: SavingsPlanProductType;
  serviceCode?: SavingsPlanRateServiceCode;
  usageType?: string;
  operation?: string;
  properties?: SavingsPlanOfferingRateProperty[];
}
export interface DescribeSavingsPlansOfferingRatesResponse {
  searchResults?: SavingsPlanOfferingRate[];
  nextToken?: string;
}
export declare const SavingsPlanOfferingFilterAttribute: {
  readonly instanceFamily: "instanceFamily";
  readonly region: "region";
};
export type SavingsPlanOfferingFilterAttribute =
  (typeof SavingsPlanOfferingFilterAttribute)[keyof typeof SavingsPlanOfferingFilterAttribute];
export interface SavingsPlanOfferingFilterElement {
  name?: SavingsPlanOfferingFilterAttribute;
  values?: string[];
}
export interface DescribeSavingsPlansOfferingsRequest {
  offeringIds?: string[];
  paymentOptions?: SavingsPlanPaymentOption[];
  productType?: SavingsPlanProductType;
  planTypes?: SavingsPlanType[];
  durations?: number[];
  currencies?: CurrencyCode[];
  descriptions?: string[];
  serviceCodes?: string[];
  usageTypes?: string[];
  operations?: string[];
  filters?: SavingsPlanOfferingFilterElement[];
  nextToken?: string;
  maxResults?: number;
}
export declare const SavingsPlanOfferingPropertyKey: {
  readonly INSTANCE_FAMILY: "instanceFamily";
  readonly REGION: "region";
};
export type SavingsPlanOfferingPropertyKey =
  (typeof SavingsPlanOfferingPropertyKey)[keyof typeof SavingsPlanOfferingPropertyKey];
export interface SavingsPlanOfferingProperty {
  name?: SavingsPlanOfferingPropertyKey;
  value?: string;
}
export interface SavingsPlanOffering {
  offeringId?: string;
  productTypes?: SavingsPlanProductType[];
  planType?: SavingsPlanType;
  description?: string;
  paymentOption?: SavingsPlanPaymentOption;
  durationSeconds?: number;
  currency?: CurrencyCode;
  serviceCode?: string;
  usageType?: string;
  operation?: string;
  properties?: SavingsPlanOfferingProperty[];
}
export interface DescribeSavingsPlansOfferingsResponse {
  searchResults?: SavingsPlanOffering[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
