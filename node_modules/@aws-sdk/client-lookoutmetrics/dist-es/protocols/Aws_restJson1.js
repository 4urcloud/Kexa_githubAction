import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { LookoutMetricsServiceException as __BaseException } from "../models/LookoutMetricsServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, TooManyRequestsException, ValidationException, } from "../models/models_0";
export const se_ActivateAnomalyDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ActivateAnomalyDetector");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BackTestAnomalyDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/BackTestAnomalyDetector");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAlertCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateAlert");
    let body;
    body = JSON.stringify(take(input, {
        Action: (_) => _json(_),
        AlertDescription: [],
        AlertFilters: (_) => _json(_),
        AlertName: [],
        AlertSensitivityThreshold: [],
        AnomalyDetectorArn: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateAnomalyDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateAnomalyDetector");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorConfig: (_) => _json(_),
        AnomalyDetectorDescription: [],
        AnomalyDetectorName: [],
        KmsKeyArn: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateMetricSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/CreateMetricSet");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        DimensionFilterList: (_) => _json(_),
        DimensionList: (_) => _json(_),
        MetricList: (_) => _json(_),
        MetricSetDescription: [],
        MetricSetFrequency: [],
        MetricSetName: [],
        MetricSource: (_) => _json(_),
        Offset: [],
        Tags: (_) => _json(_),
        TimestampColumn: (_) => _json(_),
        Timezone: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeactivateAnomalyDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeactivateAnomalyDetector");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAlertCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeleteAlert");
    let body;
    body = JSON.stringify(take(input, {
        AlertArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAnomalyDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DeleteAnomalyDetector");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAlertCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeAlert");
    let body;
    body = JSON.stringify(take(input, {
        AlertArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAnomalyDetectionExecutionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeAnomalyDetectionExecutions");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        MaxResults: [],
        NextToken: [],
        Timestamp: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeAnomalyDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeAnomalyDetector");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeMetricSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DescribeMetricSet");
    let body;
    body = JSON.stringify(take(input, {
        MetricSetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DetectMetricSetConfigCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/DetectMetricSetConfig");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        AutoDetectionMetricSource: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetAnomalyGroupCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/GetAnomalyGroup");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        AnomalyGroupId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetDataQualityMetricsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/GetDataQualityMetrics");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        MetricSetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/GetFeedback");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        AnomalyGroupTimeSeriesFeedback: (_) => _json(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetSampleDataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/GetSampleData");
    let body;
    body = JSON.stringify(take(input, {
        S3SourceConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAlertsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListAlerts");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAnomalyDetectorsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListAnomalyDetectors");
    let body;
    body = JSON.stringify(take(input, {
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAnomalyGroupRelatedMetricsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListAnomalyGroupRelatedMetrics");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        AnomalyGroupId: [],
        MaxResults: [],
        NextToken: [],
        RelationshipTypeFilter: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAnomalyGroupSummariesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListAnomalyGroupSummaries");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        MaxResults: [],
        NextToken: [],
        SensitivityThreshold: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListAnomalyGroupTimeSeriesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListAnomalyGroupTimeSeries");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        AnomalyGroupId: [],
        MaxResults: [],
        MetricName: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListMetricSetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/ListMetricSets");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/PutFeedback");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        AnomalyGroupTimeSeriesFeedback: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateAlertCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateAlert");
    let body;
    body = JSON.stringify(take(input, {
        Action: (_) => _json(_),
        AlertArn: [],
        AlertDescription: [],
        AlertFilters: (_) => _json(_),
        AlertSensitivityThreshold: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateAnomalyDetectorCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateAnomalyDetector");
    let body;
    body = JSON.stringify(take(input, {
        AnomalyDetectorArn: [],
        AnomalyDetectorConfig: (_) => _json(_),
        AnomalyDetectorDescription: [],
        KmsKeyArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateMetricSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/UpdateMetricSet");
    let body;
    body = JSON.stringify(take(input, {
        DimensionFilterList: (_) => _json(_),
        DimensionList: (_) => _json(_),
        MetricList: (_) => _json(_),
        MetricSetArn: [],
        MetricSetDescription: [],
        MetricSetFrequency: [],
        MetricSource: (_) => _json(_),
        Offset: [],
        TimestampColumn: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_ActivateAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_BackTestAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateAlertCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AlertArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyDetectorArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateMetricSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MetricSetArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeactivateAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAlertCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeAlertCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Alert: (_) => de_Alert(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAnomalyDetectionExecutionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ExecutionList: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyDetectorArn: __expectString,
        AnomalyDetectorConfig: _json,
        AnomalyDetectorDescription: __expectString,
        AnomalyDetectorName: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureReason: __expectString,
        FailureType: __expectString,
        KmsKeyArn: __expectString,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeMetricSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyDetectorArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DimensionFilterList: _json,
        DimensionList: _json,
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MetricList: _json,
        MetricSetArn: __expectString,
        MetricSetDescription: __expectString,
        MetricSetFrequency: __expectString,
        MetricSetName: __expectString,
        MetricSource: _json,
        Offset: __expectInt32,
        TimestampColumn: _json,
        Timezone: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DetectMetricSetConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        DetectedMetricSetConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetAnomalyGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyGroup: (_) => de_AnomalyGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDataQualityMetricsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyDetectorDataQualityMetricList: (_) => de_AnomalyDetectorDataQualityMetricList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyGroupTimeSeriesFeedback: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSampleDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        HeaderValues: _json,
        SampleRows: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAlertsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AlertSummaryList: (_) => de_AlertSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnomalyDetectorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyDetectorSummaryList: (_) => de_AnomalyDetectorSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnomalyGroupRelatedMetricsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        InterMetricImpactList: (_) => de_InterMetricImpactList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnomalyGroupSummariesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyGroupStatistics: _json,
        AnomalyGroupSummaryList: (_) => de_AnomalyGroupSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAnomalyGroupTimeSeriesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyGroupId: __expectString,
        MetricName: __expectString,
        NextToken: __expectString,
        TimeSeriesList: (_) => de_TimeSeriesList(_, context),
        TimestampList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListMetricSetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MetricSetSummaryList: (_) => de_MetricSetSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: [, _json, `Tags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateAlertCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AlertArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateAnomalyDetectorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        AnomalyDetectorArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateMetricSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        MetricSetArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lookoutmetrics#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.lookoutmetrics#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.lookoutmetrics#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.lookoutmetrics#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.lookoutmetrics#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.lookoutmetrics#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.lookoutmetrics#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        QuotaCode: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Fields: _json,
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_Alert = (output, context) => {
    return take(output, {
        Action: _json,
        AlertArn: __expectString,
        AlertDescription: __expectString,
        AlertFilters: _json,
        AlertName: __expectString,
        AlertSensitivityThreshold: __expectInt32,
        AlertStatus: __expectString,
        AlertType: __expectString,
        AnomalyDetectorArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AlertSummary = (output, context) => {
    return take(output, {
        AlertArn: __expectString,
        AlertName: __expectString,
        AlertSensitivityThreshold: __expectInt32,
        AlertStatus: __expectString,
        AlertType: __expectString,
        AnomalyDetectorArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Tags: _json,
    });
};
const de_AlertSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlertSummary(entry, context);
    });
    return retVal;
};
const de_AnomalyDetectorDataQualityMetric = (output, context) => {
    return take(output, {
        MetricSetDataQualityMetricList: (_) => de_MetricSetDataQualityMetricList(_, context),
        StartTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AnomalyDetectorDataQualityMetricList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnomalyDetectorDataQualityMetric(entry, context);
    });
    return retVal;
};
const de_AnomalyDetectorSummary = (output, context) => {
    return take(output, {
        AnomalyDetectorArn: __expectString,
        AnomalyDetectorDescription: __expectString,
        AnomalyDetectorName: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        Tags: _json,
    });
};
const de_AnomalyDetectorSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnomalyDetectorSummary(entry, context);
    });
    return retVal;
};
const de_AnomalyGroup = (output, context) => {
    return take(output, {
        AnomalyGroupId: __expectString,
        AnomalyGroupScore: __limitedParseDouble,
        EndTime: __expectString,
        MetricLevelImpactList: (_) => de_MetricLevelImpactList(_, context),
        PrimaryMetricName: __expectString,
        StartTime: __expectString,
    });
};
const de_AnomalyGroupSummary = (output, context) => {
    return take(output, {
        AnomalyGroupId: __expectString,
        AnomalyGroupScore: __limitedParseDouble,
        EndTime: __expectString,
        PrimaryMetricName: __expectString,
        StartTime: __expectString,
    });
};
const de_AnomalyGroupSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnomalyGroupSummary(entry, context);
    });
    return retVal;
};
const de_ContributionMatrix = (output, context) => {
    return take(output, {
        DimensionContributionList: (_) => de_DimensionContributionList(_, context),
    });
};
const de_DataQualityMetric = (output, context) => {
    return take(output, {
        MetricDescription: __expectString,
        MetricType: __expectString,
        MetricValue: __limitedParseDouble,
        RelatedColumnName: __expectString,
    });
};
const de_DataQualityMetricList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataQualityMetric(entry, context);
    });
    return retVal;
};
const de_DimensionContribution = (output, context) => {
    return take(output, {
        DimensionName: __expectString,
        DimensionValueContributionList: (_) => de_DimensionValueContributionList(_, context),
    });
};
const de_DimensionContributionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DimensionContribution(entry, context);
    });
    return retVal;
};
const de_DimensionValueContribution = (output, context) => {
    return take(output, {
        ContributionScore: __limitedParseDouble,
        DimensionValue: __expectString,
    });
};
const de_DimensionValueContributionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DimensionValueContribution(entry, context);
    });
    return retVal;
};
const de_InterMetricImpactDetails = (output, context) => {
    return take(output, {
        AnomalyGroupId: __expectString,
        ContributionPercentage: __limitedParseDouble,
        MetricName: __expectString,
        RelationshipType: __expectString,
    });
};
const de_InterMetricImpactList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InterMetricImpactDetails(entry, context);
    });
    return retVal;
};
const de_MetricLevelImpact = (output, context) => {
    return take(output, {
        ContributionMatrix: (_) => de_ContributionMatrix(_, context),
        MetricName: __expectString,
        NumTimeSeries: __expectInt32,
    });
};
const de_MetricLevelImpactList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricLevelImpact(entry, context);
    });
    return retVal;
};
const de_MetricSetDataQualityMetric = (output, context) => {
    return take(output, {
        DataQualityMetricList: (_) => de_DataQualityMetricList(_, context),
        MetricSetArn: __expectString,
    });
};
const de_MetricSetDataQualityMetricList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricSetDataQualityMetric(entry, context);
    });
    return retVal;
};
const de_MetricSetSummary = (output, context) => {
    return take(output, {
        AnomalyDetectorArn: __expectString,
        CreationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModificationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MetricSetArn: __expectString,
        MetricSetDescription: __expectString,
        MetricSetName: __expectString,
        Tags: _json,
    });
};
const de_MetricSetSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricSetSummary(entry, context);
    });
    return retVal;
};
const de_MetricValueList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de_TimeSeries = (output, context) => {
    return take(output, {
        DimensionList: _json,
        MetricValueList: (_) => de_MetricValueList(_, context),
        TimeSeriesId: __expectString,
    });
};
const de_TimeSeriesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TimeSeries(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _TK = "TagKeys";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
