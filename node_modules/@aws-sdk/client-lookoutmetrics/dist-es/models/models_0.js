import { LookoutMetricsServiceException as __BaseException } from "./LookoutMetricsServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const SnsFormat = {
    JSON: "JSON",
    LONG_TEXT: "LONG_TEXT",
    SHORT_TEXT: "SHORT_TEXT",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class TooManyRequestsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "CANNOT_PARSE",
    FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED",
    OTHER: "OTHER",
    UNKNOWN_OPERATION: "UNKNOWN_OPERATION",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Fields = opts.Fields;
    }
}
export const AggregationFunction = {
    AVG: "AVG",
    SUM: "SUM",
};
export const AlertStatus = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
export const AlertType = {
    LAMBDA: "LAMBDA",
    SNS: "SNS",
};
export const AnomalyDetectionTaskStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    FAILED_TO_SCHEDULE: "FAILED_TO_SCHEDULE",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
};
export const Frequency = {
    P1D: "P1D",
    PT10M: "PT10M",
    PT1H: "PT1H",
    PT5M: "PT5M",
};
export const DataQualityMetricType = {
    BACKTEST_INFERENCE_DATA_END_TIME_STAMP: "BACKTEST_INFERENCE_DATA_END_TIME_STAMP",
    BACKTEST_INFERENCE_DATA_START_TIME_STAMP: "BACKTEST_INFERENCE_DATA_START_TIME_STAMP",
    BACKTEST_TRAINING_DATA_END_TIME_STAMP: "BACKTEST_TRAINING_DATA_END_TIME_STAMP",
    BACKTEST_TRAINING_DATA_START_TIME_STAMP: "BACKTEST_TRAINING_DATA_START_TIME_STAMP",
    COLUMN_COMPLETENESS: "COLUMN_COMPLETENESS",
    DIMENSION_UNIQUENESS: "DIMENSION_UNIQUENESS",
    INVALID_ROWS_COMPLIANCE: "INVALID_ROWS_COMPLIANCE",
    ROWS_PARTIAL_COMPLIANCE: "ROWS_PARTIAL_COMPLIANCE",
    ROWS_PROCESSED: "ROWS_PROCESSED",
    TIME_SERIES_COUNT: "TIME_SERIES_COUNT",
};
export const AnomalyDetectorFailureType = {
    ACTIVATION_FAILURE: "ACTIVATION_FAILURE",
    BACK_TEST_ACTIVATION_FAILURE: "BACK_TEST_ACTIVATION_FAILURE",
    DEACTIVATION_FAILURE: "DEACTIVATION_FAILURE",
    DELETION_FAILURE: "DELETION_FAILURE",
};
export const AnomalyDetectorStatus = {
    ACTIVATING: "ACTIVATING",
    ACTIVE: "ACTIVE",
    BACK_TEST_ACTIVATING: "BACK_TEST_ACTIVATING",
    BACK_TEST_ACTIVE: "BACK_TEST_ACTIVE",
    BACK_TEST_COMPLETE: "BACK_TEST_COMPLETE",
    DEACTIVATED: "DEACTIVATED",
    DEACTIVATING: "DEACTIVATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
    LEARNING: "LEARNING",
};
export const Confidence = {
    HIGH: "HIGH",
    LOW: "LOW",
    NONE: "NONE",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
        this.QuotaCode = opts.QuotaCode;
        this.ServiceCode = opts.ServiceCode;
    }
}
export const FilterOperation = {
    EQUALS: "EQUALS",
};
export const CSVFileCompression = {
    GZIP: "GZIP",
    NONE: "NONE",
};
export const JsonFileCompression = {
    GZIP: "GZIP",
    NONE: "NONE",
};
export const RelationshipType = {
    CAUSE_OF_INPUT_ANOMALY_GROUP: "CAUSE_OF_INPUT_ANOMALY_GROUP",
    EFFECT_OF_INPUT_ANOMALY_GROUP: "EFFECT_OF_INPUT_ANOMALY_GROUP",
};
