import { awsExpectUnion as __expectUnion } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, convertMap, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AmpServiceException as __BaseException } from "../models/AmpServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ScrapeConfiguration, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_CreateAlertManagerDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workspaces/{workspaceId}/alertmanager/definition");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        data: (_) => context.base64Encoder(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workspaces/{workspaceId}/logging");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        logGroupArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateRuleGroupsNamespaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workspaces/{workspaceId}/rulegroupsnamespaces");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        data: (_) => context.base64Encoder(_),
        name: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateScraperCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/scrapers");
    let body;
    body = JSON.stringify(take(input, {
        alias: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        destination: (_) => _json(_),
        scrapeConfiguration: (_) => se_ScrapeConfiguration(_, context),
        source: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateWorkspaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workspaces");
    let body;
    body = JSON.stringify(take(input, {
        alias: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        kmsKeyArn: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAlertManagerDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces/{workspaceId}/alertmanager/definition");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces/{workspaceId}/logging");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteRuleGroupsNamespaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces/{workspaceId}/rulegroupsnamespaces/{name}");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    b.p("name", () => input.name, "{name}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteScraperCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/scrapers/{scraperId}");
    b.p("scraperId", () => input.scraperId, "{scraperId}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteWorkspaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces/{workspaceId}");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    const query = map({
        [_cT]: [, input[_cT] ?? generateIdempotencyToken()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeAlertManagerDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces/{workspaceId}/alertmanager/definition");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces/{workspaceId}/logging");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRuleGroupsNamespaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces/{workspaceId}/rulegroupsnamespaces/{name}");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeScraperCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/scrapers/{scraperId}");
    b.p("scraperId", () => input.scraperId, "{scraperId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeWorkspaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces/{workspaceId}");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDefaultScraperConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/scraperconfiguration");
    let body;
    body = "";
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListRuleGroupsNamespacesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces/{workspaceId}/rulegroupsnamespaces");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    const query = map({
        [_n]: [, input[_n]],
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListScrapersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/scrapers");
    const query = map({
        ...convertMap(input.filters),
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListWorkspacesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/workspaces");
    const query = map({
        [_nT]: [, input[_nT]],
        [_a]: [, input[_a]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutAlertManagerDefinitionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workspaces/{workspaceId}/alertmanager/definition");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        data: (_) => context.base64Encoder(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_PutRuleGroupsNamespaceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workspaces/{workspaceId}/rulegroupsnamespaces/{name}");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    b.p("name", () => input.name, "{name}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        data: (_) => context.base64Encoder(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.tagKeys, `tagKeys`) != null,
            () => (input[_tK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workspaces/{workspaceId}/logging");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        logGroupArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateWorkspaceAliasCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/workspaces/{workspaceId}/alias");
    b.p("workspaceId", () => input.workspaceId, "{workspaceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        alias: [],
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CreateAlertManagerDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateRuleGroupsNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        name: __expectString,
        status: _json,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateScraperCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        scraperId: __expectString,
        status: _json,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateWorkspaceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        kmsKeyArn: __expectString,
        status: _json,
        tags: _json,
        workspaceId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAlertManagerDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteRuleGroupsNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteScraperCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        scraperId: __expectString,
        status: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteWorkspaceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeAlertManagerDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        alertManagerDefinition: (_) => de_AlertManagerDefinitionDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        loggingConfiguration: (_) => de_LoggingConfigurationMetadata(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRuleGroupsNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ruleGroupsNamespace: (_) => de_RuleGroupsNamespaceDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeScraperCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        scraper: (_) => de_ScraperDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeWorkspaceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        workspace: (_) => de_WorkspaceDescription(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDefaultScraperConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        configuration: context.base64Decoder,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRuleGroupsNamespacesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        ruleGroupsNamespaces: (_) => de_RuleGroupsNamespaceSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListScrapersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        scrapers: (_) => de_ScraperSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListWorkspacesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        workspaces: (_) => de_WorkspaceSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutAlertManagerDefinitionCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutRuleGroupsNamespaceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        name: __expectString,
        status: _json,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        status: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateWorkspaceAliasCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.amp#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.amp#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.amp#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amp#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.amp#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.amp#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.amp#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        quotaCode: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        quotaCode: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        fieldList: _json,
        message: __expectString,
        reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_ScrapeConfiguration = (input, context) => {
    return ScrapeConfiguration.visit(input, {
        configurationBlob: (value) => ({ configurationBlob: context.base64Encoder(value) }),
        _: (name, value) => ({ name: value }),
    });
};
const de_AlertManagerDefinitionDescription = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        data: context.base64Decoder,
        modifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: _json,
    });
};
const de_LoggingConfigurationMetadata = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        logGroupArn: __expectString,
        modifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: _json,
        workspace: __expectString,
    });
};
const de_RuleGroupsNamespaceDescription = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        data: context.base64Decoder,
        modifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: _json,
        tags: _json,
    });
};
const de_RuleGroupsNamespaceSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        modifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: _json,
        tags: _json,
    });
};
const de_RuleGroupsNamespaceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleGroupsNamespaceSummary(entry, context);
    });
    return retVal;
};
const de_ScrapeConfiguration = (output, context) => {
    if (output.configurationBlob != null) {
        return {
            configurationBlob: context.base64Decoder(output.configurationBlob),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ScraperDescription = (output, context) => {
    return take(output, {
        alias: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        destination: (_) => _json(__expectUnion(_)),
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        roleArn: __expectString,
        scrapeConfiguration: (_) => de_ScrapeConfiguration(__expectUnion(_), context),
        scraperId: __expectString,
        source: (_) => _json(__expectUnion(_)),
        status: _json,
        statusReason: __expectString,
        tags: _json,
    });
};
const de_ScraperSummary = (output, context) => {
    return take(output, {
        alias: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        destination: (_) => _json(__expectUnion(_)),
        lastModifiedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        roleArn: __expectString,
        scraperId: __expectString,
        source: (_) => _json(__expectUnion(_)),
        status: _json,
        statusReason: __expectString,
        tags: _json,
    });
};
const de_ScraperSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScraperSummary(entry, context);
    });
    return retVal;
};
const de_WorkspaceDescription = (output, context) => {
    return take(output, {
        alias: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        kmsKeyArn: __expectString,
        prometheusEndpoint: __expectString,
        status: _json,
        tags: _json,
        workspaceId: __expectString,
    });
};
const de_WorkspaceSummary = (output, context) => {
    return take(output, {
        alias: __expectString,
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        kmsKeyArn: __expectString,
        status: _json,
        tags: _json,
        workspaceId: __expectString,
    });
};
const de_WorkspaceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WorkspaceSummary(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _a = "alias";
const _cT = "clientToken";
const _mR = "maxResults";
const _n = "name";
const _nT = "nextToken";
const _rAS = "retryAfterSeconds";
const _ra = "retry-after";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
