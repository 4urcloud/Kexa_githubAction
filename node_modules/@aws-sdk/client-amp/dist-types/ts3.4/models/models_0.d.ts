import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { AmpServiceException as __BaseException } from "./AmpServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface CreateAlertManagerDefinitionRequest {
  workspaceId: string | undefined;
  data: Uint8Array | undefined;
  clientToken?: string;
}
export declare const AlertManagerDefinitionStatusCode: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type AlertManagerDefinitionStatusCode =
  (typeof AlertManagerDefinitionStatusCode)[keyof typeof AlertManagerDefinitionStatusCode];
export interface AlertManagerDefinitionStatus {
  statusCode: AlertManagerDefinitionStatusCode | undefined;
  statusReason?: string;
}
export interface CreateAlertManagerDefinitionResponse {
  status: AlertManagerDefinitionStatus | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  $retryable: {};
  retryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: string | undefined;
  serviceCode: string | undefined;
  quotaCode: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  $retryable: {};
  serviceCode?: string;
  quotaCode?: string;
  retryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "CANNOT_PARSE";
  readonly FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED";
  readonly OTHER: "OTHER";
  readonly UNKNOWN_OPERATION: "UNKNOWN_OPERATION";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  reason: ValidationExceptionReason | undefined;
  fieldList?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteAlertManagerDefinitionRequest {
  workspaceId: string | undefined;
  clientToken?: string;
}
export interface DescribeAlertManagerDefinitionRequest {
  workspaceId: string | undefined;
}
export interface AlertManagerDefinitionDescription {
  status: AlertManagerDefinitionStatus | undefined;
  data: Uint8Array | undefined;
  createdAt: Date | undefined;
  modifiedAt: Date | undefined;
}
export interface DescribeAlertManagerDefinitionResponse {
  alertManagerDefinition: AlertManagerDefinitionDescription | undefined;
}
export interface PutAlertManagerDefinitionRequest {
  workspaceId: string | undefined;
  data: Uint8Array | undefined;
  clientToken?: string;
}
export interface PutAlertManagerDefinitionResponse {
  status: AlertManagerDefinitionStatus | undefined;
}
export interface GetDefaultScraperConfigurationRequest {}
export interface GetDefaultScraperConfigurationResponse {
  configuration: Uint8Array | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface AmpConfiguration {
  workspaceArn: string | undefined;
}
export type Destination =
  | Destination.AmpConfigurationMember
  | Destination.$UnknownMember;
export declare namespace Destination {
  interface AmpConfigurationMember {
    ampConfiguration: AmpConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    ampConfiguration?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    ampConfiguration: (value: AmpConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Destination, visitor: Visitor<T>) => T;
}
export type ScrapeConfiguration =
  | ScrapeConfiguration.ConfigurationBlobMember
  | ScrapeConfiguration.$UnknownMember;
export declare namespace ScrapeConfiguration {
  interface ConfigurationBlobMember {
    configurationBlob: Uint8Array;
    $unknown?: never;
  }
  interface $UnknownMember {
    configurationBlob?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    configurationBlob: (value: Uint8Array) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ScrapeConfiguration, visitor: Visitor<T>) => T;
}
export interface EksConfiguration {
  clusterArn: string | undefined;
  securityGroupIds?: string[];
  subnetIds: string[] | undefined;
}
export type Source = Source.EksConfigurationMember | Source.$UnknownMember;
export declare namespace Source {
  interface EksConfigurationMember {
    eksConfiguration: EksConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    eksConfiguration?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    eksConfiguration: (value: EksConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: Source, visitor: Visitor<T>) => T;
}
export interface CreateScraperRequest {
  alias?: string;
  scrapeConfiguration: ScrapeConfiguration | undefined;
  source: Source | undefined;
  destination: Destination | undefined;
  clientToken?: string;
  tags?: Record<string, string>;
}
export declare const ScraperStatusCode: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly DELETING: "DELETING";
  readonly DELETION_FAILED: "DELETION_FAILED";
};
export type ScraperStatusCode =
  (typeof ScraperStatusCode)[keyof typeof ScraperStatusCode];
export interface ScraperStatus {
  statusCode: ScraperStatusCode | undefined;
}
export interface CreateScraperResponse {
  scraperId: string | undefined;
  arn: string | undefined;
  status: ScraperStatus | undefined;
  tags?: Record<string, string>;
}
export interface DeleteScraperRequest {
  scraperId: string | undefined;
  clientToken?: string;
}
export interface DeleteScraperResponse {
  scraperId: string | undefined;
  status: ScraperStatus | undefined;
}
export interface DescribeScraperRequest {
  scraperId: string | undefined;
}
export interface ScraperDescription {
  alias?: string;
  scraperId: string | undefined;
  arn: string | undefined;
  roleArn: string | undefined;
  status: ScraperStatus | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  tags?: Record<string, string>;
  statusReason?: string;
  scrapeConfiguration: ScrapeConfiguration | undefined;
  source: Source | undefined;
  destination: Destination | undefined;
}
export interface DescribeScraperResponse {
  scraper: ScraperDescription | undefined;
}
export interface ListScrapersRequest {
  filters?: Record<string, string[]>;
  nextToken?: string;
  maxResults?: number;
}
export interface ScraperSummary {
  alias?: string;
  scraperId: string | undefined;
  arn: string | undefined;
  roleArn: string | undefined;
  status: ScraperStatus | undefined;
  createdAt: Date | undefined;
  lastModifiedAt: Date | undefined;
  tags?: Record<string, string>;
  statusReason?: string;
  source: Source | undefined;
  destination: Destination | undefined;
}
export interface ListScrapersResponse {
  scrapers: ScraperSummary[] | undefined;
  nextToken?: string;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface CreateWorkspaceRequest {
  alias?: string;
  clientToken?: string;
  tags?: Record<string, string>;
  kmsKeyArn?: string;
}
export declare const WorkspaceStatusCode: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATING: "UPDATING";
};
export type WorkspaceStatusCode =
  (typeof WorkspaceStatusCode)[keyof typeof WorkspaceStatusCode];
export interface WorkspaceStatus {
  statusCode: WorkspaceStatusCode | undefined;
}
export interface CreateWorkspaceResponse {
  workspaceId: string | undefined;
  arn: string | undefined;
  status: WorkspaceStatus | undefined;
  tags?: Record<string, string>;
  kmsKeyArn?: string;
}
export interface DeleteWorkspaceRequest {
  workspaceId: string | undefined;
  clientToken?: string;
}
export interface DescribeWorkspaceRequest {
  workspaceId: string | undefined;
}
export interface WorkspaceDescription {
  workspaceId: string | undefined;
  alias?: string;
  arn: string | undefined;
  status: WorkspaceStatus | undefined;
  prometheusEndpoint?: string;
  createdAt: Date | undefined;
  tags?: Record<string, string>;
  kmsKeyArn?: string;
}
export interface DescribeWorkspaceResponse {
  workspace: WorkspaceDescription | undefined;
}
export interface ListWorkspacesRequest {
  nextToken?: string;
  alias?: string;
  maxResults?: number;
}
export interface WorkspaceSummary {
  workspaceId: string | undefined;
  alias?: string;
  arn: string | undefined;
  status: WorkspaceStatus | undefined;
  createdAt: Date | undefined;
  tags?: Record<string, string>;
  kmsKeyArn?: string;
}
export interface ListWorkspacesResponse {
  workspaces: WorkspaceSummary[] | undefined;
  nextToken?: string;
}
export interface CreateLoggingConfigurationRequest {
  workspaceId: string | undefined;
  logGroupArn: string | undefined;
  clientToken?: string;
}
export declare const LoggingConfigurationStatusCode: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type LoggingConfigurationStatusCode =
  (typeof LoggingConfigurationStatusCode)[keyof typeof LoggingConfigurationStatusCode];
export interface LoggingConfigurationStatus {
  statusCode: LoggingConfigurationStatusCode | undefined;
  statusReason?: string;
}
export interface CreateLoggingConfigurationResponse {
  status: LoggingConfigurationStatus | undefined;
}
export interface DeleteLoggingConfigurationRequest {
  workspaceId: string | undefined;
  clientToken?: string;
}
export interface DescribeLoggingConfigurationRequest {
  workspaceId: string | undefined;
}
export interface LoggingConfigurationMetadata {
  status: LoggingConfigurationStatus | undefined;
  workspace: string | undefined;
  logGroupArn: string | undefined;
  createdAt: Date | undefined;
  modifiedAt: Date | undefined;
}
export interface DescribeLoggingConfigurationResponse {
  loggingConfiguration: LoggingConfigurationMetadata | undefined;
}
export interface UpdateLoggingConfigurationRequest {
  workspaceId: string | undefined;
  logGroupArn: string | undefined;
  clientToken?: string;
}
export interface UpdateLoggingConfigurationResponse {
  status: LoggingConfigurationStatus | undefined;
}
export interface CreateRuleGroupsNamespaceRequest {
  workspaceId: string | undefined;
  name: string | undefined;
  data: Uint8Array | undefined;
  clientToken?: string;
  tags?: Record<string, string>;
}
export declare const RuleGroupsNamespaceStatusCode: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly CREATION_FAILED: "CREATION_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type RuleGroupsNamespaceStatusCode =
  (typeof RuleGroupsNamespaceStatusCode)[keyof typeof RuleGroupsNamespaceStatusCode];
export interface RuleGroupsNamespaceStatus {
  statusCode: RuleGroupsNamespaceStatusCode | undefined;
  statusReason?: string;
}
export interface CreateRuleGroupsNamespaceResponse {
  name: string | undefined;
  arn: string | undefined;
  status: RuleGroupsNamespaceStatus | undefined;
  tags?: Record<string, string>;
}
export interface DeleteRuleGroupsNamespaceRequest {
  workspaceId: string | undefined;
  name: string | undefined;
  clientToken?: string;
}
export interface DescribeRuleGroupsNamespaceRequest {
  workspaceId: string | undefined;
  name: string | undefined;
}
export interface RuleGroupsNamespaceDescription {
  arn: string | undefined;
  name: string | undefined;
  status: RuleGroupsNamespaceStatus | undefined;
  data: Uint8Array | undefined;
  createdAt: Date | undefined;
  modifiedAt: Date | undefined;
  tags?: Record<string, string>;
}
export interface DescribeRuleGroupsNamespaceResponse {
  ruleGroupsNamespace: RuleGroupsNamespaceDescription | undefined;
}
export interface ListRuleGroupsNamespacesRequest {
  workspaceId: string | undefined;
  name?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface RuleGroupsNamespaceSummary {
  arn: string | undefined;
  name: string | undefined;
  status: RuleGroupsNamespaceStatus | undefined;
  createdAt: Date | undefined;
  modifiedAt: Date | undefined;
  tags?: Record<string, string>;
}
export interface ListRuleGroupsNamespacesResponse {
  ruleGroupsNamespaces: RuleGroupsNamespaceSummary[] | undefined;
  nextToken?: string;
}
export interface PutRuleGroupsNamespaceRequest {
  workspaceId: string | undefined;
  name: string | undefined;
  data: Uint8Array | undefined;
  clientToken?: string;
}
export interface PutRuleGroupsNamespaceResponse {
  name: string | undefined;
  arn: string | undefined;
  status: RuleGroupsNamespaceStatus | undefined;
  tags?: Record<string, string>;
}
export interface UpdateWorkspaceAliasRequest {
  workspaceId: string | undefined;
  alias?: string;
  clientToken?: string;
}
