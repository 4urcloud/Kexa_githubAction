name: 'Kexa Action'
description: "It's Kexa version for a GitHub Action wrapped in Docker"
author: '4urcloud | Esteban MATHIA & Adrien EPPLING'
branding:
  icon: 'check-circle'
  color: 'blue'

inputs:
  ENV_VARS:
    description: 'All environment variables to be set in the .env file as a JSON object'
    required: true
    default: '{}'
  KUBECONFIG:
    description: 'Kubeconfig file content'
    required: false
    default: ''
  KUBEPREFIX:
    description: 'Kube var prefix'
    required: false
    default: ''
  WORKSPACECRED:
    description: 'Workspace credentials'
    required: false
    default: ''
  WORKSPACEPREFIX:
    description: 'Workspace var prefix'
    required: false
    default: ''
  GOOGLE_APPLICATION_CREDENTIALS:
    description: 'Google application credentials'
    required: false
    default: ''
  GOOGLE_APPLICATION_CREDENTIALS_PREFIX:
    description: 'Google application credentials prefix'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    ##################################
    #   ENVIRONMENT FILE CREATION    #
    ##################################

    - name: Create .env file with all environment variables
      run: echo '${{ inputs.ENV_VARS }}' > .env
      shell: bash

    ##################################
    #   CONFIG FILE CREATION         #
    ##################################

    - name: If Kubeconfig input exists, create kubeconfig file and set exist
      id: check_kubeconfig
      run: |
        if [ -n "${{ inputs.KUBECONFIG }}" ]; then
          echo "KUBECONFIG found."
          echo "${{ inputs.KUBECONFIG }}" > kubeconfig.yaml
          echo "${{ inputs.KUBEPREFIX }}KUBECONFIG=/app/config/kubernetes.json" >> .env
          echo "${{ inputs.KUBECONFIG }}" | python -c "import yaml, json, sys; yaml_content = sys.stdin.read(); print(json.dumps(yaml.safe_load(yaml_content), indent=2))" > kubernetes.json
          chmod 700 kubernetes.json kubeconfig.yaml
        else
          echo "KUBECONFIG not found."
        fi
      shell: bash

    - name: If Workspace credentials input exists, create workspace credentials file and set exist
      id: check_workspacecred
      run: |
        if [ -n "${{ inputs.WORKSPACECRED }}" ]; then
          echo "WORKSPACECRED found."
          echo "${{ inputs.WORKSPACECRED }}" > credentials_workspace.json
          echo "${{ inputs.WORKSPACEPREFIX }}WORKSPACECRED=/app/config/credentials_workspace.json" >> .env
          chmod 700 credentials_workspace.json
        else
          echo "WORKSPACECRED not found."
        fi
      shell: bash

    - name: If Google application credentials input exists, create Google application credentials file and set exist
      id: check_google_application_credentials
      run: |
        if [ -n '${{ inputs.GOOGLE_APPLICATION_CREDENTIALS }}' ]; then
          echo "GOOGLE_APPLICATION_CREDENTIALS found."
          echo '${{ inputs.GOOGLE_APPLICATION_CREDENTIALS }}' > gcp.json
          echo '${{ inputs.GOOGLE_APPLICATION_CREDENTIALS_PREFIX }}GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp.json' >> .env
          chmod 700 gcp.json
        else
          echo "GOOGLE_APPLICATION_CREDENTIALS not found."
        fi
      shell: bash

    ##################################
    #       RUN DOCKER IMAGE         #
    ##################################

    # - name: Pull Docker image
    #   run: docker pull innovtech/kexaction:v1.4.2
    #   shell: bash

    # - name: Run Docker container
    #   run: |
    #     docker run -d -p 8000:8000 --name kexadockeractioncontainer --env-file .env innovtech/kexaction:v1.4.2 sleep infinity
    #   shell: bash
    #   if: ${{ success() }}


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      id: cache-docker-layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Load Docker image from cache
      id: load-image-from-cache
      run: |
        mkdir -p /tmp/.buildx-cache
        if [ -f /tmp/.buildx-cache/kexaction.tar.gz ]; then
          echo "Docker image loaded from cache"
          gunzip /tmp/.buildx-cache/kexaction.tar.gz
          docker load -i /tmp/.buildx-cache/kexaction.tar
          docker tag innovtech/kexaction:v1.4.2 cached-innovtech/kexaction:v1.4.2
        else
          echo "Docker image not found in cache"
          exit 1
      shell: bash

    - name: Pull Docker image if not cached
      if: steps.load-image-from-cache.outcome == 'failure'
      id: pull-image-from-cache
      run: |
        docker pull innovtech/kexaction:v1.4.2
        docker save innovtech/kexaction:v1.4.2 -o /tmp/.buildx-cache/kexaction.tar
        gzip /tmp/.buildx-cache/kexaction.tar
      shell: bash

    - name: Run Docker container
      if: steps.load-image-from-cache.outcome == 'success' || steps.pull-image-from-cache.outcome == 'success'
      run: |
        docker run -d -p 8000:8000 --name kexadockeractioncontainer --env-file .env innovtech/kexaction:v1.4.2 sleep infinity
      shell: bash

    #############################################
    #       COPY CONFIGS INTO CONTAINER         #
    #############################################

    - name: Copy kubeconfig into container
      run: |
        docker cp kubeconfig.yaml kexadockeractioncontainer:/app/
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy kube json into container
      run: |
        docker cp kubernetes.json kexadockeractioncontainer:/app/config/
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy workspace credentials into container
      run: |
        docker cp credentials_workspace.json kexadockeractioncontainer:/app/config/
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy google application credentials into container
      run: |
        docker cp gcp.json kexadockeractioncontainer:/app/config/
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy rules into container
      run: |
        docker cp ./rules kexadockeractioncontainer:/app/
      shell: bash
      if: ${{ success() }}

    - name: Copy config into container
      run: |
        docker cp ./config kexadockeractioncontainer:/app/
      shell: bash
      if: ${{ success() }}

    #################################
    #       RUN KEXA SCRIPT         #
    #################################

    - name: Start main application inside container
      run: |
        docker exec kexadockeractioncontainer sh -c '
          pnpm run start:nobuild
          EXIT_CODE=$?
          echo "Exit code: $EXIT_CODE"
          if [ $EXIT_CODE -ne 0 ]; then
            echo "pnpm run start:nobuild failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi
        '
      shell: bash


    # delete kube config file if created
    - name: Delete kubeconfig file
      if: steps.check_kubeconfig.outputs.exists == 'true'
      run: rm kubeconfig.yaml
      continue-on-error: true
      shell: bash

    # delete workspace credentials file if created
    - name: Delete workspace credentials file
      if: steps.check_workspacecred.outputs.exists == 'true'
      run: rm credentials_workspace.json
      continue-on-error: true
      shell: bash

    # delete google application credentials file if created
    - name: Delete google application credentials file
      if: steps.check_google_application_credentials.outputs.exists == 'true'
      run: rm google-application-credentials.json
      continue-on-error: true
      shell: bash

    - name: Delete .env file
      run: rm .env
      continue-on-error: true
      shell: bash
