name: 'Kexa Action'
description: "It's Kexa version for a GitHub Action wrapped in Docker"
author: '4urcloud | Esteban MATHIA & Adrien EPPLING'
branding:
  icon: 'check-circle'
  color: 'blue'

inputs:
  ENV_VARS:
    description: 'All environment variables to be set in the .env file as a JSON object'
    required: true
    default: '{}'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create .env file with all environment variables
      run: echo '${{ inputs.ENV_VARS }}' > .env
      shell: bash

    - name: Here is the env file
      run: cat .env
      shell: bash
    
    # check if a inputs with 'KUBECONFIG' in its name is set
    #- name: Check if input containing 'KUBECONFIG' in its name exist
    #  id: check_kubeconfig
    #  run: echo ::set-output name=exists::$(env | grep -q 'KUBECONFIG' && echo true || echo false)
    #  shell: bash
    - name: Check for KUBECONFIG in inputs
      id: check_kubeconfig
      run: |
        echo "Starting to check for KUBECONFIG in inputs..."
        found=false
        for input_name in ${{ inputs }}; do
          echo "Checking input: $input_name"
          if [[ "$input_name" == *"KUBECONFIG"* ]]; then
            echo "Found KUBECONFIG in: $input_name"
            kubeconfig_name="$input_name"
            kubeconfig_content="${!input_name}"
            echo "KUBECONFIG_NAME=$kubeconfig_name" >> $GITHUB_ENV
            echo "KUBECONFIG_CONTENT=$kubeconfig_content" >> $GITHUB_ENV
            found=true
            break
          fi
        done
        if [ "$found" = false ]; then
          echo "No KUBECONFIG found in inputs."
          echo "KUBECONFIG_NAME=none" >> $GITHUB_ENV
          echo "KUBECONFIG_CONTENT=none" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Display KUBECONFIG_NAME and KUBECONFIG_CONTENT
      run: |
        echo "KUBECONFIG_NAME: ${{ env.KUBECONFIG_NAME }}"
        echo "KUBECONFIG_CONTENT: ${{ env.KUBECONFIG_CONTENT }}"
      shell: bash

    - name: Create kubeconfig file if KUBECONFIG is found
      if: env.KUBECONFIG_NAME != 'none'
      run: |
        echo "Creating kubeconfig file with the content of ${{ env.KUBECONFIG_NAME }}..."
        echo "${{ env.KUBECONFIG_CONTENT }}" > kubeconfig
        echo "kubeconfig file created."
      shell: bash

    - name: Display kubeconfig file
      if: env.KUBECONFIG_NAME != 'none'
      run: cat kubeconfig
      shell: bash

    #- name: Display KUBECONFIG information
    #  run: |
    #    echo "KUBECONFIG_NAME: ${{ env.KUBECONFIG_NAME }}"
    #    echo "KUBECONFIG_CONTENT: ${{ env.KUBECONFIG_CONTENT }}"
    #  if: ${{ env.KUBECONFIG_NAME != 'none' }}
    #  shell: bash

    # retrieve full name of the input containing 'KUBECONFIG'
    #- name: Get name of input containing 'KUBECONFIG'
    #  id: get_kubeconfig_name
    #  if: steps.check_kubeconfig.outputs.exists == 'true'
    #  run: echo ::set-output name=kubeconfig_name::$(env | grep 'KUBECONFIG' | cut -d= -f1)
    #  shell: bash

    # add kube config content to .env file
    #- name: Add kube config content to .env file
    #  if: steps.check_kubeconfig.outputs.exists == 'true'
    #  run: echo "${{ env[steps.get_kubeconfig_name.outputs.kubeconfig_name] }}" >> .env
    #  shell: bash

    - name: Pull Docker image
      run: docker pull innovtech/kexaction:v1.3
      shell: bash

    - name: Run Docker container
      run: |
        docker run -d -p 8000:8000 --name kexadockeractioncontainer --env-file .env innovtech/kexaction:v1.3 sleep infinity
      shell: bash
      if: ${{ success() }}

    - name: Copy rules into container
      run: |
        for file in ./rules/*; do
          docker cp "$file" kexadockeractioncontainer:/app/rules/
        done
      shell: bash
      if: ${{ success() }}

    - name: Copy config into container
      run: |
        for file in ./config/*; do
          docker cp "$file" kexadockeractioncontainer:/app/config/
        done
      shell: bash
      if: ${{ success() }}


    - name: Start main application inside container
      run: |
        docker exec kexadockeractioncontainer sh -c '
          pnpm run start:nobuild
          EXIT_CODE=$?
          echo "Exit code: $EXIT_CODE"
          if [ $EXIT_CODE -ne 0 ]; then
            echo "pnpm run start:nobuild failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi
        '
      shell: bash


    # delete kube config file if created
    - name: Delete kubeconfig file
      if: steps.check_kubeconfig.outputs.exists == 'true'
      run: rm kubeconfig
      shell: bash