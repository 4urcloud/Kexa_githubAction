name: 'Kexa Action'
description: "It's Kexa version for a GitHub Action wrapped in Docker"
author: '4urcloud | Esteban MATHIA & Adrien EPPLING'
branding:
  icon: 'check-circle'
  color: 'blue'

inputs:
  ENV_VARS:
    description: 'All environment variables to be set in the .env file as a JSON object'
    required: true
    default: '{}'
  KUBECONFIG:
    description: 'Kubeconfig file content'
    required: false
    default: ''
  KUBEPREFIX:
    description: 'Kube var prefix'
    required: false
    default: ''
  WORKSPACECRED:
    description: 'Workspace credentials'
    required: false
    default: ''
  WORKSPACEPREFIX:
    description: 'Workspace var prefix'
    required: false
    default: ''
  GOOGLE_APPLICATION_CREDENTIALS:
    description: 'Google application credentials'
    required: false
    default: ''
  GOOGLE_APPLICATION_CREDENTIALS_PREFIX:
    description: 'Google application credentials prefix'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    ##################################
    #   ENVIRONMENT FILE CREATION    #
    ##################################

    - name: Create .env file with all environment variables
      run: echo '${{ inputs.ENV_VARS }}' > .env
      shell: bash


    ##################################
    #   CONFIG FILE CREATION         #
    ##################################


    ###################
    #   KUBERNETES    #
    ###################

    - name: If Kubeconfig input exists, create kubeconfig file and set exist
      id: check_kubeconfig
      run: |
        if [ -n "${{ inputs.KUBECONFIG }}" ]; then
          echo "KUBECONFIG found."
          echo "${{ inputs.KUBECONFIG }}" > kubernetes.yaml
          echo "${{ inputs.KUBEPREFIX }}KUBECONFIG=/app/kubernetes.yaml" >> .env
          echo "${{ inputs.KUBECONFIG }} " > kubernetes.json

          chmod 700 kubernetes.json kubernetes.yaml
        else
          echo "KUBECONFIG not found."
          echo "::set-output name=exists::false"
        fi
      shell: bash

    - name: Multiple kubconfig, create files and set env variables
      id: check_kubeconfig_multiple
      if: steps.check_kubeconfig.outputs.exists == 'false'
      run: |
        if [ -z "${{ inputs.KUBEPREFIX }}" ]; then
          echo "KUBEPREFIX not found."
          exit 0
        fi

        KUBEPREFIXES="${{ inputs.KUBEPREFIX }}"
        IFS=',' read -r -a kubeprefixes <<< "$KUBEPREFIXES"

        if [ ${#kubeprefixes[@]} -gt 0 ]; then
          for idx in "${!kubeprefixes[@]}"; do
            prefix="${kubeprefixes[$idx]}"

            INPUT_PREFIX_KUBE="${prefix}KUBECONFIG"

            newInputs='${{ toJson(inputs) }}'
            kubeconfig=""
            for key in $(echo "$newInputs" | jq -r 'keys[]'); do
              value=$(echo "$newInputs" | jq -r ".\"$key\"")
              if [ "$key" == "$INPUT_PREFIX_KUBE" ]; then
                kubeconfig="${value}"
              fi
            done

            echo "${kubeconfig}" > "kubernetes_${idx}.yaml"
            echo "${prefix}KUBECONFIG=/app/kubernetes_${idx}.yaml" >> .env
            echo "${kubeconfig}" | python -c "import yaml, json, sys; yaml_content = sys.stdin.read(); print(json.dumps(yaml.safe_load(yaml_content), indent=2))" > kubernetes_${idx}.json
            chmod 700 "kubernetes_${idx}.yaml" "kubernetes_${idx}.json"
          done
        else
          echo "No KUBEPREFIX values found."
          exit 1
        fi
      shell: bash



    ###################
    #   WORKSPACE     #
    ###################


    - name: If Workspace credentials input exists, create workspace credentials file and set exist
      id: check_workspacecred
      run: |
        if [ -n "${{ inputs.WORKSPACECRED }}" ]; then
          echo "WORKSPACECRED found."
          echo "${{ inputs.WORKSPACECRED }}" > credentials_workspace.json
          echo "${{ inputs.WORKSPACEPREFIX }}WORKSPACECRED=/app/config/credentials_workspace.json" >> .env
          chmod 700 credentials_workspace.json
        else
          echo "WORKSPACECRED not found."
          echo "::set-output name=exists::false"
        fi
      shell: bash


    ############
    #   GCP    #
    ############
            # jsonData=$(echo "$gcp" | jq -c .)
            
            # echo "HEEEERE the json is fine"
            # echo "$jsonData" | jq . > "gcp_${idx}.json"
            # echo "AFTEER"
            # printf "%s" "$jsonData" | jq . > "gcp_${idx}.json"


    - name: If Google application credentials input exists, create Google application credentials file and set exist
      id: check_google_application_credentials
      run: |
        if [ -n '${{ inputs.GOOGLE_APPLICATION_CREDENTIALS }}' ]; then
          echo "GOOGLE_APPLICATION_CREDENTIALS found."
          echo '${{ inputs.GOOGLE_APPLICATION_CREDENTIALS }}' > gcp.json
          echo '${{ inputs.GOOGLE_APPLICATION_CREDENTIALS_PREFIX }}GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp.json' >> .env
          chmod 700 gcp.json
        else
          echo "GOOGLE_APPLICATION_CREDENTIALS not found."
          echo "::set-output name=exists::false"
        fi
      shell: bash

    - name: Multiple google application credentials, create files and set env variables
      if: steps.check_google_application_credentials.outputs.exists == 'false'
      run: |
        echo "checking for multiple GCP credentials"

        if [ -z "${{ inputs.GOOGLE_APPLICATION_CREDENTIALS_PREFIX }}" ]; then
          echo "GOOGLE_APPLICATION_CREDENTIALS_PREFIX not found."
          exit 1
        fi

        echo "GOOGLE_APPLICATION_CREDENTIALS_PREFIX found for multiple conf."

        GOOGLE_APPLICATION_CREDENTIALS_PREFIXES="${{ inputs.GOOGLE_APPLICATION_CREDENTIALS_PREFIX }}"
        IFS=',' read -r -a google_application_credentials_prefixes <<< "$GOOGLE_APPLICATION_CREDENTIALS_PREFIXES"

        if [ ${#google_application_credentials_prefixes[@]} -gt 0 ]; then
          for idx in "${!google_application_credentials_prefixes[@]}"; do
            prefix="${google_application_credentials_prefixes[$idx]}"

            INPUT_PREFIX_GCP="${prefix}GOOGLE_APPLICATION_CREDENTIALS"

            echo "INPUT_PREFIX_GCP: $INPUT_PREFIX_GCP"

            newInputs='${{ toJson(inputs) }}'
            gcp=""
            for key in $(echo "$newInputs" | jq -r 'keys[]'); do
              value=$(echo "$newInputs" | jq -r ".\"$key\"")
              if [ "$key" == "$INPUT_PREFIX_GCP" ]; then
                gcp="${value}"
                echo "value: $value"
              fi
            done

            escapedJsonData=$(echo "$jsonData" | sed 's/"/\\"/g')
            echo "$jsonData" | jq . > "gcp_${idx}.json"

            cat "gcp_${idx}.json"


            echo "${prefix}GOOGLE_APPLICATION_CREDENTIALS=/app/config/gcp_${idx}.json" >> .env

            chmod 700 "gcp_${idx}.json"
          done
        else
          echo "No GOOGLE_APPLICATION_CREDENTIALS_PREFIX values found."
          exit 1
        fi
      shell: bash

    ##################################
    #       RUN DOCKER IMAGE         #
    ##################################

    - name: Pull Docker image
      run: docker pull innovtech/kexaction:v1.4.4-debugging
      shell: bash

    - name: Stop and remove Docker container
      run: |
        containerId=$(docker ps -qf name=^kexadockeractioncontainer$)
        echo "Container ID to delete: $containerId"
        if [ -n "$containerId" ]; then
          docker stop "$containerId"
          docker rm "$containerId"
        else
          echo "Container not found"
        fi
      if: always()
      continue-on-error: true
      shell: bash

    - name: Run Docker container
      run: |
        docker run -d -p 8000:8000 --name kexadockeractioncontainer --env-file .env innovtech/kexaction:v1.4.4-debugging sleep infinity
      shell: bash
      if: ${{ success() }}

    #############################################
    #       COPY CONFIGS INTO CONTAINER         #
    #############################################

    - name: Copy kubeconfig into container
      run: |
        docker cp kubernetes.yaml kexadockeractioncontainer:/app/
      shell: bash
      continue-on-error: true
      if: ${{ success() }}


    - name: Copy multiple kubeconfig into container
      run: |
        for file in kubernetes_*.yaml; do
          docker cp "$file" kexadockeractioncontainer:/app/
        done
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy multiple kubernetes json into container
      run: |
        for file in kubernetes_*.json; do
          docker cp "$file" kexadockeractioncontainer:/app/config/
        done
      shell: bash
      continue-on-error: true
      if: ${{ success() }}


    - name: Display kube json inside container
      run: docker exec kexadockeractioncontainer ls /app/config/
      shell: bash
      continue-on-error: true
      if: ${{ success() }}
    
    - name: Display kubeconfig inside container
      run: docker exec kexadockeractioncontainer sh -c 'ls /app/*.yaml'
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy kube json into container
      run: |
        docker cp kubernetes.json kexadockeractioncontainer:/app/config/
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy workspace credentials into container
      run: |
        docker cp credentials_workspace.json kexadockeractioncontainer:/app/config/
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy google application credentials into container
      run: |
        docker cp gcp.json kexadockeractioncontainer:/app/config/
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy multiple google application credentials into container
      run: |
        for file in gcp_*.json; do
          docker cp "$file" kexadockeractioncontainer:/app/config/
        done
      shell: bash
      continue-on-error: true
      if: ${{ success() }}

    - name: Copy rules into container
      run: |
        docker cp ./rules kexadockeractioncontainer:/app/
      shell: bash
      if: ${{ success() }}

    - name: Copy config into container
      run: |
        docker cp ./config kexadockeractioncontainer:/app/
      shell: bash
      if: ${{ success() }}

    #################################
    #       RUN KEXA SCRIPT         #
    #################################

    - name: Start main application inside container
      run: |
        docker exec kexadockeractioncontainer sh -c '
          pnpm run start:nobuild
          EXIT_CODE=$?
          echo "Exit code: $EXIT_CODE"
          if [ $EXIT_CODE -ne 0 ]; then
            echo "pnpm run start:nobuild failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          fi
        '
      shell: bash


    # delete kube config file if created
    - name: Delete kubeconfig file
      if: steps.check_kubeconfig.outputs.exists == 'true'
      run: rm kubernetes.yaml
      continue-on-error: true
      shell: bash

    # delete multiple kube config files if created
    - name: Delete multiple kubeconfig files
      if: steps.check_kubeconfig_multiple.outputs.exists == 'true'
      run: rm kubernetes_*.yaml kubernetes_*.json
      continue-on-error: true
      shell: bash

    # delete workspace credentials file if created
    - name: Delete workspace credentials file
      if: steps.check_workspacecred.outputs.exists == 'true'
      run: rm credentials_workspace.json
      continue-on-error: true
      shell: bash

    # delete google application credentials file if created
    - name: Delete google application credentials file
      if: steps.check_google_application_credentials.outputs.exists == 'true'
      run: rm google-application-credentials.json
      continue-on-error: true
      shell: bash
      
    - name: Delete multiple google application credentials files
      if: steps.check_google_application_credentials.outputs.exists == 'true'
      run: rm gcp_*.json
      continue-on-error: true
      shell: bash


    - name: Delete .env file
      run: rm .env
      continue-on-error: true
      shell: bash

    - name: Stop and remove Docker container
      run: |
        containerId=$(docker ps -qf name=^kexadockeractioncontainer$)
        echo "Container ID to delete: $containerId"
        if [ -n "$containerId" ]; then
          docker stop "$containerId"
          docker rm "$containerId"
        else
          echo "Container not found"
        fi
      if: always()
      continue-on-error: true
      shell: bash